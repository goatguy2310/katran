obj := .
src := .


DEBUGBPF = -DDEBUG
DEBUGFLAGS = -O0 -g -Wall
PFLAGS = $(DEBUGFLAGS)

INCLUDEFLAGS = -I$(obj)/usr/include \
	       -I$(obj)/include \
	       -I$(obj)



always = bpf/balancer.bpf.o
always += bpf/healthchecking_ipip.o
always += bpf/healthchecking.bpf.o
always += bpf/xdp_pktcntr.o
always += bpf/xdp_root.o

HOSTCFLAGS += $(INCLUDEFLAGS) $(PFLAGS)
HOSTCFLAGS_bpf_load.o += $(INCLUDEFLAGS) $(PFLAGS) -Wno-unused-variable


# Allows pointing LLC/CLANG to a LLVM backend with bpf support, redefine on cmdline:
#  make samples/bpf/ LLC=~/git/llvm/build/bin/llc CLANG=~/git/llvm/build/bin/clang
LLC ?= llc
CLANG ?= clang

# Trick to allow make to be run from this directory
all: $(always)
	$(MAKE) -C .. $$PWD/

clean:
	$(MAKE) -C .. M=$$PWD clean
	@rm -f *~

$(obj)/bpf/%.o: $(src)/katran/lib/bpf/%.c
	$(CLANG) $(INCLUDEFLAGS) $(EXTRA_CFLAGS) \
	$(DEBUGBPF) -D__KERNEL__ -Wno-unused-value -Wno-pointer-sign \
		-Wno-compare-distinct-pointer-types \
		-O2 -emit-llvm -c -g $< -o -| $(LLC) -march=bpf -filetype=obj -o $@

# -----------------------------------------------------------------------------------
# Compiling to x86

PROG_TYPE ?=
HEADER_OVERRIDE := $(obj)/.header_override

ARCH ?= $(shell uname -m | sed 's/x86_64/x86/' \
			 | sed 's/arm.*/arm/' \
			 | sed 's/aarch64/arm64/' \
			 | sed 's/ppc64le/powerpc/' \
			 | sed 's/mips.*/mips/' \
			 | sed 's/riscv64/riscv/' \
			 | sed 's/loongarch64/loongarch/')

VMLINUX := $(obj)/vmlinux/vmlinux.h
VMLINUX_SRC := /sys/kernel/btf/vmlinux

CFLAGS_BPF := -Wno-unknown-attributes -Wno-unused_variable -Wno-pointer-sign		\
	      -Wno-compare-distinct-pointer-types -mcmodel=medium			\
	      -fno-pic -fno-pie -no-pie -nostartfiles -fno-omit-frame-pointer		\
	      -fcf-protection -mskip-rax-setup -fno-jump-tables -mno-red-zone		\
	      -mno-sse -mno-sse2 -mno-avx -mno-mmx -mno-80387 -mno-fp-ret-in-387	\
	      -fno-delete-null-pointer-checks -Wframe-larger-than=512

LINKER_SCRIPTS := $(obj)/.linker_scripts
LINKING_COMMAND := -Wl,-T,

$(VMLINUX): $(VMLINUX_SRC)
	mkdir -p vmlinux
	bpftool btf dump file $(VMLINUX_SRC) format c > $(VMLINUX)

$(obj)/bpf/x86/%: $(src)/katran/lib/bpf/%.c $(VMLINUX) # $(HEADER_OVERRIDE)/$(PROG_TYPE) $(LINKER_SCRIPTS)/%.ld
	$(CLANG) -O3 -flto -D__TARGET_ARCH_$(ARCH) -D__KERNEL__ $(CFLAGS_BPF)	\
		-I$(HEADER_OVERRIDE)/$(PROG_TYPE)/ $(INCLUDEFLAGS)		\	
		$(LINKING_COMMAND)$(LINKER_SCRIPTS)/$*.ld			\
		$< -o $@
