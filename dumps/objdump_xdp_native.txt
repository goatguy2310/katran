
bpf/native/balancer.bpf:     file format elf64-x86-64


Disassembly of section xdp:

0000000000000000 <balancer_ingress>:
  return XDP_TX;
}

SEC(PROG_SEC_NAME)
int balancer_ingress(struct xdp_md* ctx) {
  void* data = (void*)(long)ctx->data;
       0:	f3 0f 1e fa          	endbr64
       4:	55                   	push   %rbp
       5:	41 57                	push   %r15
       7:	41 56                	push   %r14
       9:	41 55                	push   %r13
       b:	41 54                	push   %r12
       d:	53                   	push   %rbx
       e:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
      15:	48 8b 1f             	mov    (%rdi),%rbx
  void* data_end = (void*)(long)ctx->data_end;
      18:	4c 8b 7f 08          	mov    0x8(%rdi),%r15
  struct ethhdr* eth = data;
  __u32 eth_proto;
  __u32 nh_off;
  nh_off = sizeof(struct ethhdr);

  if (data + nh_off > data_end) {
      1c:	48 8d 43 0e          	lea    0xe(%rbx),%rax
      20:	bd 01 00 00 00       	mov    $0x1,%ebp
      25:	4c 39 f8             	cmp    %r15,%rax
      28:	0f 87 a3 1e 00 00    	ja     1ed1 <balancer_ingress+0x1ed1>
      2e:	49 89 fd             	mov    %rdi,%r13
    // bogus packet, len less than minimum ethernet frame size
    return XDP_DROP;
  }

  eth_proto = eth->h_proto;
      31:	0f b7 4b 0c          	movzwl 0xc(%rbx),%ecx

  if (eth_proto == BE_ETH_P_IP) {
      35:	81 f9 86 dd 00 00    	cmp    $0xdd86,%ecx
      3b:	0f 84 1e 01 00 00    	je     15f <balancer_ingress+0x15f>
      41:	bd 02 00 00 00       	mov    $0x2,%ebp
      46:	66 83 f9 08          	cmp    $0x8,%cx
      4a:	0f 85 81 1e 00 00    	jne    1ed1 <balancer_ingress+0x1ed1>
  struct packet_description pckt = {};
      50:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
      57:	00 00 
      59:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
      60:	00 00 
      62:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
      69:	00 00 
      6b:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
      72:	00 00 
      74:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
      7b:	00 00 
      7d:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
      84:	00 00 
  struct vip_definition vip = {};
      86:	c7 44 24 68 00 00 00 	movl   $0x0,0x68(%rsp)
      8d:	00 
      8e:	48 c7 44 24 60 00 00 	movq   $0x0,0x60(%rsp)
      95:	00 00 
      97:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
      9e:	00 00 
      memcpy(pckt->flow.srcv6, ip6h->saddr.s6_addr32, 16);
      memcpy(pckt->flow.dstv6, ip6h->daddr.s6_addr32, 16);
    }
  } else {
    iph = data + nh_off;
    if (iph + 1 > data_end) {
      a0:	4c 8d 73 22          	lea    0x22(%rbx),%r14
      a4:	4d 39 fe             	cmp    %r15,%r14
      a7:	0f 87 1f 1e 00 00    	ja     1ecc <balancer_ingress+0x1ecc>
      return XDP_DROP;
    }
    // ihl contains len of ipv4 header in 32bit words
    if (iph->ihl != 5) {
      ad:	8a 00                	mov    (%rax),%al
      af:	24 0f                	and    $0xf,%al
      b1:	3c 05                	cmp    $0x5,%al
      b3:	0f 85 13 1e 00 00    	jne    1ecc <balancer_ingress+0x1ecc>
      // if len of ipv4 hdr is not equal to 20bytes that means that header
      // contains ip options, and we dont support em
      return XDP_DROP;
    }
    pckt->tos = iph->tos;
      b9:	8a 43 0f             	mov    0xf(%rbx),%al
      bc:	88 44 24 3d          	mov    %al,0x3d(%rsp)
    *protocol = iph->protocol;
      c0:	8a 43 17             	mov    0x17(%rbx),%al
    pckt->flow.proto = *protocol;
      c3:	88 44 24 34          	mov    %al,0x34(%rsp)
    *pkt_bytes = bpf_ntohs(iph->tot_len);
    *th_off += nh_off + IPV4_HDR_LEN_NO_OPT;

    if (iph->frag_off & PCKT_FRAGMENTED) {
      c7:	0f b7 4b 14          	movzwl 0x14(%rbx),%ecx
      cb:	f7 c1 3f ff 00 00    	test   $0xff3f,%ecx
      d1:	0f 85 f5 1d 00 00    	jne    1ecc <balancer_ingress+0x1ecc>
      d7:	0f b7 7b 10          	movzwl 0x10(%rbx),%edi
      // we drop fragmented packets.
      return XDP_DROP;
    }
    if (*protocol == IPPROTO_ICMP) {
      db:	3c 01                	cmp    $0x1,%al
      dd:	0f 85 43 03 00 00    	jne    426 <balancer_ingress+0x426>
    __u64 off,
    struct packet_description* pckt) {
  struct icmphdr* icmp_hdr;
  struct iphdr* iph;
  icmp_hdr = data + off;
  if (icmp_hdr + 1 > data_end) {
      e3:	48 8d 43 2a          	lea    0x2a(%rbx),%rax
      e7:	4c 39 f8             	cmp    %r15,%rax
      ea:	0f 87 dc 1d 00 00    	ja     1ecc <balancer_ingress+0x1ecc>
    return XDP_DROP;
  }
  if (icmp_hdr->type == ICMP_ECHO) {
      f0:	41 8a 16             	mov    (%r14),%dl
      f3:	80 fa 03             	cmp    $0x3,%dl
      f6:	0f 84 59 08 00 00    	je     955 <balancer_ingress+0x955>
      fc:	bd 02 00 00 00       	mov    $0x2,%ebp
     101:	80 fa 08             	cmp    $0x8,%dl
     104:	0f 85 c7 1d 00 00    	jne    1ed1 <balancer_ingress+0x1ed1>
     10a:	44 0f b7 c7          	movzwl %di,%r8d
  icmp_hdr->type = ICMP_ECHOREPLY;
     10e:	c6 43 22 00          	movb   $0x0,0x22(%rbx)
  icmp_hdr->checksum += 0x0008;
     112:	66 83 43 24 08       	addw   $0x8,0x24(%rbx)
  iph->ttl = DEFAULT_TTL;
     117:	c6 43 16 40          	movb   $0x40,0x16(%rbx)
  iph->daddr = iph->saddr;
     11b:	8b 43 1a             	mov    0x1a(%rbx),%eax
  tmp_addr = iph->daddr;
     11e:	8b 73 1e             	mov    0x1e(%rbx),%esi
  iph->daddr = iph->saddr;
     121:	89 43 1e             	mov    %eax,0x1e(%rbx)
  iph->saddr = tmp_addr;
     124:	89 73 1a             	mov    %esi,0x1a(%rbx)
    void* iph,
    __u64* csum) {
  __u16* next_iph_u16 = (__u16*)iph;
#pragma clang loop unroll(full)
  for (int i = 0; i < sizeof(struct iphdr) >> 1; i++) {
    *csum += *next_iph_u16++;
     127:	0f b7 7b 0e          	movzwl 0xe(%rbx),%edi
     12b:	0f b7 6b 12          	movzwl 0x12(%rbx),%ebp
     12f:	44 0f b7 4b 16       	movzwl 0x16(%rbx),%r9d
     134:	0f b7 d6             	movzwl %si,%edx
     137:	48 c1 ee 10          	shr    $0x10,%rsi
     13b:	48 01 d6             	add    %rdx,%rsi
     13e:	0f b7 d0             	movzwl %ax,%edx
     141:	48 01 f2             	add    %rsi,%rdx
     144:	48 c1 e8 10          	shr    $0x10,%rax
     148:	48 01 d0             	add    %rdx,%rax
     14b:	48 01 f8             	add    %rdi,%rax
     14e:	4c 01 c0             	add    %r8,%rax
     151:	48 01 e8             	add    %rbp,%rax
     154:	48 01 c8             	add    %rcx,%rax
     157:	4c 01 c8             	add    %r9,%rax
     15a:	e9 e3 01 00 00       	jmp    342 <balancer_ingress+0x342>
  struct packet_description pckt = {};
     15f:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
     166:	00 00 
     168:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
     16f:	00 00 
     171:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
     178:	00 00 
     17a:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
     181:	00 00 
     183:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
     18a:	00 00 
     18c:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
     193:	00 00 
  struct vip_definition vip = {};
     195:	c7 44 24 68 00 00 00 	movl   $0x0,0x68(%rsp)
     19c:	00 
     19d:	48 c7 44 24 60 00 00 	movq   $0x0,0x60(%rsp)
     1a4:	00 00 
     1a6:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
     1ad:	00 00 
    if (ip6h + 1 > data_end) {
     1af:	4c 8d 73 36          	lea    0x36(%rbx),%r14
     1b3:	4d 39 fe             	cmp    %r15,%r14
     1b6:	0f 87 10 1d 00 00    	ja     1ecc <balancer_ingress+0x1ecc>
    *protocol = ip6h->nexthdr;
     1bc:	8a 43 14             	mov    0x14(%rbx),%al
    pckt->flow.proto = *protocol;
     1bf:	88 44 24 34          	mov    %al,0x34(%rsp)
    pckt->tos = (ip6h->priority << 4) & 0xF0;
     1c3:	8a 4b 0e             	mov    0xe(%rbx),%cl
     1c6:	c0 e1 04             	shl    $0x4,%cl
     1c9:	88 4c 24 3d          	mov    %cl,0x3d(%rsp)
    pckt->tos = pckt->tos | ((ip6h->flow_lbl[0] >> 4) & 0x0F);
     1cd:	8a 53 0f             	mov    0xf(%rbx),%dl
     1d0:	c0 ea 04             	shr    $0x4,%dl
     1d3:	08 ca                	or     %cl,%dl
     1d5:	88 54 24 3d          	mov    %dl,0x3d(%rsp)
    if (*protocol == IPPROTO_FRAGMENT) {
     1d9:	3c 2c                	cmp    $0x2c,%al
     1db:	0f 84 eb 1c 00 00    	je     1ecc <balancer_ingress+0x1ecc>
     1e1:	0f b7 7b 12          	movzwl 0x12(%rbx),%edi
     1e5:	3c 3a                	cmp    $0x3a,%al
     1e7:	0f 85 9b 00 00 00    	jne    288 <balancer_ingress+0x288>
  if (icmp_hdr + 1 > data_end) {
     1ed:	48 8d 43 3e          	lea    0x3e(%rbx),%rax
     1f1:	4c 39 f8             	cmp    %r15,%rax
     1f4:	0f 87 d2 1c 00 00    	ja     1ecc <balancer_ingress+0x1ecc>
  if (icmp_hdr->icmp6_type == ICMPV6_ECHO_REQUEST) {
     1fa:	41 8a 06             	mov    (%r14),%al
     1fd:	3c 02                	cmp    $0x2,%al
     1ff:	0f 84 c2 02 00 00    	je     4c7 <balancer_ingress+0x4c7>
     205:	3c 01                	cmp    $0x1,%al
     207:	0f 84 f3 02 00 00    	je     500 <balancer_ingress+0x500>
     20d:	bd 02 00 00 00       	mov    $0x2,%ebp
     212:	3c 80                	cmp    $0x80,%al
     214:	0f 85 b7 1c 00 00    	jne    1ed1 <balancer_ingress+0x1ed1>
     21a:	c6 43 36 81          	movb   $0x81,0x36(%rbx)
     21e:	66 83 43 38 ff       	addw   $0xffff,0x38(%rbx)
     223:	c6 43 15 40          	movb   $0x40,0x15(%rbx)
     227:	48 8b 43 16          	mov    0x16(%rbx),%rax
     22b:	48 8b 4b 1e          	mov    0x1e(%rbx),%rcx
     22f:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
     234:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
     239:	48 8b 43 26          	mov    0x26(%rbx),%rax
     23d:	48 8b 4b 2e          	mov    0x2e(%rbx),%rcx
     241:	48 89 43 16          	mov    %rax,0x16(%rbx)
     245:	48 89 4b 1e          	mov    %rcx,0x1e(%rbx)
     249:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
     24e:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
     253:	48 89 43 26          	mov    %rax,0x26(%rbx)
     257:	48 89 4b 2e          	mov    %rcx,0x2e(%rbx)
     25b:	0f b7 43 0a          	movzwl 0xa(%rbx),%eax
     25f:	66 89 44 24 7c       	mov    %ax,0x7c(%rsp)
     264:	8b 43 06             	mov    0x6(%rbx),%eax
     267:	89 44 24 78          	mov    %eax,0x78(%rsp)
     26b:	8b 03                	mov    (%rbx),%eax
     26d:	89 43 06             	mov    %eax,0x6(%rbx)
     270:	0f b7 43 04          	movzwl 0x4(%rbx),%eax
     274:	66 89 43 0a          	mov    %ax,0xa(%rbx)
     278:	8b 44 24 78          	mov    0x78(%rsp),%eax
     27c:	89 03                	mov    %eax,(%rbx)
     27e:	0f b7 44 24 7c       	movzwl 0x7c(%rsp),%eax
     283:	e9 45 01 00 00       	jmp    3cd <balancer_ingress+0x3cd>
      memcpy(pckt->flow.srcv6, ip6h->saddr.s6_addr32, 16);
     288:	48 8b 4b 16          	mov    0x16(%rbx),%rcx
     28c:	48 8b 53 1e          	mov    0x1e(%rbx),%rdx
     290:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
     295:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
      memcpy(pckt->flow.dstv6, ip6h->daddr.s6_addr32, 16);
     29a:	48 8b 4b 26          	mov    0x26(%rbx),%rcx
     29e:	48 8b 53 2e          	mov    0x2e(%rbx),%rdx
     2a2:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
     2a7:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
    void* data,
    void* data_end,
    __u64 off,
    struct packet_description* pckt,
    __u8 protocol) {
  if (protocol == IPPROTO_ICMPV6) {
     2ac:	3c 01                	cmp    $0x1,%al
     2ae:	0f 85 27 01 00 00    	jne    3db <balancer_ingress+0x3db>
  if (icmp_hdr + 1 > data_end) {
     2b4:	48 8d 43 3e          	lea    0x3e(%rbx),%rax
     2b8:	4c 39 f8             	cmp    %r15,%rax
     2bb:	0f 87 0b 1c 00 00    	ja     1ecc <balancer_ingress+0x1ecc>
  if (icmp_hdr->type == ICMP_ECHO) {
     2c1:	41 8a 0e             	mov    (%r14),%cl
     2c4:	80 f9 03             	cmp    $0x3,%cl
     2c7:	0f 84 1f 05 00 00    	je     7ec <balancer_ingress+0x7ec>
     2cd:	bd 02 00 00 00       	mov    $0x2,%ebp
     2d2:	80 f9 08             	cmp    $0x8,%cl
     2d5:	0f 85 f6 1b 00 00    	jne    1ed1 <balancer_ingress+0x1ed1>
  if ((data + sizeof(struct ethhdr) + sizeof(struct iphdr) +
     2db:	48 8d 43 2a          	lea    0x2a(%rbx),%rax
     2df:	bd 01 00 00 00       	mov    $0x1,%ebp
       sizeof(struct icmphdr)) > data_end) {
     2e4:	4c 39 f8             	cmp    %r15,%rax
  if ((data + sizeof(struct ethhdr) + sizeof(struct iphdr) +
     2e7:	0f 87 e4 1b 00 00    	ja     1ed1 <balancer_ingress+0x1ed1>
  icmp_hdr->type = ICMP_ECHOREPLY;
     2ed:	c6 43 22 00          	movb   $0x0,0x22(%rbx)
  icmp_hdr->checksum += 0x0008;
     2f1:	66 83 43 24 08       	addw   $0x8,0x24(%rbx)
  iph->ttl = DEFAULT_TTL;
     2f6:	c6 43 16 40          	movb   $0x40,0x16(%rbx)
  iph->daddr = iph->saddr;
     2fa:	8b 43 1a             	mov    0x1a(%rbx),%eax
  tmp_addr = iph->daddr;
     2fd:	8b 4b 1e             	mov    0x1e(%rbx),%ecx
  iph->daddr = iph->saddr;
     300:	89 43 1e             	mov    %eax,0x1e(%rbx)
  iph->saddr = tmp_addr;
     303:	89 4b 1a             	mov    %ecx,0x1a(%rbx)
     306:	44 0f b7 4b 0e       	movzwl 0xe(%rbx),%r9d
     30b:	0f b7 73 10          	movzwl 0x10(%rbx),%esi
     30f:	0f b7 7b 12          	movzwl 0x12(%rbx),%edi
     313:	0f b7 6b 14          	movzwl 0x14(%rbx),%ebp
     317:	44 0f b7 43 16       	movzwl 0x16(%rbx),%r8d
     31c:	0f b7 d1             	movzwl %cx,%edx
     31f:	48 c1 e9 10          	shr    $0x10,%rcx
     323:	48 01 d1             	add    %rdx,%rcx
     326:	0f b7 d0             	movzwl %ax,%edx
     329:	48 01 ca             	add    %rcx,%rdx
     32c:	48 c1 e8 10          	shr    $0x10,%rax
     330:	48 01 d0             	add    %rdx,%rax
     333:	4c 01 c8             	add    %r9,%rax
     336:	48 01 f0             	add    %rsi,%rax
     339:	48 01 f8             	add    %rdi,%rax
     33c:	48 01 e8             	add    %rbp,%rax
     33f:	4c 01 c0             	add    %r8,%rax
     342:	48 89 c1             	mov    %rax,%rcx
     345:	48 c1 e9 10          	shr    $0x10,%rcx
     349:	0f b7 d0             	movzwl %ax,%edx
     34c:	48 01 ca             	add    %rcx,%rdx
     34f:	48 3d 00 00 01 00    	cmp    $0x10000,%rax
     355:	48 0f 42 d0          	cmovb  %rax,%rdx
     359:	48 89 d0             	mov    %rdx,%rax
     35c:	48 c1 e8 10          	shr    $0x10,%rax
     360:	0f b7 ca             	movzwl %dx,%ecx
     363:	48 01 c1             	add    %rax,%rcx
     366:	48 81 fa 00 00 01 00 	cmp    $0x10000,%rdx
     36d:	48 0f 42 ca          	cmovb  %rdx,%rcx
     371:	48 89 c8             	mov    %rcx,%rax
     374:	48 c1 e8 10          	shr    $0x10,%rax
     378:	0f b7 d1             	movzwl %cx,%edx
     37b:	48 01 c2             	add    %rax,%rdx
     37e:	48 81 f9 00 00 01 00 	cmp    $0x10000,%rcx
     385:	48 0f 42 d1          	cmovb  %rcx,%rdx
     389:	89 d0                	mov    %edx,%eax
     38b:	c1 e8 10             	shr    $0x10,%eax
     38e:	48 81 fa 00 00 01 00 	cmp    $0x10000,%rdx
     395:	b9 00 00 01 00       	mov    $0x10000,%ecx
     39a:	0f 43 c8             	cmovae %eax,%ecx
     39d:	01 d1                	add    %edx,%ecx
     39f:	f7 d1                	not    %ecx
     3a1:	66 89 4b 18          	mov    %cx,0x18(%rbx)
     3a5:	0f b7 43 0a          	movzwl 0xa(%rbx),%eax
     3a9:	66 89 44 24 44       	mov    %ax,0x44(%rsp)
     3ae:	8b 43 06             	mov    0x6(%rbx),%eax
     3b1:	89 44 24 40          	mov    %eax,0x40(%rsp)
     3b5:	8b 03                	mov    (%rbx),%eax
     3b7:	89 43 06             	mov    %eax,0x6(%rbx)
     3ba:	0f b7 43 04          	movzwl 0x4(%rbx),%eax
     3be:	66 89 43 0a          	mov    %ax,0xa(%rbx)
     3c2:	8b 44 24 40          	mov    0x40(%rsp),%eax
     3c6:	89 03                	mov    %eax,(%rbx)
     3c8:	0f b7 44 24 44       	movzwl 0x44(%rsp),%eax
     3cd:	66 89 43 04          	mov    %ax,0x4(%rbx)
     3d1:	bd 03 00 00 00       	mov    $0x3,%ebp
     3d6:	e9 f6 1a 00 00       	jmp    1ed1 <balancer_ingress+0x1ed1>
     3db:	b2 02                	mov    $0x2,%dl
     3dd:	b1 01                	mov    $0x1,%cl
     3df:	bd 02 00 00 00       	mov    $0x2,%ebp
  if (protocol == IPPROTO_IPIP) {
     3e4:	3c 10                	cmp    $0x10,%al
     3e6:	0f 8f 62 01 00 00    	jg     54e <balancer_ingress+0x54e>
     3ec:	3c 04                	cmp    $0x4,%al
     3ee:	0f 84 8f 02 00 00    	je     683 <balancer_ingress+0x683>
     3f4:	3c 06                	cmp    $0x6,%al
     3f6:	0f 85 d5 1a 00 00    	jne    1ed1 <balancer_ingress+0x1ed1>
  tcp = data + off;
     3fc:	48 8d 43 66          	lea    0x66(%rbx),%rax
  if (is_ipv6) {
     400:	84 c9                	test   %cl,%cl
  tcp = data + off;
     402:	49 0f 45 c6          	cmovne %r14,%rax
  if (tcp + 1 > data_end) {
     406:	48 8d 70 14          	lea    0x14(%rax),%rsi
     40a:	4c 39 fe             	cmp    %r15,%rsi
     40d:	0f 87 b9 1a 00 00    	ja     1ecc <balancer_ingress+0x1ecc>
  if (tcp->syn) {
     413:	f6 40 0d 02          	testb  $0x2,0xd(%rax)
     417:	0f 84 b0 03 00 00    	je     7cd <balancer_ingress+0x7cd>
    pckt->flags |= F_SYN_SET;
     41d:	88 54 24 3c          	mov    %dl,0x3c(%rsp)
     421:	e9 a7 03 00 00       	jmp    7cd <balancer_ingress+0x7cd>
      return FURTHER_PROCESSING;
    } else {
      pckt->flow.src = iph->saddr;
     426:	8b 4b 1a             	mov    0x1a(%rbx),%ecx
     429:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
      pckt->flow.dst = iph->daddr;
     42d:	8b 4b 1e             	mov    0x1e(%rbx),%ecx
     430:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
  if (protocol == IPPROTO_ICMPV6) {
     434:	3c 3a                	cmp    $0x3a,%al
     436:	75 44                	jne    47c <balancer_ingress+0x47c>
  if (icmp_hdr + 1 > data_end) {
     438:	48 8d 43 2a          	lea    0x2a(%rbx),%rax
     43c:	4c 39 f8             	cmp    %r15,%rax
     43f:	0f 87 87 1a 00 00    	ja     1ecc <balancer_ingress+0x1ecc>
  if (icmp_hdr->icmp6_type == ICMPV6_ECHO_REQUEST) {
     445:	41 8a 06             	mov    (%r14),%al
     448:	3c 02                	cmp    $0x2,%al
     44a:	0f 84 0c 07 00 00    	je     b5c <balancer_ingress+0xb5c>
     450:	3c 01                	cmp    $0x1,%al
     452:	0f 84 3d 07 00 00    	je     b95 <balancer_ingress+0xb95>
     458:	bd 02 00 00 00       	mov    $0x2,%ebp
     45d:	3c 80                	cmp    $0x80,%al
     45f:	0f 85 6c 1a 00 00    	jne    1ed1 <balancer_ingress+0x1ed1>
  if ((data + sizeof(struct ethhdr) + sizeof(struct ipv6hdr) +
     465:	48 8d 43 3e          	lea    0x3e(%rbx),%rax
     469:	bd 01 00 00 00       	mov    $0x1,%ebp
       sizeof(struct icmp6hdr)) > data_end) {
     46e:	4c 39 f8             	cmp    %r15,%rax
  if ((data + sizeof(struct ethhdr) + sizeof(struct ipv6hdr) +
     471:	0f 87 5a 1a 00 00    	ja     1ed1 <balancer_ingress+0x1ed1>
     477:	e9 9e fd ff ff       	jmp    21a <balancer_ingress+0x21a>
     47c:	b2 02                	mov    $0x2,%dl
     47e:	b1 01                	mov    $0x1,%cl
     480:	bd 02 00 00 00       	mov    $0x2,%ebp
     485:	3c 10                	cmp    $0x10,%al
     487:	0f 8f 58 07 00 00    	jg     be5 <balancer_ingress+0xbe5>
     48d:	3c 04                	cmp    $0x4,%al
     48f:	0f 84 6a 05 00 00    	je     9ff <balancer_ingress+0x9ff>
     495:	3c 06                	cmp    $0x6,%al
     497:	0f 85 34 1a 00 00    	jne    1ed1 <balancer_ingress+0x1ed1>
  tcp = data + off;
     49d:	48 8d 43 3e          	lea    0x3e(%rbx),%rax
  if (is_ipv6) {
     4a1:	84 c9                	test   %cl,%cl
  tcp = data + off;
     4a3:	49 0f 45 c6          	cmovne %r14,%rax
  if (tcp + 1 > data_end) {
     4a7:	48 8d 70 14          	lea    0x14(%rax),%rsi
     4ab:	4c 39 fe             	cmp    %r15,%rsi
     4ae:	0f 87 18 1a 00 00    	ja     1ecc <balancer_ingress+0x1ecc>
  if (tcp->syn) {
     4b4:	f6 40 0d 02          	testb  $0x2,0xd(%rax)
     4b8:	0f 84 85 08 00 00    	je     d43 <balancer_ingress+0xd43>
    pckt->flags |= F_SYN_SET;
     4be:	88 54 24 3c          	mov    %dl,0x3c(%rsp)
     4c2:	e9 7c 08 00 00       	jmp    d43 <balancer_ingress+0xd43>
     4c7:	48 b8 00 00 4f 93 81 	movabs $0xffff8881934f0000,%rax
     4ce:	88 ff ff 
        bpf_map_lookup_elem(&stats, &stats_key);
     4d1:	48 8b 80 60 11 00 00 	mov    0x1160(%rax),%rax
     4d8:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
     4df:	79 92 
    if (!icmp_ptb_v6_stats) {
     4e1:	48 85 c0             	test   %rax,%rax
     4e4:	0f 84 e2 19 00 00    	je     1ecc <balancer_ingress+0x1ecc>
    icmp_ptb_v6_stats->v1 += 1;
     4ea:	48 83 00 01          	addq   $0x1,(%rax)
    __u32 mtu = bpf_ntohl(icmp_hdr->icmp6_mtu);
     4ee:	8b 4b 3a             	mov    0x3a(%rbx),%ecx
     4f1:	0f c9                	bswap  %ecx
    if (mtu < MAX_MTU_IN_PTB_TO_DROP) {
     4f3:	81 f9 ff 04 00 00    	cmp    $0x4ff,%ecx
     4f9:	77 05                	ja     500 <balancer_ingress+0x500>
      icmp_ptb_v6_stats->v2 += 1;
     4fb:	48 83 40 08 01       	addq   $0x1,0x8(%rax)
  if (ip6h + 1 > data_end) {
     500:	48 8d 43 66          	lea    0x66(%rbx),%rax
     504:	4c 39 f8             	cmp    %r15,%rax
     507:	0f 87 bf 19 00 00    	ja     1ecc <balancer_ingress+0x1ecc>
  pckt->flow.proto = ip6h->nexthdr;
     50d:	8a 43 44             	mov    0x44(%rbx),%al
     510:	88 44 24 34          	mov    %al,0x34(%rsp)
  pckt->flags |= F_ICMP;
     514:	c6 44 24 3c 01       	movb   $0x1,0x3c(%rsp)
  memcpy(pckt->flow.srcv6, ip6h->daddr.s6_addr32, 16);
     519:	48 8b 4b 56          	mov    0x56(%rbx),%rcx
     51d:	48 8b 53 5e          	mov    0x5e(%rbx),%rdx
     521:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
     526:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  memcpy(pckt->flow.dstv6, ip6h->saddr.s6_addr32, 16);
     52b:	48 8b 4b 46          	mov    0x46(%rbx),%rcx
     52f:	48 8b 53 4e          	mov    0x4e(%rbx),%rdx
     533:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
     538:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
     53d:	b2 03                	mov    $0x3,%dl
     53f:	31 c9                	xor    %ecx,%ecx
     541:	bd 02 00 00 00       	mov    $0x2,%ebp
     546:	3c 10                	cmp    $0x10,%al
     548:	0f 8e 9e fe ff ff    	jle    3ec <balancer_ingress+0x3ec>
     54e:	3c 11                	cmp    $0x11,%al
     550:	0f 84 60 02 00 00    	je     7b6 <balancer_ingress+0x7b6>
     556:	3c 29                	cmp    $0x29,%al
     558:	0f 85 73 19 00 00    	jne    1ed1 <balancer_ingress+0x1ed1>
    memcpy(dst_addr.addrv6, pckt->flow.dstv6, 16);
     55e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
     563:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
     568:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
     56d:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  __u32* decap_dst_flags = bpf_map_lookup_elem(&decap_dst, &dst_addr);
     572:	48 bf 00 c8 6a 01 81 	movabs $0xffff8881016ac800,%rdi
     579:	88 ff ff 
     57c:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
     581:	48 c7 c0 30 c9 a9 8c 	mov    $0xffffffff8ca9c930,%rax
     588:	ff d0                	call   *%rax
     58a:	49 89 c6             	mov    %rax,%r14
  if (decap_dst_flags) {
     58d:	48 85 c0             	test   %rax,%rax
     590:	74 27                	je     5b9 <balancer_ingress+0x5b9>
     592:	48 b8 00 00 4f 93 81 	movabs $0xffff8881934f0000,%rax
     599:	88 ff ff 
    data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     59c:	48 8b 80 30 11 00 00 	mov    0x1130(%rax),%rax
     5a3:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
     5aa:	79 92 
    if (!data_stats) {
     5ac:	48 85 c0             	test   %rax,%rax
     5af:	0f 84 17 19 00 00    	je     1ecc <balancer_ingress+0x1ecc>
    data_stats->v1 += 1;
     5b5:	48 83 00 01          	addq   $0x1,(%rax)
decrement_ttl(void* data, void* data_end, int offset, bool is_ipv6) {
  struct iphdr* iph;
  struct ipv6hdr* ip6h;

  if (is_ipv6) {
    if ((data + offset + sizeof(struct ipv6hdr)) > data_end) {
     5b9:	48 8d 43 5e          	lea    0x5e(%rbx),%rax
     5bd:	bd 01 00 00 00       	mov    $0x1,%ebp
     5c2:	41 bc 01 00 00 00    	mov    $0x1,%r12d
     5c8:	4c 39 f8             	cmp    %r15,%rax
     5cb:	77 13                	ja     5e0 <balancer_ingress+0x5e0>
      return XDP_DROP;
    }
    ip6h = (struct ipv6hdr*)(data + offset);
    if (!--ip6h->hop_limit) {
     5cd:	80 43 3d ff          	addb   $0xff,0x3d(%rbx)
     5d1:	b8 01 00 00 00       	mov    $0x1,%eax
     5d6:	41 bc ff ff ff ff    	mov    $0xffffffff,%r12d
     5dc:	44 0f 44 e0          	cmove  %eax,%r12d
decap_v6(struct xdp_md* xdp, void** data, void** data_end, bool inner_v4) {
  struct ethhdr* new_eth;
  struct ethhdr* old_eth;
  old_eth = *data;
  new_eth = *data + sizeof(struct ipv6hdr);
  memcpy(new_eth->h_source, old_eth->h_source, 6);
     5e0:	0f b7 43 0a          	movzwl 0xa(%rbx),%eax
     5e4:	66 89 43 32          	mov    %ax,0x32(%rbx)
     5e8:	8b 43 06             	mov    0x6(%rbx),%eax
     5eb:	89 43 2e             	mov    %eax,0x2e(%rbx)
  memcpy(new_eth->h_dest, old_eth->h_dest, 6);
     5ee:	8b 03                	mov    (%rbx),%eax
     5f0:	89 43 28             	mov    %eax,0x28(%rbx)
     5f3:	0f b7 43 04          	movzwl 0x4(%rbx),%eax
     5f7:	66 89 43 2c          	mov    %ax,0x2c(%rbx)
     5fb:	66 c7 43 34 86 dd    	movw   $0xdd86,0x34(%rbx)
     601:	48 c7 c0 20 5c c3 8e 	mov    $0xffffffff8ec35c20,%rax
  if (inner_v4) {
    new_eth->h_proto = BE_ETH_P_IP;
  } else {
    new_eth->h_proto = BE_ETH_P_IPV6;
  }
  if (XDP_ADJUST_HEAD_FUNC(xdp, (int)sizeof(struct ipv6hdr))) {
     608:	4c 89 ef             	mov    %r13,%rdi
     60b:	be 28 00 00 00       	mov    $0x28,%esi
     610:	ff d0                	call   *%rax
     612:	85 c0                	test   %eax,%eax
     614:	0f 85 b7 18 00 00    	jne    1ed1 <balancer_ingress+0x1ed1>
     61a:	48 b8 00 00 4f 93 81 	movabs $0xffff8881934f0000,%rax
     621:	88 ff ff 
  struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     624:	48 8b 88 50 11 00 00 	mov    0x1150(%rax),%rcx
     62b:	65 48 03 0c 25 28 50 	add    %gs:0xffffffff92795028,%rcx
     632:	79 92 
  if (!data_stats) {
     634:	48 85 c9             	test   %rcx,%rcx
     637:	0f 84 94 18 00 00    	je     1ed1 <balancer_ingress+0x1ed1>
     63d:	48 83 41 08 01       	addq   $0x1,0x8(%rcx)
  if (action >= 0) {
     642:	45 85 e4             	test   %r12d,%r12d
     645:	bd 02 00 00 00       	mov    $0x2,%ebp
     64a:	41 0f 49 ec          	cmovns %r12d,%ebp
  if (decap_dst_flags) {
     64e:	4d 85 f6             	test   %r14,%r14
  if (action >= 0) {
     651:	0f 84 7a 18 00 00    	je     1ed1 <balancer_ingress+0x1ed1>
     657:	45 85 e4             	test   %r12d,%r12d
     65a:	0f 89 71 18 00 00    	jns    1ed1 <balancer_ingress+0x1ed1>
        bpf_map_lookup_elem(&stats, &xpop_stats_key);
     660:	48 8b 80 70 11 00 00 	mov    0x1170(%rax),%rax
     667:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
     66e:	79 92 
    if (xpop_stats_data) {
     670:	48 85 c0             	test   %rax,%rax
     673:	0f 84 bc 04 00 00    	je     b35 <balancer_ingress+0xb35>
     679:	48 83 40 08 01       	addq   $0x1,0x8(%rax)
     67e:	e9 b2 04 00 00       	jmp    b35 <balancer_ingress+0xb35>
    memcpy(dst_addr.addrv6, pckt->flow.dstv6, 16);
     683:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
     688:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
     68d:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
     692:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  __u32* decap_dst_flags = bpf_map_lookup_elem(&decap_dst, &dst_addr);
     697:	48 bf 00 c8 6a 01 81 	movabs $0xffff8881016ac800,%rdi
     69e:	88 ff ff 
     6a1:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
     6a6:	48 c7 c0 30 c9 a9 8c 	mov    $0xffffffff8ca9c930,%rax
     6ad:	ff d0                	call   *%rax
     6af:	49 89 c6             	mov    %rax,%r14
  if (decap_dst_flags) {
     6b2:	48 85 c0             	test   %rax,%rax
     6b5:	74 27                	je     6de <balancer_ingress+0x6de>
     6b7:	48 b8 00 00 4f 93 81 	movabs $0xffff8881934f0000,%rax
     6be:	88 ff ff 
    data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     6c1:	48 8b 80 30 11 00 00 	mov    0x1130(%rax),%rax
     6c8:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
     6cf:	79 92 
    if (!data_stats) {
     6d1:	48 85 c0             	test   %rax,%rax
     6d4:	0f 84 f2 17 00 00    	je     1ecc <balancer_ingress+0x1ecc>
    data_stats->v1 += 1;
     6da:	48 83 00 01          	addq   $0x1,(%rax)
      // ttl 0
      return XDP_DROP;
    }
  } else {
    if ((data + offset + sizeof(struct iphdr)) > data_end) {
     6de:	48 8d 43 4a          	lea    0x4a(%rbx),%rax
     6e2:	bd 01 00 00 00       	mov    $0x1,%ebp
     6e7:	41 bc 01 00 00 00    	mov    $0x1,%r12d
     6ed:	4c 39 f8             	cmp    %r15,%rax
     6f0:	77 26                	ja     718 <balancer_ingress+0x718>
      return XDP_DROP;
    }
    iph = (struct iphdr*)(data + offset);
    __u32 csum;
    csum = iph->check + 0x0001;
     6f2:	0f b7 43 40          	movzwl 0x40(%rbx),%eax
     6f6:	8d 48 01             	lea    0x1(%rax),%ecx
    iph->check = (csum & 0xffff) + (csum >> 16);
     6f9:	c1 e9 10             	shr    $0x10,%ecx
     6fc:	01 c8                	add    %ecx,%eax
     6fe:	83 c0 01             	add    $0x1,%eax
     701:	66 89 43 40          	mov    %ax,0x40(%rbx)
    if (!--iph->ttl) {
     705:	80 43 3e ff          	addb   $0xff,0x3e(%rbx)
     709:	b8 01 00 00 00       	mov    $0x1,%eax
     70e:	41 bc ff ff ff ff    	mov    $0xffffffff,%r12d
     714:	44 0f 44 e0          	cmove  %eax,%r12d
  memcpy(new_eth->h_source, old_eth->h_source, 6);
     718:	0f b7 43 0a          	movzwl 0xa(%rbx),%eax
     71c:	66 89 43 32          	mov    %ax,0x32(%rbx)
     720:	8b 43 06             	mov    0x6(%rbx),%eax
     723:	89 43 2e             	mov    %eax,0x2e(%rbx)
  memcpy(new_eth->h_dest, old_eth->h_dest, 6);
     726:	8b 03                	mov    (%rbx),%eax
     728:	89 43 28             	mov    %eax,0x28(%rbx)
     72b:	0f b7 43 04          	movzwl 0x4(%rbx),%eax
     72f:	66 89 43 2c          	mov    %ax,0x2c(%rbx)
     733:	66 c7 43 34 08 00    	movw   $0x8,0x34(%rbx)
     739:	48 c7 c0 20 5c c3 8e 	mov    $0xffffffff8ec35c20,%rax
  if (XDP_ADJUST_HEAD_FUNC(xdp, (int)sizeof(struct ipv6hdr))) {
     740:	4c 89 ef             	mov    %r13,%rdi
     743:	be 28 00 00 00       	mov    $0x28,%esi
     748:	ff d0                	call   *%rax
     74a:	85 c0                	test   %eax,%eax
     74c:	0f 85 7f 17 00 00    	jne    1ed1 <balancer_ingress+0x1ed1>
     752:	48 b8 00 00 4f 93 81 	movabs $0xffff8881934f0000,%rax
     759:	88 ff ff 
  struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     75c:	48 8b 88 50 11 00 00 	mov    0x1150(%rax),%rcx
     763:	65 48 03 0c 25 28 50 	add    %gs:0xffffffff92795028,%rcx
     76a:	79 92 
  if (!data_stats) {
     76c:	48 85 c9             	test   %rcx,%rcx
     76f:	0f 84 5c 17 00 00    	je     1ed1 <balancer_ingress+0x1ed1>
     775:	48 83 41 08 01       	addq   $0x1,0x8(%rcx)
  if (action >= 0) {
     77a:	45 85 e4             	test   %r12d,%r12d
     77d:	bd 02 00 00 00       	mov    $0x2,%ebp
     782:	41 0f 49 ec          	cmovns %r12d,%ebp
  if (decap_dst_flags) {
     786:	4d 85 f6             	test   %r14,%r14
  if (action >= 0) {
     789:	0f 84 42 17 00 00    	je     1ed1 <balancer_ingress+0x1ed1>
     78f:	45 85 e4             	test   %r12d,%r12d
     792:	0f 89 39 17 00 00    	jns    1ed1 <balancer_ingress+0x1ed1>
        bpf_map_lookup_elem(&stats, &xpop_stats_key);
     798:	48 8b 80 70 11 00 00 	mov    0x1170(%rax),%rax
     79f:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
     7a6:	79 92 
    if (xpop_stats_data) {
     7a8:	48 85 c0             	test   %rax,%rax
     7ab:	0f 85 80 03 00 00    	jne    b31 <balancer_ingress+0xb31>
     7b1:	e9 7f 03 00 00       	jmp    b35 <balancer_ingress+0xb35>
  udp = data + off;
     7b6:	48 8d 43 66          	lea    0x66(%rbx),%rax
  if (is_ipv6) {
     7ba:	84 c9                	test   %cl,%cl
  udp = data + off;
     7bc:	49 0f 45 c6          	cmovne %r14,%rax
  if (udp + 1 > data_end) {
     7c0:	48 8d 50 08          	lea    0x8(%rax),%rdx
     7c4:	4c 39 fa             	cmp    %r15,%rdx
     7c7:	0f 87 ff 16 00 00    	ja     1ecc <balancer_ingress+0x1ecc>
     7cd:	84 c9                	test   %cl,%cl
     7cf:	89 7c 24 54          	mov    %edi,0x54(%rsp)
     7d3:	0f 84 83 00 00 00    	je     85c <balancer_ingress+0x85c>
     7d9:	0f b7 10             	movzwl (%rax),%edx
     7dc:	48 8d 4c 24 30       	lea    0x30(%rsp),%rcx
     7e1:	66 89 54 24 30       	mov    %dx,0x30(%rsp)
     7e6:	48 83 c0 02          	add    $0x2,%rax
     7ea:	eb 7e                	jmp    86a <balancer_ingress+0x86a>
  if (icmp_hdr->code == ICMP_FRAG_NEEDED) {
     7ec:	80 7b 37 04          	cmpb   $0x4,0x37(%rbx)
     7f0:	75 32                	jne    824 <balancer_ingress+0x824>
     7f2:	48 b9 00 00 4f 93 81 	movabs $0xffff8881934f0000,%rcx
     7f9:	88 ff ff 
        bpf_map_lookup_elem(&stats, &stats_key);
     7fc:	48 8b 89 68 11 00 00 	mov    0x1168(%rcx),%rcx
     803:	65 48 03 0c 25 28 50 	add    %gs:0xffffffff92795028,%rcx
     80a:	79 92 
    if (!icmp_ptb_v4_stats) {
     80c:	48 85 c9             	test   %rcx,%rcx
     80f:	0f 84 b7 16 00 00    	je     1ecc <balancer_ingress+0x1ecc>
    icmp_ptb_v4_stats->v1 += 1;
     815:	48 83 01 01          	addq   $0x1,(%rcx)
    if (mtu < MAX_MTU_IN_PTB_TO_DROP) {
     819:	80 7b 3c 04          	cmpb   $0x4,0x3c(%rbx)
     81d:	77 05                	ja     824 <balancer_ingress+0x824>
      icmp_ptb_v4_stats->v2 += 1;
     81f:	48 83 41 08 01       	addq   $0x1,0x8(%rcx)
  if (iph + 1 > data_end) {
     824:	48 8d 4b 52          	lea    0x52(%rbx),%rcx
     828:	4c 39 f9             	cmp    %r15,%rcx
     82b:	0f 87 9b 16 00 00    	ja     1ecc <balancer_ingress+0x1ecc>
  if (iph->ihl != 5) {
     831:	8a 00                	mov    (%rax),%al
     833:	24 0f                	and    $0xf,%al
     835:	3c 05                	cmp    $0x5,%al
     837:	0f 85 8f 16 00 00    	jne    1ecc <balancer_ingress+0x1ecc>
  pckt->flow.proto = iph->protocol;
     83d:	8a 43 47             	mov    0x47(%rbx),%al
     840:	88 44 24 34          	mov    %al,0x34(%rsp)
  pckt->flags |= F_ICMP;
     844:	c6 44 24 3c 01       	movb   $0x1,0x3c(%rsp)
  pckt->flow.src = iph->daddr;
     849:	8b 4b 4e             	mov    0x4e(%rbx),%ecx
     84c:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
  pckt->flow.dst = iph->saddr;
     850:	8b 4b 4a             	mov    0x4a(%rbx),%ecx
     853:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
     857:	e9 e1 fc ff ff       	jmp    53d <balancer_ingress+0x53d>
     85c:	0f b7 50 02          	movzwl 0x2(%rax),%edx
     860:	48 8d 4c 24 30       	lea    0x30(%rsp),%rcx
     865:	66 89 54 24 30       	mov    %dx,0x30(%rsp)
     86a:	0f b7 00             	movzwl (%rax),%eax
     86d:	66 89 41 02          	mov    %ax,0x2(%rcx)
    memcpy(vip.vipv6, pckt.flow.dstv6, 16);
     871:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
     876:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
     87b:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
     880:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  vip.port = pckt.flow.port16[1];
     885:	0f b7 44 24 32       	movzwl 0x32(%rsp),%eax
     88a:	66 89 44 24 68       	mov    %ax,0x68(%rsp)
  vip.proto = pckt.flow.proto;
     88f:	8a 44 24 34          	mov    0x34(%rsp),%al
     893:	88 44 24 6a          	mov    %al,0x6a(%rsp)
  vip_info = bpf_map_lookup_elem(&vip_map, &vip);
     897:	48 bf 00 d0 6a 01 81 	movabs $0xffff8881016ad000,%rdi
     89e:	88 ff ff 
     8a1:	48 8d 74 24 58       	lea    0x58(%rsp),%rsi
     8a6:	49 c7 c4 30 c9 a9 8c 	mov    $0xffffffff8ca9c930,%r12
     8ad:	41 ff d4             	call   *%r12
     8b0:	48 89 c7             	mov    %rax,%rdi
  if (!vip_info) {
     8b3:	48 85 c0             	test   %rax,%rax
     8b6:	0f 84 09 01 00 00    	je     9c5 <balancer_ingress+0x9c5>
  if (data_end - data > MAX_PCKT_SIZE) {
     8bc:	4c 89 f8             	mov    %r15,%rax
     8bf:	48 29 d8             	sub    %rbx,%rax
     8c2:	48 3d ea 05 00 00    	cmp    $0x5ea,%rax
     8c8:	0f 8f fe 15 00 00    	jg     1ecc <balancer_ingress+0x1ecc>
     8ce:	49 bc 00 00 4f 93 81 	movabs $0xffff8881934f0000,%r12
     8d5:	88 ff ff 
  data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     8d8:	49 8b b4 24 00 11 00 	mov    0x1100(%r12),%rsi
     8df:	00 
     8e0:	65 48 03 34 25 28 50 	add    %gs:0xffffffff92795028,%rsi
     8e7:	79 92 
  if (!data_stats) {
     8e9:	48 85 f6             	test   %rsi,%rsi
     8ec:	0f 84 da 15 00 00    	je     1ecc <balancer_ingress+0x1ecc>
  data_stats->v1 += 1;
     8f2:	48 83 06 01          	addq   $0x1,(%rsi)
  if ((vip_info->flags & F_HASH_NO_SRC_PORT)) {
     8f6:	f6 07 01             	testb  $0x1,(%rdi)
     8f9:	74 07                	je     902 <balancer_ingress+0x902>
    pckt.flow.port16[0] = 0;
     8fb:	66 c7 44 24 30 00 00 	movw   $0x0,0x30(%rsp)
  vip_num = vip_info->vip_num;
     902:	8b 57 04             	mov    0x4(%rdi),%edx
     905:	48 c7 c0 34 50 79 92 	mov    $0xffffffff92795034,%rax
  __u32 cpu_num = bpf_get_smp_processor_id();
     90c:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
     913:	79 92 
     915:	48 8b 00             	mov    (%rax),%rax
  void* lru_map = bpf_map_lookup_elem(&lru_mapping, &cpu_num);
     918:	a9 80 ff ff ff       	test   $0xffffff80,%eax
     91d:	0f 84 32 05 00 00    	je     e55 <balancer_ingress+0xe55>
    struct lb_stats* lru_stats = bpf_map_lookup_elem(&stats, &lru_stats_key);
     923:	49 8b 84 24 18 11 00 	mov    0x1118(%r12),%rax
     92a:	00 
     92b:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
     932:	79 92 
    if (!lru_stats) {
     934:	48 85 c0             	test   %rax,%rax
     937:	0f 84 8f 15 00 00    	je     1ecc <balancer_ingress+0x1ecc>
    lru_stats->v1 += 1;
     93d:	48 83 00 01          	addq   $0x1,(%rax)
     941:	48 b8 00 d8 6a 01 81 	movabs $0xffff8881016ad800,%rax
     948:	88 ff ff 
     94b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
     950:	e9 22 05 00 00       	jmp    e77 <balancer_ingress+0xe77>
  if (icmp_hdr->code == ICMP_FRAG_NEEDED) {
     955:	80 7b 23 04          	cmpb   $0x4,0x23(%rbx)
     959:	75 32                	jne    98d <balancer_ingress+0x98d>
     95b:	48 b9 00 00 4f 93 81 	movabs $0xffff8881934f0000,%rcx
     962:	88 ff ff 
        bpf_map_lookup_elem(&stats, &stats_key);
     965:	48 8b 89 68 11 00 00 	mov    0x1168(%rcx),%rcx
     96c:	65 48 03 0c 25 28 50 	add    %gs:0xffffffff92795028,%rcx
     973:	79 92 
    if (!icmp_ptb_v4_stats) {
     975:	48 85 c9             	test   %rcx,%rcx
     978:	0f 84 4e 15 00 00    	je     1ecc <balancer_ingress+0x1ecc>
    icmp_ptb_v4_stats->v1 += 1;
     97e:	48 83 01 01          	addq   $0x1,(%rcx)
    if (mtu < MAX_MTU_IN_PTB_TO_DROP) {
     982:	80 7b 28 04          	cmpb   $0x4,0x28(%rbx)
     986:	77 05                	ja     98d <balancer_ingress+0x98d>
      icmp_ptb_v4_stats->v2 += 1;
     988:	48 83 41 08 01       	addq   $0x1,0x8(%rcx)
  if (iph + 1 > data_end) {
     98d:	48 8d 4b 3e          	lea    0x3e(%rbx),%rcx
     991:	4c 39 f9             	cmp    %r15,%rcx
     994:	0f 87 32 15 00 00    	ja     1ecc <balancer_ingress+0x1ecc>
  if (iph->ihl != 5) {
     99a:	8a 00                	mov    (%rax),%al
     99c:	24 0f                	and    $0xf,%al
     99e:	3c 05                	cmp    $0x5,%al
     9a0:	0f 85 26 15 00 00    	jne    1ecc <balancer_ingress+0x1ecc>
  pckt->flow.proto = iph->protocol;
     9a6:	8a 43 33             	mov    0x33(%rbx),%al
     9a9:	88 44 24 34          	mov    %al,0x34(%rsp)
  pckt->flags |= F_ICMP;
     9ad:	c6 44 24 3c 01       	movb   $0x1,0x3c(%rsp)
  pckt->flow.src = iph->daddr;
     9b2:	8b 4b 3a             	mov    0x3a(%rbx),%ecx
     9b5:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
  pckt->flow.dst = iph->saddr;
     9b9:	8b 4b 36             	mov    0x36(%rbx),%ecx
     9bc:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
     9c0:	e9 0f 02 00 00       	jmp    bd4 <balancer_ingress+0xbd4>
    vip.port = 0;
     9c5:	66 c7 44 24 68 00 00 	movw   $0x0,0x68(%rsp)
    vip_info = bpf_map_lookup_elem(&vip_map, &vip);
     9cc:	48 bf 00 d0 6a 01 81 	movabs $0xffff8881016ad000,%rdi
     9d3:	88 ff ff 
     9d6:	48 8d 74 24 58       	lea    0x58(%rsp),%rsi
     9db:	41 ff d4             	call   *%r12
    if (!vip_info) {
     9de:	48 85 c0             	test   %rax,%rax
     9e1:	0f 84 ea 14 00 00    	je     1ed1 <balancer_ingress+0x1ed1>
     9e7:	48 89 c7             	mov    %rax,%rdi
    if (!(vip_info->flags & F_HASH_DPORT_ONLY) &&
     9ea:	f6 00 88             	testb  $0x88,(%rax)
     9ed:	0f 85 c9 fe ff ff    	jne    8bc <balancer_ingress+0x8bc>
      pckt.flow.port16[1] = 0;
     9f3:	66 c7 44 24 32 00 00 	movw   $0x0,0x32(%rsp)
     9fa:	e9 bd fe ff ff       	jmp    8bc <balancer_ingress+0x8bc>
  struct address dst_addr = {};
     9ff:	c7 44 24 4c 00 00 00 	movl   $0x0,0x4c(%rsp)
     a06:	00 
     a07:	48 c7 44 24 44 00 00 	movq   $0x0,0x44(%rsp)
     a0e:	00 00 
    dst_addr.addr = pckt->flow.dst;
     a10:	8b 44 24 20          	mov    0x20(%rsp),%eax
     a14:	89 44 24 40          	mov    %eax,0x40(%rsp)
  __u32* decap_dst_flags = bpf_map_lookup_elem(&decap_dst, &dst_addr);
     a18:	48 bf 00 c8 6a 01 81 	movabs $0xffff8881016ac800,%rdi
     a1f:	88 ff ff 
     a22:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
     a27:	48 c7 c0 30 c9 a9 8c 	mov    $0xffffffff8ca9c930,%rax
     a2e:	ff d0                	call   *%rax
     a30:	49 89 c6             	mov    %rax,%r14
  if (decap_dst_flags) {
     a33:	48 85 c0             	test   %rax,%rax
     a36:	74 27                	je     a5f <balancer_ingress+0xa5f>
     a38:	48 b8 00 00 4f 93 81 	movabs $0xffff8881934f0000,%rax
     a3f:	88 ff ff 
    data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     a42:	48 8b 80 30 11 00 00 	mov    0x1130(%rax),%rax
     a49:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
     a50:	79 92 
    if (!data_stats) {
     a52:	48 85 c0             	test   %rax,%rax
     a55:	0f 84 71 14 00 00    	je     1ecc <balancer_ingress+0x1ecc>
    data_stats->v1 += 1;
     a5b:	48 83 00 01          	addq   $0x1,(%rax)
     a5f:	48 8d 43 14          	lea    0x14(%rbx),%rax
    if ((data + offset + sizeof(struct iphdr)) > data_end) {
     a63:	48 8d 4b 36          	lea    0x36(%rbx),%rcx
     a67:	bd 01 00 00 00       	mov    $0x1,%ebp
     a6c:	41 bc 01 00 00 00    	mov    $0x1,%r12d
     a72:	4c 39 f9             	cmp    %r15,%rcx
     a75:	77 26                	ja     a9d <balancer_ingress+0xa9d>
    csum = iph->check + 0x0001;
     a77:	0f b7 4b 2c          	movzwl 0x2c(%rbx),%ecx
     a7b:	8d 51 01             	lea    0x1(%rcx),%edx
    iph->check = (csum & 0xffff) + (csum >> 16);
     a7e:	c1 ea 10             	shr    $0x10,%edx
     a81:	01 d1                	add    %edx,%ecx
     a83:	83 c1 01             	add    $0x1,%ecx
     a86:	66 89 4b 2c          	mov    %cx,0x2c(%rbx)
    if (!--iph->ttl) {
     a8a:	80 43 2a ff          	addb   $0xff,0x2a(%rbx)
     a8e:	b9 01 00 00 00       	mov    $0x1,%ecx
     a93:	41 bc ff ff ff ff    	mov    $0xffffffff,%r12d
     a99:	44 0f 44 e1          	cmove  %ecx,%r12d
decap_v4(struct xdp_md* xdp, void** data, void** data_end) {
  struct ethhdr* new_eth;
  struct ethhdr* old_eth;
  old_eth = *data;
  new_eth = *data + sizeof(struct iphdr);
  memcpy(new_eth->h_source, old_eth->h_source, 6);
     a9d:	0f b7 4b 0a          	movzwl 0xa(%rbx),%ecx
     aa1:	66 89 4b 1e          	mov    %cx,0x1e(%rbx)
     aa5:	8b 4b 06             	mov    0x6(%rbx),%ecx
     aa8:	89 4b 1a             	mov    %ecx,0x1a(%rbx)
  memcpy(new_eth->h_dest, old_eth->h_dest, 6);
     aab:	0f b7 4b 04          	movzwl 0x4(%rbx),%ecx
     aaf:	66 89 48 04          	mov    %cx,0x4(%rax)
     ab3:	8b 0b                	mov    (%rbx),%ecx
     ab5:	89 08                	mov    %ecx,(%rax)
  new_eth->h_proto = BE_ETH_P_IP;
     ab7:	66 c7 43 20 08 00    	movw   $0x8,0x20(%rbx)
     abd:	48 c7 c0 20 5c c3 8e 	mov    $0xffffffff8ec35c20,%rax
  if (XDP_ADJUST_HEAD_FUNC(xdp, (int)sizeof(struct iphdr))) {
     ac4:	4c 89 ef             	mov    %r13,%rdi
     ac7:	be 14 00 00 00       	mov    $0x14,%esi
     acc:	ff d0                	call   *%rax
     ace:	85 c0                	test   %eax,%eax
     ad0:	0f 85 fb 13 00 00    	jne    1ed1 <balancer_ingress+0x1ed1>
     ad6:	48 b8 00 00 4f 93 81 	movabs $0xffff8881934f0000,%rax
     add:	88 ff ff 
  struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     ae0:	48 8b 88 50 11 00 00 	mov    0x1150(%rax),%rcx
     ae7:	65 48 03 0c 25 28 50 	add    %gs:0xffffffff92795028,%rcx
     aee:	79 92 
  if (!data_stats) {
     af0:	48 85 c9             	test   %rcx,%rcx
     af3:	0f 84 d8 13 00 00    	je     1ed1 <balancer_ingress+0x1ed1>
     af9:	48 83 41 08 01       	addq   $0x1,0x8(%rcx)
  if (action >= 0) {
     afe:	45 85 e4             	test   %r12d,%r12d
     b01:	bd 02 00 00 00       	mov    $0x2,%ebp
     b06:	41 0f 49 ec          	cmovns %r12d,%ebp
  if (decap_dst_flags) {
     b0a:	4d 85 f6             	test   %r14,%r14
  if (action >= 0) {
     b0d:	0f 84 be 13 00 00    	je     1ed1 <balancer_ingress+0x1ed1>
     b13:	45 85 e4             	test   %r12d,%r12d
     b16:	0f 89 b5 13 00 00    	jns    1ed1 <balancer_ingress+0x1ed1>
        bpf_map_lookup_elem(&stats, &xpop_stats_key);
     b1c:	48 8b 80 70 11 00 00 	mov    0x1170(%rax),%rax
     b23:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
     b2a:	79 92 
    if (xpop_stats_data) {
     b2c:	48 85 c0             	test   %rax,%rax
     b2f:	74 04                	je     b35 <balancer_ingress+0xb35>
     b31:	48 83 00 01          	addq   $0x1,(%rax)
     b35:	48 b8 00 94 a3 06 81 	movabs $0xffff888106a39400,%rax
     b3c:	88 ff ff 
     b3f:	48 8b 88 00 01 00 00 	mov    0x100(%rax),%rcx
     b46:	48 85 c9             	test   %rcx,%rcx
     b49:	0f 84 e1 03 00 00    	je     f30 <balancer_ingress+0xf30>
     b4f:	4c 89 ef             	mov    %r13,%rdi
     b52:	ff 51 30             	call   *0x30(%rcx)
     b55:	89 c5                	mov    %eax,%ebp
     b57:	e9 75 13 00 00       	jmp    1ed1 <balancer_ingress+0x1ed1>
     b5c:	48 b8 00 00 4f 93 81 	movabs $0xffff8881934f0000,%rax
     b63:	88 ff ff 
        bpf_map_lookup_elem(&stats, &stats_key);
     b66:	48 8b 80 60 11 00 00 	mov    0x1160(%rax),%rax
     b6d:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
     b74:	79 92 
    if (!icmp_ptb_v6_stats) {
     b76:	48 85 c0             	test   %rax,%rax
     b79:	0f 84 4d 13 00 00    	je     1ecc <balancer_ingress+0x1ecc>
    icmp_ptb_v6_stats->v1 += 1;
     b7f:	48 83 00 01          	addq   $0x1,(%rax)
    __u32 mtu = bpf_ntohl(icmp_hdr->icmp6_mtu);
     b83:	8b 4b 26             	mov    0x26(%rbx),%ecx
     b86:	0f c9                	bswap  %ecx
    if (mtu < MAX_MTU_IN_PTB_TO_DROP) {
     b88:	81 f9 ff 04 00 00    	cmp    $0x4ff,%ecx
     b8e:	77 05                	ja     b95 <balancer_ingress+0xb95>
      icmp_ptb_v6_stats->v2 += 1;
     b90:	48 83 40 08 01       	addq   $0x1,0x8(%rax)
  if (ip6h + 1 > data_end) {
     b95:	48 8d 43 52          	lea    0x52(%rbx),%rax
     b99:	4c 39 f8             	cmp    %r15,%rax
     b9c:	0f 87 2a 13 00 00    	ja     1ecc <balancer_ingress+0x1ecc>
     ba2:	48 8d 4c 24 20       	lea    0x20(%rsp),%rcx
  pckt->flow.proto = ip6h->nexthdr;
     ba7:	8a 43 30             	mov    0x30(%rbx),%al
     baa:	88 44 24 34          	mov    %al,0x34(%rsp)
  pckt->flags |= F_ICMP;
     bae:	c6 44 24 3c 01       	movb   $0x1,0x3c(%rsp)
  memcpy(pckt->flow.srcv6, ip6h->daddr.s6_addr32, 16);
     bb3:	48 8b 53 42          	mov    0x42(%rbx),%rdx
     bb7:	48 8b 73 4a          	mov    0x4a(%rbx),%rsi
     bbb:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
     bc0:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  memcpy(pckt->flow.dstv6, ip6h->saddr.s6_addr32, 16);
     bc5:	48 8b 53 32          	mov    0x32(%rbx),%rdx
     bc9:	48 8b 73 3a          	mov    0x3a(%rbx),%rsi
     bcd:	48 89 11             	mov    %rdx,(%rcx)
     bd0:	48 89 71 08          	mov    %rsi,0x8(%rcx)
     bd4:	b2 03                	mov    $0x3,%dl
     bd6:	31 c9                	xor    %ecx,%ecx
     bd8:	bd 02 00 00 00       	mov    $0x2,%ebp
  if (protocol == IPPROTO_IPIP) {
     bdd:	3c 10                	cmp    $0x10,%al
     bdf:	0f 8e a8 f8 ff ff    	jle    48d <balancer_ingress+0x48d>
     be5:	3c 11                	cmp    $0x11,%al
     be7:	0f 84 3f 01 00 00    	je     d2c <balancer_ingress+0xd2c>
     bed:	3c 29                	cmp    $0x29,%al
     bef:	0f 85 dc 12 00 00    	jne    1ed1 <balancer_ingress+0x1ed1>
  struct address dst_addr = {};
     bf5:	c7 44 24 4c 00 00 00 	movl   $0x0,0x4c(%rsp)
     bfc:	00 
     bfd:	48 c7 44 24 44 00 00 	movq   $0x0,0x44(%rsp)
     c04:	00 00 
    dst_addr.addr = pckt->flow.dst;
     c06:	8b 44 24 20          	mov    0x20(%rsp),%eax
     c0a:	89 44 24 40          	mov    %eax,0x40(%rsp)
  __u32* decap_dst_flags = bpf_map_lookup_elem(&decap_dst, &dst_addr);
     c0e:	48 bf 00 c8 6a 01 81 	movabs $0xffff8881016ac800,%rdi
     c15:	88 ff ff 
     c18:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
     c1d:	48 c7 c0 30 c9 a9 8c 	mov    $0xffffffff8ca9c930,%rax
     c24:	ff d0                	call   *%rax
     c26:	49 89 c6             	mov    %rax,%r14
  if (decap_dst_flags) {
     c29:	48 85 c0             	test   %rax,%rax
     c2c:	74 27                	je     c55 <balancer_ingress+0xc55>
     c2e:	48 b8 00 00 4f 93 81 	movabs $0xffff8881934f0000,%rax
     c35:	88 ff ff 
    data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     c38:	48 8b 80 30 11 00 00 	mov    0x1130(%rax),%rax
     c3f:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
     c46:	79 92 
    if (!data_stats) {
     c48:	48 85 c0             	test   %rax,%rax
     c4b:	0f 84 7b 12 00 00    	je     1ecc <balancer_ingress+0x1ecc>
    data_stats->v1 += 1;
     c51:	48 83 00 01          	addq   $0x1,(%rax)
    if ((*data + offset) > *data_end) {
     c55:	48 8d 43 36          	lea    0x36(%rbx),%rax
     c59:	bd 01 00 00 00       	mov    $0x1,%ebp
     c5e:	4c 39 f8             	cmp    %r15,%rax
     c61:	0f 87 6a 12 00 00    	ja     1ed1 <balancer_ingress+0x1ed1>
    if ((data + offset + sizeof(struct ipv6hdr)) > data_end) {
     c67:	48 8d 43 5e          	lea    0x5e(%rbx),%rax
     c6b:	bd 01 00 00 00       	mov    $0x1,%ebp
     c70:	41 bc 01 00 00 00    	mov    $0x1,%r12d
     c76:	4c 39 f8             	cmp    %r15,%rax
     c79:	77 13                	ja     c8e <balancer_ingress+0xc8e>
    if (!--ip6h->hop_limit) {
     c7b:	80 43 3d ff          	addb   $0xff,0x3d(%rbx)
     c7f:	b8 01 00 00 00       	mov    $0x1,%eax
     c84:	41 bc ff ff ff ff    	mov    $0xffffffff,%r12d
     c8a:	44 0f 44 e0          	cmove  %eax,%r12d
  memcpy(new_eth->h_source, old_eth->h_source, 6);
     c8e:	0f b7 43 0a          	movzwl 0xa(%rbx),%eax
     c92:	66 89 43 32          	mov    %ax,0x32(%rbx)
     c96:	8b 43 06             	mov    0x6(%rbx),%eax
     c99:	89 43 2e             	mov    %eax,0x2e(%rbx)
  memcpy(new_eth->h_dest, old_eth->h_dest, 6);
     c9c:	8b 03                	mov    (%rbx),%eax
     c9e:	89 43 28             	mov    %eax,0x28(%rbx)
     ca1:	0f b7 43 04          	movzwl 0x4(%rbx),%eax
     ca5:	66 89 43 2c          	mov    %ax,0x2c(%rbx)
     ca9:	66 c7 43 34 86 dd    	movw   $0xdd86,0x34(%rbx)
     caf:	48 c7 c0 20 5c c3 8e 	mov    $0xffffffff8ec35c20,%rax
  if (XDP_ADJUST_HEAD_FUNC(xdp, (int)sizeof(struct ipv6hdr))) {
     cb6:	4c 89 ef             	mov    %r13,%rdi
     cb9:	be 28 00 00 00       	mov    $0x28,%esi
     cbe:	ff d0                	call   *%rax
     cc0:	85 c0                	test   %eax,%eax
     cc2:	0f 85 09 12 00 00    	jne    1ed1 <balancer_ingress+0x1ed1>
     cc8:	48 b8 00 00 4f 93 81 	movabs $0xffff8881934f0000,%rax
     ccf:	88 ff ff 
  struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     cd2:	48 8b 88 50 11 00 00 	mov    0x1150(%rax),%rcx
     cd9:	65 48 03 0c 25 28 50 	add    %gs:0xffffffff92795028,%rcx
     ce0:	79 92 
  if (!data_stats) {
     ce2:	48 85 c9             	test   %rcx,%rcx
     ce5:	0f 84 e6 11 00 00    	je     1ed1 <balancer_ingress+0x1ed1>
     ceb:	48 83 41 08 01       	addq   $0x1,0x8(%rcx)
  if (action >= 0) {
     cf0:	45 85 e4             	test   %r12d,%r12d
     cf3:	bd 02 00 00 00       	mov    $0x2,%ebp
     cf8:	41 0f 49 ec          	cmovns %r12d,%ebp
  if (decap_dst_flags) {
     cfc:	4d 85 f6             	test   %r14,%r14
  if (action >= 0) {
     cff:	0f 84 cc 11 00 00    	je     1ed1 <balancer_ingress+0x1ed1>
     d05:	45 85 e4             	test   %r12d,%r12d
     d08:	0f 89 c3 11 00 00    	jns    1ed1 <balancer_ingress+0x1ed1>
        bpf_map_lookup_elem(&stats, &xpop_stats_key);
     d0e:	48 8b 80 70 11 00 00 	mov    0x1170(%rax),%rax
     d15:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
     d1c:	79 92 
    if (xpop_stats_data) {
     d1e:	48 85 c0             	test   %rax,%rax
     d21:	0f 85 52 f9 ff ff    	jne    679 <balancer_ingress+0x679>
     d27:	e9 09 fe ff ff       	jmp    b35 <balancer_ingress+0xb35>
  udp = data + off;
     d2c:	48 8d 43 3e          	lea    0x3e(%rbx),%rax
  if (is_ipv6) {
     d30:	84 c9                	test   %cl,%cl
  udp = data + off;
     d32:	49 0f 45 c6          	cmovne %r14,%rax
  if (udp + 1 > data_end) {
     d36:	48 8d 50 08          	lea    0x8(%rax),%rdx
     d3a:	4c 39 fa             	cmp    %r15,%rdx
     d3d:	0f 87 89 11 00 00    	ja     1ecc <balancer_ingress+0x1ecc>
     d43:	84 c9                	test   %cl,%cl
     d45:	66 89 7c 24 54       	mov    %di,0x54(%rsp)
     d4a:	74 13                	je     d5f <balancer_ingress+0xd5f>
     d4c:	0f b7 10             	movzwl (%rax),%edx
     d4f:	48 8d 4c 24 30       	lea    0x30(%rsp),%rcx
     d54:	66 89 54 24 30       	mov    %dx,0x30(%rsp)
     d59:	48 83 c0 02          	add    $0x2,%rax
     d5d:	eb 0e                	jmp    d6d <balancer_ingress+0xd6d>
     d5f:	0f b7 50 02          	movzwl 0x2(%rax),%edx
     d63:	48 8d 4c 24 30       	lea    0x30(%rsp),%rcx
     d68:	66 89 54 24 30       	mov    %dx,0x30(%rsp)
     d6d:	0f b7 00             	movzwl (%rax),%eax
     d70:	66 89 41 02          	mov    %ax,0x2(%rcx)
    vip.vip = pckt.flow.dst;
     d74:	8b 44 24 20          	mov    0x20(%rsp),%eax
     d78:	89 44 24 58          	mov    %eax,0x58(%rsp)
  vip.port = pckt.flow.port16[1];
     d7c:	0f b7 44 24 32       	movzwl 0x32(%rsp),%eax
     d81:	66 89 44 24 68       	mov    %ax,0x68(%rsp)
  vip.proto = pckt.flow.proto;
     d86:	8a 44 24 34          	mov    0x34(%rsp),%al
     d8a:	88 44 24 6a          	mov    %al,0x6a(%rsp)
  vip_info = bpf_map_lookup_elem(&vip_map, &vip);
     d8e:	48 bf 00 d0 6a 01 81 	movabs $0xffff8881016ad000,%rdi
     d95:	88 ff ff 
     d98:	48 8d 74 24 58       	lea    0x58(%rsp),%rsi
     d9d:	49 c7 c4 30 c9 a9 8c 	mov    $0xffffffff8ca9c930,%r12
     da4:	41 ff d4             	call   *%r12
     da7:	48 89 c2             	mov    %rax,%rdx
  if (!vip_info) {
     daa:	48 85 c0             	test   %rax,%rax
     dad:	0f 84 43 01 00 00    	je     ef6 <balancer_ingress+0xef6>
  if (data_end - data > MAX_PCKT_SIZE) {
     db3:	4c 89 f8             	mov    %r15,%rax
     db6:	48 29 d8             	sub    %rbx,%rax
     db9:	48 3d ea 05 00 00    	cmp    $0x5ea,%rax
     dbf:	0f 8f 07 11 00 00    	jg     1ecc <balancer_ingress+0x1ecc>
     dc5:	49 bc 00 00 4f 93 81 	movabs $0xffff8881934f0000,%r12
     dcc:	88 ff ff 
  data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     dcf:	49 8b ac 24 00 11 00 	mov    0x1100(%r12),%rbp
     dd6:	00 
     dd7:	65 48 03 2c 25 28 50 	add    %gs:0xffffffff92795028,%rbp
     dde:	79 92 
  if (!data_stats) {
     de0:	48 85 ed             	test   %rbp,%rbp
     de3:	0f 84 e3 10 00 00    	je     1ecc <balancer_ingress+0x1ecc>
  data_stats->v1 += 1;
     de9:	48 83 45 00 01       	addq   $0x1,0x0(%rbp)
  if ((vip_info->flags & F_HASH_NO_SRC_PORT)) {
     dee:	f6 02 01             	testb  $0x1,(%rdx)
     df1:	74 07                	je     dfa <balancer_ingress+0xdfa>
    pckt.flow.port16[0] = 0;
     df3:	66 c7 44 24 30 00 00 	movw   $0x0,0x30(%rsp)
  vip_num = vip_info->vip_num;
     dfa:	8b 42 04             	mov    0x4(%rdx),%eax
     dfd:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
     e04:	00 
     e05:	48 c7 c0 34 50 79 92 	mov    $0xffffffff92795034,%rax
  __u32 cpu_num = bpf_get_smp_processor_id();
     e0c:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
     e13:	79 92 
     e15:	48 8b 00             	mov    (%rax),%rax
  void* lru_map = bpf_map_lookup_elem(&lru_mapping, &cpu_num);
     e18:	a9 80 ff ff ff       	test   $0xffffff80,%eax
     e1d:	0f 84 4c 01 00 00    	je     f6f <balancer_ingress+0xf6f>
    struct lb_stats* lru_stats = bpf_map_lookup_elem(&stats, &lru_stats_key);
     e23:	49 8b 84 24 18 11 00 	mov    0x1118(%r12),%rax
     e2a:	00 
     e2b:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
     e32:	79 92 
    if (!lru_stats) {
     e34:	48 85 c0             	test   %rax,%rax
     e37:	0f 84 8f 10 00 00    	je     1ecc <balancer_ingress+0x1ecc>
    lru_stats->v1 += 1;
     e3d:	48 83 00 01          	addq   $0x1,(%rax)
     e41:	48 b8 00 d8 6a 01 81 	movabs $0xffff8881016ad800,%rax
     e48:	88 ff ff 
     e4b:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
     e50:	e9 3c 01 00 00       	jmp    f91 <balancer_ingress+0xf91>
  void* lru_map = bpf_map_lookup_elem(&lru_mapping, &cpu_num);
     e55:	89 c0                	mov    %eax,%eax
     e57:	48 b9 00 00 16 40 81 	movabs $0xffff888140160000,%rcx
     e5e:	88 ff ff 
     e61:	48 8b 84 c1 00 01 00 	mov    0x100(%rcx,%rax,8),%rax
     e68:	00 
     e69:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  if (!lru_map) {
     e6e:	48 85 c0             	test   %rax,%rax
     e71:	0f 84 ac fa ff ff    	je     923 <balancer_ingress+0x923>
     e77:	48 89 b4 24 80 00 00 	mov    %rsi,0x80(%rsp)
     e7e:	00 
  if ((vip_info->flags & F_QUIC_VIP)) {
     e7f:	f6 07 04             	testb  $0x4,(%rdi)
     e82:	0f 84 6d 0a 00 00    	je     18f5 <balancer_ingress+0x18f5>
    bool is_icmp = (pckt.flags & F_ICMP);
     e88:	f6 44 24 3c 01       	testb  $0x1,0x3c(%rsp)
    if (is_icmp) {
     e8d:	0f 85 a7 00 00 00    	jne    f3a <balancer_ingress+0xf3a>
     e93:	48 b8 00 88 a3 06 81 	movabs $0xffff888106a38800,%rax
     e9a:	88 ff ff 
          bpf_map_lookup_elem(&quic_stats_map, &quic_packets_stats_key);
     e9d:	48 8b a8 00 01 00 00 	mov    0x100(%rax),%rbp
     ea4:	65 48 03 2c 25 28 50 	add    %gs:0xffffffff92795028,%rbp
     eab:	79 92 
      if (!quic_packets_stats) {
     ead:	48 85 ed             	test   %rbp,%rbp
     eb0:	0f 84 16 10 00 00    	je     1ecc <balancer_ingress+0x1ecc>
  if ((data + off + sizeof(struct udphdr) + sizeof(__u8)) > data_end) {
     eb6:	48 83 c3 66          	add    $0x66,%rbx
  bool is_icmp = (pckt->flags & F_ICMP);
     eba:	f6 44 24 3c 01       	testb  $0x1,0x3c(%rsp)
  if ((data + off + sizeof(struct udphdr) + sizeof(__u8)) > data_end) {
     ebf:	49 0f 44 de          	cmove  %r14,%rbx
     ec3:	48 8d 43 09          	lea    0x9(%rbx),%rax
     ec7:	4c 39 f8             	cmp    %r15,%rax
     eca:	0f 87 20 0a 00 00    	ja     18f0 <balancer_ingress+0x18f0>
     ed0:	48 89 14 24          	mov    %rdx,(%rsp)
     ed4:	48 83 c3 08          	add    $0x8,%rbx
  if ((*pkt_type & QUIC_LONG_HEADER) == QUIC_LONG_HEADER) {
     ed8:	0f b6 0b             	movzbl (%rbx),%ecx
     edb:	f6 c1 80             	test   $0x80,%cl
     ede:	0f 85 b6 01 00 00    	jne    109a <balancer_ingress+0x109a>
    if (quic_data + sizeof(struct quic_short_header) > data_end) {
     ee4:	48 83 c3 09          	add    $0x9,%rbx
     ee8:	4c 39 fb             	cmp    %r15,%rbx
     eeb:	0f 87 fb 09 00 00    	ja     18ec <balancer_ingress+0x18ec>
     ef1:	e9 d4 02 00 00       	jmp    11ca <balancer_ingress+0x11ca>
    vip.port = 0;
     ef6:	66 c7 44 24 68 00 00 	movw   $0x0,0x68(%rsp)
    vip_info = bpf_map_lookup_elem(&vip_map, &vip);
     efd:	48 bf 00 d0 6a 01 81 	movabs $0xffff8881016ad000,%rdi
     f04:	88 ff ff 
     f07:	48 8d 74 24 58       	lea    0x58(%rsp),%rsi
     f0c:	41 ff d4             	call   *%r12
    if (!vip_info) {
     f0f:	48 85 c0             	test   %rax,%rax
     f12:	0f 84 b9 0f 00 00    	je     1ed1 <balancer_ingress+0x1ed1>
     f18:	48 89 c2             	mov    %rax,%rdx
    if (!(vip_info->flags & F_HASH_DPORT_ONLY) &&
     f1b:	f6 00 88             	testb  $0x88,(%rax)
     f1e:	0f 85 8f fe ff ff    	jne    db3 <balancer_ingress+0xdb3>
      pckt.flow.port16[1] = 0;
     f24:	66 c7 44 24 32 00 00 	movw   $0x0,0x32(%rsp)
     f2b:	e9 83 fe ff ff       	jmp    db3 <balancer_ingress+0xdb3>
     f30:	bd 02 00 00 00       	mov    $0x2,%ebp
     f35:	e9 97 0f 00 00       	jmp    1ed1 <balancer_ingress+0x1ed1>
      struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     f3a:	49 8b ac 24 58 11 00 	mov    0x1158(%r12),%rbp
     f41:	00 
     f42:	65 48 03 2c 25 28 50 	add    %gs:0xffffffff92795028,%rbp
     f49:	79 92 
      if (!data_stats) {
     f4b:	48 85 ed             	test   %rbp,%rbp
     f4e:	0f 84 78 0f 00 00    	je     1ecc <balancer_ingress+0x1ecc>
      data_stats->v1 += 1;
     f54:	48 83 45 00 01       	addq   $0x1,0x0(%rbp)
        (icmp_hdr->icmp6_code == ICMPV6_ADDR_UNREACH) ||
     f59:	8a 43 37             	mov    0x37(%rbx),%al
     f5c:	04 fd                	add    $0xfd,%al
     f5e:	3c 01                	cmp    $0x1,%al
      if (ignorable_quic_icmp_code(data, data_end, is_ipv6)) {
     f60:	0f 87 8f 09 00 00    	ja     18f5 <balancer_ingress+0x18f5>
        data_stats->v2 += 1;
     f66:	48 83 c5 08          	add    $0x8,%rbp
     f6a:	e9 81 09 00 00       	jmp    18f0 <balancer_ingress+0x18f0>
  void* lru_map = bpf_map_lookup_elem(&lru_mapping, &cpu_num);
     f6f:	89 c0                	mov    %eax,%eax
     f71:	48 b9 00 00 16 40 81 	movabs $0xffff888140160000,%rcx
     f78:	88 ff ff 
     f7b:	48 8b 84 c1 00 01 00 	mov    0x100(%rcx,%rax,8),%rax
     f82:	00 
     f83:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  if (!lru_map) {
     f88:	48 85 c0             	test   %rax,%rax
     f8b:	0f 84 92 fe ff ff    	je     e23 <balancer_ingress+0xe23>
  if ((vip_info->flags & F_QUIC_VIP)) {
     f91:	f6 02 04             	testb  $0x4,(%rdx)
     f94:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
     f99:	0f 84 90 00 00 00    	je     102f <balancer_ingress+0x102f>
    bool is_icmp = (pckt.flags & F_ICMP);
     f9f:	f6 44 24 3c 01       	testb  $0x1,0x3c(%rsp)
    if (is_icmp) {
     fa4:	75 48                	jne    fee <balancer_ingress+0xfee>
     fa6:	48 b8 00 88 a3 06 81 	movabs $0xffff888106a38800,%rax
     fad:	88 ff ff 
          bpf_map_lookup_elem(&quic_stats_map, &quic_packets_stats_key);
     fb0:	48 8b 80 00 01 00 00 	mov    0x100(%rax),%rax
     fb7:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
     fbe:	79 92 
     fc0:	48 89 04 24          	mov    %rax,(%rsp)
      if (!quic_packets_stats) {
     fc4:	48 85 c0             	test   %rax,%rax
     fc7:	0f 84 ff 0e 00 00    	je     1ecc <balancer_ingress+0x1ecc>
  if ((data + off + sizeof(struct udphdr) + sizeof(__u8)) > data_end) {
     fcd:	48 83 c3 3e          	add    $0x3e,%rbx
  bool is_icmp = (pckt->flags & F_ICMP);
     fd1:	f6 44 24 3c 01       	testb  $0x1,0x3c(%rsp)
  if ((data + off + sizeof(struct udphdr) + sizeof(__u8)) > data_end) {
     fd6:	49 0f 44 de          	cmove  %r14,%rbx
     fda:	48 8d 43 09          	lea    0x9(%rbx),%rax
     fde:	4c 39 f8             	cmp    %r15,%rax
     fe1:	0f 86 07 01 00 00    	jbe    10ee <balancer_ingress+0x10ee>
     fe7:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
     fec:	eb 39                	jmp    1027 <balancer_ingress+0x1027>
      struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     fee:	49 8b 84 24 58 11 00 	mov    0x1158(%r12),%rax
     ff5:	00 
     ff6:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
     ffd:	79 92 
     fff:	48 89 04 24          	mov    %rax,(%rsp)
      if (!data_stats) {
    1003:	48 85 c0             	test   %rax,%rax
    1006:	0f 84 c0 0e 00 00    	je     1ecc <balancer_ingress+0x1ecc>
    100c:	48 8b 04 24          	mov    (%rsp),%rax
      data_stats->v1 += 1;
    1010:	48 83 00 01          	addq   $0x1,(%rax)
        (icmp_hdr->code == ICMP_PORT_UNREACH) ||
    1014:	8a 43 23             	mov    0x23(%rbx),%al
    1017:	24 fd                	and    $0xfd,%al
    1019:	3c 01                	cmp    $0x1,%al
    101b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
      if (ignorable_quic_icmp_code(data, data_end, is_ipv6)) {
    1020:	75 0d                	jne    102f <balancer_ingress+0x102f>
        data_stats->v2 += 1;
    1022:	48 83 04 24 08       	addq   $0x8,(%rsp)
    1027:	48 8b 04 24          	mov    (%rsp),%rax
    102b:	48 83 00 01          	addq   $0x1,(%rax)
  original_sport = pckt.flow.port16[0];
    102f:	44 0f b7 7c 24 30    	movzwl 0x30(%rsp),%r15d
    if (!dst && !(pckt.flags & F_SYN_SET) &&
    1035:	f6 44 24 3c 02       	testb  $0x2,0x3c(%rsp)
    103a:	75 56                	jne    1092 <balancer_ingress+0x1092>
        !(vip_info->flags & F_LRU_BYPASS)) {
    103c:	f6 02 02             	testb  $0x2,(%rdx)
    if (!dst && !(pckt.flags & F_SYN_SET) &&
    103f:	75 49                	jne    108a <balancer_ingress+0x108a>
    1041:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
    1046:	48 c7 c0 30 c9 a9 8c 	mov    $0xffffffff8ca9c930,%rax
    104d:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  dst_lru = real_bpf_map_lookup_elem(lru_map, &pckt->flow);
    1052:	ff d0                	call   *%rax
  if (!dst_lru) {
    1054:	48 85 c0             	test   %rax,%rax
    1057:	74 31                	je     108a <balancer_ingress+0x108a>
    1059:	48 89 c3             	mov    %rax,%rbx
  if (!isGlobalLru && pckt->flow.proto == IPPROTO_UDP) {
    105c:	80 7c 24 34 11       	cmpb   $0x11,0x34(%rsp)
    1061:	0f 85 af 01 00 00    	jne    1216 <balancer_ingress+0x1216>
    1067:	48 c7 c0 30 d6 a9 8c 	mov    $0xffffffff8ca9d630,%rax
    cur_time = bpf_ktime_get_ns();
    106e:	ff d0                	call   *%rax
    if (cur_time - dst_lru->atime > LRU_UDP_TIMEOUT) {
    1070:	48 89 c1             	mov    %rax,%rcx
    1073:	48 2b 4b 08          	sub    0x8(%rbx),%rcx
    1077:	48 ba 00 ac 23 fc 06 	movabs $0x6fc23ac00,%rdx
    107e:	00 00 00 
    1081:	48 39 d1             	cmp    %rdx,%rcx
    1084:	0f 86 88 01 00 00    	jbe    1212 <balancer_ingress+0x1212>
    108a:	45 31 f6             	xor    %r14d,%r14d
    108d:	e9 ad 01 00 00       	jmp    123f <balancer_ingress+0x123f>
    1092:	45 31 f6             	xor    %r14d,%r14d
    1095:	e9 aa 01 00 00       	jmp    1244 <balancer_ingress+0x1244>
    if (quic_data + sizeof(struct quic_long_header) > data_end) {
    109a:	48 8d 43 0e          	lea    0xe(%rbx),%rax
    109e:	4c 39 f8             	cmp    %r15,%rax
    10a1:	0f 87 45 08 00 00    	ja     18ec <balancer_ingress+0x18ec>
    if ((*pkt_type & QUIC_PACKET_TYPE_MASK) < QUIC_HANDSHAKE) {
    10a7:	f6 c1 20             	test   $0x20,%cl
    10aa:	0f 85 09 01 00 00    	jne    11b9 <balancer_ingress+0x11b9>
        quic_packets_stats->cid_initial += 1;
    10b0:	48 83 45 08 01       	addq   $0x1,0x8(%rbp)
    10b5:	48 8b 14 24          	mov    (%rsp),%rdx
      bpf_map_lookup_elem(&server_id_stats, &vip_num);
    10b9:	81 fa ff 01 00 00    	cmp    $0x1ff,%edx
    10bf:	0f 87 30 08 00 00    	ja     18f5 <balancer_ingress+0x18f5>
    10c5:	48 b8 00 00 1f 53 81 	movabs $0xffff8881531f0000,%rax
    10cc:	88 ff ff 
    10cf:	48 8b ac d0 00 01 00 	mov    0x100(%rax,%rdx,8),%rbp
    10d6:	00 
    10d7:	65 48 03 2c 25 28 50 	add    %gs:0xffffffff92795028,%rbp
    10de:	79 92 
  if (!per_vip_stats) {
    10e0:	48 85 ed             	test   %rbp,%rbp
    10e3:	0f 85 07 08 00 00    	jne    18f0 <balancer_ingress+0x18f0>
    10e9:	e9 07 08 00 00       	jmp    18f5 <balancer_ingress+0x18f5>
    10ee:	48 83 c3 08          	add    $0x8,%rbx
  if ((*pkt_type & QUIC_LONG_HEADER) == QUIC_LONG_HEADER) {
    10f2:	0f b6 0b             	movzbl (%rbx),%ecx
    10f5:	f6 c1 80             	test   $0x80,%cl
    10f8:	75 55                	jne    114f <balancer_ingress+0x114f>
    if (quic_data + sizeof(struct quic_short_header) > data_end) {
    10fa:	48 83 c3 09          	add    $0x9,%rbx
    10fe:	4c 39 fb             	cmp    %r15,%rbx
    1101:	0f 87 e0 fe ff ff    	ja     fe7 <balancer_ingress+0xfe7>
  if (!connId) {
    1107:	48 85 c0             	test   %rax,%rax
    110a:	0f 84 d7 fe ff ff    	je     fe7 <balancer_ingress+0xfe7>
  __u8 connIdVersion = (connId[0] >> 6);
    1110:	0f b6 08             	movzbl (%rax),%ecx
    1113:	89 ca                	mov    %ecx,%edx
    1115:	c0 ea 06             	shr    $0x6,%dl
  if (connIdVersion == QUIC_CONNID_VERSION_V1) {
    1118:	80 fa 03             	cmp    $0x3,%dl
    111b:	0f 84 ab 0f 00 00    	je     20cc <balancer_ingress+0x20cc>
    1121:	80 fa 02             	cmp    $0x2,%dl
    1124:	0f 84 c7 0f 00 00    	je     20f1 <balancer_ingress+0x20f1>
    112a:	80 fa 01             	cmp    $0x1,%dl
    112d:	0f 85 b4 fe ff ff    	jne    fe7 <balancer_ingress+0xfe7>
        ((connId[0] & 0x3F) << 10) | (connId[1] << 2) | (connId[2] >> 6);
    1133:	83 e1 3f             	and    $0x3f,%ecx
    1136:	48 c1 e1 0a          	shl    $0xa,%rcx
    113a:	0f b6 50 01          	movzbl 0x1(%rax),%edx
    113e:	48 8d 0c 91          	lea    (%rcx,%rdx,4),%rcx
    1142:	8a 40 02             	mov    0x2(%rax),%al
    1145:	c0 e8 06             	shr    $0x6,%al
    1148:	b2 01                	mov    $0x1,%dl
    114a:	e9 ba 0f 00 00       	jmp    2109 <balancer_ingress+0x2109>
    if (quic_data + sizeof(struct quic_long_header) > data_end) {
    114f:	48 8d 43 0e          	lea    0xe(%rbx),%rax
    1153:	4c 39 f8             	cmp    %r15,%rax
    1156:	0f 87 8b fe ff ff    	ja     fe7 <balancer_ingress+0xfe7>
    if ((*pkt_type & QUIC_PACKET_TYPE_MASK) < QUIC_HANDSHAKE) {
    115c:	f6 c1 20             	test   $0x20,%cl
    115f:	0f 85 c3 06 00 00    	jne    1828 <balancer_ingress+0x1828>
    1165:	48 8b 04 24          	mov    (%rsp),%rax
        quic_packets_stats->cid_initial += 1;
    1169:	48 83 40 08 01       	addq   $0x1,0x8(%rax)
      bpf_map_lookup_elem(&server_id_stats, &vip_num);
    116e:	81 bc 24 80 00 00 00 	cmpl   $0x1ff,0x80(%rsp)
    1175:	ff 01 00 00 
    1179:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    117e:	0f 87 ab fe ff ff    	ja     102f <balancer_ingress+0x102f>
    1184:	48 b8 00 00 1f 53 81 	movabs $0xffff8881531f0000,%rax
    118b:	88 ff ff 
    118e:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
    1195:	00 
    1196:	48 8b 84 c8 00 01 00 	mov    0x100(%rax,%rcx,8),%rax
    119d:	00 
    119e:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
    11a5:	79 92 
    11a7:	48 89 04 24          	mov    %rax,(%rsp)
  if (!per_vip_stats) {
    11ab:	48 85 c0             	test   %rax,%rax
    11ae:	0f 85 73 fe ff ff    	jne    1027 <balancer_ingress+0x1027>
    11b4:	e9 76 fe ff ff       	jmp    102f <balancer_ingress+0x102f>
    if (long_header->conn_id_lens < QUIC_MIN_CONNID_LEN) {
    11b9:	80 7b 05 08          	cmpb   $0x8,0x5(%rbx)
    11bd:	0f 82 29 07 00 00    	jb     18ec <balancer_ingress+0x18ec>
    11c3:	48 83 c3 06          	add    $0x6,%rbx
    11c7:	48 89 d8             	mov    %rbx,%rax
  if (!connId) {
    11ca:	48 85 c0             	test   %rax,%rax
    11cd:	0f 84 19 07 00 00    	je     18ec <balancer_ingress+0x18ec>
  __u8 connIdVersion = (connId[0] >> 6);
    11d3:	0f b6 08             	movzbl (%rax),%ecx
    11d6:	89 ca                	mov    %ecx,%edx
    11d8:	c0 ea 06             	shr    $0x6,%dl
  if (connIdVersion == QUIC_CONNID_VERSION_V1) {
    11db:	80 fa 03             	cmp    $0x3,%dl
    11de:	0f 84 16 05 00 00    	je     16fa <balancer_ingress+0x16fa>
    11e4:	80 fa 02             	cmp    $0x2,%dl
    11e7:	0f 84 32 05 00 00    	je     171f <balancer_ingress+0x171f>
    11ed:	80 fa 01             	cmp    $0x1,%dl
    11f0:	0f 85 f6 06 00 00    	jne    18ec <balancer_ingress+0x18ec>
        ((connId[0] & 0x3F) << 10) | (connId[1] << 2) | (connId[2] >> 6);
    11f6:	83 e1 3f             	and    $0x3f,%ecx
    11f9:	48 c1 e1 0a          	shl    $0xa,%rcx
    11fd:	0f b6 50 01          	movzbl 0x1(%rax),%edx
    1201:	48 8d 0c 91          	lea    (%rcx,%rdx,4),%rcx
    1205:	8a 40 02             	mov    0x2(%rax),%al
    1208:	c0 e8 06             	shr    $0x6,%al
    120b:	b2 01                	mov    $0x1,%dl
    120d:	e9 25 05 00 00       	jmp    1737 <balancer_ingress+0x1737>
    dst_lru->atime = cur_time;
    1212:	48 89 43 08          	mov    %rax,0x8(%rbx)
  key = dst_lru->pos;
    1216:	8b 03                	mov    (%rbx),%eax
    1218:	45 31 f6             	xor    %r14d,%r14d
    121b:	48 3d 00 10 00 00    	cmp    $0x1000,%rax
  pckt->real_index = key;
    1221:	89 44 24 38          	mov    %eax,0x38(%rsp)
  *real = bpf_map_lookup_elem(&reals, &key);
    1225:	48 8d 04 40          	lea    (%rax,%rax,2),%rax
    1229:	48 b9 00 30 6d 08 00 	movabs $0xffffc900086d3000,%rcx
    1230:	c9 ff ff 
    1233:	48 8d 84 c1 00 01 00 	lea    0x100(%rcx,%rax,8),%rax
    123a:	00 
    123b:	4c 0f 42 f0          	cmovb  %rax,%r14
    123f:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  if (dst && pckt->flow.proto == IPPROTO_UDP &&
    1244:	80 7c 24 34 11       	cmpb   $0x11,0x34(%rsp)
    1249:	0f 85 ab 00 00 00    	jne    12fa <balancer_ingress+0x12fa>
      vip_info->flags & F_UDP_FLOW_MIGRATION && !is_under_flood(&cur_time)) {
    124f:	f6 42 01 02          	testb  $0x2,0x1(%rdx)
    1253:	0f 84 a1 00 00 00    	je     12fa <balancer_ingress+0x12fa>
      bpf_map_lookup_elem(&stats, &conn_rate_key);
    1259:	49 8b 9c 24 10 11 00 	mov    0x1110(%r12),%rbx
    1260:	00 
    1261:	65 48 03 1c 25 28 50 	add    %gs:0xffffffff92795028,%rbx
    1268:	79 92 
  if (!conn_rate_stats) {
    126a:	48 85 db             	test   %rbx,%rbx
    126d:	0f 84 87 00 00 00    	je     12fa <balancer_ingress+0x12fa>
    1273:	48 c7 c0 30 d6 a9 8c 	mov    $0xffffffff8ca9d630,%rax
  *cur_time = bpf_ktime_get_ns();
    127a:	ff d0                	call   *%rax
  if ((*cur_time - conn_rate_stats->v2) > ONE_SEC) {
    127c:	48 89 c1             	mov    %rax,%rcx
    127f:	48 2b 4b 08          	sub    0x8(%rbx),%rcx
    1283:	48 81 f9 01 ca 9a 3b 	cmp    $0x3b9aca01,%rcx
    128a:	72 0d                	jb     1299 <balancer_ingress+0x1299>
    conn_rate_stats->v1 = 1;
    128c:	48 c7 03 01 00 00 00 	movq   $0x1,(%rbx)
    conn_rate_stats->v2 = *cur_time;
    1293:	48 89 43 08          	mov    %rax,0x8(%rbx)
    1297:	eb 12                	jmp    12ab <balancer_ingress+0x12ab>
    conn_rate_stats->v1 += 1;
    1299:	48 8b 03             	mov    (%rbx),%rax
    129c:	48 83 c0 01          	add    $0x1,%rax
    12a0:	48 89 03             	mov    %rax,(%rbx)
    if (conn_rate_stats->v1 > MAX_CONN_RATE) {
    12a3:	48 3d 48 e8 01 00    	cmp    $0x1e848,%rax
    12a9:	77 4f                	ja     12fa <balancer_ingress+0x12fa>
    void* down_reals_map = bpf_map_lookup_elem(&vip_to_down_reals_map, vip);
    12ab:	48 bf 00 f0 6a 01 81 	movabs $0xffff8881016af000,%rdi
    12b2:	88 ff ff 
    12b5:	48 8d 74 24 58       	lea    0x58(%rsp),%rsi
    12ba:	48 c7 c3 30 c9 a9 8c 	mov    $0xffffffff8ca9c930,%rbx
    12c1:	ff d3                	call   *%rbx
    if (down_reals_map) {
    12c3:	48 85 c0             	test   %rax,%rax
    12c6:	74 32                	je     12fa <balancer_ingress+0x12fa>
      void* down_real = real_bpf_map_lookup_elem(down_reals_map, &pckt->real_index);
    12c8:	48 8d 74 24 38       	lea    0x38(%rsp),%rsi
    12cd:	48 89 c7             	mov    %rax,%rdi
    12d0:	ff d3                	call   *%rbx
      if (down_real) {
    12d2:	48 85 c0             	test   %rax,%rax
    12d5:	74 23                	je     12fa <balancer_ingress+0x12fa>
        struct lb_stats* stats_data = bpf_map_lookup_elem(&stats, &stats_key);
    12d7:	49 8b 84 24 78 11 00 	mov    0x1178(%r12),%rax
    12de:	00 
    12df:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
    12e6:	79 92 
        if (stats_data) {
    12e8:	48 85 c0             	test   %rax,%rax
    12eb:	0f 84 77 01 00 00    	je     1468 <balancer_ingress+0x1468>
          stats_data->v1 += 1;
    12f1:	48 83 00 01          	addq   $0x1,(%rax)
    12f5:	e9 6e 01 00 00       	jmp    1468 <balancer_ingress+0x1468>
    if (!dst) {
    12fa:	4d 85 f6             	test   %r14,%r14
    12fd:	0f 84 65 01 00 00    	je     1468 <balancer_ingress+0x1468>
    1303:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
    130a:	00 
  data_stats = bpf_map_lookup_elem(&stats, &vip_num);
    130b:	3d ff 03 00 00       	cmp    $0x3ff,%eax
    1310:	0f 87 b6 0b 00 00    	ja     1ecc <balancer_ingress+0x1ecc>
    1316:	49 8b 8c c4 00 01 00 	mov    0x100(%r12,%rax,8),%rcx
    131d:	00 
    131e:	65 48 03 0c 25 28 50 	add    %gs:0xffffffff92795028,%rcx
    1325:	79 92 
  if (!data_stats) {
    1327:	48 85 c9             	test   %rcx,%rcx
    132a:	0f 84 9c 0b 00 00    	je     1ecc <balancer_ingress+0x1ecc>
    1330:	0f b7 44 24 54       	movzwl 0x54(%rsp),%eax
    1335:	89 c3                	mov    %eax,%ebx
    1337:	66 c1 c3 08          	rol    $0x8,%bx
  data_stats->v1 += 1;
    133b:	48 83 01 01          	addq   $0x1,(%rcx)
  data_stats->v2 += pkt_bytes;
    133f:	0f b7 c3             	movzwl %bx,%eax
    1342:	48 01 41 08          	add    %rax,0x8(%rcx)
  data_stats = bpf_map_lookup_elem(&reals_stats, &pckt.real_index);
    1346:	8b 4c 24 38          	mov    0x38(%rsp),%ecx
    134a:	48 81 f9 ff 0f 00 00 	cmp    $0xfff,%rcx
    1351:	0f 87 75 0b 00 00    	ja     1ecc <balancer_ingress+0x1ecc>
    1357:	48 ba 00 30 43 08 00 	movabs $0xffffc90008433000,%rdx
    135e:	c9 ff ff 
    1361:	48 8b 8c ca 00 01 00 	mov    0x100(%rdx,%rcx,8),%rcx
    1368:	00 
    1369:	65 48 03 0c 25 28 50 	add    %gs:0xffffffff92795028,%rcx
    1370:	79 92 
  if (!data_stats) {
    1372:	48 85 c9             	test   %rcx,%rcx
    1375:	0f 84 51 0b 00 00    	je     1ecc <balancer_ingress+0x1ecc>
  data_stats->v1 += 1;
    137b:	48 83 01 01          	addq   $0x1,(%rcx)
  data_stats->v2 += pkt_bytes;
    137f:	48 01 41 08          	add    %rax,0x8(%rcx)
  pckt.flow.port16[0] = original_sport;
    1383:	66 44 89 7c 24 30    	mov    %r15w,0x30(%rsp)
  if (dst->flags & F_IPV6) {
    1389:	41 f6 46 10 01       	testb  $0x1,0x10(%r14)
    138e:	0f 85 ab 02 00 00    	jne    163f <balancer_ingress+0x163f>
  __u32 ip_src = create_encap_ipv4_src(pckt->flow.port16[0], pckt->flow.src);
    1394:	44 0f b7 64 24 12    	movzwl 0x12(%rsp),%r12d
    139a:	48 c7 c0 20 5c c3 8e 	mov    $0xffffffff8ec35c20,%rax
  if (XDP_ADJUST_HEAD_FUNC(xdp, 0 - (int)sizeof(struct iphdr))) {
    13a1:	4c 89 ef             	mov    %r13,%rdi
    13a4:	be ec ff ff ff       	mov    $0xffffffec,%esi
    13a9:	ff d0                	call   *%rax
    13ab:	85 c0                	test   %eax,%eax
    13ad:	0f 85 19 0b 00 00    	jne    1ecc <balancer_ingress+0x1ecc>
  data = (void*)(long)xdp->data;
    13b3:	49 8b 45 00          	mov    0x0(%r13),%rax
  data_end = (void*)(long)xdp->data_end;
    13b7:	49 8b 4d 08          	mov    0x8(%r13),%rcx
  iph = data + sizeof(struct ethhdr);
    13bb:	48 8d 50 0e          	lea    0xe(%rax),%rdx
  if (new_eth + 1 > data_end || old_eth + 1 > data_end || iph + 1 > data_end) {
    13bf:	48 39 ca             	cmp    %rcx,%rdx
    13c2:	0f 87 04 0b 00 00    	ja     1ecc <balancer_ingress+0x1ecc>
    13c8:	48 8d 50 22          	lea    0x22(%rax),%rdx
    13cc:	bd 01 00 00 00       	mov    $0x1,%ebp
    13d1:	48 39 ca             	cmp    %rcx,%rdx
    13d4:	0f 87 f7 0a 00 00    	ja     1ed1 <balancer_ingress+0x1ed1>
    13da:	66 41 c1 c7 08       	rol    $0x8,%r15w
    13df:	45 31 fc             	xor    %r15d,%r12d
    13e2:	41 c1 e4 10          	shl    $0x10,%r12d
    13e6:	41 8d bc 24 ac 10 00 	lea    0x10ac(%r12),%edi
    13ed:	00 
    13ee:	48 b9 00 90 a3 06 81 	movabs $0xffff888106a39000,%rcx
    13f5:	88 ff ff 
  memcpy(new_eth->h_dest, cval->mac, 6);
    13f8:	0f b7 b1 04 01 00 00 	movzwl 0x104(%rcx),%esi
    13ff:	66 89 70 04          	mov    %si,0x4(%rax)
    1403:	8b 89 00 01 00 00    	mov    0x100(%rcx),%ecx
    1409:	89 08                	mov    %ecx,(%rax)
  memcpy(new_eth->h_source, old_eth->h_dest, 6);
    140b:	8b 48 14             	mov    0x14(%rax),%ecx
    140e:	89 48 06             	mov    %ecx,0x6(%rax)
    1411:	0f b7 48 18          	movzwl 0x18(%rax),%ecx
    1415:	66 89 48 0a          	mov    %cx,0xa(%rax)
  new_eth->h_proto = BE_ETH_P_IP;
    1419:	66 c7 40 0c 08 00    	movw   $0x8,0xc(%rax)
  create_v4_hdr(iph, pckt->tos, ip_src, dst->dst, pkt_bytes, IPPROTO_IPIP);
    141f:	8a 54 24 3d          	mov    0x3d(%rsp),%dl
    1423:	41 8b 0e             	mov    (%r14),%ecx
    __u32 daddr,
    __u16 pkt_bytes,
    __u8 proto) {
  __u64 csum = 0;
  iph->version = 4;
  iph->ihl = 5;
    1426:	c6 40 0e 45          	movb   $0x45,0xe(%rax)
  iph->frag_off = 0;
  iph->protocol = proto;
  iph->check = 0;
#ifdef COPY_INNER_PACKET_TOS
  iph->tos = tos;
    142a:	88 50 0f             	mov    %dl,0xf(%rax)
#else
  iph->tos = DEFAULT_TOS;
#endif
  iph->tot_len = bpf_htons(pkt_bytes + sizeof(struct iphdr));
    142d:	83 c3 14             	add    $0x14,%ebx
    1430:	66 c1 c3 08          	rol    $0x8,%bx
    1434:	66 89 58 10          	mov    %bx,0x10(%rax)
  iph->id = 0;
    1438:	c7 40 12 00 00 00 00 	movl   $0x0,0x12(%rax)
  iph->daddr = daddr;
    143f:	89 48 1e             	mov    %ecx,0x1e(%rax)
  iph->saddr = saddr;
    1442:	89 78 1a             	mov    %edi,0x1a(%rax)
  iph->ttl = DEFAULT_TTL;
    1445:	66 c7 40 16 40 04    	movw   $0x440,0x16(%rax)
    144b:	0f b7 50 0e          	movzwl 0xe(%rax),%edx
    144f:	0f b7 f3             	movzwl %bx,%esi
    1452:	0f b7 78 16          	movzwl 0x16(%rax),%edi
    1456:	41 c1 ec 10          	shr    $0x10,%r12d
    145a:	49 01 f4             	add    %rsi,%r12
    145d:	0f b7 f1             	movzwl %cx,%esi
    1460:	4c 01 e6             	add    %r12,%rsi
    1463:	e9 5e 07 00 00       	jmp    1bc6 <balancer_ingress+0x1bc6>
      if (pckt.flow.proto == IPPROTO_TCP) {
    1468:	80 7c 24 34 06       	cmpb   $0x6,0x34(%rsp)
    146d:	75 2b                	jne    149a <balancer_ingress+0x149a>
            bpf_map_lookup_elem(&stats, &lru_stats_key);
    146f:	49 8b 84 24 08 11 00 	mov    0x1108(%r12),%rax
    1476:	00 
    1477:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
    147e:	79 92 
        if (!lru_stats) {
    1480:	48 85 c0             	test   %rax,%rax
    1483:	0f 84 43 0a 00 00    	je     1ecc <balancer_ingress+0x1ecc>
        if (pckt.flags & F_SYN_SET) {
    1489:	8b 4c 24 3c          	mov    0x3c(%rsp),%ecx
    148d:	c1 e1 02             	shl    $0x2,%ecx
    1490:	f7 d1                	not    %ecx
    1492:	83 e1 08             	and    $0x8,%ecx
    1495:	48 83 04 08 01       	addq   $0x1,(%rax,%rcx,1)
  struct real_pos_lru new_dst_lru = {};
    149a:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
    14a1:	00 00 
    14a3:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
    14aa:	00 00 
      bpf_map_lookup_elem(&stats, &conn_rate_key);
    14ac:	49 8b 9c 24 10 11 00 	mov    0x1110(%r12),%rbx
    14b3:	00 
    14b4:	65 48 03 1c 25 28 50 	add    %gs:0xffffffff92795028,%rbx
    14bb:	79 92 
    14bd:	41 b6 01             	mov    $0x1,%r14b
  if (!conn_rate_stats) {
    14c0:	48 85 db             	test   %rbx,%rbx
    14c3:	74 26                	je     14eb <balancer_ingress+0x14eb>
    14c5:	48 c7 c0 30 d6 a9 8c 	mov    $0xffffffff8ca9d630,%rax
  *cur_time = bpf_ktime_get_ns();
    14cc:	ff d0                	call   *%rax
  if ((*cur_time - conn_rate_stats->v2) > ONE_SEC) {
    14ce:	48 89 c1             	mov    %rax,%rcx
    14d1:	48 2b 4b 08          	sub    0x8(%rbx),%rcx
    14d5:	48 81 f9 01 ca 9a 3b 	cmp    $0x3b9aca01,%rcx
    14dc:	72 11                	jb     14ef <balancer_ingress+0x14ef>
    conn_rate_stats->v1 = 1;
    14de:	48 c7 03 01 00 00 00 	movq   $0x1,(%rbx)
    conn_rate_stats->v2 = *cur_time;
    14e5:	48 89 43 08          	mov    %rax,0x8(%rbx)
    14e9:	eb 17                	jmp    1502 <balancer_ingress+0x1502>
    14eb:	31 c0                	xor    %eax,%eax
    14ed:	eb 16                	jmp    1505 <balancer_ingress+0x1505>
    conn_rate_stats->v1 += 1;
    14ef:	48 8b 0b             	mov    (%rbx),%rcx
    14f2:	48 83 c1 01          	add    $0x1,%rcx
    14f6:	48 89 0b             	mov    %rcx,(%rbx)
    if (conn_rate_stats->v1 > MAX_CONN_RATE) {
    14f9:	48 81 f9 48 e8 01 00 	cmp    $0x1e848,%rcx
    1500:	77 03                	ja     1505 <balancer_ingress+0x1505>
    1502:	45 31 f6             	xor    %r14d,%r14d
    1505:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    if (vip_info->flags & F_HASH_DPORT_ONLY) {
    150a:	f6 01 08             	testb  $0x8,(%rcx)
    150d:	75 0b                	jne    151a <balancer_ingress+0x151a>
    150f:	ba f7 c0 ad e0       	mov    $0xe0adc0f7,%edx
    1514:	03 54 24 10          	add    0x10(%rsp),%edx
    1518:	eb 21                	jmp    153b <balancer_ingress+0x153b>
      pckt->flow.port16[0] = pckt->flow.port16[1];
    151a:	0f b7 4c 24 32       	movzwl 0x32(%rsp),%ecx
    151f:	66 89 4c 24 30       	mov    %cx,0x30(%rsp)
      memset(pckt->flow.srcv6, 0, 16);
    1524:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
    152b:	00 00 
    152d:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
    1534:	00 00 
    1536:	ba f7 c0 ad e0       	mov    $0xe0adc0f7,%edx
    153b:	be f7 c0 ad e0       	mov    $0xe0adc0f7,%esi
  return c;
}

static inline u32 __jhash_nwords(u32 a, u32 b, u32 c, u32 initval) {
  a += initval;
  b += initval;
    1540:	03 74 24 30          	add    0x30(%rsp),%esi
  c += initval;
  __jhash_final(a, b, c);
    1544:	89 f1                	mov    %esi,%ecx
    1546:	81 f1 f7 c0 ad e0    	xor    $0xe0adc0f7,%ecx
  return (word << shift) | (word >> ((-shift) & 31));
    154c:	89 f7                	mov    %esi,%edi
    154e:	c1 c7 0e             	rol    $0xe,%edi
  __jhash_final(a, b, c);
    1551:	29 f9                	sub    %edi,%ecx
    1553:	31 ca                	xor    %ecx,%edx
  return (word << shift) | (word >> ((-shift) & 31));
    1555:	89 cf                	mov    %ecx,%edi
    1557:	c1 c7 0b             	rol    $0xb,%edi
  __jhash_final(a, b, c);
    155a:	29 fa                	sub    %edi,%edx
    155c:	31 d6                	xor    %edx,%esi
  return (word << shift) | (word >> ((-shift) & 31));
    155e:	89 d7                	mov    %edx,%edi
    1560:	c1 c7 19             	rol    $0x19,%edi
  __jhash_final(a, b, c);
    1563:	29 fe                	sub    %edi,%esi
    1565:	31 f1                	xor    %esi,%ecx
  return (word << shift) | (word >> ((-shift) & 31));
    1567:	89 f7                	mov    %esi,%edi
    1569:	c1 c7 10             	rol    $0x10,%edi
  __jhash_final(a, b, c);
    156c:	29 f9                	sub    %edi,%ecx
    156e:	31 ca                	xor    %ecx,%edx
  return (word << shift) | (word >> ((-shift) & 31));
    1570:	89 cf                	mov    %ecx,%edi
    1572:	c1 c7 04             	rol    $0x4,%edi
  __jhash_final(a, b, c);
    1575:	29 fa                	sub    %edi,%edx
    1577:	31 d6                	xor    %edx,%esi
  return (word << shift) | (word >> ((-shift) & 31));
    1579:	c1 c2 0e             	rol    $0xe,%edx
  __jhash_final(a, b, c);
    157c:	29 d6                	sub    %edx,%esi
    157e:	31 f1                	xor    %esi,%ecx
  return (word << shift) | (word >> ((-shift) & 31));
    1580:	c1 c6 18             	rol    $0x18,%esi
  __jhash_final(a, b, c);
    1583:	29 f1                	sub    %esi,%ecx
    1585:	ba 01 00 ff ff       	mov    $0xffff0001,%edx
    hash = get_packet_hash(pckt, hash_16bytes) % RING_SIZE;
    158a:	48 0f af d1          	imul   %rcx,%rdx
    158e:	48 c1 ea 30          	shr    $0x30,%rdx
    1592:	89 d6                	mov    %edx,%esi
    1594:	c1 e6 10             	shl    $0x10,%esi
    1597:	09 d6                	or     %edx,%esi
    1599:	29 f1                	sub    %esi,%ecx
    159b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    key = RING_SIZE * (vip_info->vip_num) + hash;
    15a0:	8b 72 04             	mov    0x4(%rdx),%esi
    15a3:	89 f2                	mov    %esi,%edx
    15a5:	c1 e2 10             	shl    $0x10,%edx
    15a8:	01 f2                	add    %esi,%edx
    15aa:	01 ca                	add    %ecx,%edx
    real_pos = bpf_map_lookup_elem(&ch_rings, &key);
    15ac:	81 fa ff 01 00 02    	cmp    $0x20001ff,%edx
    if (!real_pos) {
    15b2:	0f 87 14 09 00 00    	ja     1ecc <balancer_ingress+0x1ecc>
    real_pos = bpf_map_lookup_elem(&ch_rings, &key);
    15b8:	89 d1                	mov    %edx,%ecx
    15ba:	48 ba 00 50 88 22 00 	movabs $0xffffc90022885000,%rdx
    15c1:	c9 ff ff 
    key = *real_pos;
    15c4:	8b 9c ca 00 01 00 00 	mov    0x100(%rdx,%rcx,8),%ebx
    15cb:	48 85 db             	test   %rbx,%rbx
    if (key == 0) {
    15ce:	74 2b                	je     15fb <balancer_ingress+0x15fb>
  pckt->real_index = key;
    15d0:	89 5c 24 38          	mov    %ebx,0x38(%rsp)
  *real = bpf_map_lookup_elem(&reals, &key);
    15d4:	81 fb 00 10 00 00    	cmp    $0x1000,%ebx
  if (!(*real)) {
    15da:	72 3e                	jb     161a <balancer_ingress+0x161a>
      bpf_map_lookup_elem(&stats, &ch_drop_stats_key);
    15dc:	49 8b 84 24 48 11 00 	mov    0x1148(%r12),%rax
    15e3:	00 
    15e4:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
    15eb:	79 92 
  if (!ch_drop_stats) {
    15ed:	48 85 c0             	test   %rax,%rax
    15f0:	0f 85 d2 08 00 00    	jne    1ec8 <balancer_ingress+0x1ec8>
    15f6:	e9 d1 08 00 00       	jmp    1ecc <balancer_ingress+0x1ecc>
      bpf_map_lookup_elem(&stats, &ch_drop_stats_key);
    15fb:	49 8b 84 24 48 11 00 	mov    0x1148(%r12),%rax
    1602:	00 
    1603:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
    160a:	79 92 
  if (!ch_drop_stats) {
    160c:	48 85 c0             	test   %rax,%rax
    160f:	0f 85 af 08 00 00    	jne    1ec4 <balancer_ingress+0x1ec4>
    1615:	e9 b2 08 00 00       	jmp    1ecc <balancer_ingress+0x1ecc>
  if (lru_map && !(vip_info->flags & F_LRU_BYPASS) && !under_flood) {
    161a:	48 83 7c 24 70 00    	cmpq   $0x0,0x70(%rsp)
    1620:	74 15                	je     1637 <balancer_ingress+0x1637>
    1622:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    1627:	8a 09                	mov    (%rcx),%cl
    1629:	80 e1 02             	and    $0x2,%cl
    162c:	d0 e9                	shr    %cl
    162e:	41 08 ce             	or     %cl,%r14b
    1631:	0f 84 33 01 00 00    	je     176a <balancer_ingress+0x176a>
    1637:	41 89 d8             	mov    %ebx,%r8d
    163a:	e9 5a 01 00 00       	jmp    1799 <balancer_ingress+0x1799>
    163f:	48 c7 c0 20 5c c3 8e 	mov    $0xffffffff8ec35c20,%rax
  if (XDP_ADJUST_HEAD_FUNC(xdp, 0 - (int)sizeof(struct ipv6hdr))) {
    1646:	4c 89 ef             	mov    %r13,%rdi
    1649:	be d8 ff ff ff       	mov    $0xffffffd8,%esi
    164e:	ff d0                	call   *%rax
    1650:	85 c0                	test   %eax,%eax
    1652:	0f 85 74 08 00 00    	jne    1ecc <balancer_ingress+0x1ecc>
  data = (void*)(long)xdp->data;
    1658:	49 8b 45 00          	mov    0x0(%r13),%rax
  data_end = (void*)(long)xdp->data_end;
    165c:	49 8b 4d 08          	mov    0x8(%r13),%rcx
  ip6h = data + sizeof(struct ethhdr);
    1660:	48 8d 50 0e          	lea    0xe(%rax),%rdx
  if (new_eth + 1 > data_end || old_eth + 1 > data_end || ip6h + 1 > data_end) {
    1664:	48 39 ca             	cmp    %rcx,%rdx
    1667:	0f 87 5f 08 00 00    	ja     1ecc <balancer_ingress+0x1ecc>
    166d:	48 8d 50 36          	lea    0x36(%rax),%rdx
    1671:	bd 01 00 00 00       	mov    $0x1,%ebp
    1676:	48 39 ca             	cmp    %rcx,%rdx
    1679:	0f b7 74 24 54       	movzwl 0x54(%rsp),%esi
    167e:	0f 87 4d 08 00 00    	ja     1ed1 <balancer_ingress+0x1ed1>
    1684:	48 b9 00 90 a3 06 81 	movabs $0xffff888106a39000,%rcx
    168b:	88 ff ff 
  memcpy(new_eth->h_dest, cval->mac, 6);
    168e:	0f b7 91 04 01 00 00 	movzwl 0x104(%rcx),%edx
    1695:	66 89 50 04          	mov    %dx,0x4(%rax)
    1699:	8b 89 00 01 00 00    	mov    0x100(%rcx),%ecx
    169f:	89 08                	mov    %ecx,(%rax)
  memcpy(new_eth->h_source, old_eth->h_dest, 6);
    16a1:	8b 48 28             	mov    0x28(%rax),%ecx
    16a4:	89 48 06             	mov    %ecx,0x6(%rax)
    16a7:	0f b7 48 2c          	movzwl 0x2c(%rax),%ecx
    16ab:	66 89 48 0a          	mov    %cx,0xa(%rax)
  new_eth->h_proto = BE_ETH_P_IPV6;
    16af:	66 c7 40 0c 86 dd    	movw   $0xdd86,0xc(%rax)
    16b5:	0f b7 4c 24 30       	movzwl 0x30(%rsp),%ecx
  saddr[3] = src ^ port;
    16ba:	33 4c 24 10          	xor    0x10(%rsp),%ecx
  create_v6_hdr(ip6h, pckt->tos, saddr, dst->dstv6, payload_len, proto);
    16be:	8a 5c 24 3d          	mov    0x3d(%rsp),%bl
    __u32* saddr,
    __u32* daddr,
    __u16 payload_len,
    __u8 proto) {
  ip6h->version = 6;
  memset(ip6h->flow_lbl, 0, sizeof(ip6h->flow_lbl));
    16c2:	66 c7 40 10 00 00    	movw   $0x0,0x10(%rax)
#ifdef COPY_INNER_PACKET_TOS
  ip6h->priority = (tc & 0xF0) >> 4;
    16c8:	89 da                	mov    %ebx,%edx
    16ca:	c0 ea 04             	shr    $0x4,%dl
    16cd:	80 ca 60             	or     $0x60,%dl
    16d0:	88 50 0e             	mov    %dl,0xe(%rax)
  ip6h->flow_lbl[0] = (tc & 0x0F) << 4;
    16d3:	c0 e3 04             	shl    $0x4,%bl
    16d6:	88 58 0f             	mov    %bl,0xf(%rax)
#else
  ip6h->priority = DEFAULT_TOS;
#endif
  ip6h->nexthdr = proto;
    16d9:	66 c7 40 14 04 40    	movw   $0x4004,0x14(%rax)
  ip6h->payload_len = bpf_htons(payload_len);
    16df:	66 89 70 12          	mov    %si,0x12(%rax)
  ip6h->hop_limit = DEFAULT_TTL;
  memcpy(ip6h->saddr.s6_addr32, saddr, 16);
    16e3:	48 c7 40 16 01 00 00 	movq   $0x1,0x16(%rax)
    16ea:	00 
    16eb:	c7 40 1e 00 00 00 00 	movl   $0x0,0x1e(%rax)
    16f2:	89 48 22             	mov    %ecx,0x22(%rax)
    16f5:	e9 ba 08 00 00       	jmp    1fb4 <balancer_ingress+0x1fb4>
        (connId[1] << 24) | (connId[2] << 16) | (connId[3] << 8) | (connId[4]);
    16fa:	0f b6 48 01          	movzbl 0x1(%rax),%ecx
    16fe:	48 c1 e1 18          	shl    $0x18,%rcx
    1702:	0f b6 50 02          	movzbl 0x2(%rax),%edx
    1706:	48 c1 e2 10          	shl    $0x10,%rdx
    170a:	48 09 ca             	or     %rcx,%rdx
    170d:	0f b6 48 03          	movzbl 0x3(%rax),%ecx
    1711:	48 c1 e1 08          	shl    $0x8,%rcx
    1715:	48 09 d1             	or     %rdx,%rcx
    1718:	8a 40 04             	mov    0x4(%rax),%al
    171b:	b2 03                	mov    $0x3,%dl
    171d:	eb 18                	jmp    1737 <balancer_ingress+0x1737>
    result.server_id = (connId[1] << 16) | (connId[2] << 8) | (connId[3]);
    171f:	0f b6 50 01          	movzbl 0x1(%rax),%edx
    1723:	48 c1 e2 10          	shl    $0x10,%rdx
    1727:	0f b6 48 02          	movzbl 0x2(%rax),%ecx
    172b:	48 c1 e1 08          	shl    $0x8,%rcx
    172f:	48 09 d1             	or     %rdx,%rcx
    1732:	8a 40 03             	mov    0x3(%rax),%al
    1735:	b2 02                	mov    $0x2,%dl
    1737:	0f b6 c0             	movzbl %al,%eax
    173a:	48 09 c8             	or     %rcx,%rax
      if (qpr.server_id > 0) {
    173d:	85 c0                	test   %eax,%eax
    173f:	0f 8e a7 01 00 00    	jle    18ec <balancer_ingress+0x18ec>
  if (cid_version == QUIC_CONNID_VERSION_V1) {
    1745:	80 fa 01             	cmp    $0x1,%dl
    1748:	0f 84 f9 00 00 00    	je     1847 <balancer_ingress+0x1847>
    174e:	80 fa 03             	cmp    $0x3,%dl
    1751:	0f 84 f7 00 00 00    	je     184e <balancer_ingress+0x184e>
    1757:	80 fa 02             	cmp    $0x2,%dl
    175a:	0f 85 f5 00 00 00    	jne    1855 <balancer_ingress+0x1855>
    1760:	b9 40 00 00 00       	mov    $0x40,%ecx
    1765:	e9 f0 00 00 00       	jmp    185a <balancer_ingress+0x185a>
    if (pckt->flow.proto == IPPROTO_UDP) {
    176a:	80 7c 24 34 11       	cmpb   $0x11,0x34(%rsp)
    176f:	75 05                	jne    1776 <balancer_ingress+0x1776>
      new_dst_lru.atime = cur_time;
    1771:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    new_dst_lru.pos = key;
    1776:	89 5c 24 40          	mov    %ebx,0x40(%rsp)
    177a:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
    177f:	48 8d 54 24 40       	lea    0x40(%rsp),%rdx
    1784:	48 c7 c0 c0 c9 a9 8c 	mov    $0xffffffff8ca9c9c0,%rax
    178b:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
    bpf_map_update_elem(lru_map, &pckt->flow, &new_dst_lru, BPF_ANY);
    1790:	31 c9                	xor    %ecx,%ecx
    1792:	ff d0                	call   *%rax
      if (update_vip_lru_miss_stats(&vip, &pckt, vip_info, is_ipv6) >= 0) {
    1794:	44 8b 44 24 38       	mov    0x38(%rsp),%r8d
    1799:	48 bf 00 98 a3 06 81 	movabs $0xffff888106a39800,%rdi
    17a0:	88 ff ff 
    17a3:	8b 87 00 01 00 00    	mov    0x100(%rdi),%eax
  bool port_match = lru_miss_stat_vip->port == vip->port;
    17a9:	0f b7 97 10 01 00 00 	movzwl 0x110(%rdi),%edx
    17b0:	0f b7 74 24 68       	movzwl 0x68(%rsp),%esi
  bool proto_match = lru_miss_stat_vip->proto = vip->proto;
    17b5:	8a 4c 24 6a          	mov    0x6a(%rsp),%cl
    17b9:	88 8f 12 01 00 00    	mov    %cl,0x112(%rdi)
    17bf:	3b 44 24 58          	cmp    0x58(%rsp),%eax
  bool vip_match = address_match && port_match && proto_match;
    17c3:	75 40                	jne    1805 <balancer_ingress+0x1805>
    17c5:	66 39 f2             	cmp    %si,%dx
    17c8:	75 3b                	jne    1805 <balancer_ingress+0x1805>
    17ca:	84 c9                	test   %cl,%cl
    17cc:	74 37                	je     1805 <balancer_ingress+0x1805>
    __u32* lru_miss_stat = bpf_map_lookup_elem(&lru_miss_stats, &lru_stats_key);
    17ce:	41 81 f8 ff 0f 00 00 	cmp    $0xfff,%r8d
    17d5:	0f 87 f1 06 00 00    	ja     1ecc <balancer_ingress+0x1ecc>
    17db:	44 89 c0             	mov    %r8d,%eax
    17de:	48 b9 00 b0 57 08 00 	movabs $0xffffc9000857b000,%rcx
    17e5:	c9 ff ff 
    17e8:	48 8b 84 c1 00 01 00 	mov    0x100(%rcx,%rax,8),%rax
    17ef:	00 
    17f0:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
    17f7:	79 92 
    if (!lru_miss_stat) {
    17f9:	48 85 c0             	test   %rax,%rax
    17fc:	0f 84 ca 06 00 00    	je     1ecc <balancer_ingress+0x1ecc>
    *lru_miss_stat += 1;
    1802:	83 00 01             	addl   $0x1,(%rax)
    1805:	48 8d 04 5b          	lea    (%rbx,%rbx,2),%rax
    1809:	48 b9 00 30 6d 08 00 	movabs $0xffffc900086d3000,%rcx
    1810:	c9 ff ff 
    1813:	4c 8d 34 c1          	lea    (%rcx,%rax,8),%r14
    1817:	49 81 c6 00 01 00 00 	add    $0x100,%r14
      data_stats->v2 += 1;
    181e:	48 83 45 08 01       	addq   $0x1,0x8(%rbp)
    1823:	e9 db fa ff ff       	jmp    1303 <balancer_ingress+0x1303>
    if (long_header->conn_id_lens < QUIC_MIN_CONNID_LEN) {
    1828:	80 7b 05 08          	cmpb   $0x8,0x5(%rbx)
    182c:	0f 82 b5 f7 ff ff    	jb     fe7 <balancer_ingress+0xfe7>
    1832:	48 83 c3 06          	add    $0x6,%rbx
    1836:	48 89 d8             	mov    %rbx,%rax
  if (!connId) {
    1839:	48 85 c0             	test   %rax,%rax
    183c:	0f 85 ce f8 ff ff    	jne    1110 <balancer_ingress+0x1110>
    1842:	e9 a0 f7 ff ff       	jmp    fe7 <balancer_ingress+0xfe7>
    1847:	b9 38 00 00 00       	mov    $0x38,%ecx
    184c:	eb 0c                	jmp    185a <balancer_ingress+0x185a>
    184e:	b9 48 00 00 00       	mov    $0x48,%ecx
    1853:	eb 05                	jmp    185a <balancer_ingress+0x185a>
    1855:	b9 30 00 00 00       	mov    $0x30,%ecx
    185a:	48 83 44 0d 00 01    	addq   $0x1,0x0(%rbp,%rcx,1)
        __u32* real_pos = bpf_map_lookup_elem(&server_id_map, &key);
    1860:	3d fd ff ff 00       	cmp    $0xfffffd,%eax
        if (real_pos) {
    1865:	77 7a                	ja     18e1 <balancer_ingress+0x18e1>
    1867:	48 b9 00 d0 6e 08 00 	movabs $0xffffc900086ed000,%rcx
    186e:	c9 ff ff 
          key = *real_pos;
    1871:	8b 8c c1 00 01 00 00 	mov    0x100(%rcx,%rax,8),%ecx
    1878:	48 85 c9             	test   %rcx,%rcx
          if (key == 0) {
    187b:	74 64                	je     18e1 <balancer_ingress+0x18e1>
            pckt.real_index = key;
    187d:	89 4c 24 38          	mov    %ecx,0x38(%rsp)
    1881:	45 31 f6             	xor    %r14d,%r14d
            dst = bpf_map_lookup_elem(&reals, &key);
    1884:	81 f9 00 10 00 00    	cmp    $0x1000,%ecx
    188a:	48 8d 04 49          	lea    (%rcx,%rcx,2),%rax
    188e:	48 b9 00 30 6d 08 00 	movabs $0xffffc900086d3000,%rcx
    1895:	c9 ff ff 
    1898:	48 8d 84 c1 00 01 00 	lea    0x100(%rcx,%rax,8),%rax
    189f:	00 
    18a0:	4c 0f 42 f0          	cmovb  %rax,%r14
            if (!dst) {
    18a4:	4d 85 f6             	test   %r14,%r14
    18a7:	0f 84 80 08 00 00    	je     212d <balancer_ingress+0x212d>
    18ad:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
    18b2:	48 c7 c0 30 c9 a9 8c 	mov    $0xffffffff8ca9c930,%rax
    18b9:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  struct real_pos_lru* dst_lru = real_bpf_map_lookup_elem(lru_map, &pckt->flow);
    18be:	ff d0                	call   *%rax
  if (dst_lru) {
    18c0:	48 85 c0             	test   %rax,%rax
    18c3:	0f 84 6e 08 00 00    	je     2137 <balancer_ingress+0x2137>
    if (dst_lru->pos == pckt->real_index) {
    18c9:	8b 4c 24 38          	mov    0x38(%rsp),%ecx
    18cd:	39 08                	cmp    %ecx,(%rax)
    18cf:	0f 85 60 09 00 00    	jne    2235 <balancer_ingress+0x2235>
              quic_packets_stats->dst_match_in_lru += 1;
    18d5:	48 89 e8             	mov    %rbp,%rax
    18d8:	48 83 c0 50          	add    $0x50,%rax
    18dc:	e9 ed 09 00 00       	jmp    22ce <balancer_ingress+0x22ce>
    18e1:	48 83 45 10 01       	addq   $0x1,0x10(%rbp)
    18e6:	48 98                	cltq
    18e8:	48 89 45 18          	mov    %rax,0x18(%rbp)
    18ec:	48 8b 14 24          	mov    (%rsp),%rdx
    18f0:	48 83 45 00 01       	addq   $0x1,0x0(%rbp)
  original_sport = pckt.flow.port16[0];
    18f5:	0f b7 44 24 30       	movzwl 0x30(%rsp),%eax
    18fa:	89 44 24 70          	mov    %eax,0x70(%rsp)
    if (!dst && !(pckt.flags & F_SYN_SET) &&
    18fe:	f6 44 24 3c 02       	testb  $0x2,0x3c(%rsp)
    1903:	75 51                	jne    1956 <balancer_ingress+0x1956>
        !(vip_info->flags & F_LRU_BYPASS)) {
    1905:	f6 07 02             	testb  $0x2,(%rdi)
    if (!dst && !(pckt.flags & F_SYN_SET) &&
    1908:	75 4c                	jne    1956 <balancer_ingress+0x1956>
    190a:	49 89 ff             	mov    %rdi,%r15
    190d:	48 89 d3             	mov    %rdx,%rbx
    1910:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
    1915:	48 c7 c0 30 c9 a9 8c 	mov    $0xffffffff8ca9c930,%rax
    191c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  dst_lru = real_bpf_map_lookup_elem(lru_map, &pckt->flow);
    1921:	ff d0                	call   *%rax
  if (!dst_lru) {
    1923:	48 85 c0             	test   %rax,%rax
    1926:	74 29                	je     1951 <balancer_ingress+0x1951>
    1928:	48 89 c5             	mov    %rax,%rbp
  if (!isGlobalLru && pckt->flow.proto == IPPROTO_UDP) {
    192b:	80 7c 24 34 11       	cmpb   $0x11,0x34(%rsp)
    1930:	75 2d                	jne    195f <balancer_ingress+0x195f>
    1932:	48 c7 c0 30 d6 a9 8c 	mov    $0xffffffff8ca9d630,%rax
    cur_time = bpf_ktime_get_ns();
    1939:	ff d0                	call   *%rax
    if (cur_time - dst_lru->atime > LRU_UDP_TIMEOUT) {
    193b:	48 89 c1             	mov    %rax,%rcx
    193e:	48 2b 4d 08          	sub    0x8(%rbp),%rcx
    1942:	48 ba 00 ac 23 fc 06 	movabs $0x6fc23ac00,%rdx
    1949:	00 00 00 
    194c:	48 39 d1             	cmp    %rdx,%rcx
    194f:	76 0a                	jbe    195b <balancer_ingress+0x195b>
    1951:	45 31 f6             	xor    %r14d,%r14d
    1954:	eb 33                	jmp    1989 <balancer_ingress+0x1989>
    1956:	45 31 f6             	xor    %r14d,%r14d
    1959:	eb 34                	jmp    198f <balancer_ingress+0x198f>
    dst_lru->atime = cur_time;
    195b:	48 89 45 08          	mov    %rax,0x8(%rbp)
  key = dst_lru->pos;
    195f:	8b 45 00             	mov    0x0(%rbp),%eax
    1962:	45 31 f6             	xor    %r14d,%r14d
    1965:	48 3d 00 10 00 00    	cmp    $0x1000,%rax
  pckt->real_index = key;
    196b:	89 44 24 38          	mov    %eax,0x38(%rsp)
  *real = bpf_map_lookup_elem(&reals, &key);
    196f:	48 8d 04 40          	lea    (%rax,%rax,2),%rax
    1973:	48 b9 00 30 6d 08 00 	movabs $0xffffc900086d3000,%rcx
    197a:	c9 ff ff 
    197d:	48 8d 84 c1 00 01 00 	lea    0x100(%rcx,%rax,8),%rax
    1984:	00 
    1985:	4c 0f 42 f0          	cmovb  %rax,%r14
    1989:	48 89 da             	mov    %rbx,%rdx
    198c:	4c 89 ff             	mov    %r15,%rdi
  if (dst && pckt->flow.proto == IPPROTO_UDP &&
    198f:	80 7c 24 34 11       	cmpb   $0x11,0x34(%rsp)
    1994:	0f 85 c6 00 00 00    	jne    1a60 <balancer_ingress+0x1a60>
      vip_info->flags & F_UDP_FLOW_MIGRATION && !is_under_flood(&cur_time)) {
    199a:	f6 47 01 02          	testb  $0x2,0x1(%rdi)
    199e:	0f 84 bc 00 00 00    	je     1a60 <balancer_ingress+0x1a60>
      bpf_map_lookup_elem(&stats, &conn_rate_key);
    19a4:	49 8b ac 24 10 11 00 	mov    0x1110(%r12),%rbp
    19ab:	00 
    19ac:	65 48 03 2c 25 28 50 	add    %gs:0xffffffff92795028,%rbp
    19b3:	79 92 
  if (!conn_rate_stats) {
    19b5:	48 85 ed             	test   %rbp,%rbp
    19b8:	0f 84 a2 00 00 00    	je     1a60 <balancer_ingress+0x1a60>
    19be:	49 89 ff             	mov    %rdi,%r15
    19c1:	48 89 d3             	mov    %rdx,%rbx
    19c4:	48 c7 c0 30 d6 a9 8c 	mov    $0xffffffff8ca9d630,%rax
  *cur_time = bpf_ktime_get_ns();
    19cb:	ff d0                	call   *%rax
  if ((*cur_time - conn_rate_stats->v2) > ONE_SEC) {
    19cd:	48 89 c1             	mov    %rax,%rcx
    19d0:	48 2b 4d 08          	sub    0x8(%rbp),%rcx
    19d4:	48 81 f9 01 ca 9a 3b 	cmp    $0x3b9aca01,%rcx
    19db:	72 0e                	jb     19eb <balancer_ingress+0x19eb>
    conn_rate_stats->v1 = 1;
    19dd:	48 c7 45 00 01 00 00 	movq   $0x1,0x0(%rbp)
    19e4:	00 
    conn_rate_stats->v2 = *cur_time;
    19e5:	48 89 45 08          	mov    %rax,0x8(%rbp)
    19e9:	eb 1a                	jmp    1a05 <balancer_ingress+0x1a05>
    conn_rate_stats->v1 += 1;
    19eb:	48 8b 45 00          	mov    0x0(%rbp),%rax
    19ef:	48 83 c0 01          	add    $0x1,%rax
    19f3:	48 89 45 00          	mov    %rax,0x0(%rbp)
    if (conn_rate_stats->v1 > MAX_CONN_RATE) {
    19f7:	48 3d 48 e8 01 00    	cmp    $0x1e848,%rax
    19fd:	48 89 da             	mov    %rbx,%rdx
    1a00:	4c 89 ff             	mov    %r15,%rdi
    1a03:	77 5b                	ja     1a60 <balancer_ingress+0x1a60>
    void* down_reals_map = bpf_map_lookup_elem(&vip_to_down_reals_map, vip);
    1a05:	48 bf 00 f0 6a 01 81 	movabs $0xffff8881016af000,%rdi
    1a0c:	88 ff ff 
    1a0f:	48 8d 74 24 58       	lea    0x58(%rsp),%rsi
    1a14:	48 c7 c5 30 c9 a9 8c 	mov    $0xffffffff8ca9c930,%rbp
    1a1b:	ff d5                	call   *%rbp
    1a1d:	4c 89 ff             	mov    %r15,%rdi
    1a20:	48 89 da             	mov    %rbx,%rdx
    if (down_reals_map) {
    1a23:	48 85 c0             	test   %rax,%rax
    1a26:	74 38                	je     1a60 <balancer_ingress+0x1a60>
      void* down_real = real_bpf_map_lookup_elem(down_reals_map, &pckt->real_index);
    1a28:	48 8d 74 24 38       	lea    0x38(%rsp),%rsi
    1a2d:	48 89 c7             	mov    %rax,%rdi
    1a30:	ff d5                	call   *%rbp
    1a32:	4c 89 ff             	mov    %r15,%rdi
    1a35:	48 89 da             	mov    %rbx,%rdx
      if (down_real) {
    1a38:	48 85 c0             	test   %rax,%rax
    1a3b:	74 23                	je     1a60 <balancer_ingress+0x1a60>
        struct lb_stats* stats_data = bpf_map_lookup_elem(&stats, &stats_key);
    1a3d:	49 8b 84 24 78 11 00 	mov    0x1178(%r12),%rax
    1a44:	00 
    1a45:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
    1a4c:	79 92 
        if (stats_data) {
    1a4e:	48 85 c0             	test   %rax,%rax
    1a51:	0f 84 ec 01 00 00    	je     1c43 <balancer_ingress+0x1c43>
          stats_data->v1 += 1;
    1a57:	48 83 00 01          	addq   $0x1,(%rax)
    1a5b:	e9 e3 01 00 00       	jmp    1c43 <balancer_ingress+0x1c43>
    if (!dst) {
    1a60:	4d 85 f6             	test   %r14,%r14
    1a63:	0f 84 da 01 00 00    	je     1c43 <balancer_ingress+0x1c43>
  data_stats = bpf_map_lookup_elem(&stats, &vip_num);
    1a69:	81 fa ff 03 00 00    	cmp    $0x3ff,%edx
    1a6f:	0f 87 57 04 00 00    	ja     1ecc <balancer_ingress+0x1ecc>
    1a75:	49 8b 8c d4 00 01 00 	mov    0x100(%r12,%rdx,8),%rcx
    1a7c:	00 
    1a7d:	65 48 03 0c 25 28 50 	add    %gs:0xffffffff92795028,%rcx
    1a84:	79 92 
  if (!data_stats) {
    1a86:	48 85 c9             	test   %rcx,%rcx
    1a89:	0f 84 3d 04 00 00    	je     1ecc <balancer_ingress+0x1ecc>
    1a8f:	8b 44 24 54          	mov    0x54(%rsp),%eax
    1a93:	66 c1 c0 08          	rol    $0x8,%ax
  data_stats->v1 += 1;
    1a97:	48 83 01 01          	addq   $0x1,(%rcx)
    1a9b:	41 89 c4             	mov    %eax,%r12d
  data_stats->v2 += pkt_bytes;
    1a9e:	0f b7 c0             	movzwl %ax,%eax
    1aa1:	48 01 41 08          	add    %rax,0x8(%rcx)
  data_stats = bpf_map_lookup_elem(&reals_stats, &pckt.real_index);
    1aa5:	8b 4c 24 38          	mov    0x38(%rsp),%ecx
    1aa9:	48 81 f9 ff 0f 00 00 	cmp    $0xfff,%rcx
    1ab0:	0f 87 16 04 00 00    	ja     1ecc <balancer_ingress+0x1ecc>
    1ab6:	48 ba 00 30 43 08 00 	movabs $0xffffc90008433000,%rdx
    1abd:	c9 ff ff 
    1ac0:	48 8b 8c ca 00 01 00 	mov    0x100(%rdx,%rcx,8),%rcx
    1ac7:	00 
    1ac8:	65 48 03 0c 25 28 50 	add    %gs:0xffffffff92795028,%rcx
    1acf:	79 92 
  if (!data_stats) {
    1ad1:	48 85 c9             	test   %rcx,%rcx
    1ad4:	0f 84 f2 03 00 00    	je     1ecc <balancer_ingress+0x1ecc>
  data_stats->v1 += 1;
    1ada:	48 83 01 01          	addq   $0x1,(%rcx)
  data_stats->v2 += pkt_bytes;
    1ade:	48 01 41 08          	add    %rax,0x8(%rcx)
    1ae2:	8b 44 24 70          	mov    0x70(%rsp),%eax
  pckt.flow.port16[0] = original_sport;
    1ae6:	66 89 44 24 30       	mov    %ax,0x30(%rsp)
  if (dst->flags & F_IPV6) {
    1aeb:	41 f6 46 10 01       	testb  $0x1,0x10(%r14)
    1af0:	0f 85 0f 04 00 00    	jne    1f05 <balancer_ingress+0x1f05>
  __u32 ip_src = create_encap_ipv4_src(pckt->flow.port16[0], pckt->flow.src);
    1af6:	0f b7 5c 24 12       	movzwl 0x12(%rsp),%ebx
    1afb:	48 c7 c0 20 5c c3 8e 	mov    $0xffffffff8ec35c20,%rax
  if (XDP_ADJUST_HEAD_FUNC(xdp, 0 - (int)sizeof(struct iphdr))) {
    1b02:	4c 89 ef             	mov    %r13,%rdi
    1b05:	be ec ff ff ff       	mov    $0xffffffec,%esi
    1b0a:	ff d0                	call   *%rax
    1b0c:	85 c0                	test   %eax,%eax
    1b0e:	0f 85 b8 03 00 00    	jne    1ecc <balancer_ingress+0x1ecc>
  data = (void*)(long)xdp->data;
    1b14:	49 8b 45 00          	mov    0x0(%r13),%rax
  data_end = (void*)(long)xdp->data_end;
    1b18:	49 8b 4d 08          	mov    0x8(%r13),%rcx
  iph = data + sizeof(struct ethhdr);
    1b1c:	48 8d 50 0e          	lea    0xe(%rax),%rdx
  if (new_eth + 1 > data_end || old_eth + 1 > data_end || iph + 1 > data_end) {
    1b20:	48 39 ca             	cmp    %rcx,%rdx
    1b23:	0f 87 a3 03 00 00    	ja     1ecc <balancer_ingress+0x1ecc>
    1b29:	48 8d 50 22          	lea    0x22(%rax),%rdx
    1b2d:	bd 01 00 00 00       	mov    $0x1,%ebp
    1b32:	48 39 ca             	cmp    %rcx,%rdx
    1b35:	0f 87 96 03 00 00    	ja     1ed1 <balancer_ingress+0x1ed1>
    1b3b:	8b 4c 24 70          	mov    0x70(%rsp),%ecx
    1b3f:	66 c1 c1 08          	rol    $0x8,%cx
    1b43:	31 cb                	xor    %ecx,%ebx
    1b45:	c1 e3 10             	shl    $0x10,%ebx
    1b48:	8d bb ac 10 00 00    	lea    0x10ac(%rbx),%edi
    1b4e:	48 b9 00 90 a3 06 81 	movabs $0xffff888106a39000,%rcx
    1b55:	88 ff ff 
  memcpy(new_eth->h_dest, cval->mac, 6);
    1b58:	0f b7 b1 04 01 00 00 	movzwl 0x104(%rcx),%esi
    1b5f:	66 89 70 04          	mov    %si,0x4(%rax)
    1b63:	8b 89 00 01 00 00    	mov    0x100(%rcx),%ecx
    1b69:	89 08                	mov    %ecx,(%rax)
  memcpy(new_eth->h_source, old_eth->h_dest, 6);
    1b6b:	8b 48 14             	mov    0x14(%rax),%ecx
    1b6e:	89 48 06             	mov    %ecx,0x6(%rax)
    1b71:	0f b7 48 18          	movzwl 0x18(%rax),%ecx
    1b75:	66 89 48 0a          	mov    %cx,0xa(%rax)
  new_eth->h_proto = BE_ETH_P_IP;
    1b79:	66 c7 40 0c 08 00    	movw   $0x8,0xc(%rax)
  create_v4_hdr(iph, pckt->tos, ip_src, dst->dst, pkt_bytes, IPPROTO_IPIP);
    1b7f:	8a 54 24 3d          	mov    0x3d(%rsp),%dl
    1b83:	41 8b 0e             	mov    (%r14),%ecx
  iph->ihl = 5;
    1b86:	c6 40 0e 45          	movb   $0x45,0xe(%rax)
  iph->tos = tos;
    1b8a:	88 50 0f             	mov    %dl,0xf(%rax)
  iph->tot_len = bpf_htons(pkt_bytes + sizeof(struct iphdr));
    1b8d:	41 83 c4 14          	add    $0x14,%r12d
    1b91:	66 41 c1 c4 08       	rol    $0x8,%r12w
    1b96:	66 44 89 60 10       	mov    %r12w,0x10(%rax)
  iph->id = 0;
    1b9b:	c7 40 12 00 00 00 00 	movl   $0x0,0x12(%rax)
  iph->daddr = daddr;
    1ba2:	89 48 1e             	mov    %ecx,0x1e(%rax)
  iph->saddr = saddr;
    1ba5:	89 78 1a             	mov    %edi,0x1a(%rax)
  iph->ttl = DEFAULT_TTL;
    1ba8:	66 c7 40 16 40 04    	movw   $0x440,0x16(%rax)
    1bae:	0f b7 50 0e          	movzwl 0xe(%rax),%edx
    1bb2:	41 0f b7 f4          	movzwl %r12w,%esi
    1bb6:	0f b7 78 16          	movzwl 0x16(%rax),%edi
    1bba:	c1 eb 10             	shr    $0x10,%ebx
    1bbd:	48 01 f3             	add    %rsi,%rbx
    1bc0:	0f b7 f1             	movzwl %cx,%esi
    1bc3:	48 01 de             	add    %rbx,%rsi
    1bc6:	48 c1 e9 10          	shr    $0x10,%rcx
    1bca:	48 01 f1             	add    %rsi,%rcx
    1bcd:	48 01 d1             	add    %rdx,%rcx
    1bd0:	48 01 f9             	add    %rdi,%rcx
    1bd3:	48 81 c1 ac 10 00 00 	add    $0x10ac,%rcx
    1bda:	48 89 ca             	mov    %rcx,%rdx
    1bdd:	48 c1 ea 10          	shr    $0x10,%rdx
    1be1:	0f b7 f1             	movzwl %cx,%esi
    1be4:	48 01 d6             	add    %rdx,%rsi
    1be7:	48 81 f9 00 00 01 00 	cmp    $0x10000,%rcx
    1bee:	48 0f 42 f1          	cmovb  %rcx,%rsi
    1bf2:	48 89 f1             	mov    %rsi,%rcx
    1bf5:	48 c1 e9 10          	shr    $0x10,%rcx
    1bf9:	0f b7 d6             	movzwl %si,%edx
    1bfc:	48 01 ca             	add    %rcx,%rdx
    1bff:	48 81 fe 00 00 01 00 	cmp    $0x10000,%rsi
    1c06:	48 0f 42 d6          	cmovb  %rsi,%rdx
    1c0a:	48 89 d1             	mov    %rdx,%rcx
    1c0d:	48 c1 e9 10          	shr    $0x10,%rcx
    1c11:	0f b7 f2             	movzwl %dx,%esi
    1c14:	48 01 ce             	add    %rcx,%rsi
    1c17:	48 81 fa 00 00 01 00 	cmp    $0x10000,%rdx
    1c1e:	48 0f 42 f2          	cmovb  %rdx,%rsi
    1c22:	89 f1                	mov    %esi,%ecx
    1c24:	c1 e9 10             	shr    $0x10,%ecx
    1c27:	48 81 fe 00 00 01 00 	cmp    $0x10000,%rsi
    1c2e:	ba 00 00 01 00       	mov    $0x10000,%edx
    1c33:	0f 43 d1             	cmovae %ecx,%edx
    1c36:	01 f2                	add    %esi,%edx
    1c38:	f7 d2                	not    %edx
    1c3a:	66 89 50 18          	mov    %dx,0x18(%rax)
    1c3e:	e9 8e e7 ff ff       	jmp    3d1 <balancer_ingress+0x3d1>
      if (pckt.flow.proto == IPPROTO_TCP) {
    1c43:	80 7c 24 34 06       	cmpb   $0x6,0x34(%rsp)
    1c48:	75 2b                	jne    1c75 <balancer_ingress+0x1c75>
            bpf_map_lookup_elem(&stats, &lru_stats_key);
    1c4a:	49 8b 84 24 08 11 00 	mov    0x1108(%r12),%rax
    1c51:	00 
    1c52:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
    1c59:	79 92 
        if (!lru_stats) {
    1c5b:	48 85 c0             	test   %rax,%rax
    1c5e:	0f 84 68 02 00 00    	je     1ecc <balancer_ingress+0x1ecc>
        if (pckt.flags & F_SYN_SET) {
    1c64:	8b 4c 24 3c          	mov    0x3c(%rsp),%ecx
    1c68:	c1 e1 02             	shl    $0x2,%ecx
    1c6b:	f7 d1                	not    %ecx
    1c6d:	83 e1 08             	and    $0x8,%ecx
    1c70:	48 83 04 08 01       	addq   $0x1,(%rax,%rcx,1)
    1c75:	48 89 14 24          	mov    %rdx,(%rsp)
  struct real_pos_lru new_dst_lru = {};
    1c79:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
    1c80:	00 00 
    1c82:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
    1c89:	00 00 
      bpf_map_lookup_elem(&stats, &conn_rate_key);
    1c8b:	49 8b 9c 24 10 11 00 	mov    0x1110(%r12),%rbx
    1c92:	00 
    1c93:	65 48 03 1c 25 28 50 	add    %gs:0xffffffff92795028,%rbx
    1c9a:	79 92 
    1c9c:	41 b6 01             	mov    $0x1,%r14b
  if (!conn_rate_stats) {
    1c9f:	48 85 db             	test   %rbx,%rbx
    1ca2:	74 29                	je     1ccd <balancer_ingress+0x1ccd>
    1ca4:	48 89 fd             	mov    %rdi,%rbp
    1ca7:	48 c7 c0 30 d6 a9 8c 	mov    $0xffffffff8ca9d630,%rax
  *cur_time = bpf_ktime_get_ns();
    1cae:	ff d0                	call   *%rax
  if ((*cur_time - conn_rate_stats->v2) > ONE_SEC) {
    1cb0:	48 89 c1             	mov    %rax,%rcx
    1cb3:	48 2b 4b 08          	sub    0x8(%rbx),%rcx
    1cb7:	48 81 f9 01 ca 9a 3b 	cmp    $0x3b9aca01,%rcx
    1cbe:	72 11                	jb     1cd1 <balancer_ingress+0x1cd1>
    conn_rate_stats->v1 = 1;
    1cc0:	48 c7 03 01 00 00 00 	movq   $0x1,(%rbx)
    conn_rate_stats->v2 = *cur_time;
    1cc7:	48 89 43 08          	mov    %rax,0x8(%rbx)
    1ccb:	eb 17                	jmp    1ce4 <balancer_ingress+0x1ce4>
    1ccd:	31 c0                	xor    %eax,%eax
    1ccf:	eb 19                	jmp    1cea <balancer_ingress+0x1cea>
    conn_rate_stats->v1 += 1;
    1cd1:	48 8b 0b             	mov    (%rbx),%rcx
    1cd4:	48 83 c1 01          	add    $0x1,%rcx
    1cd8:	48 89 0b             	mov    %rcx,(%rbx)
    if (conn_rate_stats->v1 > MAX_CONN_RATE) {
    1cdb:	48 81 f9 48 e8 01 00 	cmp    $0x1e848,%rcx
    1ce2:	77 03                	ja     1ce7 <balancer_ingress+0x1ce7>
    1ce4:	45 31 f6             	xor    %r14d,%r14d
    1ce7:	48 89 ef             	mov    %rbp,%rdi
    if (vip_info->flags & F_HASH_DPORT_ONLY) {
    1cea:	f6 07 08             	testb  $0x8,(%rdi)
    1ced:	75 25                	jne    1d14 <balancer_ingress+0x1d14>
    1cef:	49 89 ff             	mov    %rdi,%r15
    1cf2:	8b 54 24 10          	mov    0x10(%rsp),%edx
    b += *(u32*)(k + 4);
    1cf6:	8b 4c 24 14          	mov    0x14(%rsp),%ecx
    c += *(u32*)(k + 8);
    1cfa:	8b 74 24 18          	mov    0x18(%rsp),%esi
      a += (u32)k[3] << 24;
    1cfe:	40 8a 6c 24 1f       	mov    0x1f(%rsp),%bpl
      a += (u32)k[2] << 16;
    1d03:	44 8a 54 24 1e       	mov    0x1e(%rsp),%r10b
      a += (u32)k[1] << 8;
    1d08:	44 8a 4c 24 1d       	mov    0x1d(%rsp),%r9b
      a += k[0];
    1d0d:	44 8a 44 24 1c       	mov    0x1c(%rsp),%r8b
    1d12:	eb 30                	jmp    1d44 <balancer_ingress+0x1d44>
    1d14:	49 89 ff             	mov    %rdi,%r15
      pckt->flow.port16[0] = pckt->flow.port16[1];
    1d17:	0f b7 4c 24 32       	movzwl 0x32(%rsp),%ecx
    1d1c:	66 89 4c 24 30       	mov    %cx,0x30(%rsp)
      memset(pckt->flow.srcv6, 0, 16);
    1d21:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
    1d28:	00 00 
    1d2a:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
    1d31:	00 00 
    1d33:	45 31 c0             	xor    %r8d,%r8d
    1d36:	45 31 c9             	xor    %r9d,%r9d
    1d39:	45 31 d2             	xor    %r10d,%r10d
    1d3c:	31 ed                	xor    %ebp,%ebp
    1d3e:	31 f6                	xor    %esi,%esi
    1d40:	31 c9                	xor    %ecx,%ecx
    1d42:	31 d2                	xor    %edx,%edx
    c += *(u32*)(k + 8);
    1d44:	8d 9e ff c0 ad de    	lea    -0x21523f01(%rsi),%ebx
    __jhash_mix(a, b, c);
    1d4a:	29 f2                	sub    %esi,%edx
  return (word << shift) | (word >> ((-shift) & 31));
    1d4c:	c1 c3 04             	rol    $0x4,%ebx
    __jhash_mix(a, b, c);
    1d4f:	31 d3                	xor    %edx,%ebx
    b += *(u32*)(k + 4);
    1d51:	89 ca                	mov    %ecx,%edx
    1d53:	81 c2 ff c0 ad de    	add    $0xdeadc0ff,%edx
    __jhash_mix(a, b, c);
    1d59:	01 ce                	add    %ecx,%esi
    1d5b:	81 c6 fe 81 5b bd    	add    $0xbd5b81fe,%esi
    1d61:	29 da                	sub    %ebx,%edx
  return (word << shift) | (word >> ((-shift) & 31));
    1d63:	89 df                	mov    %ebx,%edi
    1d65:	c1 c7 06             	rol    $0x6,%edi
    __jhash_mix(a, b, c);
    1d68:	31 d7                	xor    %edx,%edi
    1d6a:	01 f3                	add    %esi,%ebx
  return (word << shift) | (word >> ((-shift) & 31));
    1d6c:	89 f9                	mov    %edi,%ecx
    1d6e:	c1 c1 08             	rol    $0x8,%ecx
    __jhash_mix(a, b, c);
    1d71:	29 fe                	sub    %edi,%esi
    1d73:	31 f1                	xor    %esi,%ecx
    1d75:	01 df                	add    %ebx,%edi
    1d77:	29 cb                	sub    %ecx,%ebx
  return (word << shift) | (word >> ((-shift) & 31));
    1d79:	89 ce                	mov    %ecx,%esi
    1d7b:	c1 c6 10             	rol    $0x10,%esi
    __jhash_mix(a, b, c);
    1d7e:	31 de                	xor    %ebx,%esi
    1d80:	01 f9                	add    %edi,%ecx
    1d82:	29 f7                	sub    %esi,%edi
  return (word << shift) | (word >> ((-shift) & 31));
    1d84:	89 f3                	mov    %esi,%ebx
    1d86:	c1 c3 13             	rol    $0x13,%ebx
    __jhash_mix(a, b, c);
    1d89:	31 fb                	xor    %edi,%ebx
    1d8b:	01 ce                	add    %ecx,%esi
    1d8d:	29 d9                	sub    %ebx,%ecx
  return (word << shift) | (word >> ((-shift) & 31));
    1d8f:	41 89 db             	mov    %ebx,%r11d
    1d92:	41 c1 c3 04          	rol    $0x4,%r11d
    __jhash_mix(a, b, c);
    1d96:	01 f3                	add    %esi,%ebx
      a += (u32)k[3] << 24;
    1d98:	40 0f b6 d5          	movzbl %bpl,%edx
    1d9c:	c1 e2 18             	shl    $0x18,%edx
      a += (u32)k[2] << 16;
    1d9f:	41 0f b6 ea          	movzbl %r10b,%ebp
    1da3:	c1 e5 10             	shl    $0x10,%ebp
      a += (u32)k[3] << 24;
    1da6:	09 d5                	or     %edx,%ebp
      a += (u32)k[1] << 8;
    1da8:	41 0f b6 f9          	movzbl %r9b,%edi
    1dac:	c1 e7 08             	shl    $0x8,%edi
      a += (u32)k[2] << 16;
    1daf:	09 ef                	or     %ebp,%edi
      a += k[0];
    1db1:	41 0f b6 d0          	movzbl %r8b,%edx
      a += (u32)k[1] << 8;
    1db5:	09 fa                	or     %edi,%edx
      a += k[0];
    1db7:	01 f2                	add    %esi,%edx
    __jhash_mix(a, b, c);
    1db9:	31 d9                	xor    %ebx,%ecx
      __jhash_final(a, b, c);
    1dbb:	44 31 d9             	xor    %r11d,%ecx
  return (word << shift) | (word >> ((-shift) & 31));
    1dbe:	89 de                	mov    %ebx,%esi
    1dc0:	c1 c6 0e             	rol    $0xe,%esi
      __jhash_final(a, b, c);
    1dc3:	29 f1                	sub    %esi,%ecx
    1dc5:	31 ca                	xor    %ecx,%edx
  return (word << shift) | (word >> ((-shift) & 31));
    1dc7:	89 ce                	mov    %ecx,%esi
    1dc9:	c1 c6 0b             	rol    $0xb,%esi
      __jhash_final(a, b, c);
    1dcc:	29 f2                	sub    %esi,%edx
    1dce:	31 d3                	xor    %edx,%ebx
  return (word << shift) | (word >> ((-shift) & 31));
    1dd0:	89 d6                	mov    %edx,%esi
    1dd2:	c1 c6 19             	rol    $0x19,%esi
      __jhash_final(a, b, c);
    1dd5:	29 f3                	sub    %esi,%ebx
    1dd7:	31 d9                	xor    %ebx,%ecx
  return (word << shift) | (word >> ((-shift) & 31));
    1dd9:	89 de                	mov    %ebx,%esi
    1ddb:	c1 c6 10             	rol    $0x10,%esi
      __jhash_final(a, b, c);
    1dde:	29 f1                	sub    %esi,%ecx
    1de0:	31 ca                	xor    %ecx,%edx
  return (word << shift) | (word >> ((-shift) & 31));
    1de2:	89 ce                	mov    %ecx,%esi
    1de4:	c1 c6 04             	rol    $0x4,%esi
      __jhash_final(a, b, c);
    1de7:	29 f2                	sub    %esi,%edx
    1de9:	31 d3                	xor    %edx,%ebx
  return (word << shift) | (word >> ((-shift) & 31));
    1deb:	c1 c2 0e             	rol    $0xe,%edx
      __jhash_final(a, b, c);
    1dee:	29 d3                	sub    %edx,%ebx
    1df0:	31 d9                	xor    %ebx,%ecx
  return (word << shift) | (word >> ((-shift) & 31));
    1df2:	c1 c3 18             	rol    $0x18,%ebx
  a += initval;
    1df5:	29 d9                	sub    %ebx,%ecx
    1df7:	be f7 c0 ad e0       	mov    $0xe0adc0f7,%esi
  b += initval;
    1dfc:	03 74 24 30          	add    0x30(%rsp),%esi
  a += initval;
    1e00:	81 c1 f7 c0 ad e0    	add    $0xe0adc0f7,%ecx
  __jhash_final(a, b, c);
    1e06:	89 f2                	mov    %esi,%edx
    1e08:	81 f2 f7 c0 ad e0    	xor    $0xe0adc0f7,%edx
  return (word << shift) | (word >> ((-shift) & 31));
    1e0e:	89 f7                	mov    %esi,%edi
    1e10:	c1 c7 0e             	rol    $0xe,%edi
  __jhash_final(a, b, c);
    1e13:	29 fa                	sub    %edi,%edx
    1e15:	31 d1                	xor    %edx,%ecx
  return (word << shift) | (word >> ((-shift) & 31));
    1e17:	89 d7                	mov    %edx,%edi
    1e19:	c1 c7 0b             	rol    $0xb,%edi
  __jhash_final(a, b, c);
    1e1c:	29 f9                	sub    %edi,%ecx
    1e1e:	31 ce                	xor    %ecx,%esi
  return (word << shift) | (word >> ((-shift) & 31));
    1e20:	89 cf                	mov    %ecx,%edi
    1e22:	c1 c7 19             	rol    $0x19,%edi
  __jhash_final(a, b, c);
    1e25:	29 fe                	sub    %edi,%esi
    1e27:	31 f2                	xor    %esi,%edx
  return (word << shift) | (word >> ((-shift) & 31));
    1e29:	89 f7                	mov    %esi,%edi
    1e2b:	c1 c7 10             	rol    $0x10,%edi
  __jhash_final(a, b, c);
    1e2e:	29 fa                	sub    %edi,%edx
    1e30:	31 d1                	xor    %edx,%ecx
  return (word << shift) | (word >> ((-shift) & 31));
    1e32:	89 d7                	mov    %edx,%edi
    1e34:	c1 c7 04             	rol    $0x4,%edi
  __jhash_final(a, b, c);
    1e37:	29 f9                	sub    %edi,%ecx
    1e39:	31 ce                	xor    %ecx,%esi
  return (word << shift) | (word >> ((-shift) & 31));
    1e3b:	c1 c1 0e             	rol    $0xe,%ecx
  __jhash_final(a, b, c);
    1e3e:	29 ce                	sub    %ecx,%esi
    1e40:	31 f2                	xor    %esi,%edx
  return (word << shift) | (word >> ((-shift) & 31));
    1e42:	c1 c6 18             	rol    $0x18,%esi
  __jhash_final(a, b, c);
    1e45:	29 f2                	sub    %esi,%edx
    1e47:	b9 01 00 ff ff       	mov    $0xffff0001,%ecx
    hash = get_packet_hash(pckt, hash_16bytes) % RING_SIZE;
    1e4c:	48 0f af ca          	imul   %rdx,%rcx
    1e50:	48 c1 e9 30          	shr    $0x30,%rcx
    1e54:	89 ce                	mov    %ecx,%esi
    1e56:	c1 e6 10             	shl    $0x10,%esi
    1e59:	09 ce                	or     %ecx,%esi
    1e5b:	29 f2                	sub    %esi,%edx
    key = RING_SIZE * (vip_info->vip_num) + hash;
    1e5d:	41 8b 77 04          	mov    0x4(%r15),%esi
    1e61:	89 f1                	mov    %esi,%ecx
    1e63:	c1 e1 10             	shl    $0x10,%ecx
    1e66:	01 f1                	add    %esi,%ecx
    1e68:	01 d1                	add    %edx,%ecx
    real_pos = bpf_map_lookup_elem(&ch_rings, &key);
    1e6a:	81 f9 ff 01 00 02    	cmp    $0x20001ff,%ecx
    if (!real_pos) {
    1e70:	77 5a                	ja     1ecc <balancer_ingress+0x1ecc>
    real_pos = bpf_map_lookup_elem(&ch_rings, &key);
    1e72:	89 c9                	mov    %ecx,%ecx
    1e74:	48 ba 00 50 88 22 00 	movabs $0xffffc90022885000,%rdx
    1e7b:	c9 ff ff 
    key = *real_pos;
    1e7e:	8b ac ca 00 01 00 00 	mov    0x100(%rdx,%rcx,8),%ebp
    1e85:	48 85 ed             	test   %rbp,%rbp
    if (key == 0) {
    1e88:	74 24                	je     1eae <balancer_ingress+0x1eae>
  pckt->real_index = key;
    1e8a:	89 6c 24 38          	mov    %ebp,0x38(%rsp)
  *real = bpf_map_lookup_elem(&reals, &key);
    1e8e:	81 fd 00 10 00 00    	cmp    $0x1000,%ebp
  if (!(*real)) {
    1e94:	72 4f                	jb     1ee5 <balancer_ingress+0x1ee5>
      bpf_map_lookup_elem(&stats, &ch_drop_stats_key);
    1e96:	49 8b 84 24 48 11 00 	mov    0x1148(%r12),%rax
    1e9d:	00 
    1e9e:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
    1ea5:	79 92 
  if (!ch_drop_stats) {
    1ea7:	48 85 c0             	test   %rax,%rax
    1eaa:	75 1c                	jne    1ec8 <balancer_ingress+0x1ec8>
    1eac:	eb 1e                	jmp    1ecc <balancer_ingress+0x1ecc>
      bpf_map_lookup_elem(&stats, &ch_drop_stats_key);
    1eae:	49 8b 84 24 48 11 00 	mov    0x1148(%r12),%rax
    1eb5:	00 
    1eb6:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
    1ebd:	79 92 
  if (!ch_drop_stats) {
    1ebf:	48 85 c0             	test   %rax,%rax
    1ec2:	74 08                	je     1ecc <balancer_ingress+0x1ecc>
    1ec4:	48 83 c0 08          	add    $0x8,%rax
    1ec8:	48 83 00 01          	addq   $0x1,(%rax)
    1ecc:	bd 01 00 00 00       	mov    $0x1,%ebp
    return process_packet(ctx, nh_off, true);
  } else {
    // pass to tcp/ip stack
    return XDP_PASS;
  }
}
    1ed1:	89 e8                	mov    %ebp,%eax
    1ed3:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
    1eda:	5b                   	pop    %rbx
    1edb:	41 5c                	pop    %r12
    1edd:	41 5d                	pop    %r13
    1edf:	41 5e                	pop    %r14
    1ee1:	41 5f                	pop    %r15
    1ee3:	5d                   	pop    %rbp
    1ee4:	c3                   	ret
  if (lru_map && !(vip_info->flags & F_LRU_BYPASS) && !under_flood) {
    1ee5:	48 83 7c 24 08 00    	cmpq   $0x0,0x8(%rsp)
    1eeb:	74 11                	je     1efe <balancer_ingress+0x1efe>
    1eed:	41 8a 0f             	mov    (%r15),%cl
    1ef0:	80 e1 02             	and    $0x2,%cl
    1ef3:	d0 e9                	shr    %cl
    1ef5:	41 08 ce             	or     %cl,%r14b
    1ef8:	0f 84 ca 00 00 00    	je     1fc8 <balancer_ingress+0x1fc8>
    1efe:	89 e8                	mov    %ebp,%eax
    1f00:	e9 f1 00 00 00       	jmp    1ff6 <balancer_ingress+0x1ff6>
    1f05:	48 c7 c0 20 5c c3 8e 	mov    $0xffffffff8ec35c20,%rax
  if (XDP_ADJUST_HEAD_FUNC(xdp, 0 - (int)sizeof(struct ipv6hdr))) {
    1f0c:	4c 89 ef             	mov    %r13,%rdi
    1f0f:	be d8 ff ff ff       	mov    $0xffffffd8,%esi
    1f14:	ff d0                	call   *%rax
    1f16:	85 c0                	test   %eax,%eax
    1f18:	75 b2                	jne    1ecc <balancer_ingress+0x1ecc>
  data = (void*)(long)xdp->data;
    1f1a:	49 8b 45 00          	mov    0x0(%r13),%rax
  data_end = (void*)(long)xdp->data_end;
    1f1e:	49 8b 4d 08          	mov    0x8(%r13),%rcx
  ip6h = data + sizeof(struct ethhdr);
    1f22:	48 8d 50 0e          	lea    0xe(%rax),%rdx
  if (new_eth + 1 > data_end || old_eth + 1 > data_end || ip6h + 1 > data_end) {
    1f26:	48 39 ca             	cmp    %rcx,%rdx
    1f29:	77 a1                	ja     1ecc <balancer_ingress+0x1ecc>
    1f2b:	48 8d 50 36          	lea    0x36(%rax),%rdx
    1f2f:	bd 01 00 00 00       	mov    $0x1,%ebp
    1f34:	48 39 ca             	cmp    %rcx,%rdx
    1f37:	77 98                	ja     1ed1 <balancer_ingress+0x1ed1>
    1f39:	48 b9 00 90 a3 06 81 	movabs $0xffff888106a39000,%rcx
    1f40:	88 ff ff 
  memcpy(new_eth->h_dest, cval->mac, 6);
    1f43:	0f b7 91 04 01 00 00 	movzwl 0x104(%rcx),%edx
    1f4a:	66 89 50 04          	mov    %dx,0x4(%rax)
    1f4e:	8b 89 00 01 00 00    	mov    0x100(%rcx),%ecx
    1f54:	89 08                	mov    %ecx,(%rax)
  memcpy(new_eth->h_source, old_eth->h_dest, 6);
    1f56:	8b 48 28             	mov    0x28(%rax),%ecx
    1f59:	89 48 06             	mov    %ecx,0x6(%rax)
    1f5c:	0f b7 48 2c          	movzwl 0x2c(%rax),%ecx
    1f60:	66 89 48 0a          	mov    %cx,0xa(%rax)
  new_eth->h_proto = BE_ETH_P_IPV6;
    1f64:	66 c7 40 0c 86 dd    	movw   $0xdd86,0xc(%rax)
    1f6a:	0f b7 74 24 30       	movzwl 0x30(%rsp),%esi
  saddr[3] = src ^ port;
    1f6f:	33 74 24 1c          	xor    0x1c(%rsp),%esi
    payload_len = pkt_bytes + sizeof(struct ipv6hdr);
    1f73:	41 83 c4 28          	add    $0x28,%r12d
  create_v6_hdr(ip6h, pckt->tos, saddr, dst->dstv6, payload_len, proto);
    1f77:	8a 4c 24 3d          	mov    0x3d(%rsp),%cl
  memset(ip6h->flow_lbl, 0, sizeof(ip6h->flow_lbl));
    1f7b:	66 c7 40 10 00 00    	movw   $0x0,0x10(%rax)
  ip6h->priority = (tc & 0xF0) >> 4;
    1f81:	89 ca                	mov    %ecx,%edx
    1f83:	c0 ea 04             	shr    $0x4,%dl
    1f86:	80 ca 60             	or     $0x60,%dl
    1f89:	88 50 0e             	mov    %dl,0xe(%rax)
  ip6h->flow_lbl[0] = (tc & 0x0F) << 4;
    1f8c:	c0 e1 04             	shl    $0x4,%cl
    1f8f:	88 48 0f             	mov    %cl,0xf(%rax)
  ip6h->nexthdr = proto;
    1f92:	66 c7 40 14 29 40    	movw   $0x4029,0x14(%rax)
  ip6h->payload_len = bpf_htons(payload_len);
    1f98:	66 41 c1 c4 08       	rol    $0x8,%r12w
    1f9d:	66 44 89 60 12       	mov    %r12w,0x12(%rax)
  memcpy(ip6h->saddr.s6_addr32, saddr, 16);
    1fa2:	48 c7 40 16 01 00 00 	movq   $0x1,0x16(%rax)
    1fa9:	00 
    1faa:	c7 40 1e 00 00 00 00 	movl   $0x0,0x1e(%rax)
    1fb1:	89 70 22             	mov    %esi,0x22(%rax)
    1fb4:	49 8b 0e             	mov    (%r14),%rcx
    1fb7:	49 8b 56 08          	mov    0x8(%r14),%rdx
    1fbb:	48 89 48 26          	mov    %rcx,0x26(%rax)
    1fbf:	48 89 50 2e          	mov    %rdx,0x2e(%rax)
    1fc3:	e9 09 e4 ff ff       	jmp    3d1 <balancer_ingress+0x3d1>
    if (pckt->flow.proto == IPPROTO_UDP) {
    1fc8:	80 7c 24 34 11       	cmpb   $0x11,0x34(%rsp)
    1fcd:	75 05                	jne    1fd4 <balancer_ingress+0x1fd4>
      new_dst_lru.atime = cur_time;
    1fcf:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    new_dst_lru.pos = key;
    1fd4:	89 6c 24 40          	mov    %ebp,0x40(%rsp)
    1fd8:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
    1fdd:	48 8d 54 24 40       	lea    0x40(%rsp),%rdx
    1fe2:	48 c7 c0 c0 c9 a9 8c 	mov    $0xffffffff8ca9c9c0,%rax
    1fe9:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    bpf_map_update_elem(lru_map, &pckt->flow, &new_dst_lru, BPF_ANY);
    1fee:	31 c9                	xor    %ecx,%ecx
    1ff0:	ff d0                	call   *%rax
      if (update_vip_lru_miss_stats(&vip, &pckt, vip_info, is_ipv6) >= 0) {
    1ff2:	8b 44 24 38          	mov    0x38(%rsp),%eax
    1ff6:	48 b9 00 98 a3 06 81 	movabs $0xffff888106a39800,%rcx
    1ffd:	88 ff ff 
                        (lru_miss_stat_vip->vipv6[0] == vip->vipv6[0] &&
    2000:	8b b1 00 01 00 00    	mov    0x100(%rcx),%esi
    2006:	b2 01                	mov    $0x1,%dl
    2008:	3b 74 24 58          	cmp    0x58(%rsp),%esi
    200c:	75 25                	jne    2033 <balancer_ingress+0x2033>
                         lru_miss_stat_vip->vipv6[1] == vip->vipv6[1] &&
    200e:	8b b1 04 01 00 00    	mov    0x104(%rcx),%esi
    2014:	3b 74 24 5c          	cmp    0x5c(%rsp),%esi
    2018:	75 19                	jne    2033 <balancer_ingress+0x2033>
                         lru_miss_stat_vip->vipv6[2] == vip->vipv6[2] &&
    201a:	8b b1 08 01 00 00    	mov    0x108(%rcx),%esi
    2020:	3b 74 24 60          	cmp    0x60(%rsp),%esi
    2024:	75 0d                	jne    2033 <balancer_ingress+0x2033>
    2026:	8b 91 0c 01 00 00    	mov    0x10c(%rcx),%edx
    202c:	3b 54 24 64          	cmp    0x64(%rsp),%edx
    2030:	0f 95 c2             	setne  %dl
  bool port_match = lru_miss_stat_vip->port == vip->port;
    2033:	0f b7 b1 10 01 00 00 	movzwl 0x110(%rcx),%esi
    203a:	0f b7 7c 24 68       	movzwl 0x68(%rsp),%edi
  bool proto_match = lru_miss_stat_vip->proto = vip->proto;
    203f:	8a 5c 24 6a          	mov    0x6a(%rsp),%bl
    2043:	88 99 12 01 00 00    	mov    %bl,0x112(%rcx)
  bool vip_match = address_match && port_match && proto_match;
    2049:	84 d2                	test   %dl,%dl
    204b:	75 3d                	jne    208a <balancer_ingress+0x208a>
    204d:	66 39 fe             	cmp    %di,%si
    2050:	75 38                	jne    208a <balancer_ingress+0x208a>
    2052:	84 db                	test   %bl,%bl
    2054:	74 34                	je     208a <balancer_ingress+0x208a>
    __u32* lru_miss_stat = bpf_map_lookup_elem(&lru_miss_stats, &lru_stats_key);
    2056:	3d ff 0f 00 00       	cmp    $0xfff,%eax
    205b:	0f 87 6b fe ff ff    	ja     1ecc <balancer_ingress+0x1ecc>
    2061:	89 c0                	mov    %eax,%eax
    2063:	48 b9 00 b0 57 08 00 	movabs $0xffffc9000857b000,%rcx
    206a:	c9 ff ff 
    206d:	48 8b 84 c1 00 01 00 	mov    0x100(%rcx,%rax,8),%rax
    2074:	00 
    2075:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
    207c:	79 92 
    if (!lru_miss_stat) {
    207e:	48 85 c0             	test   %rax,%rax
    2081:	0f 84 45 fe ff ff    	je     1ecc <balancer_ingress+0x1ecc>
    *lru_miss_stat += 1;
    2087:	83 00 01             	addl   $0x1,(%rax)
    208a:	48 8d 04 6d 00 00 00 	lea    0x0(,%rbp,2),%rax
    2091:	00 
    2092:	48 01 e8             	add    %rbp,%rax
    2095:	48 b9 00 30 6d 08 00 	movabs $0xffffc900086d3000,%rcx
    209c:	c9 ff ff 
    209f:	4c 8d 34 c1          	lea    (%rcx,%rax,8),%r14
    20a3:	49 81 c6 00 01 00 00 	add    $0x100,%r14
    20aa:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
    20b1:	00 
      data_stats->v2 += 1;
    20b2:	48 83 40 08 01       	addq   $0x1,0x8(%rax)
    20b7:	48 8b 14 24          	mov    (%rsp),%rdx
  data_stats = bpf_map_lookup_elem(&stats, &vip_num);
    20bb:	81 fa ff 03 00 00    	cmp    $0x3ff,%edx
    20c1:	0f 86 ae f9 ff ff    	jbe    1a75 <balancer_ingress+0x1a75>
    20c7:	e9 00 fe ff ff       	jmp    1ecc <balancer_ingress+0x1ecc>
        (connId[1] << 24) | (connId[2] << 16) | (connId[3] << 8) | (connId[4]);
    20cc:	0f b6 48 01          	movzbl 0x1(%rax),%ecx
    20d0:	48 c1 e1 18          	shl    $0x18,%rcx
    20d4:	0f b6 50 02          	movzbl 0x2(%rax),%edx
    20d8:	48 c1 e2 10          	shl    $0x10,%rdx
    20dc:	48 09 ca             	or     %rcx,%rdx
    20df:	0f b6 48 03          	movzbl 0x3(%rax),%ecx
    20e3:	48 c1 e1 08          	shl    $0x8,%rcx
    20e7:	48 09 d1             	or     %rdx,%rcx
    20ea:	8a 40 04             	mov    0x4(%rax),%al
    20ed:	b2 03                	mov    $0x3,%dl
    20ef:	eb 18                	jmp    2109 <balancer_ingress+0x2109>
    result.server_id = (connId[1] << 16) | (connId[2] << 8) | (connId[3]);
    20f1:	0f b6 50 01          	movzbl 0x1(%rax),%edx
    20f5:	48 c1 e2 10          	shl    $0x10,%rdx
    20f9:	0f b6 48 02          	movzbl 0x2(%rax),%ecx
    20fd:	48 c1 e1 08          	shl    $0x8,%rcx
    2101:	48 09 d1             	or     %rdx,%rcx
    2104:	8a 40 03             	mov    0x3(%rax),%al
    2107:	b2 02                	mov    $0x2,%dl
    2109:	0f b6 c0             	movzbl %al,%eax
    210c:	48 09 c8             	or     %rcx,%rax
      if (qpr.server_id > 0) {
    210f:	85 c0                	test   %eax,%eax
    2111:	0f 8e d0 ee ff ff    	jle    fe7 <balancer_ingress+0xfe7>
  if (cid_version == QUIC_CONNID_VERSION_V1) {
    2117:	80 fa 01             	cmp    $0x1,%dl
    211a:	74 62                	je     217e <balancer_ingress+0x217e>
    211c:	80 fa 03             	cmp    $0x3,%dl
    211f:	74 64                	je     2185 <balancer_ingress+0x2185>
    2121:	80 fa 02             	cmp    $0x2,%dl
    2124:	75 66                	jne    218c <balancer_ingress+0x218c>
    2126:	b9 40 00 00 00       	mov    $0x40,%ecx
    212b:	eb 64                	jmp    2191 <balancer_ingress+0x2191>
              quic_packets_stats->cid_unknown_real_dropped += 1;
    212d:	48 83 45 28 01       	addq   $0x1,0x28(%rbp)
    2132:	e9 95 fd ff ff       	jmp    1ecc <balancer_ingress+0x1ecc>
      bpf_map_lookup_elem(&stats, &conn_rate_key);
    2137:	49 8b 9c 24 10 11 00 	mov    0x1110(%r12),%rbx
    213e:	00 
    213f:	65 48 03 1c 25 28 50 	add    %gs:0xffffffff92795028,%rbx
    2146:	79 92 
  if (!conn_rate_stats) {
    2148:	48 85 db             	test   %rbx,%rbx
    214b:	0f 84 76 01 00 00    	je     22c7 <balancer_ingress+0x22c7>
    2151:	48 c7 c0 30 d6 a9 8c 	mov    $0xffffffff8ca9d630,%rax
  *cur_time = bpf_ktime_get_ns();
    2158:	ff d0                	call   *%rax
  if ((*cur_time - conn_rate_stats->v2) > ONE_SEC) {
    215a:	48 89 c1             	mov    %rax,%rcx
    215d:	48 2b 4b 08          	sub    0x8(%rbx),%rcx
    2161:	48 81 f9 01 ca 9a 3b 	cmp    $0x3b9aca01,%rcx
    2168:	0f 82 13 01 00 00    	jb     2281 <balancer_ingress+0x2281>
    conn_rate_stats->v1 = 1;
    216e:	48 c7 03 01 00 00 00 	movq   $0x1,(%rbx)
    conn_rate_stats->v2 = *cur_time;
    2175:	48 89 43 08          	mov    %rax,0x8(%rbx)
    2179:	e9 15 01 00 00       	jmp    2293 <balancer_ingress+0x2293>
    217e:	b9 38 00 00 00       	mov    $0x38,%ecx
    2183:	eb 0c                	jmp    2191 <balancer_ingress+0x2191>
    2185:	b9 48 00 00 00       	mov    $0x48,%ecx
    218a:	eb 05                	jmp    2191 <balancer_ingress+0x2191>
    218c:	b9 30 00 00 00       	mov    $0x30,%ecx
    2191:	48 8b 14 24          	mov    (%rsp),%rdx
    2195:	48 83 04 0a 01       	addq   $0x1,(%rdx,%rcx,1)
        __u32* real_pos = bpf_map_lookup_elem(&server_id_map, &key);
    219a:	3d fd ff ff 00       	cmp    $0xfffffd,%eax
        if (real_pos) {
    219f:	77 7b                	ja     221c <balancer_ingress+0x221c>
    21a1:	48 b9 00 d0 6e 08 00 	movabs $0xffffc900086ed000,%rcx
    21a8:	c9 ff ff 
          key = *real_pos;
    21ab:	8b 8c c1 00 01 00 00 	mov    0x100(%rcx,%rax,8),%ecx
    21b2:	48 85 c9             	test   %rcx,%rcx
          if (key == 0) {
    21b5:	74 65                	je     221c <balancer_ingress+0x221c>
            pckt.real_index = key;
    21b7:	89 4c 24 38          	mov    %ecx,0x38(%rsp)
    21bb:	45 31 f6             	xor    %r14d,%r14d
            dst = bpf_map_lookup_elem(&reals, &key);
    21be:	81 f9 00 10 00 00    	cmp    $0x1000,%ecx
    21c4:	48 8d 04 49          	lea    (%rcx,%rcx,2),%rax
    21c8:	48 b9 00 30 6d 08 00 	movabs $0xffffc900086d3000,%rcx
    21cf:	c9 ff ff 
    21d2:	48 8d 84 c1 00 01 00 	lea    0x100(%rcx,%rax,8),%rax
    21d9:	00 
    21da:	4c 0f 42 f0          	cmovb  %rax,%r14
            if (!dst) {
    21de:	4d 85 f6             	test   %r14,%r14
    21e1:	0f 84 8c 00 00 00    	je     2273 <balancer_ingress+0x2273>
    21e7:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
    21ec:	48 c7 c0 30 c9 a9 8c 	mov    $0xffffffff8ca9c930,%rax
    21f3:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  struct real_pos_lru* dst_lru = real_bpf_map_lookup_elem(lru_map, &pckt->flow);
    21f8:	ff d0                	call   *%rax
  if (dst_lru) {
    21fa:	48 85 c0             	test   %rax,%rax
    21fd:	0f 84 f2 00 00 00    	je     22f5 <balancer_ingress+0x22f5>
    if (dst_lru->pos == pckt->real_index) {
    2203:	8b 4c 24 38          	mov    0x38(%rsp),%ecx
    2207:	39 08                	cmp    %ecx,(%rax)
    2209:	0f 85 26 01 00 00    	jne    2335 <balancer_ingress+0x2335>
    220f:	48 8b 04 24          	mov    (%rsp),%rax
              quic_packets_stats->dst_match_in_lru += 1;
    2213:	48 83 c0 50          	add    $0x50,%rax
    2217:	e9 b1 01 00 00       	jmp    23cd <balancer_ingress+0x23cd>
    221c:	48 8b 0c 24          	mov    (%rsp),%rcx
    2220:	48 83 41 10 01       	addq   $0x1,0x10(%rcx)
    2225:	48 98                	cltq
    2227:	48 89 41 18          	mov    %rax,0x18(%rcx)
    222b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    2230:	e9 f2 ed ff ff       	jmp    1027 <balancer_ingress+0x1027>
      dst_lru->pos = pckt->real_index;
    2235:	89 08                	mov    %ecx,(%rax)
              quic_packets_stats->dst_mismatch_in_lru += 1;
    2237:	48 83 45 58 01       	addq   $0x1,0x58(%rbp)
      bpf_map_lookup_elem(&server_id_stats, &vip_num);
    223c:	81 3c 24 ff 01 00 00 	cmpl   $0x1ff,(%rsp)
    2243:	0f 87 89 00 00 00    	ja     22d2 <balancer_ingress+0x22d2>
    2249:	48 b8 00 00 1f 53 81 	movabs $0xffff8881531f0000,%rax
    2250:	88 ff ff 
    2253:	48 8b 0c 24          	mov    (%rsp),%rcx
    2257:	48 8b 84 c8 00 01 00 	mov    0x100(%rax,%rcx,8),%rax
    225e:	00 
    225f:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
    2266:	79 92 
  if (!per_vip_stats) {
    2268:	48 85 c0             	test   %rax,%rax
    226b:	74 65                	je     22d2 <balancer_ingress+0x22d2>
    per_vip_stats->v2 += 1;
    226d:	48 83 c0 08          	add    $0x8,%rax
    2271:	eb 5b                	jmp    22ce <balancer_ingress+0x22ce>
    2273:	48 8b 04 24          	mov    (%rsp),%rax
              quic_packets_stats->cid_unknown_real_dropped += 1;
    2277:	48 83 40 28 01       	addq   $0x1,0x28(%rax)
    227c:	e9 4b fc ff ff       	jmp    1ecc <balancer_ingress+0x1ecc>
    conn_rate_stats->v1 += 1;
    2281:	48 8b 03             	mov    (%rbx),%rax
    2284:	48 83 c0 01          	add    $0x1,%rax
    2288:	48 89 03             	mov    %rax,(%rbx)
    if (conn_rate_stats->v1 > MAX_CONN_RATE) {
    228b:	48 3d 48 e8 01 00    	cmp    $0x1e848,%rax
    2291:	77 34                	ja     22c7 <balancer_ingress+0x22c7>
  struct real_pos_lru new_dst_lru = {};
    2293:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
    229a:	00 00 
    229c:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
    22a3:	00 00 
  new_dst_lru.pos = pckt->real_index;
    22a5:	8b 44 24 38          	mov    0x38(%rsp),%eax
    22a9:	89 44 24 40          	mov    %eax,0x40(%rsp)
    22ad:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
    22b2:	48 8d 54 24 40       	lea    0x40(%rsp),%rdx
    22b7:	48 c7 c0 c0 c9 a9 8c 	mov    $0xffffffff8ca9c9c0,%rax
    22be:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  bpf_map_update_elem(lru_map, &pckt->flow, &new_dst_lru, BPF_ANY);
    22c3:	31 c9                	xor    %ecx,%ecx
    22c5:	ff d0                	call   *%rax
              quic_packets_stats->dst_not_found_in_lru += 1;
    22c7:	48 89 e8             	mov    %rbp,%rax
    22ca:	48 83 c0 60          	add    $0x60,%rax
    22ce:	48 83 00 01          	addq   $0x1,(%rax)
            quic_packets_stats->cid_routed += 1;
    22d2:	48 83 45 20 01       	addq   $0x1,0x20(%rbp)
  original_sport = pckt.flow.port16[0];
    22d7:	0f b7 44 24 30       	movzwl 0x30(%rsp),%eax
    22dc:	89 44 24 70          	mov    %eax,0x70(%rsp)
    22e0:	48 8b 14 24          	mov    (%rsp),%rdx
  data_stats = bpf_map_lookup_elem(&stats, &vip_num);
    22e4:	81 fa ff 03 00 00    	cmp    $0x3ff,%edx
    22ea:	0f 86 85 f7 ff ff    	jbe    1a75 <balancer_ingress+0x1a75>
    22f0:	e9 d7 fb ff ff       	jmp    1ecc <balancer_ingress+0x1ecc>
      bpf_map_lookup_elem(&stats, &conn_rate_key);
    22f5:	49 8b 9c 24 10 11 00 	mov    0x1110(%r12),%rbx
    22fc:	00 
    22fd:	65 48 03 1c 25 28 50 	add    %gs:0xffffffff92795028,%rbx
    2304:	79 92 
  if (!conn_rate_stats) {
    2306:	48 85 db             	test   %rbx,%rbx
    2309:	0f 84 b6 00 00 00    	je     23c5 <balancer_ingress+0x23c5>
    230f:	48 c7 c0 30 d6 a9 8c 	mov    $0xffffffff8ca9d630,%rax
  *cur_time = bpf_ktime_get_ns();
    2316:	ff d0                	call   *%rax
  if ((*cur_time - conn_rate_stats->v2) > ONE_SEC) {
    2318:	48 89 c1             	mov    %rax,%rcx
    231b:	48 2b 4b 08          	sub    0x8(%rbx),%rcx
    231f:	48 81 f9 01 ca 9a 3b 	cmp    $0x3b9aca01,%rcx
    2326:	72 57                	jb     237f <balancer_ingress+0x237f>
    conn_rate_stats->v1 = 1;
    2328:	48 c7 03 01 00 00 00 	movq   $0x1,(%rbx)
    conn_rate_stats->v2 = *cur_time;
    232f:	48 89 43 08          	mov    %rax,0x8(%rbx)
    2333:	eb 5c                	jmp    2391 <balancer_ingress+0x2391>
      dst_lru->pos = pckt->real_index;
    2335:	89 08                	mov    %ecx,(%rax)
    2337:	48 8b 04 24          	mov    (%rsp),%rax
              quic_packets_stats->dst_mismatch_in_lru += 1;
    233b:	48 83 40 58 01       	addq   $0x1,0x58(%rax)
      bpf_map_lookup_elem(&server_id_stats, &vip_num);
    2340:	81 bc 24 80 00 00 00 	cmpl   $0x1ff,0x80(%rsp)
    2347:	ff 01 00 00 
    234b:	0f 87 80 00 00 00    	ja     23d1 <balancer_ingress+0x23d1>
    2351:	48 b8 00 00 1f 53 81 	movabs $0xffff8881531f0000,%rax
    2358:	88 ff ff 
    235b:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
    2362:	00 
    2363:	48 8b 84 c8 00 01 00 	mov    0x100(%rax,%rcx,8),%rax
    236a:	00 
    236b:	65 48 03 04 25 28 50 	add    %gs:0xffffffff92795028,%rax
    2372:	79 92 
  if (!per_vip_stats) {
    2374:	48 85 c0             	test   %rax,%rax
    2377:	74 58                	je     23d1 <balancer_ingress+0x23d1>
    per_vip_stats->v2 += 1;
    2379:	48 83 c0 08          	add    $0x8,%rax
    237d:	eb 4e                	jmp    23cd <balancer_ingress+0x23cd>
    conn_rate_stats->v1 += 1;
    237f:	48 8b 03             	mov    (%rbx),%rax
    2382:	48 83 c0 01          	add    $0x1,%rax
    2386:	48 89 03             	mov    %rax,(%rbx)
    if (conn_rate_stats->v1 > MAX_CONN_RATE) {
    2389:	48 3d 48 e8 01 00    	cmp    $0x1e848,%rax
    238f:	77 34                	ja     23c5 <balancer_ingress+0x23c5>
  struct real_pos_lru new_dst_lru = {};
    2391:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
    2398:	00 00 
    239a:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
    23a1:	00 00 
  new_dst_lru.pos = pckt->real_index;
    23a3:	8b 44 24 38          	mov    0x38(%rsp),%eax
    23a7:	89 44 24 40          	mov    %eax,0x40(%rsp)
    23ab:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
    23b0:	48 8d 54 24 40       	lea    0x40(%rsp),%rdx
    23b5:	48 c7 c0 c0 c9 a9 8c 	mov    $0xffffffff8ca9c9c0,%rax
    23bc:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  bpf_map_update_elem(lru_map, &pckt->flow, &new_dst_lru, BPF_ANY);
    23c1:	31 c9                	xor    %ecx,%ecx
    23c3:	ff d0                	call   *%rax
    23c5:	48 8b 04 24          	mov    (%rsp),%rax
              quic_packets_stats->dst_not_found_in_lru += 1;
    23c9:	48 83 c0 60          	add    $0x60,%rax
    23cd:	48 83 00 01          	addq   $0x1,(%rax)
    23d1:	48 8b 04 24          	mov    (%rsp),%rax
            quic_packets_stats->cid_routed += 1;
    23d5:	48 83 40 20 01       	addq   $0x1,0x20(%rax)
  original_sport = pckt.flow.port16[0];
    23da:	44 0f b7 7c 24 30    	movzwl 0x30(%rsp),%r15d
    23e0:	e9 1e ef ff ff       	jmp    1303 <balancer_ingress+0x1303>

Disassembly of section license:

00000000000023e5 <_license>:
    23e5:	47 50                	rex.RXB push %r8
    23e7:	4c                   	rex.WR
	...

Disassembly of section .maps:

00000000000023f0 <.maps>:
	...

Disassembly of section .debug_loclists:

0000000000000000 <.debug_loclists>:
  void* data = (void*)(long)ctx->data;
       0:	78 2f                	js     31 <balancer_ingress+0x31>
       2:	00 00                	add    %al,(%rax)
       4:	05 00 08 00 8b       	add    $0x8b000800,%eax
       9:	01 00                	add    %eax,(%rax)
       b:	00 2c 06             	add    %ch,(%rsi,%rax,1)
       e:	00 00                	add    %al,(%rax)
      10:	49 06                	rex.WB (bad)
      12:	00 00                	add    %al,(%rax)
      14:	65 06                	gs (bad)
      16:	00 00                	add    %al,(%rax)
  void* data_end = (void*)(long)ctx->data_end;
      18:	96                   	xchg   %eax,%esi
      19:	06                   	(bad)
      1a:	00 00                	add    %al,(%rax)
  if (data + nh_off > data_end) {
      1c:	b2 06                	mov    $0x6,%dl
      1e:	00 00                	add    %al,(%rax)
      20:	ba 06 00 00 ea       	mov    $0xea000006,%edx
      25:	06                   	(bad)
      26:	00 00                	add    %al,(%rax)
      28:	4c 07                	rex.WR (bad)
      2a:	00 00                	add    %al,(%rax)
      2c:	bc 07 00 00 2c       	mov    $0x2c000007,%esp
  eth_proto = eth->h_proto;
      31:	08 00                	or     %al,(%rax)
      33:	00 64 08 00          	add    %ah,0x0(%rax,%rcx,1)
  if (eth_proto == BE_ETH_P_IP) {
      37:	00 bf 08 00 00 51    	add    %bh,0x51000008(%rdi)
      3d:	09 00                	or     %eax,(%rax)
      3f:	00 c2                	add    %al,%dl
      41:	09 00                	or     %eax,(%rax)
      43:	00 ed                	add    %ch,%ch
      45:	09 00                	or     %eax,(%rax)
      47:	00 00                	add    %al,(%rax)
      49:	0a 00                	or     (%rax),%al
      4b:	00 11                	add    %dl,(%rcx)
      4d:	0a 00                	or     (%rax),%al
      4f:	00 20                	add    %ah,(%rax)
  struct packet_description pckt = {};
      51:	0a 00                	or     (%rax),%al
      53:	00 2f                	add    %ch,(%rdi)
      55:	0a 00                	or     (%rax),%al
      57:	00 40 0a             	add    %al,0xa(%rax)
      5a:	00 00                	add    %al,(%rax)
      5c:	51                   	push   %rcx
      5d:	0a 00                	or     (%rax),%al
      5f:	00 60 0a             	add    %ah,0xa(%rax)
      62:	00 00                	add    %al,(%rax)
      64:	6f                   	outsl  %ds:(%rsi),(%dx)
      65:	0a 00                	or     (%rax),%al
      67:	00 8b 0a 00 00 9e    	add    %cl,-0x61fffff6(%rbx)
      6d:	0a 00                	or     (%rax),%al
      6f:	00 ad 0a 00 00 bd    	add    %ch,-0x42fffff6(%rbp)
      75:	0a 00                	or     (%rax),%al
      77:	00 fd                	add    %bh,%ch
      79:	0a 00                	or     (%rax),%al
      7b:	00 36                	add    %dh,(%rsi)
      7d:	0b 00                	or     (%rax),%eax
      7f:	00 b5 0b 00 00 46    	add    %dh,0x4600000b(%rbp)
      85:	0c 00                	or     $0x0,%al
  struct vip_definition vip = {};
      87:	00 d7                	add    %dl,%bh
      89:	0c 00                	or     $0x0,%al
      8b:	00 10                	add    %dl,(%rax)
      8d:	0d 00 00 7a 0d       	or     $0xd7a0000,%eax
      92:	00 00                	add    %al,(%rax)
      94:	14 0e                	adc    $0xe,%al
      96:	00 00                	add    %al,(%rax)
      98:	a5                   	movsl  %ds:(%rsi),%es:(%rdi)
      99:	0e                   	(bad)
      9a:	00 00                	add    %al,(%rax)
      9c:	d9 0e                	(bad)  (%rsi)
      9e:	00 00                	add    %al,(%rax)
    if (iph + 1 > data_end) {
      a0:	ec                   	in     (%dx),%al
      a1:	0e                   	(bad)
      a2:	00 00                	add    %al,(%rax)
      a4:	fd                   	std
      a5:	0e                   	(bad)
      a6:	00 00                	add    %al,(%rax)
      a8:	0c 0f                	or     $0xf,%al
      aa:	00 00                	add    %al,(%rax)
      ac:	1b 0f                	sbb    (%rdi),%ecx
    if (iph->ihl != 5) {
      ae:	00 00                	add    %al,(%rax)
      b0:	2c 0f                	sub    $0xf,%al
      b2:	00 00                	add    %al,(%rax)
      b4:	3d 0f 00 00 50       	cmp    $0x5000000f,%eax
    pckt->tos = iph->tos;
      b9:	0f 00 00             	sldt   (%rax)
      bc:	5f                   	pop    %rdi
      bd:	0f 00 00             	sldt   (%rax)
    *protocol = iph->protocol;
      c0:	6e                   	outsb  %ds:(%rsi),(%dx)
      c1:	0f 00 00             	sldt   (%rax)
    pckt->flow.proto = *protocol;
      c4:	81 0f 00 00 90 0f    	orl    $0xf900000,(%rdi)
    if (iph->frag_off & PCKT_FRAGMENTED) {
      ca:	00 00                	add    %al,(%rax)
      cc:	45 10 00             	adc    %r8b,(%r8)
      cf:	00 69 10             	add    %ch,0x10(%rcx)
      d2:	00 00                	add    %al,(%rax)
      d4:	78 10                	js     e6 <balancer_ingress+0xe6>
      d6:	00 00                	add    %al,(%rax)
      d8:	87 10                	xchg   %edx,(%rax)
      da:	00 00                	add    %al,(%rax)
    if (*protocol == IPPROTO_ICMP) {
      dc:	9a                   	(bad)
      dd:	10 00                	adc    %al,(%rax)
      df:	00 ad 10 00 00 b5    	add    %ch,-0x4afffff0(%rbp)
  if (icmp_hdr + 1 > data_end) {
      e5:	10 00                	adc    %al,(%rax)
      e7:	00 c4                	add    %al,%ah
      e9:	10 00                	adc    %al,(%rax)
      eb:	00 d3                	add    %dl,%bl
      ed:	10 00                	adc    %al,(%rax)
      ef:	00 ef                	add    %ch,%bh
  if (icmp_hdr->type == ICMP_ECHO) {
      f1:	10 00                	adc    %al,(%rax)
      f3:	00 02                	add    %al,(%rdx)
      f5:	11 00                	adc    %eax,(%rax)
      f7:	00 11                	add    %dl,(%rcx)
      f9:	11 00                	adc    %eax,(%rax)
      fb:	00 21                	add    %ah,(%rcx)
      fd:	11 00                	adc    %eax,(%rax)
      ff:	00 33                	add    %dh,(%rbx)
     101:	11 00                	adc    %eax,(%rax)
     103:	00 3d 11 00 00 8f    	add    %bh,-0x70ffffef(%rip)        # ffffffff8f00011a <ch_rings+0x36ff6c77b11a>
     109:	11 00                	adc    %eax,(%rax)
     10b:	00 da                	add    %bl,%dl
     10d:	11 00                	adc    %eax,(%rax)
  icmp_hdr->type = ICMP_ECHOREPLY;
     10f:	00 e2                	add    %ah,%dl
     111:	11 00                	adc    %eax,(%rax)
  icmp_hdr->checksum += 0x0008;
     113:	00 ea                	add    %ch,%dl
     115:	11 00                	adc    %eax,(%rax)
  iph->ttl = DEFAULT_TTL;
     117:	00 7b 12             	add    %bh,0x12(%rbx)
     11a:	00 00                	add    %al,(%rax)
  iph->daddr = iph->saddr;
     11c:	9f                   	lahf
     11d:	12 00                	adc    (%rax),%al
  tmp_addr = iph->daddr;
     11f:	00 ae 12 00 00 bd    	add    %ch,-0x42ffffee(%rsi)
  iph->saddr = tmp_addr;
     125:	12 00                	adc    (%rax),%al
     127:	00 d0                	add    %dl,%al
     129:	12 00                	adc    (%rax),%al
     12b:	00 e3                	add    %ah,%bl
     12d:	12 00                	adc    (%rax),%al
     12f:	00 eb                	add    %ch,%bl
     131:	12 00                	adc    (%rax),%al
     133:	00 fa                	add    %bh,%dl
     135:	12 00                	adc    (%rax),%al
     137:	00 09                	add    %cl,(%rcx)
     139:	13 00                	adc    (%rax),%eax
     13b:	00 25 13 00 00 38    	add    %ah,0x38000013(%rip)        # 38000154 <_license+0x37ffdd6f>
     141:	13 00                	adc    (%rax),%eax
     143:	00 47 13             	add    %al,0x13(%rdi)
     146:	00 00                	add    %al,(%rax)
     148:	4f 13 00             	rex.WRXB adc (%r8),%r8
     14b:	00 5f 13             	add    %bl,0x13(%rdi)
     14e:	00 00                	add    %al,(%rax)
     150:	67 13 00             	adc    (%eax),%eax
     153:	00 6f 13             	add    %ch,0x13(%rdi)
     156:	00 00                	add    %al,(%rax)
     158:	79 13                	jns    16d <balancer_ingress+0x16d>
     15a:	00 00                	add    %al,(%rax)
     15c:	83 13 00             	adcl   $0x0,(%rbx)
  struct packet_description pckt = {};
     15f:	00 94 13 00 00 a7 13 	add    %dl,0x13a70000(%rbx,%rdx,1)
     166:	00 00                	add    %al,(%rax)
     168:	b8 13 00 00 c8       	mov    $0xc8000013,%eax
     16d:	13 00                	adc    (%rax),%eax
     16f:	00 d7                	add    %dl,%bh
     171:	13 00                	adc    (%rax),%eax
     173:	00 e7                	add    %ah,%bh
     175:	13 00                	adc    (%rax),%eax
     177:	00 ef                	add    %ch,%bh
     179:	13 00                	adc    (%rax),%eax
     17b:	00 f7                	add    %dh,%bh
     17d:	13 00                	adc    (%rax),%eax
     17f:	00 02                	add    %al,(%rdx)
     181:	14 00                	adc    $0x0,%al
     183:	00 12                	add    %dl,(%rdx)
     185:	14 00                	adc    $0x0,%al
     187:	00 1a                	add    %bl,(%rdx)
     189:	14 00                	adc    $0x0,%al
     18b:	00 2a                	add    %ch,(%rdx)
     18d:	14 00                	adc    $0x0,%al
     18f:	00 32                	add    %dh,(%rdx)
     191:	14 00                	adc    $0x0,%al
     193:	00 43 14             	add    %al,0x14(%rbx)
  struct vip_definition vip = {};
     196:	00 00                	add    %al,(%rax)
     198:	56                   	push   %rsi
     199:	14 00                	adc    $0x0,%al
     19b:	00 67 14             	add    %ah,0x14(%rdi)
     19e:	00 00                	add    %al,(%rax)
     1a0:	77 14                	ja     1b6 <balancer_ingress+0x1b6>
     1a2:	00 00                	add    %al,(%rax)
     1a4:	86 14 00             	xchg   %dl,(%rax,%rax,1)
     1a7:	00 96 14 00 00 9e    	add    %dl,-0x61ffffec(%rsi)
     1ad:	14 00                	adc    $0x0,%al
    if (ip6h + 1 > data_end) {
     1af:	00 a6 14 00 00 ae    	add    %ah,-0x51ffffec(%rsi)
     1b5:	14 00                	adc    $0x0,%al
     1b7:	00 b9 14 00 00 c9    	add    %bh,-0x36ffffec(%rcx)
    *protocol = ip6h->nexthdr;
     1bd:	14 00                	adc    $0x0,%al
    pckt->flow.proto = *protocol;
     1bf:	00 d1                	add    %dl,%cl
     1c1:	14 00                	adc    $0x0,%al
    pckt->tos = (ip6h->priority << 4) & 0xF0;
     1c3:	00 e1                	add    %ah,%cl
     1c5:	14 00                	adc    $0x0,%al
     1c7:	00 e9                	add    %ch,%cl
     1c9:	14 00                	adc    $0x0,%al
     1cb:	00 f1                	add    %dh,%cl
    pckt->tos = pckt->tos | ((ip6h->flow_lbl[0] >> 4) & 0x0F);
     1cd:	14 00                	adc    $0x0,%al
     1cf:	00 01                	add    %al,(%rcx)
     1d1:	15 00 00 09 15       	adc    $0x15090000,%eax
     1d6:	00 00                	add    %al,(%rax)
     1d8:	1a 15 00 00 2a 15    	sbb    0x152a0000(%rip),%dl        # 152a01de <_license+0x1529ddf9>
    if (*protocol == IPPROTO_FRAGMENT) {
     1de:	00 00                	add    %al,(%rax)
     1e0:	a2 15 00 00 25 16 00 	movabs %al,0x3500001625000015
     1e7:	00 35 
     1e9:	16                   	(bad)
     1ea:	00 00                	add    %al,(%rax)
     1ec:	f9                   	stc
  if (icmp_hdr + 1 > data_end) {
     1ed:	16                   	(bad)
     1ee:	00 00                	add    %al,(%rax)
     1f0:	13 17                	adc    (%rdi),%edx
     1f2:	00 00                	add    %al,(%rax)
     1f4:	3a 17                	cmp    (%rdi),%dl
     1f6:	00 00                	add    %al,(%rax)
     1f8:	61                   	(bad)
     1f9:	17                   	(bad)
  if (icmp_hdr->icmp6_type == ICMPV6_ECHO_REQUEST) {
     1fa:	00 00                	add    %al,(%rax)
     1fc:	81 17 00 00 92 17    	adcl   $0x17920000,(%rdi)
     202:	00 00                	add    %al,(%rax)
     204:	a7                   	cmpsl  %es:(%rdi),%ds:(%rsi)
     205:	17                   	(bad)
     206:	00 00                	add    %al,(%rax)
     208:	b8 17 00 00 c8       	mov    $0xc8000017,%eax
     20d:	17                   	(bad)
     20e:	00 00                	add    %al,(%rax)
     210:	d0 17                	rclb   (%rdi)
     212:	00 00                	add    %al,(%rax)
     214:	74 18                	je     22e <balancer_ingress+0x22e>
     216:	00 00                	add    %al,(%rax)
     218:	84 18                	test   %bl,(%rax)
     21a:	00 00                	add    %al,(%rax)
     21c:	8c 18                	mov    %ds,(%rax)
     21e:	00 00                	add    %al,(%rax)
     220:	9d                   	popf
     221:	18 00                	sbb    %al,(%rax)
     223:	00 ad 18 00 00 be    	add    %ch,-0x41ffffe8(%rbp)
     229:	18 00                	sbb    %al,(%rax)
     22b:	00 d1                	add    %dl,%cl
     22d:	18 00                	sbb    %al,(%rax)
     22f:	00 e2                	add    %ah,%dl
     231:	18 00                	sbb    %al,(%rax)
     233:	00 f2                	add    %dh,%dl
     235:	18 00                	sbb    %al,(%rax)
     237:	00 01                	add    %al,(%rcx)
     239:	19 00                	sbb    %eax,(%rax)
     23b:	00 11                	add    %dl,(%rcx)
     23d:	19 00                	sbb    %eax,(%rax)
     23f:	00 19                	add    %bl,(%rcx)
     241:	19 00                	sbb    %eax,(%rax)
     243:	00 21                	add    %ah,(%rcx)
     245:	19 00                	sbb    %eax,(%rax)
     247:	00 29                	add    %ch,(%rcx)
     249:	19 00                	sbb    %eax,(%rax)
     24b:	00 31                	add    %dh,(%rcx)
     24d:	19 00                	sbb    %eax,(%rax)
     24f:	00 3c 19             	add    %bh,(%rcx,%rbx,1)
     252:	00 00                	add    %al,(%rax)
     254:	4c 19 00             	sbb    %r8,(%rax)
     257:	00 54 19 00          	add    %dl,0x0(%rcx,%rbx,1)
     25b:	00 64 19 00          	add    %ah,0x0(%rcx,%rbx,1)
     25f:	00 6c 19 00          	add    %ch,0x0(%rcx,%rbx,1)
     263:	00 7c 19 00          	add    %bh,0x0(%rcx,%rbx,1)
     267:	00 84 19 00 00 8c 19 	add    %al,0x198c0000(%rcx,%rbx,1)
     26e:	00 00                	add    %al,(%rax)
     270:	96                   	xchg   %eax,%esi
     271:	19 00                	sbb    %eax,(%rax)
     273:	00 a7 19 00 00 ba    	add    %ah,-0x45ffffe7(%rdi)
     279:	19 00                	sbb    %eax,(%rax)
     27b:	00 cb                	add    %cl,%bl
     27d:	19 00                	sbb    %eax,(%rax)
     27f:	00 db                	add    %bl,%bl
     281:	19 00                	sbb    %eax,(%rax)
     283:	00 ea                	add    %ch,%dl
     285:	19 00                	sbb    %eax,(%rax)
     287:	00 fa                	add    %bh,%dl
      memcpy(pckt->flow.srcv6, ip6h->saddr.s6_addr32, 16);
     289:	19 00                	sbb    %eax,(%rax)
     28b:	00 02                	add    %al,(%rdx)
     28d:	1a 00                	sbb    (%rax),%al
     28f:	00 0a                	add    %cl,(%rdx)
     291:	1a 00                	sbb    (%rax),%al
     293:	00 15 1a 00 00 25    	add    %dl,0x2500001a(%rip)        # 250002b3 <_license+0x24ffdece>
     299:	1a 00                	sbb    (%rax),%al
      memcpy(pckt->flow.dstv6, ip6h->daddr.s6_addr32, 16);
     29b:	00 2d 1a 00 00 3d    	add    %ch,0x3d00001a(%rip)        # 3d0002bb <_license+0x3cffded6>
     2a1:	1a 00                	sbb    (%rax),%al
     2a3:	00 45 1a             	add    %al,0x1a(%rbp)
     2a6:	00 00                	add    %al,(%rax)
     2a8:	4d 1a 00             	rex.WRB sbb (%r8),%r8b
     2ab:	00 5d 1a             	add    %bl,0x1a(%rbp)
  if (protocol == IPPROTO_ICMPV6) {
     2ae:	00 00                	add    %al,(%rax)
     2b0:	3e 1b 00             	ds sbb (%rax),%eax
     2b3:	00 99 1b 00 00 a9    	add    %bl,-0x56ffffe5(%rcx)
  if (icmp_hdr + 1 > data_end) {
     2b9:	1b 00                	sbb    (%rax),%eax
     2bb:	00 05 1c 00 00 1f    	add    %al,0x1f00001c(%rip)        # 1f0002dd <_license+0x1effdef8>
  if (icmp_hdr->type == ICMP_ECHO) {
     2c1:	1c 00                	sbb    $0x0,%al
     2c3:	00 46 1c             	add    %al,0x1c(%rsi)
     2c6:	00 00                	add    %al,(%rax)
     2c8:	6d                   	insl   (%dx),%es:(%rdi)
     2c9:	1c 00                	sbb    $0x0,%al
     2cb:	00 8e 1c 00 00 9f    	add    %cl,-0x60ffffe4(%rsi)
     2d1:	1c 00                	sbb    $0x0,%al
     2d3:	00 b4 1c 00 00 c5 1c 	add    %dh,0x1cc50000(%rsp,%rbx,1)
     2da:	00 00                	add    %al,(%rax)
  if ((data + sizeof(struct ethhdr) + sizeof(struct iphdr) +
     2dc:	d5                   	(bad)
     2dd:	1c 00                	sbb    $0x0,%al
     2df:	00 dd                	add    %bl,%ch
     2e1:	1c 00                	sbb    $0x0,%al
     2e3:	00 6d 1d             	add    %ch,0x1d(%rbp)
       sizeof(struct icmphdr)) > data_end) {
     2e6:	00 00                	add    %al,(%rax)
  if ((data + sizeof(struct ethhdr) + sizeof(struct iphdr) +
     2e8:	ae                   	scas   %es:(%rdi),%al
     2e9:	1d 00 00 be 1d       	sbb    $0x1dbe0000,%eax
  icmp_hdr->type = ICMP_ECHOREPLY;
     2ee:	00 00                	add    %al,(%rax)
     2f0:	f7 1d 00 00 ff 1d    	negl   0x1dff0000(%rip)        # 1dff02f6 <_license+0x1dfedf11>
  iph->ttl = DEFAULT_TTL;
     2f6:	00 00                	add    %al,(%rax)
     2f8:	1c 1e                	sbb    $0x1e,%al
  iph->daddr = iph->saddr;
     2fa:	00 00                	add    %al,(%rax)
     2fc:	3d 1e 00 00 41       	cmp    $0x4100001e,%eax
     301:	1f                   	(bad)
     302:	00 00                	add    %al,(%rax)
  iph->saddr = tmp_addr;
     304:	57                   	push   %rdi
     305:	1f                   	(bad)
     306:	00 00                	add    %al,(%rax)
     308:	6d                   	insl   (%dx),%es:(%rdi)
     309:	1f                   	(bad)
     30a:	00 00                	add    %al,(%rax)
     30c:	9b                   	fwait
     30d:	1f                   	(bad)
     30e:	00 00                	add    %al,(%rax)
     310:	ab                   	stos   %eax,%es:(%rdi)
     311:	1f                   	(bad)
     312:	00 00                	add    %al,(%rax)
     314:	bb 1f 00 00 c3       	mov    $0xc300001f,%ebx
     319:	1f                   	(bad)
     31a:	00 00                	add    %al,(%rax)
     31c:	fc                   	cld
     31d:	1f                   	(bad)
     31e:	00 00                	add    %al,(%rax)
     320:	14 20                	adc    $0x20,%al
     322:	00 00                	add    %al,(%rax)
     324:	b3 20                	mov    $0x20,%bl
     326:	00 00                	add    %al,(%rax)
     328:	bb 20 00 00 d8       	mov    $0xd8000020,%ebx
     32d:	20 00                	and    %al,(%rax)
     32f:	00 f9                	add    %bh,%cl
     331:	20 00                	and    %al,(%rax)
     333:	00 15 22 00 00 2d    	add    %dl,0x2d000022(%rip)        # 2d00035b <_license+0x2cffdf76>
     339:	22 00                	and    (%rax),%al
     33b:	00 4c 22 00          	add    %cl,0x0(%rdx,%riz,1)
     33f:	00 5f 22             	add    %bl,0x22(%rdi)
     342:	00 00                	add    %al,(%rax)
     344:	79 22                	jns    368 <balancer_ingress+0x368>
     346:	00 00                	add    %al,(%rax)
     348:	8a 22                	mov    (%rdx),%ah
     34a:	00 00                	add    %al,(%rax)
     34c:	a0 22 00 00 af 22 00 	movabs 0xbf000022af000022,%al
     353:	00 bf 
     355:	22 00                	and    (%rax),%al
     357:	00 c7                	add    %al,%bh
     359:	22 00                	and    (%rax),%al
     35b:	00 dd                	add    %bl,%ch
     35d:	22 00                	and    (%rax),%al
     35f:	00 f3                	add    %dh,%bl
     361:	22 00                	and    (%rax),%al
     363:	00 28                	add    %ch,(%rax)
     365:	23 00                	and    (%rax),%eax
     367:	00 3e                	add    %bh,(%rsi)
     369:	23 00                	and    (%rax),%eax
     36b:	00 4e 23             	add    %cl,0x23(%rsi)
     36e:	00 00                	add    %al,(%rax)
     370:	5e                   	pop    %rsi
     371:	23 00                	and    (%rax),%eax
     373:	00 66 23             	add    %ah,0x23(%rsi)
     376:	00 00                	add    %al,(%rax)
     378:	7c 23                	jl     39d <balancer_ingress+0x39d>
     37a:	00 00                	add    %al,(%rax)
     37c:	84 23                	test   %ah,(%rbx)
     37e:	00 00                	add    %al,(%rax)
     380:	8c 23                	mov    %fs,(%rbx)
     382:	00 00                	add    %al,(%rax)
     384:	95                   	xchg   %eax,%ebp
     385:	23 00                	and    (%rax),%eax
     387:	00 ad 23 00 00 bd    	add    %ch,-0x42ffffdd(%rbp)
     38d:	23 00                	and    (%rax),%eax
     38f:	00 c5                	add    %al,%ch
     391:	23 00                	and    (%rax),%eax
     393:	00 d5                	add    %dl,%ch
     395:	23 00                	and    (%rax),%eax
     397:	00 dd                	add    %bl,%ch
     399:	23 00                	and    (%rax),%eax
     39b:	00 e5                	add    %ah,%ch
     39d:	23 00                	and    (%rax),%eax
     39f:	00 f5                	add    %dh,%ch
     3a1:	23 00                	and    (%rax),%eax
     3a3:	00 fd                	add    %bh,%ch
     3a5:	23 00                	and    (%rax),%eax
     3a7:	00 0d 24 00 00 1c    	add    %cl,0x1c000024(%rip)        # 1c0003d1 <_license+0x1bffdfec>
     3ad:	24 00                	and    $0x0,%al
     3af:	00 2c 24             	add    %ch,(%rsp)
     3b2:	00 00                	add    %al,(%rax)
     3b4:	37                   	(bad)
     3b5:	24 00                	and    $0x0,%al
     3b7:	00 40 24             	add    %al,0x24(%rax)
     3ba:	00 00                	add    %al,(%rax)
     3bc:	59                   	pop    %rcx
     3bd:	24 00                	and    $0x0,%al
     3bf:	00 6e 24             	add    %ch,0x24(%rsi)
     3c2:	00 00                	add    %al,(%rax)
     3c4:	77 24                	ja     3ea <balancer_ingress+0x3ea>
     3c6:	00 00                	add    %al,(%rax)
     3c8:	7f 24                	jg     3ee <balancer_ingress+0x3ee>
     3ca:	00 00                	add    %al,(%rax)
     3cc:	87 24 00             	xchg   %esp,(%rax,%rax,1)
     3cf:	00 8f 24 00 00 97    	add    %cl,-0x68ffffdc(%rdi)
     3d5:	24 00                	and    $0x0,%al
     3d7:	00 a1 24 00 00 b6    	add    %ah,-0x49ffffdc(%rcx)
     3dd:	24 00                	and    $0x0,%al
     3df:	00 be 24 00 00 c6    	add    %bh,-0x39ffffdc(%rsi)
  if (protocol == IPPROTO_IPIP) {
     3e5:	24 00                	and    $0x0,%al
     3e7:	00 fd                	add    %bh,%ch
     3e9:	24 00                	and    $0x0,%al
     3eb:	00 42 25             	add    %al,0x25(%rdx)
     3ee:	00 00                	add    %al,(%rax)
     3f0:	52                   	push   %rdx
     3f1:	25 00 00 5a 25       	and    $0x255a0000,%eax
     3f6:	00 00                	add    %al,(%rax)
     3f8:	6d                   	insl   (%dx),%es:(%rdi)
     3f9:	25 00 00 ab 25       	and    $0x25ab0000,%eax
  tcp = data + off;
     3fe:	00 00                	add    %al,(%rax)
  if (is_ipv6) {
     400:	bc 25 00 00 d6       	mov    $0xd6000025,%esp
  tcp = data + off;
     405:	25 00 00 f6 25       	and    $0x25f60000,%eax
  if (tcp + 1 > data_end) {
     40a:	00 00                	add    %al,(%rax)
     40c:	07                   	(bad)
     40d:	26 00 00             	es add %al,(%rax)
     410:	1f                   	(bad)
     411:	26 00 00             	es add %al,(%rax)
  if (tcp->syn) {
     414:	2f                   	(bad)
     415:	26 00 00             	es add %al,(%rax)
     418:	37                   	(bad)
     419:	26 00 00             	es add %al,(%rax)
     41c:	48                   	rex.W
    pckt->flags |= F_SYN_SET;
     41d:	26 00 00             	es add %al,(%rax)
     420:	50                   	push   %rax
     421:	26 00 00             	es add %al,(%rax)
     424:	72 26                	jb     44c <balancer_ingress+0x44c>
      pckt->flow.src = iph->saddr;
     426:	00 00                	add    %al,(%rax)
     428:	7a 26                	jp     450 <balancer_ingress+0x450>
     42a:	00 00                	add    %al,(%rax)
     42c:	82                   	(bad)
      pckt->flow.dst = iph->daddr;
     42d:	26 00 00             	es add %al,(%rax)
     430:	9f                   	lahf
     431:	26 00 00             	es add %al,(%rax)
  if (protocol == IPPROTO_ICMPV6) {
     434:	a8 26                	test   $0x26,%al
     436:	00 00                	add    %al,(%rax)
  if (icmp_hdr + 1 > data_end) {
     438:	b1 26                	mov    $0x26,%cl
     43a:	00 00                	add    %al,(%rax)
     43c:	c1 26 00             	shll   $0x0,(%rsi)
     43f:	00 c9                	add    %cl,%cl
     441:	26 00 00             	es add %al,(%rax)
     444:	d9 26                	fldenv (%rsi)
  if (icmp_hdr->icmp6_type == ICMPV6_ECHO_REQUEST) {
     446:	00 00                	add    %al,(%rax)
     448:	e1 26                	loope  470 <balancer_ingress+0x470>
     44a:	00 00                	add    %al,(%rax)
     44c:	fa                   	cli
     44d:	26 00 00             	es add %al,(%rax)
     450:	02 27                	add    (%rdi),%ah
     452:	00 00                	add    %al,(%rax)
     454:	0a 27                	or     (%rdi),%ah
     456:	00 00                	add    %al,(%rax)
     458:	12 27                	adc    (%rdi),%ah
     45a:	00 00                	add    %al,(%rax)
     45c:	1a 27                	sbb    (%rdi),%ah
     45e:	00 00                	add    %al,(%rax)
     460:	24 27                	and    $0x27,%al
     462:	00 00                	add    %al,(%rax)
     464:	2d 27 00 00 55       	sub    $0x55000027,%eax
  if ((data + sizeof(struct ethhdr) + sizeof(struct ipv6hdr) +
     469:	27                   	(bad)
     46a:	00 00                	add    %al,(%rax)
     46c:	5d                   	pop    %rbp
     46d:	27                   	(bad)
       sizeof(struct icmp6hdr)) > data_end) {
     46e:	00 00                	add    %al,(%rax)
     470:	65 27                	gs (bad)
  if ((data + sizeof(struct ethhdr) + sizeof(struct ipv6hdr) +
     472:	00 00                	add    %al,(%rax)
     474:	b4 27                	mov    $0x27,%ah
     476:	00 00                	add    %al,(%rax)
     478:	c3                   	ret
     479:	27                   	(bad)
     47a:	00 00                	add    %al,(%rax)
     47c:	d2 27                	shlb   %cl,(%rdi)
     47e:	00 00                	add    %al,(%rax)
     480:	e2 27                	loop   4a9 <balancer_ingress+0x4a9>
     482:	00 00                	add    %al,(%rax)
     484:	ea                   	(bad)
     485:	27                   	(bad)
     486:	00 00                	add    %al,(%rax)
     488:	f2 27                	repnz (bad)
     48a:	00 00                	add    %al,(%rax)
     48c:	01 28                	add    %ebp,(%rax)
     48e:	00 00                	add    %al,(%rax)
     490:	0a 28                	or     (%rax),%ch
     492:	00 00                	add    %al,(%rax)
     494:	1a 28                	sbb    (%rax),%ch
     496:	00 00                	add    %al,(%rax)
     498:	22 28                	and    (%rax),%ch
     49a:	00 00                	add    %al,(%rax)
     49c:	47 28 00             	rex.RXB sub %r8b,(%r8)
  tcp = data + off;
     49f:	00 76 28             	add    %dh,0x28(%rsi)
  if (is_ipv6) {
     4a2:	00 00                	add    %al,(%rax)
  tcp = data + off;
     4a4:	8c 28                	mov    %gs,(%rax)
     4a6:	00 00                	add    %al,(%rax)
  if (tcp + 1 > data_end) {
     4a8:	a8 28                	test   $0x28,%al
     4aa:	00 00                	add    %al,(%rax)
     4ac:	bb 28 00 00 d3       	mov    $0xd3000028,%ebx
     4b1:	28 00                	sub    %al,(%rax)
     4b3:	00 e4                	add    %ah,%ah
  if (tcp->syn) {
     4b5:	28 00                	sub    %al,(%rax)
     4b7:	00 fa                	add    %bh,%dl
     4b9:	28 00                	sub    %al,(%rax)
     4bb:	00 09                	add    %cl,(%rcx)
     4bd:	29 00                	sub    %eax,(%rax)
    pckt->flags |= F_SYN_SET;
     4bf:	00 11                	add    %dl,(%rcx)
     4c1:	29 00                	sub    %eax,(%rax)
     4c3:	00 19                	add    %bl,(%rcx)
     4c5:	29 00                	sub    %eax,(%rax)
     4c7:	00 22                	add    %ah,(%rdx)
     4c9:	29 00                	sub    %eax,(%rax)
     4cb:	00 31                	add    %dh,(%rcx)
     4cd:	29 00                	sub    %eax,(%rax)
     4cf:	00 41 29             	add    %al,0x29(%rcx)
        bpf_map_lookup_elem(&stats, &stats_key);
     4d2:	00 00                	add    %al,(%rax)
     4d4:	49 29 00             	sub    %rax,(%r8)
     4d7:	00 59 29             	add    %bl,0x29(%rcx)
     4da:	00 00                	add    %al,(%rax)
     4dc:	61                   	(bad)
     4dd:	29 00                	sub    %eax,(%rax)
     4df:	00 69 29             	add    %ch,0x29(%rcx)
    if (!icmp_ptb_v6_stats) {
     4e2:	00 00                	add    %al,(%rax)
     4e4:	79 29                	jns    50f <balancer_ingress+0x50f>
     4e6:	00 00                	add    %al,(%rax)
     4e8:	81 29 00 00 a1 29    	subl   $0x29a10000,(%rcx)
    __u32 mtu = bpf_ntohl(icmp_hdr->icmp6_mtu);
     4ee:	00 00                	add    %al,(%rax)
     4f0:	ba 29 00 00 d9       	mov    $0xd9000029,%edx
    if (mtu < MAX_MTU_IN_PTB_TO_DROP) {
     4f5:	29 00                	sub    %eax,(%rax)
     4f7:	00 f2                	add    %dh,%dl
     4f9:	29 00                	sub    %eax,(%rax)
      icmp_ptb_v6_stats->v2 += 1;
     4fb:	00 02                	add    %al,(%rdx)
     4fd:	2a 00                	sub    (%rax),%al
     4ff:	00 0d 2a 00 00 16    	add    %cl,0x1600002a(%rip)        # 1600052f <_license+0x15ffe14a>
  if (ip6h + 1 > data_end) {
     505:	2a 00                	sub    (%rax),%al
     507:	00 2b                	add    %ch,(%rbx)
     509:	2a 00                	sub    (%rax),%al
     50b:	00 34 2a             	add    %dh,(%rdx,%rbp,1)
  pckt->flow.proto = ip6h->nexthdr;
     50e:	00 00                	add    %al,(%rax)
     510:	3c 2a                	cmp    $0x2a,%al
     512:	00 00                	add    %al,(%rax)
  pckt->flags |= F_ICMP;
     514:	44 2a 00             	sub    (%rax),%r8b
     517:	00 4c 2a 00          	add    %cl,0x0(%rdx,%rbp,1)
  memcpy(pckt->flow.srcv6, ip6h->daddr.s6_addr32, 16);
     51b:	00 56 2a             	add    %dl,0x2a(%rsi)
     51e:	00 00                	add    %al,(%rax)
     520:	6b 2a 00             	imul   $0x0,(%rdx),%ebp
     523:	00 73 2a             	add    %dh,0x2a(%rbx)
     526:	00 00                	add    %al,(%rax)
     528:	aa                   	stos   %al,%es:(%rdi)
     529:	2a 00                	sub    (%rax),%al
  memcpy(pckt->flow.dstv6, ip6h->saddr.s6_addr32, 16);
     52b:	00 ef                	add    %ch,%bh
     52d:	2a 00                	sub    (%rax),%al
     52f:	00 ff                	add    %bh,%bh
     531:	2a 00                	sub    (%rax),%al
     533:	00 07                	add    %al,(%rdi)
     535:	2b 00                	sub    (%rax),%eax
     537:	00 23                	add    %ah,(%rbx)
     539:	2b 00                	sub    (%rax),%eax
     53b:	00 3c 2b             	add    %bh,(%rbx,%rbp,1)
     53e:	00 00                	add    %al,(%rax)
     540:	5c                   	pop    %rsp
     541:	2b 00                	sub    (%rax),%eax
     543:	00 93 2b 00 00 ac    	add    %dl,-0x53ffffd5(%rbx)
     549:	2b 00                	sub    (%rax),%eax
     54b:	00 cc                	add    %cl,%ah
     54d:	2b 00                	sub    (%rax),%eax
     54f:	00 dc                	add    %bl,%ah
     551:	2b 00                	sub    (%rax),%eax
     553:	00 e4                	add    %ah,%ah
     555:	2b 00                	sub    (%rax),%eax
     557:	00 f5                	add    %dh,%ch
     559:	2b 00                	sub    (%rax),%eax
     55b:	00 2b                	add    %ch,(%rbx)
     55d:	2c 00                	sub    $0x0,%al
    memcpy(dst_addr.addrv6, pckt->flow.dstv6, 16);
     55f:	00 48 2c             	add    %cl,0x2c(%rax)
     562:	00 00                	add    %al,(%rax)
     564:	52                   	push   %rdx
     565:	2c 00                	sub    $0x0,%al
     567:	00 5b 2c             	add    %bl,0x2c(%rbx)
     56a:	00 00                	add    %al,(%rax)
     56c:	66 2c 00             	data16 sub $0x0,%al
     56f:	00 8e 2c 00 00 9a    	add    %cl,-0x65ffffd4(%rsi)
  __u32* decap_dst_flags = bpf_map_lookup_elem(&decap_dst, &dst_addr);
     575:	2c 00                	sub    $0x0,%al
     577:	00 a2 2c 00 00 aa    	add    %ah,-0x55ffffd4(%rdx)
     57d:	2c 00                	sub    $0x0,%al
     57f:	00 cc                	add    %cl,%ah
     581:	2c 00                	sub    $0x0,%al
     583:	00 d4                	add    %dl,%ah
     585:	2c 00                	sub    $0x0,%al
     587:	00 f1                	add    %dh,%cl
     589:	2c 00                	sub    $0x0,%al
     58b:	00 f9                	add    %bh,%cl
  if (decap_dst_flags) {
     58d:	2c 00                	sub    $0x0,%al
     58f:	00 02                	add    %al,(%rdx)
     591:	2d 00 00 0b 2d       	sub    $0x2d0b0000,%eax
     596:	00 00                	add    %al,(%rax)
     598:	1b 2d 00 00 23 2d    	sbb    0x2d230000(%rip),%ebp        # 2d23059e <_license+0x2d22e1b9>
    data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     59e:	00 00                	add    %al,(%rax)
     5a0:	33 2d 00 00 3b 2d    	xor    0x2d3b0000(%rip),%ebp        # 2d3b05a6 <_license+0x2d3ae1c1>
     5a6:	00 00                	add    %al,(%rax)
     5a8:	43 2d 00 00 4b 2d    	rex.XB sub $0x2d4b0000,%eax
    if (!data_stats) {
     5ae:	00 00                	add    %al,(%rax)
     5b0:	53                   	push   %rbx
     5b1:	2d 00 00 5b 2d       	sub    $0x2d5b0000,%eax
    data_stats->v1 += 1;
     5b6:	00 00                	add    %al,(%rax)
     5b8:	65 2d 00 00 6f 2d    	gs sub $0x2d6f0000,%eax
    if ((data + offset + sizeof(struct ipv6hdr)) > data_end) {
     5be:	00 00                	add    %al,(%rax)
     5c0:	97                   	xchg   %eax,%edi
     5c1:	2d 00 00 9f 2d       	sub    $0x2d9f0000,%eax
     5c6:	00 00                	add    %al,(%rax)
     5c8:	a7                   	cmpsl  %es:(%rdi),%ds:(%rsi)
     5c9:	2d 00 00 af 2d       	sub    $0x2daf0000,%eax
    if (!--ip6h->hop_limit) {
     5ce:	00 00                	add    %al,(%rax)
     5d0:	b7 2d                	mov    $0x2d,%bh
     5d2:	00 00                	add    %al,(%rax)
     5d4:	c7                   	(bad)
     5d5:	2d 00 00 cf 2d       	sub    $0x2dcf0000,%eax
     5da:	00 00                	add    %al,(%rax)
     5dc:	d7                   	xlat   %ds:(%rbx)
     5dd:	2d 00 00 ff 2d       	sub    $0x2dff0000,%eax
  memcpy(new_eth->h_source, old_eth->h_source, 6);
     5e2:	00 00                	add    %al,(%rax)
     5e4:	0f 2e 00             	ucomiss (%rax),%xmm0
     5e7:	00 17                	add    %dl,(%rdi)
     5e9:	2e 00 00             	cs add %al,(%rax)
     5ec:	2c 2e                	sub    $0x2e,%al
  memcpy(new_eth->h_dest, old_eth->h_dest, 6);
     5ee:	00 00                	add    %al,(%rax)
     5f0:	3c 2e                	cmp    $0x2e,%al
     5f2:	00 00                	add    %al,(%rax)
     5f4:	4b                   	rex.WXB
     5f5:	2e 00 00             	cs add %al,(%rax)
     5f8:	5a                   	pop    %rdx
     5f9:	2e 00 00             	cs add %al,(%rax)
     5fc:	63 2e                	movsxd (%rsi),%ebp
     5fe:	00 00                	add    %al,(%rax)
     600:	73 2e                	jae    630 <balancer_ingress+0x630>
     602:	00 00                	add    %al,(%rax)
     604:	7b 2e                	jnp    634 <balancer_ingress+0x634>
     606:	00 00                	add    %al,(%rax)
  if (XDP_ADJUST_HEAD_FUNC(xdp, (int)sizeof(struct ipv6hdr))) {
     608:	97                   	xchg   %eax,%edi
     609:	2e 00 00             	cs add %al,(%rax)
     60c:	c1 2e 00             	shrl   $0x0,(%rsi)
     60f:	00 d7                	add    %dl,%bh
     611:	2e 00 00             	cs add %al,(%rax)
     614:	f3 2e 00 00          	repz cs add %al,(%rax)
     618:	03 2f                	add    (%rdi),%ebp
     61a:	00 00                	add    %al,(%rax)
     61c:	0b 2f                	or     (%rdi),%ebp
     61e:	00 00                	add    %al,(%rax)
     620:	1c 2f                	sbb    $0x2f,%al
     622:	00 00                	add    %al,(%rax)
  struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     624:	31 2f                	xor    %ebp,(%rdi)
     626:	00 00                	add    %al,(%rax)
     628:	41 2f                	rex.B (bad)
     62a:	00 00                	add    %al,(%rax)
     62c:	50                   	push   %rax
     62d:	2f                   	(bad)
     62e:	00 00                	add    %al,(%rax)
     630:	60                   	(bad)
     631:	2f                   	(bad)
     632:	00 00                	add    %al,(%rax)
  if (!data_stats) {
     634:	68 2f 00 00 04       	push   $0x400002f
     639:	04 41                	add    $0x41,%al
     63b:	01 55 04             	add    %edx,0x4(%rbp)
     63e:	41 d1 3d 01 5d 04 d1 	sarl   -0x2efba2ff(%rip)        # ffffffffd1046346 <ch_rings+0x36ffae7c1346>
  if (action >= 0) {
     645:	3d e5 3d 04 a3       	cmp    $0xa3043de5,%eax
     64a:	01 55 9f             	add    %edx,-0x61(%rbp)
     64d:	04 e5                	add    $0xe5,%al
  if (decap_dst_flags) {
     64f:	3d e5 47 01 5d       	cmp    $0x5d0147e5,%eax
  if (action >= 0) {
     654:	00 04 18             	add    %al,(%rax,%rbx,1)
     657:	d1 07                	roll   (%rdi)
     659:	01 53 04             	add    %edx,0x4(%rbx)
     65c:	db 07                	fildl  (%rdi)
     65e:	ba 1d 01 53 04       	mov    $0x453011d,%edx
        bpf_map_lookup_elem(&stats, &xpop_stats_key);
     663:	f6 1d d1 1f 01 53    	negb   0x53011fd1(%rip)        # 5301263a <_license+0x53010255>
     669:	04 ee                	add    $0xee,%al
     66b:	1f                   	(bad)
     66c:	a7                   	cmpsl  %es:(%rdi),%ds:(%rsi)
     66d:	20 01                	and    %al,(%rcx)
     66f:	53                   	push   %rbx
    if (xpop_stats_data) {
     670:	00 04 1c             	add    %al,(%rsp,%rbx,1)
     673:	d1 07                	roll   (%rdi)
     675:	01 5f 04             	add    %ebx,0x4(%rdi)
     678:	db 07                	fildl  (%rdi)
     67a:	b5 20                	mov    $0x20,%ch
     67c:	01 5f 04             	add    %ebx,0x4(%rdi)
     67f:	9a                   	(bad)
     680:	21 92 24 01 5f 04    	and    %edx,0x45f0124(%rdx)
    memcpy(dst_addr.addrv6, pckt->flow.dstv6, 16);
     686:	fa                   	cli
     687:	2d ea 2e 01 5f       	sub    $0x5f012eea,%eax
     68c:	04 a8                	add    $0xa8,%al
     68e:	30 8d 32 01 5f 04    	xor    %cl,0x45f0132(%rbp)
     694:	d6                   	(bad)
     695:	32 db                	xor    %bl,%bl
  __u32* decap_dst_flags = bpf_map_lookup_elem(&decap_dst, &dst_addr);
     697:	32 01                	xor    (%rcx),%al
     699:	5f                   	pop    %rdi
     69a:	04 cc                	add    $0xcc,%al
     69c:	41 e0 47             	rex.B loopne 6e6 <balancer_ingress+0x6e6>
     69f:	01 5f 00             	add    %ebx,0x0(%rdi)
     6a2:	04 1c                	add    $0x1c,%al
     6a4:	d1 07                	roll   (%rdi)
     6a6:	01 53 04             	add    %edx,0x4(%rbx)
     6a9:	db 07                	fildl  (%rdi)
     6ab:	ba 1d 01 53 04       	mov    $0x453011d,%edx
     6b0:	f6 1d d1 1f 01 53    	negb   0x53011fd1(%rip)        # 53012687 <_license+0x530102a2>
  if (decap_dst_flags) {
     6b6:	04 ee                	add    $0xee,%al
     6b8:	1f                   	(bad)
     6b9:	a7                   	cmpsl  %es:(%rdi),%ds:(%rsi)
     6ba:	20 01                	and    %al,(%rcx)
     6bc:	53                   	push   %rbx
     6bd:	00 04 1c             	add    %al,(%rsp,%rbx,1)
     6c0:	e5 47                	in     $0x47,%eax
    data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     6c2:	02 3e                	add    (%rsi),%bh
     6c4:	9f                   	lahf
     6c5:	00 04 35 cb 01 12 72 	add    %al,0x721201cb(,%rsi,1)
     6cc:	00 10                	add    %dl,(%rax)
     6ce:	ff                   	(bad)
     6cf:	ff 03                	incl   (%rbx)
    if (!data_stats) {
     6d1:	1a a8 ab 80 80 00    	sbb    0x8080ab(%rax),%ch
     6d7:	a8 b0                	test   $0xb0,%al
     6d9:	80 80 00 9f 04 df 02 	addb   $0x2,-0x20fb6100(%rax)
    if ((data + offset + sizeof(struct iphdr)) > data_end) {
     6e0:	c6 03 12             	movb   $0x12,(%rbx)
     6e3:	72 00                	jb     6e5 <balancer_ingress+0x6e5>
     6e5:	10 ff                	adc    %bh,%bh
     6e7:	ff 03                	incl   (%rbx)
     6e9:	1a a8 ab 80 80 00    	sbb    0x8080ab(%rax),%ch
     6ef:	a8 b0                	test   $0xb0,%al
     6f1:	80 80 00 9f 00 04 50 	addb   $0x50,0x4009f00(%rax)
    csum = iph->check + 0x0001;
     6f8:	df 02                	filds  (%rdx)
    iph->check = (csum & 0xffff) + (csum >> 16);
     6fa:	01 5d 04             	add    %ebx,0x4(%rbp)
     6fd:	a6                   	cmpsb  %es:(%rdi),%ds:(%rsi)
     6fe:	08 c7                	or     %al,%bh
     700:	09 01                	or     %eax,(%rcx)
     702:	5d                   	pop    %rbp
     703:	04 d5                	add    $0xd5,%al
    if (!--iph->ttl) {
     705:	12 c5                	adc    %ch,%al
     707:	13 01                	adc    (%rcx),%eax
     709:	5d                   	pop    %rbp
     70a:	04 ff                	add    $0xff,%al
     70c:	13 b1 16 01 5d 04    	adc    0x45d0116(%rcx),%esi
     712:	dc 16                	fcoml  (%rsi)
     714:	d5                   	(bad)
     715:	1c 01                	sbb    $0x1,%al
     717:	5d                   	pop    %rbp
  memcpy(new_eth->h_source, old_eth->h_source, 6);
     718:	04 f6                	add    $0xf6,%al
     71a:	1d b0 1e 01 5d       	sbb    $0x5d011eb0,%eax
     71f:	04 ef                	add    $0xef,%al
     721:	1e                   	(bad)
     722:	8a 21                	mov    (%rcx),%ah
     724:	01 5d 04             	add    %ebx,0x4(%rbp)
  memcpy(new_eth->h_dest, old_eth->h_dest, 6);
     727:	ee                   	out    %al,(%dx)
     728:	21 b9 23 01 5d 04    	and    %edi,0x45d0123(%rcx)
     72e:	92                   	xchg   %eax,%edx
     72f:	24 fa                	and    $0xfa,%al
     731:	2d 01 5d 04 ea       	sub    $0xea045d01,%eax
     736:	2e c7                	cs (bad)
     738:	30 01                	xor    %al,(%rcx)
     73a:	5d                   	pop    %rbp
     73b:	04 cc                	add    $0xcc,%al
     73d:	41 a6                	rex.B cmpsb %es:(%rdi),%ds:(%rsi)
     73f:	42 01 5d 04          	rex.X add %ebx,0x4(%rbp)
  if (XDP_ADJUST_HEAD_FUNC(xdp, (int)sizeof(struct ipv6hdr))) {
     743:	91                   	xchg   %eax,%ecx
     744:	43 b5 44             	rex.XB mov $0x44,%r13b
     747:	01 5d 04             	add    %ebx,0x4(%rbp)
     74a:	f3 44 81 45 01 5d 04 	repz rex.R addl $0x45f5045d,0x1(%rbp)
     751:	f5 45 
     753:	e5 47                	in     $0x47,%eax
     755:	01 5d 00             	add    %ebx,0x0(%rbp)
     758:	04 50                	add    $0x50,%al
     75a:	df 02                	filds  (%rdx)
  struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     75c:	02 3e                	add    (%rsi),%bh
     75e:	9f                   	lahf
     75f:	04 a6                	add    $0xa6,%al
     761:	08 c7                	or     %al,%bh
     763:	09 02                	or     %eax,(%rdx)
     765:	3e 9f                	ds lahf
     767:	04 d5                	add    $0xd5,%al
     769:	12 c5                	adc    %ch,%al
     76b:	13 02                	adc    (%rdx),%eax
  if (!data_stats) {
     76d:	3e 9f                	ds lahf
     76f:	04 ff                	add    $0xff,%al
     771:	13 b1 16 02 3e 9f    	adc    -0x60c1fdea(%rcx),%esi
     777:	04 dc                	add    $0xdc,%al
     779:	16                   	(bad)
  if (action >= 0) {
     77a:	d5                   	(bad)
     77b:	1c 02                	sbb    $0x2,%al
     77d:	3e 9f                	ds lahf
     77f:	04 f6                	add    $0xf6,%al
     781:	1d b0 1e 02 3e       	sbb    $0x3e021eb0,%eax
  if (decap_dst_flags) {
     786:	9f                   	lahf
     787:	04 ef                	add    $0xef,%al
  if (action >= 0) {
     789:	1e                   	(bad)
     78a:	8a 21                	mov    (%rcx),%ah
     78c:	02 3e                	add    (%rsi),%bh
     78e:	9f                   	lahf
     78f:	04 ee                	add    $0xee,%al
     791:	21 b9 23 02 3e 9f    	and    %edi,-0x60c1fddd(%rcx)
     797:	04 92                	add    $0x92,%al
        bpf_map_lookup_elem(&stats, &xpop_stats_key);
     799:	24 fa                	and    $0xfa,%al
     79b:	2d 02 3e 9f 04       	sub    $0x49f3e02,%eax
     7a0:	ea                   	(bad)
     7a1:	2e c7                	cs (bad)
     7a3:	30 02                	xor    %al,(%rdx)
     7a5:	3e 9f                	ds lahf
     7a7:	04 cc                	add    $0xcc,%al
    if (xpop_stats_data) {
     7a9:	41 a6                	rex.B cmpsb %es:(%rdi),%ds:(%rsi)
     7ab:	42 02 3e             	rex.X add (%rsi),%dil
     7ae:	9f                   	lahf
     7af:	04 91                	add    $0x91,%al
     7b1:	43 b5 44             	rex.XB mov $0x44,%r13b
     7b4:	02 3e                	add    (%rsi),%bh
  udp = data + off;
     7b6:	9f                   	lahf
     7b7:	04 f3                	add    $0xf3,%al
     7b9:	44 81 45 02 3e 9f 04 	rex.R addl $0xf5049f3e,0x2(%rbp)
     7c0:	f5 
  if (udp + 1 > data_end) {
     7c1:	45 e5 47             	rex.RB in $0x47,%eax
     7c4:	02 3e                	add    (%rsi),%bh
     7c6:	9f                   	lahf
     7c7:	00 04 50             	add    %al,(%rax,%rdx,2)
     7ca:	df 02                	filds  (%rdx)
     7cc:	02 30                	add    (%rax),%dh
     7ce:	9f                   	lahf
     7cf:	04 a6                	add    $0xa6,%al
     7d1:	08 c7                	or     %al,%bh
     7d3:	09 02                	or     %eax,(%rdx)
     7d5:	30 9f 04 d5 12 c5    	xor    %bl,-0x3aed2afc(%rdi)
     7db:	13 02                	adc    (%rdx),%eax
     7dd:	30 9f 04 ff 13 b1    	xor    %bl,-0x4eec00fc(%rdi)
     7e3:	16                   	(bad)
     7e4:	02 30                	add    (%rax),%dh
     7e6:	9f                   	lahf
     7e7:	04 dc                	add    $0xdc,%al
     7e9:	16                   	(bad)
     7ea:	d5                   	(bad)
     7eb:	1c 02                	sbb    $0x2,%al
  if (icmp_hdr->code == ICMP_FRAG_NEEDED) {
     7ed:	30 9f 04 f6 1d b0    	xor    %bl,-0x4fe209fc(%rdi)
     7f3:	1e                   	(bad)
     7f4:	02 30                	add    (%rax),%dh
     7f6:	9f                   	lahf
     7f7:	04 ef                	add    $0xef,%al
     7f9:	1e                   	(bad)
     7fa:	8a 21                	mov    (%rcx),%ah
        bpf_map_lookup_elem(&stats, &stats_key);
     7fc:	02 30                	add    (%rax),%dh
     7fe:	9f                   	lahf
     7ff:	04 ee                	add    $0xee,%al
     801:	21 b9 23 02 30 9f    	and    %edi,-0x60cffddd(%rcx)
     807:	04 92                	add    $0x92,%al
     809:	24 fa                	and    $0xfa,%al
     80b:	2d 02 30 9f 04       	sub    $0x49f3002,%eax
    if (!icmp_ptb_v4_stats) {
     810:	ea                   	(bad)
     811:	2e c7                	cs (bad)
     813:	30 02                	xor    %al,(%rdx)
    icmp_ptb_v4_stats->v1 += 1;
     815:	30 9f 04 cc 41 a6    	xor    %bl,-0x59be33fc(%rdi)
    if (mtu < MAX_MTU_IN_PTB_TO_DROP) {
     81b:	42 02 30             	rex.X add (%rax),%sil
     81e:	9f                   	lahf
      icmp_ptb_v4_stats->v2 += 1;
     81f:	04 91                	add    $0x91,%al
     821:	43 b5 44             	rex.XB mov $0x44,%r13b
  if (iph + 1 > data_end) {
     824:	02 30                	add    (%rax),%dh
     826:	9f                   	lahf
     827:	04 f3                	add    $0xf3,%al
     829:	44 81 45 02 30 9f 04 	rex.R addl $0xf5049f30,0x2(%rbp)
     830:	f5 
  if (iph->ihl != 5) {
     831:	45 e5 47             	rex.RB in $0x47,%eax
     834:	02 30                	add    (%rax),%dh
     836:	9f                   	lahf
     837:	00 04 50             	add    %al,(%rax,%rdx,2)
     83a:	df 02                	filds  (%rdx)
     83c:	01 53 04             	add    %edx,0x4(%rbx)
  pckt->flow.proto = iph->protocol;
     83f:	a6                   	cmpsb  %es:(%rdi),%ds:(%rsi)
     840:	08 c7                	or     %al,%bh
     842:	09 01                	or     %eax,(%rcx)
  pckt->flags |= F_ICMP;
     844:	53                   	push   %rbx
     845:	04 d5                	add    $0xd5,%al
     847:	12 c5                	adc    %ch,%al
  pckt->flow.src = iph->daddr;
     849:	13 01                	adc    (%rcx),%eax
     84b:	53                   	push   %rbx
     84c:	04 ff                	add    $0xff,%al
     84e:	13 b1 16 01 53 04    	adc    0x4530116(%rcx),%esi
  pckt->flow.dst = iph->saddr;
     854:	dc 16                	fcoml  (%rsi)
     856:	d5                   	(bad)
     857:	1c 01                	sbb    $0x1,%al
     859:	53                   	push   %rbx
     85a:	04 f6                	add    $0xf6,%al
     85c:	1d b0 1e 01 53       	sbb    $0x53011eb0,%eax
     861:	04 ef                	add    $0xef,%al
     863:	1e                   	(bad)
     864:	d1 1f                	rcrl   (%rdi)
     866:	01 53 04             	add    %edx,0x4(%rbx)
     869:	ee                   	out    %al,(%dx)
     86a:	1f                   	(bad)
     86b:	a7                   	cmpsl  %es:(%rdi),%ds:(%rsi)
     86c:	20 01                	and    %al,(%rcx)
     86e:	53                   	push   %rbx
     86f:	00 04 50             	add    %al,(%rax,%rdx,2)
    memcpy(vip.vipv6, pckt.flow.dstv6, 16);
     872:	df 02                	filds  (%rdx)
     874:	01 5f 04             	add    %ebx,0x4(%rdi)
     877:	a6                   	cmpsb  %es:(%rdi),%ds:(%rsi)
     878:	08 c7                	or     %al,%bh
     87a:	09 01                	or     %eax,(%rcx)
     87c:	5f                   	pop    %rdi
     87d:	04 d5                	add    $0xd5,%al
     87f:	12 c5                	adc    %ch,%al
     881:	13 01                	adc    (%rcx),%eax
     883:	5f                   	pop    %rdi
     884:	04 ff                	add    $0xff,%al
  vip.port = pckt.flow.port16[1];
     886:	13 b1 16 01 5f 04    	adc    0x45f0116(%rcx),%esi
     88c:	dc 16                	fcoml  (%rsi)
     88e:	d5                   	(bad)
  vip.proto = pckt.flow.proto;
     88f:	1c 01                	sbb    $0x1,%al
     891:	5f                   	pop    %rdi
     892:	04 f6                	add    $0xf6,%al
     894:	1d b0 1e 01 5f       	sbb    $0x5f011eb0,%eax
  vip_info = bpf_map_lookup_elem(&vip_map, &vip);
     899:	04 ef                	add    $0xef,%al
     89b:	1e                   	(bad)
     89c:	94                   	xchg   %eax,%esp
     89d:	20 01                	and    %al,(%rcx)
     89f:	5f                   	pop    %rdi
     8a0:	04 ee                	add    $0xee,%al
     8a2:	21 b9 23 01 5f 04    	and    %edi,0x45f0123(%rcx)
     8a8:	a8 30                	test   $0x30,%al
     8aa:	c7                   	(bad)
     8ab:	30 01                	xor    %al,(%rcx)
     8ad:	5f                   	pop    %rdi
     8ae:	04 cc                	add    $0xcc,%al
     8b0:	41 a6                	rex.B cmpsb %es:(%rdi),%ds:(%rsi)
     8b2:	42 01 5f 04          	rex.X add %ebx,0x4(%rdi)
  if (!vip_info) {
     8b6:	91                   	xchg   %eax,%ecx
     8b7:	43 b5 44             	rex.XB mov $0x44,%r13b
     8ba:	01 5f 04             	add    %ebx,0x4(%rdi)
  if (data_end - data > MAX_PCKT_SIZE) {
     8bd:	f3 44 81 45 01 5f 04 	repz rex.R addl $0x45f5045f,0x1(%rbp)
     8c4:	f5 45 
     8c6:	e0 47                	loopne 90f <balancer_ingress+0x90f>
     8c8:	01 5f 00             	add    %ebx,0x0(%rdi)
     8cb:	04 50                	add    $0x50,%al
     8cd:	df 02                	filds  (%rdx)
     8cf:	02 30                	add    (%rax),%dh
     8d1:	9f                   	lahf
     8d2:	04 a6                	add    $0xa6,%al
     8d4:	08 c7                	or     %al,%bh
     8d6:	09 02                	or     %eax,(%rdx)
  data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     8d8:	30 9f 04 d5 12 c5    	xor    %bl,-0x3aed2afc(%rdi)
     8de:	13 02                	adc    (%rdx),%eax
     8e0:	30 9f 04 ff 13 b1    	xor    %bl,-0x4eec00fc(%rdi)
     8e6:	16                   	(bad)
     8e7:	02 30                	add    (%rax),%dh
  if (!data_stats) {
     8e9:	9f                   	lahf
     8ea:	04 dc                	add    $0xdc,%al
     8ec:	16                   	(bad)
     8ed:	d5                   	(bad)
     8ee:	1c 02                	sbb    $0x2,%al
     8f0:	30 9f 04 f6 1d b0    	xor    %bl,-0x4fe209fc(%rdi)
  if ((vip_info->flags & F_HASH_NO_SRC_PORT)) {
     8f6:	1e                   	(bad)
     8f7:	02 30                	add    (%rax),%dh
     8f9:	9f                   	lahf
     8fa:	04 ef                	add    $0xef,%al
    pckt.flow.port16[0] = 0;
     8fc:	1e                   	(bad)
     8fd:	8a 21                	mov    (%rcx),%ah
     8ff:	02 30                	add    (%rax),%dh
     901:	9f                   	lahf
  vip_num = vip_info->vip_num;
     902:	04 ee                	add    $0xee,%al
     904:	21 b9 23 02 30 9f    	and    %edi,-0x60cffddd(%rcx)
     90a:	04 92                	add    $0x92,%al
  __u32 cpu_num = bpf_get_smp_processor_id();
     90c:	24 fa                	and    $0xfa,%al
     90e:	25 02 30 9f 04       	and    $0x49f3002,%eax
     913:	fa                   	cli
     914:	25 83 26 01 5e       	and    $0x5e012683,%eax
  void* lru_map = bpf_map_lookup_elem(&lru_mapping, &cpu_num);
     919:	04 89                	add    $0x89,%al
     91b:	27                   	(bad)
     91c:	e8 28 01 5e 04       	call   45e0a49 <_license+0x45de664>
     921:	bf 2c fa 2d 01       	mov    $0x12dfa2c,%edi
    struct lb_stats* lru_stats = bpf_map_lookup_elem(&stats, &lru_stats_key);
     926:	5e                   	pop    %rsi
     927:	04 a8                	add    $0xa8,%al
     929:	30 c7                	xor    %al,%bh
     92b:	30 02                	xor    %al,(%rdx)
     92d:	30 9f 04 cc 41 a6    	xor    %bl,-0x59be33fc(%rdi)
     933:	42 02 30             	rex.X add (%rax),%sil
    if (!lru_stats) {
     936:	9f                   	lahf
     937:	04 91                	add    $0x91,%al
     939:	43 de 43 02          	rex.XB fiadds 0x2(%r11)
    lru_stats->v1 += 1;
     93d:	30 9f 04 de 43 9c    	xor    %bl,-0x63bc21fc(%rdi)
     943:	44 01 5e 04          	add    %r11d,0x4(%rsi)
     947:	9c                   	pushf
     948:	44 b5 44             	rex.R mov $0x44,%bpl
     94b:	02 30                	add    (%rax),%dh
     94d:	9f                   	lahf
     94e:	04 f3                	add    $0xf3,%al
     950:	44 81 45 01 5e 04 f5 	rex.R addl $0x45f5045e,0x1(%rbp)
     957:	45 
  if (icmp_hdr->code == ICMP_FRAG_NEEDED) {
     958:	e5 47                	in     $0x47,%eax
     95a:	01 5e 00             	add    %ebx,0x0(%rsi)
     95d:	04 a0                	add    $0xa0,%al
     95f:	01 df                	add    %ebx,%edi
     961:	02 02                	add    (%rdx),%al
     963:	30 9f 04 a6 08 c7    	xor    %bl,-0x38f759fc(%rdi)
        bpf_map_lookup_elem(&stats, &stats_key);
     969:	09 02                	or     %eax,(%rdx)
     96b:	30 9f 04 d5 12 c5    	xor    %bl,-0x3aed2afc(%rdi)
     971:	13 02                	adc    (%rdx),%eax
     973:	30 9f 04 ff 13 b1    	xor    %bl,-0x4eec00fc(%rdi)
    if (!icmp_ptb_v4_stats) {
     979:	16                   	(bad)
     97a:	02 30                	add    (%rax),%dh
     97c:	9f                   	lahf
     97d:	04 dc                	add    $0xdc,%al
    icmp_ptb_v4_stats->v1 += 1;
     97f:	16                   	(bad)
     980:	d5                   	(bad)
     981:	1c 02                	sbb    $0x2,%al
    if (mtu < MAX_MTU_IN_PTB_TO_DROP) {
     983:	30 9f 04 f6 1d b0    	xor    %bl,-0x4fe209fc(%rdi)
      icmp_ptb_v4_stats->v2 += 1;
     989:	1e                   	(bad)
     98a:	02 30                	add    (%rax),%dh
     98c:	9f                   	lahf
  if (iph + 1 > data_end) {
     98d:	04 ef                	add    $0xef,%al
     98f:	1e                   	(bad)
     990:	8a 21                	mov    (%rcx),%ah
     992:	02 30                	add    (%rax),%dh
     994:	9f                   	lahf
     995:	04 ee                	add    $0xee,%al
     997:	21 b9 23 02 30 9f    	and    %edi,-0x60cffddd(%rcx)
  if (iph->ihl != 5) {
     99d:	04 92                	add    $0x92,%al
     99f:	24 fa                	and    $0xfa,%al
     9a1:	2d 02 30 9f 04       	sub    $0x49f3002,%eax
  pckt->flow.proto = iph->protocol;
     9a6:	ea                   	(bad)
     9a7:	2e c7                	cs (bad)
     9a9:	30 02                	xor    %al,(%rdx)
     9ab:	30 9f 04 cc 41 a6    	xor    %bl,-0x59be33fc(%rdi)
  pckt->flags |= F_ICMP;
     9b1:	42 02 30             	rex.X add (%rax),%sil
  pckt->flow.src = iph->daddr;
     9b4:	9f                   	lahf
     9b5:	04 91                	add    $0x91,%al
     9b7:	43 b5 44             	rex.XB mov $0x44,%r13b
  pckt->flow.dst = iph->saddr;
     9ba:	02 30                	add    (%rax),%dh
     9bc:	9f                   	lahf
     9bd:	04 f3                	add    $0xf3,%al
     9bf:	44 81 45 02 30 9f 04 	rex.R addl $0xf5049f30,0x2(%rbp)
     9c6:	f5 
    vip.port = 0;
     9c7:	45 e5 47             	rex.RB in $0x47,%eax
     9ca:	02 30                	add    (%rax),%dh
    vip_info = bpf_map_lookup_elem(&vip_map, &vip);
     9cc:	9f                   	lahf
     9cd:	00 04 a0             	add    %al,(%rax,%riz,4)
     9d0:	01 df                	add    %ebx,%edi
     9d2:	02 02                	add    (%rdx),%al
     9d4:	30 9f 04 a6 08 b4    	xor    %bl,-0x4bf759fc(%rdi)
     9da:	08 02                	or     %al,(%rdx)
     9dc:	30 9f 04 b4 08 8d    	xor    %bl,-0x72f74bfc(%rdi)
    if (!vip_info) {
     9e2:	09 03                	or     %eax,(%rbx)
     9e4:	10 22                	adc    %ah,(%rdx)
     9e6:	9f                   	lahf
     9e7:	04 d5                	add    $0xd5,%al
     9e9:	12 c5                	adc    %ch,%al
    if (!(vip_info->flags & F_HASH_DPORT_ONLY) &&
     9eb:	13 02                	adc    (%rdx),%eax
     9ed:	30 9f 04 dc 16 d4    	xor    %bl,-0x2be923fc(%rdi)
      pckt.flow.port16[1] = 0;
     9f3:	17                   	(bad)
     9f4:	03 10                	add    (%rax),%edx
     9f6:	22 9f 00 04 a0 01    	and    0x1a00400(%rdi),%bl
     9fc:	e3 01                	jrcxz  9ff <balancer_ingress+0x9ff>
     9fe:	03 77 10             	add    0x10(%rdi),%esi
  struct address dst_addr = {};
     a01:	9f                   	lahf
     a02:	04 a6                	add    $0xa6,%al
     a04:	08 b8 08 03 77 10    	or     %bh,0x10770308(%rax)
     a0a:	9f                   	lahf
     a0b:	00 04 a0             	add    %al,(%rax,%riz,4)
     a0e:	01 e3                	add    %esp,%ebx
    dst_addr.addr = pckt->flow.dst;
     a10:	01 02                	add    %eax,(%rdx)
     a12:	3e 9f                	ds lahf
     a14:	04 a6                	add    $0xa6,%al
     a16:	08 b8 08 02 3e 9f    	or     %bh,-0x60c1fdf8(%rax)
  __u32* decap_dst_flags = bpf_map_lookup_elem(&decap_dst, &dst_addr);
     a1c:	00 04 a0             	add    %al,(%rax,%riz,4)
     a1f:	01 e3                	add    %esp,%ebx
     a21:	01 01                	add    %eax,(%rcx)
     a23:	53                   	push   %rbx
     a24:	04 a6                	add    $0xa6,%al
     a26:	08 b8 08 01 53 00    	or     %bh,0x530108(%rax)
     a2c:	04 a0                	add    $0xa0,%al
     a2e:	01 e3                	add    %esp,%ebx
     a30:	01 01                	add    %eax,(%rcx)
     a32:	5f                   	pop    %rdi
  if (decap_dst_flags) {
     a33:	04 a6                	add    $0xa6,%al
     a35:	08 b8 08 01 5f 00    	or     %bh,0x5f0108(%rax)
     a3b:	04 a0                	add    $0xa0,%al
     a3d:	01 e3                	add    %esp,%ebx
     a3f:	01 02                	add    %eax,(%rdx)
     a41:	30 9f 04 a6 08 b8    	xor    %bl,-0x47f759fc(%rdi)
    data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     a47:	08 02                	or     %al,(%rdx)
     a49:	30 9f 00 04 a0 01    	xor    %bl,0x1a00400(%rdi)
     a4f:	ad                   	lods   %ds:(%rsi),%eax
     a50:	01 03                	add    %eax,(%rbx)
    if (!data_stats) {
     a52:	73 0e                	jae    a62 <balancer_ingress+0xa62>
     a54:	9f                   	lahf
     a55:	04 ad                	add    $0xad,%al
     a57:	01 af 01 01 50 00    	add    %ebp,0x500101(%rdi)
    data_stats->v1 += 1;
     a5d:	04 e3                	add    $0xe3,%al
     a5f:	01 df                	add    %ebx,%edi
     a61:	02 01                	add    (%rcx),%al
    if ((data + offset + sizeof(struct iphdr)) > data_end) {
     a63:	53                   	push   %rbx
     a64:	04 d5                	add    $0xd5,%al
     a66:	12 c5                	adc    %ch,%al
     a68:	13 01                	adc    (%rcx),%eax
     a6a:	53                   	push   %rbx
     a6b:	00 04 e3             	add    %al,(%rbx,%riz,8)
     a6e:	01 df                	add    %ebx,%edi
     a70:	02 01                	add    (%rcx),%al
     a72:	5f                   	pop    %rdi
     a73:	04 d5                	add    $0xd5,%al
     a75:	12 c5                	adc    %ch,%al
    csum = iph->check + 0x0001;
     a77:	13 01                	adc    (%rcx),%eax
     a79:	5f                   	pop    %rdi
     a7a:	00 04 e3             	add    %al,(%rbx,%riz,8)
     a7d:	01 df                	add    %ebx,%edi
    iph->check = (csum & 0xffff) + (csum >> 16);
     a7f:	02 03                	add    (%rbx),%al
     a81:	10 22                	adc    %ah,(%rdx)
     a83:	9f                   	lahf
     a84:	04 d5                	add    $0xd5,%al
     a86:	12 8d 13 03 10 22    	adc    0x22100313(%rbp),%cl
    if (!--iph->ttl) {
     a8c:	9f                   	lahf
     a8d:	04 8d                	add    $0x8d,%al
     a8f:	13 c5                	adc    %ebp,%eax
     a91:	13 03                	adc    (%rbx),%eax
     a93:	10 2a                	adc    %ch,(%rdx)
     a95:	9f                   	lahf
     a96:	00 04 e3             	add    %al,(%rbx,%riz,8)
     a99:	01 df                	add    %ebx,%edi
     a9b:	02 03                	add    (%rbx),%al
  memcpy(new_eth->h_source, old_eth->h_source, 6);
     a9d:	77 10                	ja     aaf <balancer_ingress+0xaaf>
     a9f:	9f                   	lahf
     aa0:	04 d5                	add    $0xd5,%al
     aa2:	12 c5                	adc    %ch,%al
     aa4:	13 03                	adc    (%rbx),%eax
     aa6:	77 10                	ja     ab8 <balancer_ingress+0xab8>
     aa8:	9f                   	lahf
     aa9:	00 04 e3             	add    %al,(%rbx,%riz,8)
  memcpy(new_eth->h_dest, old_eth->h_dest, 6);
     aac:	01 df                	add    %ebx,%edi
     aae:	02 01                	add    (%rcx),%al
     ab0:	5e                   	pop    %rsi
     ab1:	04 d5                	add    $0xd5,%al
     ab3:	12 c5                	adc    %ch,%al
     ab5:	13 01                	adc    (%rcx),%eax
  new_eth->h_proto = BE_ETH_P_IP;
     ab7:	5e                   	pop    %rsi
     ab8:	00 04 8e             	add    %al,(%rsi,%rcx,4)
     abb:	02 a1 02 02 30 9f    	add    -0x60cffdfe(%rcx),%ah
     ac1:	04 a1                	add    $0xa1,%al
     ac3:	02 bb 02 01 54 00    	add    0x540102(%rbx),%bh
  if (XDP_ADJUST_HEAD_FUNC(xdp, (int)sizeof(struct iphdr))) {
     ac9:	04 a7                	add    $0xa7,%al
     acb:	02 ab 02 03 11 00    	add    0x110302(%rbx),%ch
     ad1:	9f                   	lahf
     ad2:	04 ab                	add    $0xab,%al
     ad4:	02 af 02 03 11 02    	add    0x2110302(%rdi),%ch
     ada:	9f                   	lahf
     adb:	04 af                	add    $0xaf,%al
     add:	02 b4 02 03 11 04 9f 	add    -0x60fbeefd(%rdx,%rax,1),%dh
  struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     ae4:	04 b4                	add    $0xb4,%al
     ae6:	02 b7 02 03 11 06    	add    0x6110302(%rdi),%dh
     aec:	9f                   	lahf
     aed:	04 b7                	add    $0xb7,%al
     aef:	02 bb 02 03 11 07    	add    0x7110302(%rbx),%bh
  if (!data_stats) {
     af5:	9f                   	lahf
     af6:	04 bb                	add    $0xbb,%al
     af8:	02 c1                	add    %cl,%al
     afa:	02 03                	add    (%rbx),%al
     afc:	11 08                	adc    %ecx,(%rax)
  if (action >= 0) {
     afe:	9f                   	lahf
     aff:	04 c1                	add    $0xc1,%al
     b01:	02 df                	add    %bh,%bl
     b03:	02 03                	add    (%rbx),%al
     b05:	11 09                	adc    %ecx,(%rcx)
     b07:	9f                   	lahf
     b08:	00 04 ab             	add    %al,(%rbx,%rbp,4)
  if (decap_dst_flags) {
     b0b:	02 af 02 03 73 12    	add    0x12730302(%rdi),%ch
  if (action >= 0) {
     b11:	9f                   	lahf
     b12:	04 af                	add    $0xaf,%al
     b14:	02 b4 02 03 73 16 9f 	add    -0x60e98cfd(%rdx,%rax,1),%dh
     b1b:	04 b4                	add    $0xb4,%al
        bpf_map_lookup_elem(&stats, &xpop_stats_key);
     b1d:	02 b7 02 03 73 1c    	add    0x1c730302(%rdi),%dh
     b23:	9f                   	lahf
     b24:	04 b7                	add    $0xb7,%al
     b26:	02 bb 02 03 73 1e    	add    0x1e730302(%rbx),%bh
    if (xpop_stats_data) {
     b2c:	9f                   	lahf
     b2d:	04 bb                	add    $0xbb,%al
     b2f:	02 c1                	add    %cl,%al
     b31:	02 03                	add    (%rbx),%al
     b33:	73 20                	jae    b55 <balancer_ingress+0xb55>
     b35:	9f                   	lahf
     b36:	04 c1                	add    $0xc1,%al
     b38:	02 df                	add    %bh,%bl
     b3a:	02 05 73 20 23 02    	add    0x2232073(%rip),%al        # 2232bb3 <_license+0x22307ce>
     b40:	9f                   	lahf
     b41:	00 04 df             	add    %al,(%rdi,%rbx,8)
     b44:	02 9a 04 01 5d 04    	add    0x45d0104(%rdx),%bl
     b4a:	88 05 c2 06 01 5d    	mov    %al,0x5d0106c2(%rip)        # 5d011212 <_license+0x5d00ee2d>
     b50:	04 db                	add    $0xdb,%al
     b52:	07                   	(bad)
     b53:	a6                   	cmpsb  %es:(%rdi),%ds:(%rsi)
     b54:	08 01                	or     %al,(%rcx)
     b56:	5d                   	pop    %rbp
     b57:	04 c7                	add    $0xc7,%al
     b59:	09 f9                	or     %edi,%ecx
     b5b:	0c 01                	or     $0x1,%al
     b5d:	5d                   	pop    %rbp
     b5e:	04 83                	add    $0x83,%al
     b60:	0d d5 12 01 5d       	or     $0x5d0112d5,%eax
     b65:	04 c5                	add    $0xc5,%al
        bpf_map_lookup_elem(&stats, &stats_key);
     b67:	13 ff                	adc    %edi,%edi
     b69:	13 01                	adc    (%rcx),%eax
     b6b:	5d                   	pop    %rbp
     b6c:	04 d5                	add    $0xd5,%al
     b6e:	1c f6                	sbb    $0xf6,%al
     b70:	1d 01 5d 04 ba       	sbb    $0xba045d01,%eax
     b75:	1e                   	(bad)
    if (!icmp_ptb_v6_stats) {
     b76:	ef                   	out    %eax,(%dx)
     b77:	1e                   	(bad)
     b78:	01 5d 04             	add    %ebx,0x4(%rbp)
     b7b:	9a                   	(bad)
     b7c:	21 ee                	and    %ebp,%esi
     b7e:	21 01                	and    %eax,(%rcx)
    icmp_ptb_v6_stats->v1 += 1;
     b80:	5d                   	pop    %rbp
     b81:	04 b9                	add    $0xb9,%al
    __u32 mtu = bpf_ntohl(icmp_hdr->icmp6_mtu);
     b83:	23 92 24 01 5d 04    	and    0x45d0124(%rdx),%edx
    if (mtu < MAX_MTU_IN_PTB_TO_DROP) {
     b89:	fa                   	cli
     b8a:	2d e0 2e 01 5d       	sub    $0x5d012ee0,%eax
     b8f:	04 da                	add    $0xda,%al
      icmp_ptb_v6_stats->v2 += 1;
     b91:	30 c6                	xor    %al,%dh
     b93:	37                   	(bad)
     b94:	01 5d 04             	add    %ebx,0x4(%rbp)
  if (ip6h + 1 > data_end) {
     b97:	c3                   	ret
     b98:	38 c4                	cmp    %al,%ah
     b9a:	3d 01 5d 04 e5       	cmp    $0xe5045d01,%eax
     b9f:	3d b4 3f 01 5d       	cmp    $0x5d013fb4,%eax
     ba4:	04 c8                	add    $0xc8,%al
     ba6:	3f                   	(bad)
  pckt->flow.proto = ip6h->nexthdr;
     ba7:	cc                   	int3
     ba8:	41 01 5d 04          	add    %ebx,0x4(%r13)
     bac:	ad                   	lods   %ds:(%rsi),%eax
     bad:	42 fe 42 01          	rex.X incb 0x1(%rdx)
  pckt->flags |= F_ICMP;
     bb1:	5d                   	pop    %rbp
     bb2:	04 b5                	add    $0xb5,%al
  memcpy(pckt->flow.srcv6, ip6h->daddr.s6_addr32, 16);
     bb4:	44                   	rex.R
     bb5:	f3 44 01 5d 04       	repz add %r11d,0x4(%rbp)
     bba:	81 45 f5 45 01 5d 00 	addl   $0x5d0145,-0xb(%rbp)
     bc1:	04 df                	add    $0xdf,%al
     bc3:	02 9a 04 02 3e 9f    	add    -0x60c1fdfc(%rdx),%bl
  memcpy(pckt->flow.dstv6, ip6h->saddr.s6_addr32, 16);
     bc9:	04 88                	add    $0x88,%al
     bcb:	05 c2 06 02 3e       	add    $0x3e0206c2,%eax
     bd0:	9f                   	lahf
     bd1:	04 db                	add    $0xdb,%al
     bd3:	07                   	(bad)
     bd4:	a6                   	cmpsb  %es:(%rdi),%ds:(%rsi)
     bd5:	08 02                	or     %al,(%rdx)
     bd7:	3e 9f                	ds lahf
     bd9:	04 c7                	add    $0xc7,%al
     bdb:	09 f9                	or     %edi,%ecx
  if (protocol == IPPROTO_IPIP) {
     bdd:	0c 02                	or     $0x2,%al
     bdf:	3e 9f                	ds lahf
     be1:	04 83                	add    $0x83,%al
     be3:	0d d5 12 02 3e       	or     $0x3e0212d5,%eax
     be8:	9f                   	lahf
     be9:	04 c5                	add    $0xc5,%al
     beb:	13 ff                	adc    %edi,%edi
     bed:	13 02                	adc    (%rdx),%eax
     bef:	3e 9f                	ds lahf
     bf1:	04 d5                	add    $0xd5,%al
     bf3:	1c f6                	sbb    $0xf6,%al
  struct address dst_addr = {};
     bf5:	1d 02 3e 9f 04       	sbb    $0x49f3e02,%eax
     bfa:	ba 1e ef 1e 02       	mov    $0x21eef1e,%edx
     bff:	3e 9f                	ds lahf
     c01:	04 9a                	add    $0x9a,%al
     c03:	21 ee                	and    %ebp,%esi
     c05:	21 02                	and    %eax,(%rdx)
    dst_addr.addr = pckt->flow.dst;
     c07:	3e 9f                	ds lahf
     c09:	04 b9                	add    $0xb9,%al
     c0b:	23 92 24 02 3e 9f    	and    -0x60c1fddc(%rdx),%edx
  __u32* decap_dst_flags = bpf_map_lookup_elem(&decap_dst, &dst_addr);
     c11:	04 fa                	add    $0xfa,%al
     c13:	2d e0 2e 02 3e       	sub    $0x3e022ee0,%eax
     c18:	9f                   	lahf
     c19:	04 da                	add    $0xda,%al
     c1b:	30 c6                	xor    %al,%dh
     c1d:	37                   	(bad)
     c1e:	02 3e                	add    (%rsi),%bh
     c20:	9f                   	lahf
     c21:	04 c3                	add    $0xc3,%al
     c23:	38 c4                	cmp    %al,%ah
     c25:	3d 02 3e 9f 04       	cmp    $0x49f3e02,%eax
  if (decap_dst_flags) {
     c2a:	e5 3d                	in     $0x3d,%eax
     c2c:	b4 3f                	mov    $0x3f,%ah
     c2e:	02 3e                	add    (%rsi),%bh
     c30:	9f                   	lahf
     c31:	04 c8                	add    $0xc8,%al
     c33:	3f                   	(bad)
     c34:	cc                   	int3
     c35:	41 02 3e             	add    (%r14),%dil
    data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     c38:	9f                   	lahf
     c39:	04 ad                	add    $0xad,%al
     c3b:	42 fe 42 02          	rex.X incb 0x2(%rdx)
     c3f:	3e 9f                	ds lahf
     c41:	04 b5                	add    $0xb5,%al
     c43:	44                   	rex.R
     c44:	f3 44 02 3e          	repz add (%rsi),%r15b
    if (!data_stats) {
     c48:	9f                   	lahf
     c49:	04 81                	add    $0x81,%al
     c4b:	45 f5                	rex.RB cmc
     c4d:	45 02 3e             	add    (%r14),%r15b
     c50:	9f                   	lahf
    data_stats->v1 += 1;
     c51:	00 04 df             	add    %al,(%rdi,%rbx,8)
     c54:	02 9a 04 02 31 9f    	add    -0x60cefdfc(%rdx),%bl
    if ((*data + offset) > *data_end) {
     c5a:	04 88                	add    $0x88,%al
     c5c:	05 c2 06 02 31       	add    $0x310206c2,%eax
     c61:	9f                   	lahf
     c62:	04 db                	add    $0xdb,%al
     c64:	07                   	(bad)
     c65:	a6                   	cmpsb  %es:(%rdi),%ds:(%rsi)
     c66:	08 02                	or     %al,(%rdx)
    if ((data + offset + sizeof(struct ipv6hdr)) > data_end) {
     c68:	31 9f 04 c7 09 f9    	xor    %ebx,-0x6f638fc(%rdi)
     c6e:	0c 02                	or     $0x2,%al
     c70:	31 9f 04 83 0d d5    	xor    %ebx,-0x2af27cfc(%rdi)
     c76:	12 02                	adc    (%rdx),%al
     c78:	31 9f 04 c5 13 ff    	xor    %ebx,-0xec3afc(%rdi)
    if (!--ip6h->hop_limit) {
     c7e:	13 02                	adc    (%rdx),%eax
     c80:	31 9f 04 d5 1c f6    	xor    %ebx,-0x9e32afc(%rdi)
     c86:	1d 02 31 9f 04       	sbb    $0x49f3102,%eax
     c8b:	ba 1e ef 1e 02       	mov    $0x21eef1e,%edx
  memcpy(new_eth->h_source, old_eth->h_source, 6);
     c90:	31 9f 04 9a 21 ee    	xor    %ebx,-0x11de65fc(%rdi)
     c96:	21 02                	and    %eax,(%rdx)
     c98:	31 9f 04 b9 23 92    	xor    %ebx,-0x6ddc46fc(%rdi)
  memcpy(new_eth->h_dest, old_eth->h_dest, 6);
     c9e:	24 02                	and    $0x2,%al
     ca0:	31 9f 04 fa 2d e0    	xor    %ebx,-0x1fd205fc(%rdi)
     ca6:	2e 02 31             	cs add (%rcx),%dh
     ca9:	9f                   	lahf
     caa:	04 da                	add    $0xda,%al
     cac:	30 c6                	xor    %al,%dh
     cae:	37                   	(bad)
     caf:	02 31                	add    (%rcx),%dh
     cb1:	9f                   	lahf
     cb2:	04 c3                	add    $0xc3,%al
     cb4:	38 c4                	cmp    %al,%ah
  if (XDP_ADJUST_HEAD_FUNC(xdp, (int)sizeof(struct ipv6hdr))) {
     cb6:	3d 02 31 9f 04       	cmp    $0x49f3102,%eax
     cbb:	e5 3d                	in     $0x3d,%eax
     cbd:	b4 3f                	mov    $0x3f,%ah
     cbf:	02 31                	add    (%rcx),%dh
     cc1:	9f                   	lahf
     cc2:	04 c8                	add    $0xc8,%al
     cc4:	3f                   	(bad)
     cc5:	cc                   	int3
     cc6:	41 02 31             	add    (%r9),%sil
     cc9:	9f                   	lahf
     cca:	04 ad                	add    $0xad,%al
     ccc:	42 fe 42 02          	rex.X incb 0x2(%rdx)
     cd0:	31 9f 04 b5 44 f3    	xor    %ebx,-0xcbb4afc(%rdi)
  struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     cd6:	44 02 31             	add    (%rcx),%r14b
     cd9:	9f                   	lahf
     cda:	04 81                	add    $0x81,%al
     cdc:	45 f5                	rex.RB cmc
     cde:	45 02 31             	add    (%r9),%r14b
     ce1:	9f                   	lahf
  if (!data_stats) {
     ce2:	00 04 df             	add    %al,(%rdi,%rbx,8)
     ce5:	02 9a 04 01 53 04    	add    0x4530104(%rdx),%bl
     ceb:	88 05 c2 06 01 53    	mov    %al,0x530106c2(%rip)        # 530113b3 <_license+0x5300efce>
  if (action >= 0) {
     cf1:	04 db                	add    $0xdb,%al
     cf3:	07                   	(bad)
     cf4:	a6                   	cmpsb  %es:(%rdi),%ds:(%rsi)
     cf5:	08 01                	or     %al,(%rcx)
     cf7:	53                   	push   %rbx
     cf8:	04 c7                	add    $0xc7,%al
     cfa:	09 f9                	or     %edi,%ecx
  if (decap_dst_flags) {
     cfc:	0c 01                	or     $0x1,%al
     cfe:	53                   	push   %rbx
  if (action >= 0) {
     cff:	04 83                	add    $0x83,%al
     d01:	0d d5 12 01 53       	or     $0x530112d5,%eax
     d06:	04 c5                	add    $0xc5,%al
     d08:	13 ff                	adc    %edi,%edi
     d0a:	13 01                	adc    (%rcx),%eax
     d0c:	53                   	push   %rbx
     d0d:	04 d5                	add    $0xd5,%al
        bpf_map_lookup_elem(&stats, &xpop_stats_key);
     d0f:	1c ba                	sbb    $0xba,%al
     d11:	1d 01 53 04 ba       	sbb    $0xba045301,%eax
     d16:	1e                   	(bad)
     d17:	ef                   	out    %eax,(%dx)
     d18:	1e                   	(bad)
     d19:	01 53 00             	add    %edx,0x0(%rbx)
     d1c:	04 df                	add    $0xdf,%al
    if (xpop_stats_data) {
     d1e:	02 9a 04 01 5f 04    	add    0x45f0104(%rdx),%bl
     d24:	88 05 c2 06 01 5f    	mov    %al,0x5f0106c2(%rip)        # 5f0113ec <_license+0x5f00f007>
     d2a:	04 db                	add    $0xdb,%al
  udp = data + off;
     d2c:	07                   	(bad)
     d2d:	a6                   	cmpsb  %es:(%rdi),%ds:(%rsi)
     d2e:	08 01                	or     %al,(%rcx)
  if (is_ipv6) {
     d30:	5f                   	pop    %rdi
     d31:	04 c7                	add    $0xc7,%al
  udp = data + off;
     d33:	09 f9                	or     %edi,%ecx
     d35:	0c 01                	or     $0x1,%al
  if (udp + 1 > data_end) {
     d37:	5f                   	pop    %rdi
     d38:	04 83                	add    $0x83,%al
     d3a:	0d d5 12 01 5f       	or     $0x5f0112d5,%eax
     d3f:	04 c5                	add    $0xc5,%al
     d41:	13 ff                	adc    %edi,%edi
     d43:	13 01                	adc    (%rcx),%eax
     d45:	5f                   	pop    %rdi
     d46:	04 d5                	add    $0xd5,%al
     d48:	1c f6                	sbb    $0xf6,%al
     d4a:	1d 01 5f 04 ba       	sbb    $0xba045f01,%eax
     d4f:	1e                   	(bad)
     d50:	d9 1e                	fstps  (%rsi)
     d52:	01 5f 04             	add    %ebx,0x4(%rdi)
     d55:	9a                   	(bad)
     d56:	21 ee                	and    %ebp,%esi
     d58:	21 01                	and    %eax,(%rcx)
     d5a:	5f                   	pop    %rdi
     d5b:	04 b9                	add    $0xb9,%al
     d5d:	23 92 24 01 5f 04    	and    0x45f0124(%rdx),%edx
     d63:	fa                   	cli
     d64:	2d e0 2e 01 5f       	sub    $0x5f012ee0,%eax
     d69:	04 da                	add    $0xda,%al
     d6b:	30 f0                	xor    %dh,%al
     d6d:	31 01                	xor    %eax,(%rcx)
     d6f:	5f                   	pop    %rdi
     d70:	04 ad                	add    $0xad,%al
     d72:	42 fe 42 01          	rex.X incb 0x1(%rdx)
    vip.vip = pckt.flow.dst;
     d76:	5f                   	pop    %rdi
     d77:	04 b5                	add    $0xb5,%al
     d79:	44                   	rex.R
     d7a:	f3 44 01 5f 04       	repz add %r11d,0x4(%rdi)
  vip.port = pckt.flow.port16[1];
     d7f:	81 45 f5 45 01 5f 00 	addl   $0x5f0145,-0xb(%rbp)
  vip.proto = pckt.flow.proto;
     d86:	04 df                	add    $0xdf,%al
     d88:	02 9a 04 02 30 9f    	add    -0x60cffdfc(%rdx),%bl
  vip_info = bpf_map_lookup_elem(&vip_map, &vip);
     d8e:	04 88                	add    $0x88,%al
     d90:	05 c2 06 02 30       	add    $0x300206c2,%eax
     d95:	9f                   	lahf
     d96:	04 db                	add    $0xdb,%al
     d98:	07                   	(bad)
     d99:	a6                   	cmpsb  %es:(%rdi),%ds:(%rsi)
     d9a:	08 02                	or     %al,(%rdx)
     d9c:	30 9f 04 c7 09 f9    	xor    %bl,-0x6f638fc(%rdi)
     da2:	0c 02                	or     $0x2,%al
     da4:	30 9f 04 83 0d d5    	xor    %bl,-0x2af27cfc(%rdi)
  if (!vip_info) {
     daa:	12 02                	adc    (%rdx),%al
     dac:	30 9f 04 c5 13 ff    	xor    %bl,-0xec3afc(%rdi)
     db2:	13 02                	adc    (%rdx),%eax
  if (data_end - data > MAX_PCKT_SIZE) {
     db4:	30 9f 04 d5 1c f6    	xor    %bl,-0x9e32afc(%rdi)
     dba:	1d 02 30 9f 04       	sbb    $0x49f3002,%eax
     dbf:	ba 1e ef 1e 02       	mov    $0x21eef1e,%edx
     dc4:	30 9f 04 9a 21 ee    	xor    %bl,-0x11de65fc(%rdi)
     dca:	21 02                	and    %eax,(%rdx)
     dcc:	30 9f 04 b9 23 92    	xor    %bl,-0x6ddc46fc(%rdi)
  data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     dd2:	24 02                	and    $0x2,%al
     dd4:	30 9f 04 fa 2d e0    	xor    %bl,-0x1fd205fc(%rdi)
     dda:	2e 02 30             	cs add (%rax),%dh
     ddd:	9f                   	lahf
     dde:	04 da                	add    $0xda,%al
  if (!data_stats) {
     de0:	30 a4 31 02 30 9f 04 	xor    %ah,0x49f3002(%rcx,%rsi,1)
     de7:	a4                   	movsb  %ds:(%rsi),%es:(%rdi)
     de8:	31 e1                	xor    %esp,%ecx
  data_stats->v1 += 1;
     dea:	31 01                	xor    %eax,(%rcx)
     dec:	5e                   	pop    %rsi
     ded:	04 e1                	add    $0xe1,%al
  if ((vip_info->flags & F_HASH_NO_SRC_PORT)) {
     def:	31 e0                	xor    %esp,%eax
     df1:	34 02                	xor    $0x2,%al
    pckt.flow.port16[0] = 0;
     df3:	30 9f 04 e0 34 f5    	xor    %bl,-0xacb1ffc(%rdi)
     df9:	34 01                	xor    $0x1,%al
  vip_num = vip_info->vip_num;
     dfb:	5e                   	pop    %rsi
     dfc:	04 eb                	add    $0xeb,%al
     dfe:	35 c6 37 01 5e       	xor    $0x5e0137c6,%eax
     e03:	04 85                	add    $0x85,%al
     e05:	3e b4 3f             	ds mov $0x3f,%ah
     e08:	01 5e 04             	add    %ebx,0x4(%rsi)
     e0b:	ad                   	lods   %ds:(%rsi),%eax
  __u32 cpu_num = bpf_get_smp_processor_id();
     e0c:	42 fe 42 01          	rex.X incb 0x1(%rdx)
     e10:	5e                   	pop    %rsi
     e11:	04 b5                	add    $0xb5,%al
     e13:	44                   	rex.R
     e14:	f3 44 01 5e 04       	repz add %r11d,0x4(%rsi)
  void* lru_map = bpf_map_lookup_elem(&lru_mapping, &cpu_num);
     e19:	81 45 f5 45 01 5e 00 	addl   $0x5e0145,-0xb(%rbp)
     e20:	04 af                	add    $0xaf,%al
     e22:	03 9a 04 02 30 9f    	add    -0x60cffdfc(%rdx),%ebx
    struct lb_stats* lru_stats = bpf_map_lookup_elem(&stats, &lru_stats_key);
     e28:	04 88                	add    $0x88,%al
     e2a:	05 c2 06 02 30       	add    $0x300206c2,%eax
     e2f:	9f                   	lahf
     e30:	04 db                	add    $0xdb,%al
     e32:	07                   	(bad)
     e33:	a6                   	cmpsb  %es:(%rdi),%ds:(%rsi)
    if (!lru_stats) {
     e34:	08 02                	or     %al,(%rdx)
     e36:	30 9f 04 c7 09 f9    	xor    %bl,-0x6f638fc(%rdi)
     e3c:	0c 02                	or     $0x2,%al
    lru_stats->v1 += 1;
     e3e:	30 9f 04 83 0d d5    	xor    %bl,-0x2af27cfc(%rdi)
     e44:	12 02                	adc    (%rdx),%al
     e46:	30 9f 04 c5 13 ff    	xor    %bl,-0xec3afc(%rdi)
     e4c:	13 02                	adc    (%rdx),%eax
     e4e:	30 9f 04 d5 1c f6    	xor    %bl,-0x9e32afc(%rdi)
     e54:	1d 02 30 9f 04       	sbb    $0x49f3002,%eax
     e59:	ba 1e ef 1e 02       	mov    $0x21eef1e,%edx
     e5e:	30 9f 04 9a 21 ee    	xor    %bl,-0x11de65fc(%rdi)
  void* lru_map = bpf_map_lookup_elem(&lru_mapping, &cpu_num);
     e64:	21 02                	and    %eax,(%rdx)
     e66:	30 9f 04 b9 23 92    	xor    %bl,-0x6ddc46fc(%rdi)
     e6c:	24 02                	and    $0x2,%al
  if (!lru_map) {
     e6e:	30 9f 04 fa 2d e0    	xor    %bl,-0x1fd205fc(%rdi)
     e74:	2e 02 30             	cs add (%rax),%dh
     e77:	9f                   	lahf
     e78:	04 da                	add    $0xda,%al
     e7a:	30 c6                	xor    %al,%dh
     e7c:	37                   	(bad)
     e7d:	02 30                	add    (%rax),%dh
  if ((vip_info->flags & F_QUIC_VIP)) {
     e7f:	9f                   	lahf
     e80:	04 c3                	add    $0xc3,%al
     e82:	38 c4                	cmp    %al,%ah
     e84:	3d 02 30 9f 04       	cmp    $0x49f3002,%eax
    bool is_icmp = (pckt.flags & F_ICMP);
     e89:	e5 3d                	in     $0x3d,%eax
     e8b:	b4 3f                	mov    $0x3f,%ah
    if (is_icmp) {
     e8d:	02 30                	add    (%rax),%dh
     e8f:	9f                   	lahf
     e90:	04 c8                	add    $0xc8,%al
     e92:	3f                   	(bad)
     e93:	cc                   	int3
     e94:	41 02 30             	add    (%r8),%sil
     e97:	9f                   	lahf
     e98:	04 ad                	add    $0xad,%al
     e9a:	42 fe 42 02          	rex.X incb 0x2(%rdx)
          bpf_map_lookup_elem(&quic_stats_map, &quic_packets_stats_key);
     e9e:	30 9f 04 b5 44 f3    	xor    %bl,-0xcbb4afc(%rdi)
     ea4:	44 02 30             	add    (%rax),%r14b
     ea7:	9f                   	lahf
     ea8:	04 81                	add    $0x81,%al
     eaa:	45 f5                	rex.RB cmc
     eac:	45 02 30             	add    (%r8),%r14b
      if (!quic_packets_stats) {
     eaf:	9f                   	lahf
     eb0:	00 04 af             	add    %al,(%rdi,%rbp,4)
     eb3:	03 9a 04 02 30 9f    	add    -0x60cffdfc(%rdx),%ebx
  if ((data + off + sizeof(struct udphdr) + sizeof(__u8)) > data_end) {
     eb9:	04 88                	add    $0x88,%al
  bool is_icmp = (pckt->flags & F_ICMP);
     ebb:	05 ac 05 02 30       	add    $0x300205ac,%eax
  if ((data + off + sizeof(struct udphdr) + sizeof(__u8)) > data_end) {
     ec0:	9f                   	lahf
     ec1:	04 ac                	add    $0xac,%al
     ec3:	05 c2 06 03 10       	add    $0x100306c2,%eax
     ec8:	36 9f                	ss lahf
     eca:	04 db                	add    $0xdb,%al
     ecc:	07                   	(bad)
     ecd:	ec                   	in     (%dx),%al
     ece:	07                   	(bad)
     ecf:	03 10                	add    (%rax),%edx
     ed1:	36 9f                	ss lahf
     ed3:	04 c7                	add    $0xc7,%al
     ed5:	09 bd 0a 02 30 9f    	or     %edi,-0x60cffdf6(%rbp)
  if ((*pkt_type & QUIC_LONG_HEADER) == QUIC_LONG_HEADER) {
     edb:	04 ec                	add    $0xec,%al
     edd:	0f dc 10             	paddusb (%rax),%mm2
     ee0:	03 10                	add    (%rax),%edx
     ee2:	36 9f                	ss lahf
    if (quic_data + sizeof(struct quic_short_header) > data_end) {
     ee4:	00 04 af             	add    %al,(%rdi,%rbp,4)
     ee7:	03 ed                	add    %ebp,%ebp
     ee9:	03 03                	add    (%rbx),%eax
     eeb:	77 10                	ja     efd <balancer_ingress+0xefd>
     eed:	9f                   	lahf
     eee:	04 88                	add    $0x88,%al
     ef0:	05 b4 05 03 77       	add    $0x770305b4,%eax
     ef5:	10 9f 00 04 af 03    	adc    %bl,0x3af0400(%rdi)
    vip.port = 0;
     efb:	ed                   	in     (%dx),%eax
     efc:	03 02                	add    (%rdx),%eax
    vip_info = bpf_map_lookup_elem(&vip_map, &vip);
     efe:	3e 9f                	ds lahf
     f00:	04 88                	add    $0x88,%al
     f02:	05 b4 05 02 3e       	add    $0x3e0205b4,%eax
     f07:	9f                   	lahf
     f08:	00 04 af             	add    %al,(%rdi,%rbp,4)
     f0b:	03 ed                	add    %ebp,%ebp
     f0d:	03 01                	add    (%rcx),%eax
    if (!vip_info) {
     f0f:	53                   	push   %rbx
     f10:	04 88                	add    $0x88,%al
     f12:	05 b4 05 01 53       	add    $0x530105b4,%eax
     f17:	00 04 af             	add    %al,(%rdi,%rbp,4)
     f1a:	03 ed                	add    %ebp,%ebp
    if (!(vip_info->flags & F_HASH_DPORT_ONLY) &&
     f1c:	03 01                	add    (%rcx),%eax
     f1e:	5f                   	pop    %rdi
     f1f:	04 88                	add    $0x88,%al
     f21:	05 b4 05 01 5f       	add    $0x5f0105b4,%eax
      pckt.flow.port16[1] = 0;
     f26:	00 04 af             	add    %al,(%rdi,%rbp,4)
     f29:	03 ed                	add    %ebp,%ebp
     f2b:	03 02                	add    (%rdx),%eax
     f2d:	31 9f 04 88 05 b4    	xor    %ebx,-0x4bfa77fc(%rdi)
     f33:	05 02 31 9f 00       	add    $0x9f3102,%eax
     f38:	04 af                	add    $0xaf,%al
      struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     f3a:	03 bc 03 03 73 0e 9f 	add    -0x60f18cfd(%rbx,%rax,1),%edi
     f41:	04 bc                	add    $0xbc,%al
     f43:	03 bf 03 01 50 00    	add    0x500103(%rdi),%edi
     f49:	04 bc                	add    $0xbc,%al
      if (!data_stats) {
     f4b:	03 ed                	add    %ebp,%ebp
     f4d:	03 03                	add    (%rbx),%eax
     f4f:	10 28                	adc    %ch,(%rax)
     f51:	9f                   	lahf
     f52:	04 88                	add    $0x88,%al
      data_stats->v1 += 1;
     f54:	05 b4 05 03 10       	add    $0x100305b4,%eax
        (icmp_hdr->icmp6_code == ICMPV6_ADDR_UNREACH) ||
     f59:	28 9f 00 04 ed 03    	sub    %bl,0x3ed0400(%rdi)
     f5f:	9a                   	(bad)
      if (ignorable_quic_icmp_code(data, data_end, is_ipv6)) {
     f60:	04 01                	add    $0x1,%al
     f62:	53                   	push   %rbx
     f63:	04 c7                	add    $0xc7,%al
     f65:	09 bd 0a 01 53 00    	or     %edi,0x53010a(%rbp)
     f6b:	04 ed                	add    $0xed,%al
     f6d:	03 9a 04 01 5f 04    	add    0x45f0104(%rdx),%ebx
     f73:	c7                   	(bad)
     f74:	09 bd 0a 01 5f 00    	or     %edi,0x5f010a(%rbp)
     f7a:	04 ed                	add    $0xed,%al
  void* lru_map = bpf_map_lookup_elem(&lru_mapping, &cpu_num);
     f7c:	03 9a 04 03 77 10    	add    0x10770304(%rdx),%ebx
     f82:	9f                   	lahf
     f83:	04 c7                	add    $0xc7,%al
     f85:	09 bd 0a 03 77 10    	or     %edi,0x1077030a(%rbp)
  if (!lru_map) {
     f8b:	9f                   	lahf
     f8c:	00 04 ed 03 9a 04 01 	add    %al,0x1049a03(,%rbp,8)
  if ((vip_info->flags & F_QUIC_VIP)) {
     f93:	5e                   	pop    %rsi
     f94:	04 c7                	add    $0xc7,%al
     f96:	09 bd 0a 01 5e 00    	or     %edi,0x5e010a(%rbp)
     f9c:	04 ac                	add    $0xac,%al
     f9e:	05 c2 06 03 11       	add    $0x110306c2,%eax
    bool is_icmp = (pckt.flags & F_ICMP);
     fa3:	7f 9f                	jg     f44 <balancer_ingress+0xf44>
    if (is_icmp) {
     fa5:	04 db                	add    $0xdb,%al
     fa7:	07                   	(bad)
     fa8:	a6                   	cmpsb  %es:(%rdi),%ds:(%rsi)
     fa9:	08 03                	or     %al,(%rbx)
     fab:	11 7f 9f             	adc    %edi,-0x61(%rdi)
     fae:	04 c1                	add    $0xc1,%al
          bpf_map_lookup_elem(&quic_stats_map, &quic_packets_stats_key);
     fb0:	0a b9 0b 03 11 7f    	or     0x7f11030b(%rcx),%bh
     fb6:	9f                   	lahf
     fb7:	04 b9                	add    $0xb9,%al
     fb9:	0b f9                	or     %ecx,%edi
     fbb:	0c 03                	or     $0x3,%al
     fbd:	11 01                	adc    %eax,(%rcx)
     fbf:	9f                   	lahf
     fc0:	04 83                	add    $0x83,%al
     fc2:	0d de 0d 03 11       	or     $0x11030dde,%eax
      if (!quic_packets_stats) {
     fc7:	7f 9f                	jg     f68 <balancer_ingress+0xf68>
     fc9:	04 de                	add    $0xde,%al
     fcb:	0d b6 0f 03 11       	or     $0x11030fb6,%eax
  if ((data + off + sizeof(struct udphdr) + sizeof(__u8)) > data_end) {
     fd0:	01 9f 04 b6 0f d5    	add    %ebx,-0x2af049fc(%rdi)
     fd6:	12 03                	adc    (%rbx),%al
     fd8:	11 7f 9f             	adc    %edi,-0x61(%rdi)
     fdb:	04 c5                	add    $0xc5,%al
     fdd:	13 ff                	adc    %edi,%edi
     fdf:	13 03                	adc    (%rbx),%eax
     fe1:	11 7f 9f             	adc    %edi,-0x61(%rdi)
     fe4:	04 d5                	add    $0xd5,%al
     fe6:	1c f6                	sbb    $0xf6,%al
     fe8:	1d 03 11 7f 9f       	sbb    $0x9f7f1103,%eax
     fed:	04 ba                	add    $0xba,%al
      struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     fef:	1e                   	(bad)
     ff0:	ef                   	out    %eax,(%dx)
     ff1:	1e                   	(bad)
     ff2:	03 11                	add    (%rcx),%edx
     ff4:	7f 9f                	jg     f95 <balancer_ingress+0xf95>
     ff6:	04 9a                	add    $0x9a,%al
     ff8:	21 ee                	and    %ebp,%esi
     ffa:	21 03                	and    %eax,(%rbx)
     ffc:	11 7f 9f             	adc    %edi,-0x61(%rdi)
     fff:	04 b9                	add    $0xb9,%al
    1001:	23 92 24 03 11 7f    	and    0x7f110324(%rdx),%edx
      if (!data_stats) {
    1007:	9f                   	lahf
    1008:	04 fa                	add    $0xfa,%al
    100a:	2d e0 2e 03 11       	sub    $0x11032ee0,%eax
    100f:	7f 9f                	jg     fb0 <balancer_ingress+0xfb0>
      data_stats->v1 += 1;
    1011:	04 da                	add    $0xda,%al
    1013:	30 c6                	xor    %al,%dh
        (icmp_hdr->code == ICMP_PORT_UNREACH) ||
    1015:	37                   	(bad)
    1016:	03 11                	add    (%rcx),%edx
    1018:	7f 9f                	jg     fb9 <balancer_ingress+0xfb9>
    101a:	04 c3                	add    $0xc3,%al
    101c:	38 c4                	cmp    %al,%ah
    101e:	3d 03 11 7f 9f       	cmp    $0x9f7f1103,%eax
        data_stats->v2 += 1;
    1023:	04 e5                	add    $0xe5,%al
    1025:	3d b4 3f 03 11       	cmp    $0x11033fb4,%eax
    102a:	7f 9f                	jg     fcb <balancer_ingress+0xfcb>
    102c:	04 c8                	add    $0xc8,%al
    102e:	3f                   	(bad)
  original_sport = pckt.flow.port16[0];
    102f:	cc                   	int3
    1030:	41 03 11             	add    (%r9),%edx
    1033:	7f 9f                	jg     fd4 <balancer_ingress+0xfd4>
    if (!dst && !(pckt.flags & F_SYN_SET) &&
    1035:	04 ad                	add    $0xad,%al
    1037:	42 fe 42 03          	rex.X incb 0x3(%rdx)
    103b:	11 7f 9f             	adc    %edi,-0x61(%rdi)
        !(vip_info->flags & F_LRU_BYPASS)) {
    103e:	04 b5                	add    $0xb5,%al
    if (!dst && !(pckt.flags & F_SYN_SET) &&
    1040:	44                   	rex.R
    1041:	f3 44 03 11          	repz add (%rcx),%r10d
    1045:	7f 9f                	jg     fe6 <balancer_ingress+0xfe6>
    1047:	04 81                	add    $0x81,%al
    1049:	45 f5                	rex.RB cmc
    104b:	45 03 11             	add    (%r9),%r10d
    104e:	7f 9f                	jg     fef <balancer_ingress+0xfef>
    1050:	00 04 ac             	add    %al,(%rsp,%rbp,4)
  dst_lru = real_bpf_map_lookup_elem(lru_map, &pckt->flow);
    1053:	05 b8 05 01 50       	add    $0x500105b8,%eax
  if (!dst_lru) {
    1058:	04 db                	add    $0xdb,%al
    105a:	07                   	(bad)
    105b:	80 08 01             	orb    $0x1,(%rax)
  if (!isGlobalLru && pckt->flow.proto == IPPROTO_UDP) {
    105e:	50                   	push   %rax
    105f:	04 c1                	add    $0xc1,%al
    1061:	0a e3                	or     %bl,%ah
    1063:	0a 01                	or     (%rcx),%al
    1065:	50                   	push   %rax
    1066:	04 83                	add    $0x83,%al
    1068:	0d 88 0d 01 50       	or     $0x50010d88,%eax
    106d:	04 b6                	add    $0xb6,%al
    cur_time = bpf_ktime_get_ns();
    106f:	0f ba                	(bad)
    if (cur_time - dst_lru->atime > LRU_UDP_TIMEOUT) {
    1071:	0f 01 50 00          	lgdt   0x0(%rax)
    1075:	04 ac                	add    $0xac,%al
    1077:	05 c2 06 01 53       	add    $0x530106c2,%eax
    107c:	04 ec                	add    $0xec,%al
    107e:	0f dc 10             	paddusb (%rax),%mm2
    1081:	01 53 00             	add    %edx,0x0(%rbx)
    1084:	04 ac                	add    $0xac,%al
    1086:	05 c2 06 01 5f       	add    $0x5f0106c2,%eax
    108b:	04 ec                	add    $0xec,%al
    108d:	0f dc 10             	paddusb (%rax),%mm2
    1090:	01 5f 00             	add    %ebx,0x0(%rdi)
    1093:	04 ac                	add    $0xac,%al
    1095:	05 c2 06 03 10       	add    $0x100306c2,%eax
    if (quic_data + sizeof(struct quic_long_header) > data_end) {
    109a:	36 9f                	ss lahf
    109c:	04 ec                	add    $0xec,%al
    109e:	0f dc 10             	paddusb (%rax),%mm2
    10a1:	03 10                	add    (%rax),%edx
    10a3:	36 9f                	ss lahf
    10a5:	00 04 ac             	add    %al,(%rsp,%rbp,4)
    if ((*pkt_type & QUIC_PACKET_TYPE_MASK) < QUIC_HANDSHAKE) {
    10a8:	05 c2 06 03 77       	add    $0x770306c2,%eax
    10ad:	10 9f 04 ec 0f dc    	adc    %bl,-0x23f013fc(%rdi)
        quic_packets_stats->cid_initial += 1;
    10b3:	10 03                	adc    %al,(%rbx)
    10b5:	77 10                	ja     10c7 <balancer_ingress+0x10c7>
    10b7:	9f                   	lahf
    10b8:	00 04 ac             	add    %al,(%rsp,%rbp,4)
      bpf_map_lookup_elem(&server_id_stats, &vip_num);
    10bb:	05 b8 05 01 50       	add    $0x500105b8,%eax
    10c0:	00 04 b4             	add    %al,(%rsp,%rsi,4)
    10c3:	05 c2 06 01 53       	add    $0x530106c2,%eax
    10c8:	04 ec                	add    $0xec,%al
    10ca:	0f dc 10             	paddusb (%rax),%mm2
    10cd:	01 53 00             	add    %edx,0x0(%rbx)
    10d0:	04 b4                	add    $0xb4,%al
    10d2:	05 c2 06 01 5f       	add    $0x5f0106c2,%eax
    10d7:	04 ec                	add    $0xec,%al
    10d9:	0f dc 10             	paddusb (%rax),%mm2
    10dc:	01 5f 00             	add    %ebx,0x0(%rdi)
    10df:	04 b4                	add    $0xb4,%al
  if (!per_vip_stats) {
    10e1:	05 c2 06 03 10       	add    $0x100306c2,%eax
    10e6:	36 9f                	ss lahf
    10e8:	04 ec                	add    $0xec,%al
    10ea:	0f a4 10 03          	shld   $0x3,%edx,(%rax)
    10ee:	10 36                	adc    %dh,(%rsi)
    10f0:	9f                   	lahf
    10f1:	04 a4                	add    $0xa4,%al
  if ((*pkt_type & QUIC_LONG_HEADER) == QUIC_LONG_HEADER) {
    10f3:	10 dc                	adc    %bl,%ah
    10f5:	10 03                	adc    %al,(%rbx)
    10f7:	10 3e                	adc    %bh,(%rsi)
    10f9:	9f                   	lahf
    if (quic_data + sizeof(struct quic_short_header) > data_end) {
    10fa:	00 04 b4             	add    %al,(%rsp,%rsi,4)
    10fd:	05 c2 06 03 77       	add    $0x770306c2,%eax
    1102:	10 9f 04 ec 0f dc    	adc    %bl,-0x23f013fc(%rdi)
  if (!connId) {
    1108:	10 03                	adc    %al,(%rbx)
    110a:	77 10                	ja     111c <balancer_ingress+0x111c>
    110c:	9f                   	lahf
    110d:	00 04 b4             	add    %al,(%rsp,%rsi,4)
  __u8 connIdVersion = (connId[0] >> 6);
    1110:	05 c2 06 01 5e       	add    $0x5e0106c2,%eax
    1115:	04 ec                	add    $0xec,%al
    1117:	0f dc 10             	paddusb (%rax),%mm2
  if (connIdVersion == QUIC_CONNID_VERSION_V1) {
    111a:	01 5e 00             	add    %ebx,0x0(%rsi)
    111d:	04 db                	add    $0xdb,%al
    111f:	05 80 06 02 30       	add    $0x30020680,%eax
    1124:	9f                   	lahf
    1125:	04 80                	add    $0x80,%al
    1127:	06                   	(bad)
    1128:	a3 06 01 52 00 04 db 	movabs %eax,0xed05db0400520106
    112f:	05 ed 
    1131:	05 02 30 9f 04       	add    $0x49f3002,%eax
        ((connId[0] & 0x3F) << 10) | (connId[1] << 2) | (connId[2] >> 6);
    1136:	ed                   	in     (%dx),%eax
    1137:	05 c2 06 03 10       	add    $0x100306c2,%eax
    113c:	22 9f 00 04 ed 05    	and    0x5ed0400(%rdi),%bl
    1142:	c2 06 03             	ret    $0x306
    1145:	73 22                	jae    1169 <balancer_ingress+0x1169>
    1147:	9f                   	lahf
    1148:	00 04 86             	add    %al,(%rsi,%rax,4)
    114b:	06                   	(bad)
    114c:	8b 06                	mov    (%rsi),%eax
    114e:	03 11                	add    (%rcx),%edx
    if (quic_data + sizeof(struct quic_long_header) > data_end) {
    1150:	00 9f 04 8b 06 8f    	add    %bl,-0x70f974fc(%rdi)
    1156:	06                   	(bad)
    1157:	03 11                	add    (%rcx),%edx
    1159:	01 9f 04 8f 06 93    	add    %ebx,-0x6cf970fc(%rdi)
    if ((*pkt_type & QUIC_PACKET_TYPE_MASK) < QUIC_HANDSHAKE) {
    115f:	06                   	(bad)
    1160:	03 11                	add    (%rcx),%edx
    1162:	02 9f 04 93 06 97    	add    -0x68f96cfc(%rdi),%bl
    1168:	06                   	(bad)
        quic_packets_stats->cid_initial += 1;
    1169:	03 11                	add    (%rcx),%edx
    116b:	03 9f 04 97 06 9c    	add    -0x63f968fc(%rdi),%ebx
      bpf_map_lookup_elem(&server_id_stats, &vip_num);
    1171:	06                   	(bad)
    1172:	03 11                	add    (%rcx),%edx
    1174:	04 9f                	add    $0x9f,%al
    1176:	04 9c                	add    $0x9c,%al
    1178:	06                   	(bad)
    1179:	9f                   	lahf
    117a:	06                   	(bad)
    117b:	03 11                	add    (%rcx),%edx
    117d:	06                   	(bad)
    117e:	9f                   	lahf
    117f:	04 9f                	add    $0x9f,%al
    1181:	06                   	(bad)
    1182:	a3 06 03 11 07 9f 04 	movabs %eax,0x6a3049f07110306
    1189:	a3 06 
    118b:	a9 06 03 11 08       	test   $0x8110306,%eax
    1190:	9f                   	lahf
    1191:	04 a9                	add    $0xa9,%al
    1193:	06                   	(bad)
    1194:	c2 06 03             	ret    $0x306
    1197:	11 09                	adc    %ecx,(%rcx)
    1199:	9f                   	lahf
    119a:	00 04 86             	add    %al,(%rsi,%rax,4)
    119d:	06                   	(bad)
    119e:	8f 06                	pop    (%rsi)
    11a0:	03 73 10             	add    0x10(%rbx),%esi
    11a3:	9f                   	lahf
    11a4:	04 8f                	add    $0x8f,%al
    11a6:	06                   	(bad)
    11a7:	93                   	xchg   %eax,%ebx
    11a8:	06                   	(bad)
    11a9:	03 73 12             	add    0x12(%rbx),%esi
  if (!per_vip_stats) {
    11ac:	9f                   	lahf
    11ad:	04 93                	add    $0x93,%al
    11af:	06                   	(bad)
    11b0:	97                   	xchg   %eax,%edi
    11b1:	06                   	(bad)
    11b2:	03 73 14             	add    0x14(%rbx),%esi
    11b5:	9f                   	lahf
    11b6:	04 97                	add    $0x97,%al
    11b8:	06                   	(bad)
    if (long_header->conn_id_lens < QUIC_MIN_CONNID_LEN) {
    11b9:	9c                   	pushf
    11ba:	06                   	(bad)
    11bb:	03 73 18             	add    0x18(%rbx),%esi
    11be:	9f                   	lahf
    11bf:	04 9c                	add    $0x9c,%al
    11c1:	06                   	(bad)
    11c2:	9f                   	lahf
    11c3:	06                   	(bad)
    11c4:	03 73 1c             	add    0x1c(%rbx),%esi
    11c7:	9f                   	lahf
    11c8:	04 9f                	add    $0x9f,%al
  if (!connId) {
    11ca:	06                   	(bad)
    11cb:	a3 06 03 73 1e 9f 04 	movabs %eax,0x6a3049f1e730306
    11d2:	a3 06 
  __u8 connIdVersion = (connId[0] >> 6);
    11d4:	a9 06 03 73 20       	test   $0x20730306,%eax
    11d9:	9f                   	lahf
    11da:	04 a9                	add    $0xa9,%al
  if (connIdVersion == QUIC_CONNID_VERSION_V1) {
    11dc:	06                   	(bad)
    11dd:	c2 06 05             	ret    $0x506
    11e0:	73 20                	jae    1202 <balancer_ingress+0x1202>
    11e2:	23 02                	and    (%rdx),%eax
    11e4:	9f                   	lahf
    11e5:	00 04 a0             	add    %al,(%rax,%riz,4)
    11e8:	36 ad                	lods   %ds:(%rsi),%eax
    11ea:	36 01 51 00          	ss add %edx,0x0(%rcx)
    11ee:	04 86                	add    $0x86,%al
    11f0:	08 a6 08 01 50 00    	or     %ah,0x500108(%rsi)
        ((connId[0] & 0x3F) << 10) | (connId[1] << 2) | (connId[2] >> 6);
    11f6:	04 b4                	add    $0xb4,%al
    11f8:	08 c7                	or     %al,%bh
    11fa:	09 03                	or     %eax,(%rbx)
    11fc:	11 7f 9f             	adc    %edi,-0x61(%rdi)
    11ff:	04 ff                	add    $0xff,%al
    1201:	13 e3                	adc    %ebx,%esp
    1203:	14 03                	adc    $0x3,%al
    1205:	11 7f 9f             	adc    %edi,-0x61(%rdi)
    1208:	04 e3                	add    $0xe3,%al
    120a:	14 b1                	adc    $0xb1,%al
    120c:	16                   	(bad)
    120d:	03 11                	add    (%rcx),%edx
    120f:	01 9f 04 dc 16 d4    	add    %ebx,-0x2be923fc(%rdi)
    dst_lru->atime = cur_time;
    1215:	17                   	(bad)
  key = dst_lru->pos;
    1216:	03 11                	add    (%rcx),%edx
    1218:	7f 9f                	jg     11b9 <balancer_ingress+0x11b9>
    121a:	04 d8                	add    $0xd8,%al
    121c:	17                   	(bad)
    121d:	d5                   	(bad)
    121e:	18 03                	sbb    %al,(%rbx)
    1220:	11 7f 9f             	adc    %edi,-0x61(%rdi)
  pckt->real_index = key;
    1223:	04 d5                	add    $0xd5,%al
  *real = bpf_map_lookup_elem(&reals, &key);
    1225:	18 ac 1a 03 11 01 9f 	sbb    %ch,-0x60feeefd(%rdx,%rbx,1)
    122c:	04 ac                	add    $0xac,%al
    122e:	1a d5                	sbb    %ch,%dl
    1230:	1c 03                	sbb    $0x3,%al
    1232:	11 7f 9f             	adc    %edi,-0x61(%rdi)
    1235:	04 f6                	add    $0xf6,%al
    1237:	1d b0 1e 03 11       	sbb    $0x11031eb0,%eax
    123c:	7f 9f                	jg     11dd <balancer_ingress+0x11dd>
    123e:	04 ef                	add    $0xef,%al
    1240:	1e                   	(bad)
    1241:	8a 21                	mov    (%rcx),%ah
    1243:	03 11                	add    (%rcx),%edx
  if (dst && pckt->flow.proto == IPPROTO_UDP &&
    1245:	7f 9f                	jg     11e6 <balancer_ingress+0x11e6>
    1247:	04 ee                	add    $0xee,%al
    1249:	21 b9 23 03 11 7f    	and    %edi,0x7f110323(%rcx)
      vip_info->flags & F_UDP_FLOW_MIGRATION && !is_under_flood(&cur_time)) {
    124f:	9f                   	lahf
    1250:	04 92                	add    $0x92,%al
    1252:	24 fa                	and    $0xfa,%al
    1254:	2d 03 11 7f 9f       	sub    $0x9f7f1103,%eax
      bpf_map_lookup_elem(&stats, &conn_rate_key);
    1259:	04 ea                	add    $0xea,%al
    125b:	2e c7                	cs (bad)
    125d:	30 03                	xor    %al,(%rbx)
    125f:	11 7f 9f             	adc    %edi,-0x61(%rdi)
    1262:	04 cc                	add    $0xcc,%al
    1264:	41 a6                	rex.B cmpsb %es:(%rdi),%ds:(%rsi)
    1266:	42 03 11             	rex.X add (%rcx),%edx
    1269:	7f 9f                	jg     120a <balancer_ingress+0x120a>
  if (!conn_rate_stats) {
    126b:	04 91                	add    $0x91,%al
    126d:	43 b5 44             	rex.XB mov $0x44,%r13b
    1270:	03 11                	add    (%rcx),%edx
    1272:	7f 9f                	jg     1213 <balancer_ingress+0x1213>
    1274:	04 f3                	add    $0xf3,%al
    1276:	44 81 45 03 11 7f 9f 	rex.R addl $0x49f7f11,0x3(%rbp)
    127d:	04 
  if ((*cur_time - conn_rate_stats->v2) > ONE_SEC) {
    127e:	f5                   	cmc
    127f:	45 e5 47             	rex.RB in $0x47,%eax
    1282:	03 11                	add    (%rcx),%edx
    1284:	7f 9f                	jg     1225 <balancer_ingress+0x1225>
    1286:	00 04 b4             	add    %al,(%rsp,%rsi,4)
    1289:	08 bc 08 01 50 04 fc 	or     %bh,-0x3fbafff(%rax,%rcx,1)
    conn_rate_stats->v1 = 1;
    1290:	08 a1 09 01 50 04    	or     %ah,0x4500109(%rcx)
    conn_rate_stats->v2 = *cur_time;
    1296:	ff 13                	call   *(%rbx)
    1298:	94                   	xchg   %eax,%esp
    conn_rate_stats->v1 += 1;
    1299:	14 01                	adc    $0x1,%al
    129b:	50                   	push   %rax
    129c:	04 d8                	add    $0xd8,%al
    129e:	17                   	(bad)
    129f:	8a 18                	mov    (%rax),%bl
    12a1:	01 50 04             	add    %edx,0x4(%rax)
    if (conn_rate_stats->v1 > MAX_CONN_RATE) {
    12a4:	ac                   	lods   %ds:(%rsi),%al
    12a5:	1a b0 1a 01 50 00    	sbb    0x50011a(%rax),%dh
    void* down_reals_map = bpf_map_lookup_elem(&vip_to_down_reals_map, vip);
    12ab:	04 b4                	add    $0xb4,%al
    12ad:	08 fc                	or     %bh,%ah
    12af:	08 01                	or     %al,(%rcx)
    12b1:	53                   	push   %rbx
    12b2:	04 dc                	add    $0xdc,%al
    12b4:	16                   	(bad)
    12b5:	d4                   	(bad)
    12b6:	17                   	(bad)
    12b7:	01 53 00             	add    %edx,0x0(%rbx)
    12ba:	04 b4                	add    $0xb4,%al
    12bc:	08 fc                	or     %bh,%ah
    12be:	08 01                	or     %al,(%rcx)
    12c0:	5f                   	pop    %rdi
    12c1:	04 dc                	add    $0xdc,%al
    if (down_reals_map) {
    12c3:	16                   	(bad)
    12c4:	d4                   	(bad)
    12c5:	17                   	(bad)
    12c6:	01 5f 00             	add    %ebx,0x0(%rdi)
      void* down_real = real_bpf_map_lookup_elem(down_reals_map, &pckt->real_index);
    12c9:	04 b4                	add    $0xb4,%al
    12cb:	08 fc                	or     %bh,%ah
    12cd:	08 03                	or     %al,(%rbx)
    12cf:	10 22                	adc    %ah,(%rdx)
    12d1:	9f                   	lahf
      if (down_real) {
    12d2:	04 dc                	add    $0xdc,%al
    12d4:	16                   	(bad)
    12d5:	d4                   	(bad)
    12d6:	17                   	(bad)
        struct lb_stats* stats_data = bpf_map_lookup_elem(&stats, &stats_key);
    12d7:	03 10                	add    (%rax),%edx
    12d9:	22 9f 00 04 b4 08    	and    0x8b40400(%rdi),%bl
    12df:	fc                   	cld
    12e0:	08 03                	or     %al,(%rbx)
    12e2:	77 10                	ja     12f4 <balancer_ingress+0x12f4>
    12e4:	9f                   	lahf
    12e5:	04 dc                	add    $0xdc,%al
    12e7:	16                   	(bad)
        if (stats_data) {
    12e8:	d4                   	(bad)
    12e9:	17                   	(bad)
    12ea:	03 77 10             	add    0x10(%rdi),%esi
    12ed:	9f                   	lahf
    12ee:	00 04 b4             	add    %al,(%rsp,%rsi,4)
          stats_data->v1 += 1;
    12f1:	08 bc 08 01 50 00 04 	or     %bh,0x4005001(%rax,%rcx,1)
    12f8:	b8 08 fc 08 01       	mov    $0x108fc08,%eax
    if (!dst) {
    12fd:	53                   	push   %rbx
    12fe:	04 dc                	add    $0xdc,%al
    1300:	16                   	(bad)
    1301:	d4                   	(bad)
    1302:	17                   	(bad)
    1303:	01 53 00             	add    %edx,0x0(%rbx)
    1306:	04 b8                	add    $0xb8,%al
    1308:	08 fc                	or     %bh,%ah
    130a:	08 01                	or     %al,(%rcx)
  data_stats = bpf_map_lookup_elem(&stats, &vip_num);
    130c:	5f                   	pop    %rdi
    130d:	04 dc                	add    $0xdc,%al
    130f:	16                   	(bad)
    1310:	d4                   	(bad)
    1311:	17                   	(bad)
    1312:	01 5f 00             	add    %ebx,0x0(%rdi)
    1315:	04 b8                	add    $0xb8,%al
    1317:	08 fc                	or     %bh,%ah
    1319:	08 03                	or     %al,(%rbx)
    131b:	10 22                	adc    %ah,(%rdx)
    131d:	9f                   	lahf
    131e:	04 dc                	add    $0xdc,%al
    1320:	16                   	(bad)
    1321:	95                   	xchg   %eax,%ebp
    1322:	17                   	(bad)
    1323:	03 10                	add    (%rax),%edx
    1325:	22 9f 04 95 17 d4    	and    -0x2be86afc(%rdi),%bl
  if (!data_stats) {
    132b:	17                   	(bad)
    132c:	03 10                	add    (%rax),%edx
    132e:	2a 9f 00 04 b8 08    	sub    0x8b80400(%rdi),%bl
    1334:	fc                   	cld
    1335:	08 03                	or     %al,(%rbx)
    1337:	77 10                	ja     1349 <balancer_ingress+0x1349>
    1339:	9f                   	lahf
    133a:	04 dc                	add    $0xdc,%al
  data_stats->v1 += 1;
    133c:	16                   	(bad)
    133d:	d4                   	(bad)
    133e:	17                   	(bad)
  data_stats->v2 += pkt_bytes;
    133f:	03 77 10             	add    0x10(%rdi),%esi
    1342:	9f                   	lahf
    1343:	00 04 b8             	add    %al,(%rax,%rdi,4)
  data_stats = bpf_map_lookup_elem(&reals_stats, &pckt.real_index);
    1346:	08 fc                	or     %bh,%ah
    1348:	08 01                	or     %al,(%rcx)
    134a:	5e                   	pop    %rsi
    134b:	04 dc                	add    $0xdc,%al
    134d:	16                   	(bad)
    134e:	d4                   	(bad)
    134f:	17                   	(bad)
    1350:	01 5e 00             	add    %ebx,0x0(%rsi)
    1353:	04 a7                	add    $0xa7,%al
    1355:	09 c7                	or     %eax,%edi
    1357:	09 01                	or     %eax,(%rcx)
    1359:	50                   	push   %rax
    135a:	00 04 c7             	add    %al,(%rdi,%rax,8)
    135d:	09 d8                	or     %ebx,%eax
    135f:	09 02                	or     %eax,(%rdx)
    1361:	30 9f 04 d8 09 e1    	xor    %bl,-0x1ef627fc(%rdi)
    1367:	09 01                	or     %eax,(%rcx)
    1369:	50                   	push   %rax
    136a:	00 04 e1             	add    %al,(%rcx,%riz,8)
    136d:	09 80 0a 01 50 00    	or     %eax,0x50010a(%rax)
  if (!data_stats) {
    1373:	04 f3                	add    $0xf3,%al
    1375:	09 80 0a 01 52 00    	or     %eax,0x52010a(%rax)
  data_stats->v1 += 1;
    137b:	04 80                	add    $0x80,%al
    137d:	0a bd 0a 03 10 3e    	or     0x3e10030a(%rbp),%bh
  pckt.flow.port16[0] = original_sport;
    1383:	9f                   	lahf
    1384:	00 04 80             	add    %al,(%rax,%rax,4)
    1387:	0a bd 0a 03 73 3e    	or     0x3e73030a(%rbp),%bh
  if (dst->flags & F_IPV6) {
    138d:	9f                   	lahf
    138e:	00 04 de             	add    %al,(%rsi,%rbx,8)
    1391:	0a b9 0b 02 31 9f    	or     -0x60cefdf5(%rcx),%bh
  __u32 ip_src = create_encap_ipv4_src(pckt->flow.port16[0], pckt->flow.src);
    1397:	04 b9                	add    $0xb9,%al
    1399:	0b f9                	or     %ecx,%edi
    139b:	0c 02                	or     $0x2,%al
    139d:	30 9f 00 04 de 0a    	xor    %bl,0xade0400(%rdi)
  if (XDP_ADJUST_HEAD_FUNC(xdp, 0 - (int)sizeof(struct iphdr))) {
    13a3:	b9 0b 03 77 10       	mov    $0x1077030b,%ecx
    13a8:	9f                   	lahf
    13a9:	04 bd                	add    $0xbd,%al
    13ab:	0c d7                	or     $0xd7,%al
    13ad:	0c 03                	or     $0x3,%al
    13af:	77 10                	ja     13c1 <balancer_ingress+0x13c1>
    13b1:	9f                   	lahf
    13b2:	00 04 de             	add    %al,(%rsi,%rbx,8)
  data = (void*)(long)xdp->data;
    13b5:	0a b9 0b 02 31 9f    	or     -0x60cefdf5(%rcx),%bh
  iph = data + sizeof(struct ethhdr);
    13bb:	04 bd                	add    $0xbd,%al
    13bd:	0c d7                	or     $0xd7,%al
  if (new_eth + 1 > data_end || old_eth + 1 > data_end || iph + 1 > data_end) {
    13bf:	0c 02                	or     $0x2,%al
    13c1:	31 9f 00 04 f2 0a    	xor    %ebx,0xaf20400(%rdi)
    13c7:	8d 0b                	lea    (%rbx),%ecx
    13c9:	02 30                	add    (%rax),%dh
    13cb:	9f                   	lahf
    13cc:	04 8d                	add    $0x8d,%al
    13ce:	0b 92 0b 01 5e 00    	or     0x5e010b(%rdx),%edx
    13d4:	04 8d                	add    $0x8d,%al
    13d6:	0b b9 0b 01 5e 04    	or     0x45e010b(%rcx),%edi
    13dc:	bd 0c d7 0c 01       	mov    $0x10cd70c,%ebp
    13e1:	5e                   	pop    %rsi
    13e2:	00 04 92             	add    %al,(%rdx,%rdx,4)
    13e5:	0b a3 0b 02 30 9f    	or     -0x60cffdf5(%rbx),%esp
    13eb:	04 a3                	add    $0xa3,%al
    13ed:	0b ac 0b 01 50 00 04 	or     0x4005001(%rbx,%rcx,1),%ebp
    13f4:	ac                   	lods   %ds:(%rsi),%al
    13f5:	0b b9 0b 01 50 00    	or     0x50010b(%rcx),%edi
  memcpy(new_eth->h_dest, cval->mac, 6);
    13fb:	04 e0                	add    $0xe0,%al
    13fd:	0b f9                	or     %ecx,%edi
    13ff:	0c 01                	or     $0x1,%al
    1401:	5c                   	pop    %rsp
    1402:	00 04 9a             	add    %al,(%rdx,%rbx,4)
    1405:	0c f9                	or     $0xf9,%al
    1407:	0c 04                	or     $0x4,%al
    1409:	10 8a 04 9f 00 04    	adc    %cl,0x4009f04(%rdx)
  memcpy(new_eth->h_source, old_eth->h_dest, 6);
    140f:	9a                   	(bad)
    1410:	0c ab                	or     $0xab,%al
    1412:	0c 02                	or     $0x2,%al
    1414:	30 9f 04 ab 0c b4    	xor    %bl,-0x4bf354fc(%rdi)
  new_eth->h_proto = BE_ETH_P_IP;
    141a:	0c 01                	or     $0x1,%al
    141c:	52                   	push   %rdx
    141d:	00 04 b4             	add    %al,(%rsp,%rsi,4)
  create_v4_hdr(iph, pckt->tos, ip_src, dst->dst, pkt_bytes, IPPROTO_IPIP);
    1420:	0c f9                	or     $0xf9,%al
    1422:	0c 01                	or     $0x1,%al
    1424:	52                   	push   %rdx
    1425:	00 04 e0             	add    %al,(%rax,%riz,8)
  iph->ihl = 5;
    1428:	0c e7                	or     $0xe7,%al
  iph->tos = tos;
    142a:	0c 02                	or     $0x2,%al
    142c:	30 9f 04 e7 0c f0    	xor    %bl,-0xff318fc(%rdi)
  iph->tot_len = bpf_htons(pkt_bytes + sizeof(struct iphdr));
    1432:	0c 01                	or     $0x1,%al
    1434:	50                   	push   %rax
    1435:	00 04 f0             	add    %al,(%rax,%rsi,8)
  iph->id = 0;
    1438:	0c f9                	or     $0xf9,%al
    143a:	0c 01                	or     $0x1,%al
    143c:	50                   	push   %rax
    143d:	00 04 83             	add    %al,(%rbx,%rax,4)
  iph->daddr = daddr;
    1440:	0d de 0d 02 31       	or     $0x31020dde,%eax
  iph->ttl = DEFAULT_TTL;
    1445:	9f                   	lahf
    1446:	04 de                	add    $0xde,%al
    1448:	0d b6 0f 02 30       	or     $0x30020fb6,%eax
    144d:	9f                   	lahf
    144e:	00 04 83             	add    %al,(%rbx,%rax,4)
    1451:	0d de 0d 03 77       	or     $0x77030dde,%eax
    1456:	10 9f 04 f5 0e 8f    	adc    %bl,-0x70f10afc(%rdi)
    145c:	0f 03 77 10          	lsl    0x10(%rdi),%esi
    1460:	9f                   	lahf
    1461:	00 04 83             	add    %al,(%rbx,%rax,4)
    1464:	0d de 0d 02 31       	or     $0x31020dde,%eax
      if (pckt.flow.proto == IPPROTO_TCP) {
    1469:	9f                   	lahf
    146a:	04 f5                	add    $0xf5,%al
    146c:	0e                   	(bad)
    146d:	8f                   	(bad)
    146e:	0f 02 31             	lar    (%rcx),%esi
            bpf_map_lookup_elem(&stats, &lru_stats_key);
    1471:	9f                   	lahf
    1472:	00 04 97             	add    %al,(%rdi,%rdx,4)
    1475:	0d b2 0d 02 30       	or     $0x30020db2,%eax
    147a:	9f                   	lahf
    147b:	04 b2                	add    $0xb2,%al
    147d:	0d b7 0d 01 5e       	or     $0x5e010db7,%eax
        if (!lru_stats) {
    1482:	00 04 b2             	add    %al,(%rdx,%rsi,4)
    1485:	0d de 0d 01 5e       	or     $0x5e010dde,%eax
        if (pckt.flags & F_SYN_SET) {
    148a:	04 f5                	add    $0xf5,%al
    148c:	0e                   	(bad)
    148d:	8f                   	(bad)
    148e:	0f 01 5e 00          	lidt   0x0(%rsi)
    1492:	04 b7                	add    $0xb7,%al
    1494:	0d c8 0d 02 30       	or     $0x30020dc8,%eax
    1499:	9f                   	lahf
  struct real_pos_lru new_dst_lru = {};
    149a:	04 c8                	add    $0xc8,%al
    149c:	0d d1 0d 01 50       	or     $0x50010dd1,%eax
    14a1:	00 04 d1             	add    %al,(%rcx,%rdx,8)
    14a4:	0d de 0d 01 50       	or     $0x50010dde,%eax
    14a9:	00 04 f9             	add    %al,(%rcx,%rdi,8)
      bpf_map_lookup_elem(&stats, &conn_rate_key);
    14ac:	0d fc 0d 01 52       	or     $0x52010dfc,%eax
    14b1:	00 04 98             	add    %al,(%rax,%rbx,4)
    14b4:	0e                   	(bad)
    14b5:	b6 0f                	mov    $0xf,%dh
    14b7:	01 5c 00 04          	add    %ebx,0x4(%rax,%rax,1)
    14bb:	d2 0e                	rorb   %cl,(%rsi)
    14bd:	b6 0f                	mov    $0xf,%dh
    14bf:	04 10                	add    $0x10,%al
  if (!conn_rate_stats) {
    14c1:	8a 04 9f             	mov    (%rdi,%rbx,4),%al
    14c4:	00 04 d2             	add    %al,(%rdx,%rdx,8)
    14c7:	0e                   	(bad)
    14c8:	e3 0e                	jrcxz  14d8 <balancer_ingress+0x14d8>
    14ca:	02 30                	add    (%rax),%dh
  *cur_time = bpf_ktime_get_ns();
    14cc:	9f                   	lahf
    14cd:	04 e3                	add    $0xe3,%al
  if ((*cur_time - conn_rate_stats->v2) > ONE_SEC) {
    14cf:	0e                   	(bad)
    14d0:	ec                   	in     (%dx),%al
    14d1:	0e                   	(bad)
    14d2:	01 52 00             	add    %edx,0x0(%rdx)
    14d5:	04 ec                	add    $0xec,%al
    14d7:	0e                   	(bad)
    14d8:	b6 0f                	mov    $0xf,%dh
    14da:	01 52 00             	add    %edx,0x0(%rdx)
    14dd:	04 98                	add    $0x98,%al
    conn_rate_stats->v1 = 1;
    14df:	0f 9f 0f             	setg   (%rdi)
    14e2:	02 30                	add    (%rax),%dh
    14e4:	9f                   	lahf
    conn_rate_stats->v2 = *cur_time;
    14e5:	04 9f                	add    $0x9f,%al
    14e7:	0f a8                	push   %gs
    14e9:	0f 01 50 00          	lgdt   0x0(%rax)
    14ed:	04 a8                	add    $0xa8,%al
    conn_rate_stats->v1 += 1;
    14ef:	0f b6 0f             	movzbl (%rdi),%ecx
    14f2:	01 50 00             	add    %edx,0x0(%rax)
    14f5:	04 c0                	add    $0xc0,%al
    14f7:	0f cd                	bswap  %ebp
    if (conn_rate_stats->v1 > MAX_CONN_RATE) {
    14f9:	0f 01 50 00          	lgdt   0x0(%rax)
    14fd:	04 f2                	add    $0xf2,%al
    14ff:	0f 83 10 02 30 9f    	jae    ffffffff9f301715 <ch_rings+0x36ff7ca7c715>
    1505:	04 83                	add    $0x83,%al
    1507:	10 8c 10 01 52 00 04 	adc    %cl,0x4005201(%rax,%rdx,1)
    if (vip_info->flags & F_HASH_DPORT_ONLY) {
    150e:	8c 10                	mov    %ss,(%rax)
    1510:	a4                   	movsb  %ds:(%rsi),%es:(%rdi)
    1511:	10 01                	adc    %al,(%rcx)
    1513:	52                   	push   %rdx
    1514:	00 04 a4             	add    %al,(%rsp,%riz,4)
    1517:	10 b1 10 03 73 3e    	adc    %dh,0x3e730310(%rcx)
      pckt->flow.port16[0] = pckt->flow.port16[1];
    151d:	9f                   	lahf
    151e:	04 b1                	add    $0xb1,%al
    1520:	10 b3 10 01 50 00    	adc    %dh,0x500110(%rbx)
      memset(pckt->flow.srcv6, 0, 16);
    1526:	04 97                	add    $0x97,%al
    1528:	11 b3 11 02 30 9f    	adc    %esi,-0x60cffdef(%rbx)
    152e:	04 b3                	add    $0xb3,%al
    1530:	11 bc 11 01 55 00 04 	adc    %edi,0x4005501(%rcx,%rdx,1)
    1537:	b3 11                	mov    $0x11,%bl
    1539:	d5                   	(bad)
    153a:	12 01                	adc    (%rcx),%al
    153c:	55                   	push   %rbp
    153d:	04 c5                	add    $0xc5,%al
    153f:	13 d6                	adc    %esi,%edx
  b += initval;
    1541:	13 01                	adc    (%rcx),%eax
    1543:	55                   	push   %rbp
  __jhash_final(a, b, c);
    1544:	04 d6                	add    $0xd6,%al
    1546:	13 f3                	adc    %ebx,%esi
    1548:	13 01                	adc    (%rcx),%eax
    154a:	50                   	push   %rax
    154b:	04 f3                	add    $0xf3,%al
  return (word << shift) | (word >> ((-shift) & 31));
    154d:	13 ff                	adc    %edi,%edi
    154f:	13 01                	adc    (%rcx),%eax
  __jhash_final(a, b, c);
    1551:	55                   	push   %rbp
    1552:	04 d5                	add    $0xd5,%al
    1554:	1c f6                	sbb    $0xf6,%al
  return (word << shift) | (word >> ((-shift) & 31));
    1556:	1d 01 55 04 ba       	sbb    $0xba045501,%eax
  __jhash_final(a, b, c);
    155b:	1e                   	(bad)
    155c:	ef                   	out    %eax,(%dx)
    155d:	1e                   	(bad)
  return (word << shift) | (word >> ((-shift) & 31));
    155e:	01 55 04             	add    %edx,0x4(%rbp)
    1561:	9a                   	(bad)
    1562:	21 ee                	and    %ebp,%esi
  __jhash_final(a, b, c);
    1564:	21 01                	and    %eax,(%rcx)
    1566:	55                   	push   %rbp
  return (word << shift) | (word >> ((-shift) & 31));
    1567:	04 b9                	add    $0xb9,%al
    1569:	23 92 24 01 55 04    	and    0x4550124(%rdx),%edx
  __jhash_final(a, b, c);
    156f:	fa                   	cli
  return (word << shift) | (word >> ((-shift) & 31));
    1570:	2d e0 2e 01 55       	sub    $0x55012ee0,%eax
  __jhash_final(a, b, c);
    1575:	04 da                	add    $0xda,%al
    1577:	30 be 31 01 55 04    	xor    %bh,0x4550131(%rsi)
    157d:	e1 31                	loope  15b0 <balancer_ingress+0x15b0>
    157f:	8d 32                	lea    (%rdx),%esi
  return (word << shift) | (word >> ((-shift) & 31));
    1581:	01 55 04             	add    %edx,0x4(%rbp)
  __jhash_final(a, b, c);
    1584:	8d 32                	lea    (%rdx),%esi
    1586:	d6                   	(bad)
    1587:	32 01                	xor    (%rcx),%al
    1589:	5f                   	pop    %rdi
    hash = get_packet_hash(pckt, hash_16bytes) % RING_SIZE;
    158a:	04 d6                	add    $0xd6,%al
    158c:	32 db                	xor    %bl,%bl
    158e:	32 01                	xor    (%rcx),%al
    1590:	55                   	push   %rbp
    1591:	04 db                	add    $0xdb,%al
    1593:	32 8f 33 01 5f 04    	xor    0x45f0133(%rdi),%cl
    1599:	8f                   	(bad)
    159a:	33 c1                	xor    %ecx,%eax
    159c:	33 01                	xor    (%rcx),%eax
    159e:	55                   	push   %rbp
    159f:	04 c1                	add    $0xc1,%al
    key = RING_SIZE * (vip_info->vip_num) + hash;
    15a1:	33 e0                	xor    %eax,%esp
    15a3:	34 01                	xor    $0x1,%al
    15a5:	5f                   	pop    %rdi
    15a6:	04 ad                	add    $0xad,%al
    15a8:	42 b7 42             	rex.X mov $0x42,%dil
    15ab:	01 55 00             	add    %edx,0x0(%rbp)
    real_pos = bpf_map_lookup_elem(&ch_rings, &key);
    15ae:	04 ce                	add    $0xce,%al
    15b0:	11 d5                	adc    %edx,%ebp
    if (!real_pos) {
    15b2:	12 04 10             	adc    (%rax,%rdx,1),%al
    15b5:	80 04 9f 04          	addb   $0x4,(%rdi,%rbx,4)
    real_pos = bpf_map_lookup_elem(&ch_rings, &key);
    15b9:	d5                   	(bad)
    15ba:	1c f6                	sbb    $0xf6,%al
    15bc:	1d 04 10 80 04       	sbb    $0x4801004,%eax
    15c1:	9f                   	lahf
    15c2:	04 ba                	add    $0xba,%al
    key = *real_pos;
    15c4:	1e                   	(bad)
    15c5:	ef                   	out    %eax,(%dx)
    15c6:	1e                   	(bad)
    15c7:	04 10                	add    $0x10,%al
    15c9:	80 04 9f 04          	addb   $0x4,(%rdi,%rbx,4)
    15cd:	9a                   	(bad)
    if (key == 0) {
    15ce:	21 ee                	and    %ebp,%esi
  pckt->real_index = key;
    15d0:	21 04 10             	and    %eax,(%rax,%rdx,1)
    15d3:	80 04 9f 04          	addb   $0x4,(%rdi,%rbx,4)
  *real = bpf_map_lookup_elem(&reals, &key);
    15d7:	b9 23 92 24 04       	mov    $0x4249223,%ecx
      bpf_map_lookup_elem(&stats, &ch_drop_stats_key);
    15dc:	10 80 04 9f 04 fa    	adc    %al,-0x5fb60fc(%rax)
    15e2:	2d e0 2e 04 10       	sub    $0x10042ee0,%eax
    15e7:	80 04 9f 04          	addb   $0x4,(%rdi,%rbx,4)
    15eb:	da 30                	fidivl (%rax)
  if (!ch_drop_stats) {
    15ed:	c6                   	(bad)
    15ee:	37                   	(bad)
    15ef:	04 10                	add    $0x10,%al
    15f1:	80 04 9f 04          	addb   $0x4,(%rdi,%rbx,4)
    15f5:	c3                   	ret
    15f6:	38 c4                	cmp    %al,%ah
    15f8:	3d 04 10 80 04       	cmp    $0x4801004,%eax
      bpf_map_lookup_elem(&stats, &ch_drop_stats_key);
    15fd:	9f                   	lahf
    15fe:	04 e5                	add    $0xe5,%al
    1600:	3d b4 3f 04 10       	cmp    $0x10043fb4,%eax
    1605:	80 04 9f 04          	addb   $0x4,(%rdi,%rbx,4)
    1609:	c8 3f cc 41          	enter  $0xcc3f,$0x41
  if (!ch_drop_stats) {
    160d:	04 10                	add    $0x10,%al
    160f:	80 04 9f 04          	addb   $0x4,(%rdi,%rbx,4)
    1613:	ad                   	lods   %ds:(%rsi),%eax
    1614:	42 fe 42 04          	rex.X incb 0x4(%rdx)
    1618:	10 80 04 9f 04 b5    	adc    %al,-0x4afb60fc(%rax)
  if (lru_map && !(vip_info->flags & F_LRU_BYPASS) && !under_flood) {
    161e:	44                   	rex.R
    161f:	f3 44 04 10          	repz rex.R add $0x10,%al
    1623:	80 04 9f 04          	addb   $0x4,(%rdi,%rbx,4)
    1627:	81 45 f5 45 04 10 80 	addl   $0x80100445,-0xb(%rbp)
    162e:	04 9f                	add    $0x9f,%al
    1630:	00 04 ce             	add    %al,(%rsi,%rcx,8)
    1633:	11 e0                	adc    %esp,%eax
    1635:	11 02                	adc    %eax,(%rdx)
    1637:	30 9f 04 e0 11 e9    	xor    %bl,-0x16ee1ffc(%rdi)
    163d:	11 01                	adc    %eax,(%rcx)
    163f:	54                   	push   %rsp
    1640:	00 04 e9             	add    %al,(%rcx,%rbp,8)
    1643:	11 d5                	adc    %edx,%ebp
    1645:	12 01                	adc    (%rcx),%al
  if (XDP_ADJUST_HEAD_FUNC(xdp, 0 - (int)sizeof(struct ipv6hdr))) {
    1647:	54                   	push   %rsp
    1648:	04 d5                	add    $0xd5,%al
    164a:	1c ff                	sbb    $0xff,%al
    164c:	1c 01                	sbb    $0x1,%al
    164e:	54                   	push   %rsp
    164f:	04 ff                	add    $0xff,%al
    1651:	1c 88                	sbb    $0x88,%al
    1653:	1d 03 77 80 01       	sbb    $0x1807703,%eax
  data = (void*)(long)xdp->data;
    1658:	04 88                	add    $0x88,%al
    165a:	1d f6 1d 01 54       	sbb    $0x54011df6,%eax
  data_end = (void*)(long)xdp->data_end;
    165f:	04 ba                	add    $0xba,%al
  ip6h = data + sizeof(struct ethhdr);
    1661:	1e                   	(bad)
    1662:	ef                   	out    %eax,(%dx)
    1663:	1e                   	(bad)
  if (new_eth + 1 > data_end || old_eth + 1 > data_end || ip6h + 1 > data_end) {
    1664:	01 54 04 9a          	add    %edx,-0x66(%rsp,%rax,1)
    1668:	21 ee                	and    %ebp,%esi
    166a:	21 01                	and    %eax,(%rcx)
    166c:	54                   	push   %rsp
    166d:	04 b9                	add    $0xb9,%al
    166f:	23 92 24 01 54 04    	and    0x4540124(%rdx),%edx
    1675:	fa                   	cli
    1676:	2d e0 2e 01 54       	sub    $0x54012ee0,%eax
    167b:	04 da                	add    $0xda,%al
    167d:	30 b2 31 01 54 04    	xor    %dh,0x4540131(%rdx)
    1683:	b2 31                	mov    $0x31,%dl
    1685:	e1 31                	loope  16b8 <balancer_ingress+0x16b8>
    1687:	03 77 80             	add    -0x80(%rdi),%esi
    168a:	01 04 e1             	add    %eax,(%rcx,%riz,8)
    168d:	31 95 32 01 54 04    	xor    %edx,0x4540132(%rbp)
  memcpy(new_eth->h_dest, cval->mac, 6);
    1693:	95                   	xchg   %eax,%ebp
    1694:	32 d6                	xor    %dh,%dl
    1696:	32 03                	xor    (%rbx),%al
    1698:	77 80                	ja     161a <balancer_ingress+0x161a>
    169a:	01 04 d6             	add    %eax,(%rsi,%rdx,8)
    169d:	32 db                	xor    %bl,%bl
    169f:	32 01                	xor    (%rcx),%al
  memcpy(new_eth->h_source, old_eth->h_dest, 6);
    16a1:	54                   	push   %rsp
    16a2:	04 db                	add    $0xdb,%al
    16a4:	32 86 35 03 77 80    	xor    -0x7f88fccb(%rsi),%al
    16aa:	01 04 86             	add    %eax,(%rsi,%rax,4)
    16ad:	35 a9 35 01 52       	xor    $0x520135a9,%eax
  new_eth->h_proto = BE_ETH_P_IPV6;
    16b2:	04 d1                	add    $0xd1,%al
    16b4:	35 8c 36 01 52       	xor    $0x5201368c,%eax
    16b9:	04 c3                	add    $0xc3,%al
  saddr[3] = src ^ port;
    16bb:	38 c4                	cmp    %al,%ah
    16bd:	3d 03 77 80 01       	cmp    $0x1807703,%eax
  memset(ip6h->flow_lbl, 0, sizeof(ip6h->flow_lbl));
    16c2:	04 e5                	add    $0xe5,%al
    16c4:	3d 85 3e 03 77       	cmp    $0x77033e85,%eax
  ip6h->priority = (tc & 0xF0) >> 4;
    16c9:	80 01 04             	addb   $0x4,(%rcx)
    16cc:	85 3e                	test   %edi,(%rsi)
    16ce:	96                   	xchg   %eax,%esi
    16cf:	3e 01 52 04          	ds add %edx,0x4(%rdx)
  ip6h->flow_lbl[0] = (tc & 0x0F) << 4;
    16d3:	c8 3f b2 41          	enter  $0xb23f,$0x41
    16d7:	03 77 80             	add    -0x80(%rdi),%esi
  ip6h->nexthdr = proto;
    16da:	01 04 b2             	add    %eax,(%rdx,%rsi,4)
    16dd:	41 cc                	rex.B int3
  ip6h->payload_len = bpf_htons(payload_len);
    16df:	41 01 50 04          	add    %edx,0x4(%r8)
  memcpy(ip6h->saddr.s6_addr32, saddr, 16);
    16e3:	ad                   	lods   %ds:(%rsi),%eax
    16e4:	42 b7 42             	rex.X mov $0x42,%dil
    16e7:	01 54 04 b7          	add    %edx,-0x49(%rsp,%rax,1)
    16eb:	42 fe 42 03          	rex.X incb 0x3(%rdx)
    16ef:	77 80                	ja     1671 <balancer_ingress+0x1671>
    16f1:	01 04 b5 44 f3 44 03 	add    %eax,0x344f344(,%rsi,4)
    16f8:	77 80                	ja     167a <balancer_ingress+0x167a>
        (connId[1] << 24) | (connId[2] << 16) | (connId[3] << 8) | (connId[4]);
    16fa:	01 04 81             	add    %eax,(%rcx,%rax,4)
    16fd:	45 f5                	rex.RB cmc
    16ff:	45 03 77 80          	add    -0x80(%r15),%r14d
    1703:	01 00                	add    %eax,(%rax)
    1705:	04 8c                	add    $0x8c,%al
    1707:	12 95 12 0c 10 b4    	adc    -0x4beff3ee(%rbp),%dl
    170d:	a0 e5 93 f9 ff ff ff 	movabs 0x1fffffffff993e5,%al
    1714:	ff 01 
    1716:	9f                   	lahf
    1717:	04 95                	add    $0x95,%al
    1719:	12 98 12 01 50 00    	adc    0x500112(%rax),%bl
    result.server_id = (connId[1] << 16) | (connId[2] << 8) | (connId[3]);
    171f:	04 98                	add    $0x98,%al
    1721:	12 a3 12 0d 70 00    	adc    0x700d12(%rbx),%ah
    1727:	a8 b5                	test   $0xb5,%al
    1729:	80 80 00 a8 b0 80 80 	addb   $0x80,-0x7f4f5800(%rax)
    1730:	00 9f 04 d5 1c d7    	add    %bl,-0x28e32afc(%rdi)
    1736:	1c 0d                	sbb    $0xd,%al
    1738:	70 00                	jo     173a <balancer_ingress+0x173a>
    173a:	a8 b5                	test   $0xb5,%al
    173c:	80 80 00 a8 b0 80 80 	addb   $0x80,-0x7f4f5800(%rax)
      if (qpr.server_id > 0) {
    1743:	00 9f 00 04 98 12    	add    %bl,0x12980400(%rdi)
  if (cid_version == QUIC_CONNID_VERSION_V1) {
    1749:	a3 12 0d 70 00 a8 b5 	movabs %eax,0x8080b5a800700d12
    1750:	80 80 
    1752:	00 a8 b0 80 80 00    	add    %ch,0x8080b0(%rax)
    1758:	9f                   	lahf
    1759:	04 d5                	add    $0xd5,%al
    175b:	1c d7                	sbb    $0xd7,%al
    175d:	1c 0d                	sbb    $0xd,%al
    175f:	70 00                	jo     1761 <balancer_ingress+0x1761>
    1761:	a8 b5                	test   $0xb5,%al
    1763:	80 80 00 a8 b0 80 80 	addb   $0x80,-0x7f4f5800(%rax)
    if (pckt->flow.proto == IPPROTO_UDP) {
    176a:	00 9f 00 04 98 12    	add    %bl,0x12980400(%rdi)
    1770:	a3 12 02 30 9f 04 d5 	movabs %eax,0xe91cd5049f300212
    1777:	1c e9 
    new_dst_lru.pos = key;
    1779:	1c 02                	sbb    $0x2,%al
    177b:	30 9f 04 e9 1c ee    	xor    %bl,-0x11e316fc(%rdi)
    1781:	1c 01                	sbb    $0x1,%al
    1783:	50                   	push   %rax
    1784:	04 ee                	add    $0xee,%al
    1786:	1c f7                	sbb    $0xf7,%al
    1788:	1c 02                	sbb    $0x2,%al
    178a:	77 08                	ja     1794 <balancer_ingress+0x1794>
    178c:	00 04 98             	add    %al,(%rax,%rbx,4)
    178f:	12 a3 12 02 3c 9f    	adc    -0x60c3fdee(%rbx),%ah
      if (update_vip_lru_miss_stats(&vip, &pckt, vip_info, is_ipv6) >= 0) {
    1795:	04 d5                	add    $0xd5,%al
    1797:	1c f7                	sbb    $0xf7,%al
    1799:	1c 02                	sbb    $0x2,%al
    179b:	3c 9f                	cmp    $0x9f,%al
    179d:	00 04 98             	add    %al,(%rax,%rbx,4)
    17a0:	12 a3 12 04 10 80    	adc    -0x7feffbee(%rbx),%ah
    17a6:	01 9f 04 d5 1c f7    	add    %ebx,-0x8e32afc(%rdi)
  bool port_match = lru_miss_stat_vip->port == vip->port;
    17ac:	1c 04                	sbb    $0x4,%al
    17ae:	10 80 01 9f 00 04    	adc    %al,0x4009f01(%rax)
    17b4:	98                   	cwtl
  bool proto_match = lru_miss_stat_vip->proto = vip->proto;
    17b5:	12 a3 12 02 38 9f    	adc    -0x60c7fdee(%rbx),%ah
    17bb:	04 d5                	add    $0xd5,%al
    17bd:	1c f7                	sbb    $0xf7,%al
    17bf:	1c 02                	sbb    $0x2,%al
    17c1:	38 9f 00 04 a3 12    	cmp    %bl,0x12a30400(%rdi)
  bool vip_match = address_match && port_match && proto_match;
    17c7:	ab                   	stos   %eax,%es:(%rdi)
    17c8:	12 02                	adc    (%rdx),%al
    17ca:	30 9f 04 ab 12 b4    	xor    %bl,-0x4bed54fc(%rdi)
    __u32* lru_miss_stat = bpf_map_lookup_elem(&lru_miss_stats, &lru_stats_key);
    17d0:	12 01                	adc    (%rcx),%al
    17d2:	50                   	push   %rax
    17d3:	00 04 b4             	add    %al,(%rsp,%rsi,4)
    17d6:	12 cb                	adc    %bl,%cl
    17d8:	12 01                	adc    (%rcx),%al
    17da:	50                   	push   %rax
    17db:	00 04 e9             	add    %al,(%rcx,%rbp,8)
    17de:	1c ee                	sbb    $0xee,%al
    17e0:	1c 01                	sbb    $0x1,%al
    17e2:	50                   	push   %rax
    17e3:	04 ee                	add    $0xee,%al
    17e5:	1c f6                	sbb    $0xf6,%al
    17e7:	1d 02 77 08 04       	sbb    $0x4087702,%eax
    17ec:	ba 1e ef 1e 02       	mov    $0x21eef1e,%edx
    17f1:	77 08                	ja     17fb <balancer_ingress+0x17fb>
    17f3:	04 9a                	add    $0x9a,%al
    17f5:	21 ee                	and    %ebp,%esi
    17f7:	21 02                	and    %eax,(%rdx)
    if (!lru_miss_stat) {
    17f9:	77 08                	ja     1803 <balancer_ingress+0x1803>
    17fb:	04 b9                	add    $0xb9,%al
    17fd:	23 92 24 02 77 08    	and    0x8770224(%rdx),%edx
    *lru_miss_stat += 1;
    1803:	04 fa                	add    $0xfa,%al
    1805:	2d e0 2e 02 77       	sub    $0x77022ee0,%eax
    180a:	08 04 da             	or     %al,(%rdx,%rbx,8)
    180d:	30 be 31 02 77 08    	xor    %bh,0x8770231(%rsi)
    1813:	04 be                	add    $0xbe,%al
    1815:	31 c0                	xor    %eax,%eax
    1817:	31 01                	xor    %eax,(%rcx)
    1819:	55                   	push   %rbp
    181a:	04 c0                	add    $0xc0,%al
    181c:	31 a1 32 02 77 08    	xor    %esp,0x8770232(%rcx)
      data_stats->v2 += 1;
    1822:	04 a1                	add    $0xa1,%al
    1824:	32 a3 32 01 55 04    	xor    0x4550132(%rbx),%ah
    if (long_header->conn_id_lens < QUIC_MIN_CONNID_LEN) {
    182a:	a3 32 c6 37 02 77 08 	movabs %eax,0xc30408770237c632
    1831:	04 c3 
    1833:	38 c4                	cmp    %al,%ah
    1835:	3d 02 77 08 04       	cmp    $0x4087702,%eax
  if (!connId) {
    183a:	e5 3d                	in     $0x3d,%eax
    183c:	b4 3f                	mov    $0x3f,%ah
    183e:	02 77 08             	add    0x8(%rdi),%dh
    1841:	04 c8                	add    $0xc8,%al
    1843:	3f                   	(bad)
    1844:	ee                   	out    %al,(%dx)
    1845:	3f                   	(bad)
    1846:	02 77 08             	add    0x8(%rdi),%dh
    1849:	04 ee                	add    $0xee,%al
    184b:	3f                   	(bad)
    184c:	f2 3f                	repnz (bad)
    184e:	01 55 04             	add    %edx,0x4(%rbp)
    1851:	f2 3f                	repnz (bad)
    1853:	cc                   	int3
    1854:	41 02 77 08          	add    0x8(%r15),%sil
    1858:	04 ad                	add    $0xad,%al
    185a:	42 fe 42 02          	rex.X incb 0x2(%rdx)
    185e:	77 08                	ja     1868 <balancer_ingress+0x1868>
        __u32* real_pos = bpf_map_lookup_elem(&server_id_map, &key);
    1860:	04 b5                	add    $0xb5,%al
    1862:	44                   	rex.R
    1863:	f3 44 02 77 08       	repz add 0x8(%rdi),%r14b
    1868:	04 81                	add    $0x81,%al
    186a:	45 c3                	rex.RB ret
    186c:	45 02 77 08          	add    0x8(%r15),%r14b
    1870:	04 c3                	add    $0xc3,%al
          key = *real_pos;
    1872:	45 c7 45 01 55 04 c7 	rex.RB movl $0x45c70455,0x1(%r13)
    1879:	45 
    187a:	f5                   	cmc
          if (key == 0) {
    187b:	45 02 77 08          	add    0x8(%r15),%r14b
            pckt.real_index = key;
    187f:	00 04 db             	add    %al,(%rbx,%rbx,8)
    1882:	12 ec                	adc    %ah,%ch
            dst = bpf_map_lookup_elem(&reals, &key);
    1884:	12 02                	adc    (%rdx),%al
    1886:	30 9f 04 ec 12 f5    	xor    %bl,-0xaed13fc(%rdi)
    188c:	12 01                	adc    (%rcx),%al
    188e:	52                   	push   %rdx
    188f:	00 04 f5 12 8d 13 01 	add    %al,0x1138d12(,%rsi,8)
    1896:	52                   	push   %rdx
    1897:	00 04 8d 13 9a 13 03 	add    %al,0x3139a13(,%rcx,4)
    189e:	73 2a                	jae    18ca <balancer_ingress+0x18ca>
    18a0:	9f                   	lahf
    18a1:	04 9a                	add    $0x9a,%al
    18a3:	13 9c 13 01 50 00 04 	adc    0x4005001(%rbx,%rdx,1),%ebx
            if (!dst) {
    18aa:	cc                   	int3
    18ab:	13 de                	adc    %esi,%ebx
    18ad:	13 02                	adc    (%rdx),%eax
    18af:	30 9f 04 de 13 e7    	xor    %bl,-0x18ec21fc(%rdi)
    18b5:	13 01                	adc    (%rcx),%eax
    18b7:	50                   	push   %rax
    18b8:	00 04 ff             	add    %al,(%rdi,%rdi,8)
    18bb:	13 df                	adc    %edi,%ebx
    18bd:	14 02                	adc    $0x2,%al
  struct real_pos_lru* dst_lru = real_bpf_map_lookup_elem(lru_map, &pckt->flow);
    18bf:	31 9f 04 e3 14 b1    	xor    %ebx,-0x4eeb1cfc(%rdi)
  if (dst_lru) {
    18c5:	16                   	(bad)
    18c6:	02 30                	add    (%rax),%dh
    18c8:	9f                   	lahf
    if (dst_lru->pos == pckt->real_index) {
    18c9:	00 04 ff             	add    %al,(%rdi,%rdi,8)
    18cc:	13 df                	adc    %edi,%ebx
    18ce:	14 03                	adc    $0x3,%al
    18d0:	77 10                	ja     18e2 <balancer_ingress+0x18e2>
    18d2:	9f                   	lahf
    18d3:	04 f9                	add    $0xf9,%al
              quic_packets_stats->dst_match_in_lru += 1;
    18d5:	15 93 16 03 77       	adc    $0x77031693,%eax
    18da:	10 9f 00 04 ff 13    	adc    %bl,0x13ff0400(%rdi)
    18e0:	df 14 02             	fists  (%rdx,%rax,1)
    18e3:	30 9f 04 f9 15 93    	xor    %bl,-0x6cea06fc(%rdi)
    18e9:	16                   	(bad)
    18ea:	02 30                	add    (%rax),%dh
    18ec:	9f                   	lahf
    18ed:	00 04 98             	add    %al,(%rax,%rbx,4)
    18f0:	14 b3                	adc    $0xb3,%al
    18f2:	14 02                	adc    $0x2,%al
    18f4:	30 9f 04 b3 14 b8    	xor    %bl,-0x47eb4cfc(%rdi)
  original_sport = pckt.flow.port16[0];
    18fa:	14 01                	adc    $0x1,%al
    18fc:	5e                   	pop    %rsi
    18fd:	00 04 b3             	add    %al,(%rbx,%rsi,4)
    if (!dst && !(pckt.flags & F_SYN_SET) &&
    1900:	14 df                	adc    $0xdf,%al
    1902:	14 01                	adc    $0x1,%al
    1904:	5e                   	pop    %rsi
        !(vip_info->flags & F_LRU_BYPASS)) {
    1905:	04 f9                	add    $0xf9,%al
    1907:	15 93 16 01 5e       	adc    $0x5e011693,%eax
    190c:	00 04 b8             	add    %al,(%rax,%rdi,4)
    190f:	14 c9                	adc    $0xc9,%al
    1911:	14 02                	adc    $0x2,%al
    1913:	30 9f 04 c9 14 d2    	xor    %bl,-0x2deb36fc(%rdi)
    1919:	14 01                	adc    $0x1,%al
    191b:	50                   	push   %rax
    191c:	00 04 d2             	add    %al,(%rdx,%rdx,8)
    191f:	14 df                	adc    $0xdf,%al
  dst_lru = real_bpf_map_lookup_elem(lru_map, &pckt->flow);
    1921:	14 01                	adc    $0x1,%al
  if (!dst_lru) {
    1923:	50                   	push   %rax
    1924:	00 04 fe             	add    %al,(%rsi,%rdi,8)
    1927:	14 81                	adc    $0x81,%al
    1929:	15 01 51 00 04       	adc    $0x4005101,%eax
  if (!isGlobalLru && pckt->flow.proto == IPPROTO_UDP) {
    192e:	9d                   	popf
    192f:	15 b1 16 01 5c       	adc    $0x5c0116b1,%eax
    1934:	00 04 9d 15 c4 15 01 	add    %al,0x115c415(,%rbx,4)
    if (cur_time - dst_lru->atime > LRU_UDP_TIMEOUT) {
    193b:	50                   	push   %rax
    193c:	00 04 d6             	add    %al,(%rsi,%rdx,8)
    193f:	15 b1 16 04 10       	adc    $0x100416b1,%eax
    1944:	8a 04 9f             	mov    (%rdi,%rbx,4),%al
    1947:	00 04 d6             	add    %al,(%rsi,%rdx,8)
    194a:	15 e7 15 02 30       	adc    $0x300215e7,%eax
    194f:	9f                   	lahf
    1950:	04 e7                	add    $0xe7,%al
    1952:	15 f0 15 01 52       	adc    $0x520115f0,%eax
    1957:	00 04 f0             	add    %al,(%rax,%rsi,8)
    195a:	15 b1 16 01 52       	adc    $0x520116b1,%eax
  key = dst_lru->pos;
    195f:	00 04 9c             	add    %al,(%rsp,%rbx,4)
    1962:	16                   	(bad)
    1963:	a3 16 02 30 9f 04 a3 	movabs %eax,0xac16a3049f300216
    196a:	16 ac 
  pckt->real_index = key;
    196c:	16                   	(bad)
    196d:	01 50 00             	add    %edx,0x0(%rax)
  *real = bpf_map_lookup_elem(&reals, &key);
    1970:	04 ac                	add    $0xac,%al
    1972:	16                   	(bad)
    1973:	b1 16                	mov    $0x16,%cl
    1975:	01 50 00             	add    %edx,0x0(%rax)
    1978:	04 dc                	add    $0xdc,%al
    197a:	16                   	(bad)
    197b:	ed                   	in     (%dx),%eax
    197c:	16                   	(bad)
    197d:	02 30                	add    (%rax),%dh
    197f:	9f                   	lahf
    1980:	04 ed                	add    $0xed,%al
    1982:	16                   	(bad)
    1983:	f6 16                	notb   (%rsi)
    1985:	01 50 00             	add    %edx,0x0(%rax)
    1988:	04 f6                	add    $0xf6,%al
    198a:	16                   	(bad)
    198b:	95                   	xchg   %eax,%ebp
    198c:	17                   	(bad)
    198d:	01 50 00             	add    %edx,0x0(%rax)
  if (dst && pckt->flow.proto == IPPROTO_UDP &&
    1990:	04 88                	add    $0x88,%al
    1992:	17                   	(bad)
    1993:	95                   	xchg   %eax,%ebp
    1994:	17                   	(bad)
    1995:	01 52 00             	add    %edx,0x0(%rdx)
    1998:	04 95                	add    $0x95,%al
      vip_info->flags & F_UDP_FLOW_MIGRATION && !is_under_flood(&cur_time)) {
    199a:	17                   	(bad)
    199b:	d4                   	(bad)
    199c:	17                   	(bad)
    199d:	03 73 2a             	add    0x2a(%rbx),%esi
    19a0:	9f                   	lahf
    19a1:	00 04 f5 17 d5 18 02 	add    %al,0x218d517(,%rsi,8)
      bpf_map_lookup_elem(&stats, &conn_rate_key);
    19a8:	31 9f 04 d5 18 ac    	xor    %ebx,-0x53e72afc(%rdi)
    19ae:	1a 02                	sbb    (%rdx),%al
    19b0:	30 9f 00 04 f5 17    	xor    %bl,0x17f50400(%rdi)
  if (!conn_rate_stats) {
    19b6:	d5                   	(bad)
    19b7:	18 03                	sbb    %al,(%rbx)
    19b9:	77 10                	ja     19cb <balancer_ingress+0x19cb>
    19bb:	9f                   	lahf
    19bc:	04 eb                	add    $0xeb,%al
    19be:	19 85 1a 03 77 10    	sbb    %eax,0x1077031a(%rbp)
    19c4:	9f                   	lahf
    19c5:	00 04 f5 17 d5 18 02 	add    %al,0x218d517(,%rsi,8)
  *cur_time = bpf_ktime_get_ns();
    19cc:	30 9f 04 eb 19 85    	xor    %bl,-0x7ae614fc(%rdi)
  if ((*cur_time - conn_rate_stats->v2) > ONE_SEC) {
    19d2:	1a 02                	sbb    (%rdx),%al
    19d4:	30 9f 00 04 8e 18    	xor    %bl,0x188e0400(%rdi)
    19da:	a9 18 02 30 9f       	test   $0x9f300218,%eax
    conn_rate_stats->v1 = 1;
    19df:	04 a9                	add    $0xa9,%al
    19e1:	18 ae 18 01 5e 00    	sbb    %ch,0x5e0118(%rsi)
    conn_rate_stats->v2 = *cur_time;
    19e7:	04 a9                	add    $0xa9,%al
    19e9:	18 d5                	sbb    %dl,%ch
    conn_rate_stats->v1 += 1;
    19eb:	18 01                	sbb    %al,(%rcx)
    19ed:	5e                   	pop    %rsi
    19ee:	04 eb                	add    $0xeb,%al
    19f0:	19 85 1a 01 5e 00    	sbb    %eax,0x5e011a(%rbp)
    19f6:	04 ae                	add    $0xae,%al
    if (conn_rate_stats->v1 > MAX_CONN_RATE) {
    19f8:	18 bf 18 02 30 9f    	sbb    %bh,-0x60cffde8(%rdi)
    19fe:	04 bf                	add    $0xbf,%al
    1a00:	18 c8                	sbb    %cl,%al
    1a02:	18 01                	sbb    %al,(%rcx)
    1a04:	50                   	push   %rax
    void* down_reals_map = bpf_map_lookup_elem(&vip_to_down_reals_map, vip);
    1a05:	00 04 c8             	add    %al,(%rax,%rcx,8)
    1a08:	18 d5                	sbb    %dl,%ch
    1a0a:	18 01                	sbb    %al,(%rcx)
    1a0c:	50                   	push   %rax
    1a0d:	00 04 8e             	add    %al,(%rsi,%rcx,4)
    1a10:	19 ac 1a 01 5c 00 04 	sbb    %ebp,0x4005c01(%rdx,%rbx,1)
    1a17:	c8 19 ac 1a          	enter  $0xac19,$0x1a
    1a1b:	04 10                	add    $0x10,%al
    1a1d:	8a 04 9f             	mov    (%rdi,%rbx,4),%al
    1a20:	00 04 c8             	add    %al,(%rax,%rcx,8)
    if (down_reals_map) {
    1a23:	19 d9                	sbb    %ebx,%ecx
    1a25:	19 02                	sbb    %eax,(%rdx)
    1a27:	30 9f 04 d9 19 e2    	xor    %bl,-0x1de626fc(%rdi)
      void* down_real = real_bpf_map_lookup_elem(down_reals_map, &pckt->real_index);
    1a2d:	19 01                	sbb    %eax,(%rcx)
    1a2f:	52                   	push   %rdx
    1a30:	00 04 e2             	add    %al,(%rdx,%riz,8)
    1a33:	19 ac 1a 01 52 00 04 	sbb    %ebp,0x4005201(%rdx,%rbx,1)
      if (down_real) {
    1a3a:	8e 1a                	mov    (%rdx),%ds
    1a3c:	95                   	xchg   %eax,%ebp
        struct lb_stats* stats_data = bpf_map_lookup_elem(&stats, &stats_key);
    1a3d:	1a 02                	sbb    (%rdx),%al
    1a3f:	30 9f 04 95 1a 9e    	xor    %bl,-0x61e56afc(%rdi)
    1a45:	1a 01                	sbb    (%rcx),%al
    1a47:	50                   	push   %rax
    1a48:	00 04 9e             	add    %al,(%rsi,%rbx,4)
    1a4b:	1a ac 1a 01 50 00 04 	sbb    0x4005001(%rdx,%rbx,1),%ch
        if (stats_data) {
    1a52:	b6 1a                	mov    $0x1a,%dh
    1a54:	c3                   	ret
    1a55:	1a 01                	sbb    (%rcx),%al
          stats_data->v1 += 1;
    1a57:	50                   	push   %rax
    1a58:	00 04 8e             	add    %al,(%rsi,%rcx,4)
    1a5b:	1b aa 1b 02 30 9f    	sbb    -0x60cffde5(%rdx),%ebp
    if (!dst) {
    1a61:	04 aa                	add    $0xaa,%al
    1a63:	1b b3 1b 01 50 00    	sbb    0x50011b(%rbx),%esi
  data_stats = bpf_map_lookup_elem(&stats, &vip_num);
    1a69:	04 aa                	add    $0xaa,%al
    1a6b:	1b b3 1b 01 50 04    	sbb    0x450011b(%rbx),%esi
    1a71:	b3 1b                	mov    $0x1b,%bl
    1a73:	d5                   	(bad)
    1a74:	1c 01                	sbb    $0x1,%al
    1a76:	51                   	push   %rcx
    1a77:	04 f6                	add    $0xf6,%al
    1a79:	1d b0 1e 01 50       	sbb    $0x50011eb0,%eax
    1a7e:	04 ef                	add    $0xef,%al
    1a80:	1e                   	(bad)
    1a81:	99                   	cltd
    1a82:	1f                   	(bad)
    1a83:	01 51 04             	add    %edx,0x4(%rcx)
  if (!data_stats) {
    1a86:	99                   	cltd
    1a87:	1f                   	(bad)
    1a88:	9f                   	lahf
    1a89:	1f                   	(bad)
    1a8a:	02 77 08             	add    0x8(%rdi),%dh
    1a8d:	04 9f                	add    $0x9f,%al
    1a8f:	1f                   	(bad)
    1a90:	e7 1f                	out    %eax,$0x1f
    1a92:	01 51 04             	add    %edx,0x4(%rcx)
    1a95:	e7 1f                	out    %eax,$0x1f
  data_stats->v1 += 1;
    1a97:	ec                   	in     (%dx),%al
    1a98:	1f                   	(bad)
    1a99:	02 77 08             	add    0x8(%rdi),%dh
    1a9c:	04 ec                	add    $0xec,%al
  data_stats->v2 += pkt_bytes;
    1a9e:	1f                   	(bad)
    1a9f:	a0 20 01 51 04 a2 20 	movabs 0x20d420a204510120,%al
    1aa6:	d4 20 
  data_stats = bpf_map_lookup_elem(&reals_stats, &pckt.real_index);
    1aa8:	01 51 04             	add    %edx,0x4(%rcx)
    1aab:	d4                   	(bad)
    1aac:	20 8a 21 02 77 08    	and    %cl,0x8770221(%rdx)
    1ab2:	04 ee                	add    $0xee,%al
    1ab4:	21 95 22 01 51 04    	and    %edx,0x4510122(%rbp)
    1aba:	95                   	xchg   %eax,%ebp
    1abb:	22 cf                	and    %bh,%cl
    1abd:	22 02                	and    (%rdx),%al
    1abf:	77 08                	ja     1ac9 <balancer_ingress+0x1ac9>
    1ac1:	04 cf                	add    $0xcf,%al
    1ac3:	22 fe                	and    %dh,%bh
    1ac5:	22 01                	and    (%rcx),%al
    1ac7:	51                   	push   %rcx
    1ac8:	04 84                	add    $0x84,%al
    1aca:	23 b9 23 01 51 04    	and    0x4510123(%rcx),%edi
    1ad0:	92                   	xchg   %eax,%edx
  if (!data_stats) {
    1ad1:	24 c4                	and    $0xc4,%al
    1ad3:	24 02                	and    $0x2,%al
    1ad5:	77 08                	ja     1adf <balancer_ingress+0x1adf>
    1ad7:	04 c4                	add    $0xc4,%al
    1ad9:	24 fc                	and    $0xfc,%al
  data_stats->v1 += 1;
    1adb:	24 01                	and    $0x1,%al
    1add:	51                   	push   %rcx
  data_stats->v2 += pkt_bytes;
    1ade:	04 fc                	add    $0xfc,%al
    1ae0:	24 8a                	and    $0x8a,%al
    1ae2:	2a 02                	sub    (%rdx),%al
    1ae4:	77 08                	ja     1aee <balancer_ingress+0x1aee>
  pckt.flow.port16[0] = original_sport;
    1ae6:	04 8a                	add    $0x8a,%al
    1ae8:	2a 9f 2a 01 52 04    	sub    0x452012a(%rdi),%bl
  if (dst->flags & F_IPV6) {
    1aee:	9f                   	lahf
    1aef:	2a a0 2b 02 77 08    	sub    0x877022b(%rax),%ah
    1af5:	04 a0                	add    $0xa0,%al
  __u32 ip_src = create_encap_ipv4_src(pckt->flow.port16[0], pckt->flow.src);
    1af7:	2b a5 2b 01 51 04    	sub    0x451012b(%rbp),%esp
    1afd:	a5                   	movsl  %ds:(%rsi),%es:(%rdi)
    1afe:	2b a7 2c 02 77 08    	sub    0x877022c(%rdi),%esp
  if (XDP_ADJUST_HEAD_FUNC(xdp, 0 - (int)sizeof(struct iphdr))) {
    1b04:	04 a7                	add    $0xa7,%al
    1b06:	2c a9                	sub    $0xa9,%al
    1b08:	2c 01                	sub    $0x1,%al
    1b0a:	52                   	push   %rdx
    1b0b:	04 a9                	add    $0xa9,%al
    1b0d:	2c fa                	sub    $0xfa,%al
    1b0f:	2d 02 77 08 04       	sub    $0x4087702,%eax
  data = (void*)(long)xdp->data;
    1b14:	ea                   	(bad)
    1b15:	2e a8 30             	cs test $0x30,%al
  data_end = (void*)(long)xdp->data_end;
    1b18:	02 77 08             	add    0x8(%rdi),%dh
    1b1b:	04 a8                	add    $0xa8,%al
  iph = data + sizeof(struct ethhdr);
    1b1d:	30 c7                	xor    %al,%bh
    1b1f:	30 01                	xor    %al,(%rcx)
  if (new_eth + 1 > data_end || old_eth + 1 > data_end || iph + 1 > data_end) {
    1b21:	51                   	push   %rcx
    1b22:	04 cc                	add    $0xcc,%al
    1b24:	41 a6                	rex.B cmpsb %es:(%rdi),%ds:(%rsi)
    1b26:	42 02 77 08          	rex.X add 0x8(%rdi),%sil
    1b2a:	04 91                	add    $0x91,%al
    1b2c:	43 b0 44             	rex.XB mov $0x44,%r8b
    1b2f:	02 77 08             	add    0x8(%rdi),%dh
    1b32:	04 b0                	add    $0xb0,%al
    1b34:	44 b5 44             	rex.R mov $0x44,%bpl
    1b37:	01 51 04             	add    %edx,0x4(%rcx)
    1b3a:	f3 44 81 45 02 77 08 	repz rex.R addl $0xf5040877,0x2(%rbp)
    1b41:	04 f5 
    1b43:	45 e5 47             	rex.RB in $0x47,%eax
    1b46:	02 77 08             	add    0x8(%rdi),%dh
    1b49:	00 04 c5 1b d5 1c 04 	add    %al,0x41cd51b(,%rax,8)
    1b50:	10 80 04 9f 04 ef    	adc    %al,-0x10fb60fc(%rax)
    1b56:	1e                   	(bad)
    1b57:	8a 21                	mov    (%rcx),%ah
  memcpy(new_eth->h_dest, cval->mac, 6);
    1b59:	04 10                	add    $0x10,%al
    1b5b:	80 04 9f 04          	addb   $0x4,(%rdi,%rbx,4)
    1b5f:	ee                   	out    %al,(%dx)
    1b60:	21 b9 23 04 10 80    	and    %edi,-0x7feffbdd(%rcx)
    1b66:	04 9f                	add    $0x9f,%al
    1b68:	04 92                	add    $0x92,%al
    1b6a:	24 fa                	and    $0xfa,%al
  memcpy(new_eth->h_source, old_eth->h_dest, 6);
    1b6c:	2d 04 10 80 04       	sub    $0x4801004,%eax
    1b71:	9f                   	lahf
    1b72:	04 ea                	add    $0xea,%al
    1b74:	2e c7                	cs (bad)
    1b76:	30 04 10             	xor    %al,(%rax,%rdx,1)
  new_eth->h_proto = BE_ETH_P_IP;
    1b79:	80 04 9f 04          	addb   $0x4,(%rdi,%rbx,4)
    1b7d:	cc                   	int3
    1b7e:	41 a6                	rex.B cmpsb %es:(%rdi),%ds:(%rsi)
  create_v4_hdr(iph, pckt->tos, ip_src, dst->dst, pkt_bytes, IPPROTO_IPIP);
    1b80:	42 04 10             	rex.X add $0x10,%al
    1b83:	80 04 9f 04          	addb   $0x4,(%rdi,%rbx,4)
  iph->ihl = 5;
    1b87:	91                   	xchg   %eax,%ecx
    1b88:	43 b5 44             	rex.XB mov $0x44,%r13b
  iph->tos = tos;
    1b8b:	04 10                	add    $0x10,%al
  iph->tot_len = bpf_htons(pkt_bytes + sizeof(struct iphdr));
    1b8d:	80 04 9f 04          	addb   $0x4,(%rdi,%rbx,4)
    1b91:	f3 44 81 45 04 10 80 	repz rex.R addl $0x9f048010,0x4(%rbp)
    1b98:	04 9f 
    1b9a:	04 f5                	add    $0xf5,%al
  iph->id = 0;
    1b9c:	45 e5 47             	rex.RB in $0x47,%eax
    1b9f:	04 10                	add    $0x10,%al
    1ba1:	80 04 9f 00          	addb   $0x0,(%rdi,%rbx,4)
  iph->saddr = saddr;
    1ba5:	04 c5                	add    $0xc5,%al
    1ba7:	1b d7                	sbb    %edi,%edx
  iph->ttl = DEFAULT_TTL;
    1ba9:	1b 02                	sbb    (%rdx),%eax
    1bab:	30 9f 04 d7 1b e0    	xor    %bl,-0x1fe428fc(%rdi)
    1bb1:	1b 01                	sbb    (%rcx),%eax
    1bb3:	56                   	push   %rsi
    1bb4:	00 04 e0             	add    %al,(%rax,%riz,8)
    1bb7:	1b d5                	sbb    %ebp,%edx
    1bb9:	1c 01                	sbb    $0x1,%al
    1bbb:	56                   	push   %rsi
    1bbc:	04 ef                	add    $0xef,%al
    1bbe:	1e                   	(bad)
    1bbf:	8a 21                	mov    (%rcx),%ah
    1bc1:	01 56 04             	add    %edx,0x4(%rsi)
    1bc4:	ee                   	out    %al,(%dx)
    1bc5:	21 b9 23 01 56 04    	and    %edi,0x4560123(%rcx)
    1bcb:	92                   	xchg   %eax,%edx
    1bcc:	24 a7                	and    $0xa7,%al
    1bce:	26 01 56 04          	es add %edx,0x4(%rsi)
    1bd2:	a7                   	cmpsl  %es:(%rdi),%ds:(%rsi)
    1bd3:	26 ca 26 01          	es lret $0x126
    1bd7:	52                   	push   %rdx
    1bd8:	04 f2                	add    $0xf2,%al
    1bda:	26 ab                	es stos %eax,%es:(%rdi)
    1bdc:	27                   	(bad)
    1bdd:	01 52 04             	add    %edx,0x4(%rdx)
    1be0:	e8 28 bf 2c 01       	call   12cdb0d <_license+0x12cb728>
    1be5:	56                   	push   %rsi
    1be6:	04 bf                	add    $0xbf,%al
    1be8:	2c d0                	sub    $0xd0,%al
    1bea:	2c 01                	sub    $0x1,%al
    1bec:	52                   	push   %rdx
    1bed:	04 ea                	add    $0xea,%al
    1bef:	2e c7                	cs (bad)
    1bf1:	30 01                	xor    %al,(%rcx)
    1bf3:	56                   	push   %rsi
    1bf4:	04 cc                	add    $0xcc,%al
    1bf6:	41 a6                	rex.B cmpsb %es:(%rdi),%ds:(%rsi)
    1bf8:	42 01 56 04          	rex.X add %edx,0x4(%rsi)
    1bfc:	91                   	xchg   %eax,%ecx
    1bfd:	43 b5 44             	rex.XB mov $0x44,%r13b
    1c00:	01 56 04             	add    %edx,0x4(%rsi)
    1c03:	f3 44 81 45 01 56 04 	repz rex.R addl $0x45f50456,0x1(%rbp)
    1c0a:	f5 45 
    1c0c:	e5 47                	in     $0x47,%eax
    1c0e:	01 56 00             	add    %edx,0x0(%rsi)
    1c11:	04 8c                	add    $0x8c,%al
    1c13:	1c 95                	sbb    $0x95,%al
    1c15:	1c 0c                	sbb    $0xc,%al
    1c17:	10 b4 a0 e5 93 f9 ff 	adc    %dh,-0x66c1b(%rax,%riz,4)
    1c1e:	ff                   	(bad)
    1c1f:	ff                   	(bad)
    1c20:	ff 01                	incl   (%rcx)
    1c22:	9f                   	lahf
    1c23:	04 95                	add    $0x95,%al
    1c25:	1c 98                	sbb    $0x98,%al
    1c27:	1c 01                	sbb    $0x1,%al
    1c29:	50                   	push   %rax
    1c2a:	00 04 98             	add    %al,(%rax,%rbx,4)
    1c2d:	1c a3                	sbb    $0xa3,%al
    1c2f:	1c 0d                	sbb    $0xd,%al
    1c31:	70 00                	jo     1c33 <balancer_ingress+0x1c33>
    1c33:	a8 b5                	test   $0xb5,%al
    1c35:	80 80 00 a8 b0 80 80 	addb   $0x80,-0x7f4f5800(%rax)
    1c3c:	00 9f 04 ef 1e f1    	add    %bl,-0xee110fc(%rdi)
    1c42:	1e                   	(bad)
      if (pckt.flow.proto == IPPROTO_TCP) {
    1c43:	0d 70 00 a8 b5       	or     $0xb5a80070,%eax
    1c48:	80 80 00 a8 b0 80 80 	addb   $0x80,-0x7f4f5800(%rax)
            bpf_map_lookup_elem(&stats, &lru_stats_key);
    1c4f:	00 9f 00 04 98 1c    	add    %bl,0x1c980400(%rdi)
    1c55:	a3 1c 0d 70 00 a8 b5 	movabs %eax,0x8080b5a800700d1c
    1c5c:	80 80 
        if (!lru_stats) {
    1c5e:	00 a8 b0 80 80 00    	add    %ch,0x8080b0(%rax)
        if (pckt.flags & F_SYN_SET) {
    1c64:	9f                   	lahf
    1c65:	04 ef                	add    $0xef,%al
    1c67:	1e                   	(bad)
    1c68:	f1                   	int1
    1c69:	1e                   	(bad)
    1c6a:	0d 70 00 a8 b5       	or     $0xb5a80070,%eax
    1c6f:	80 80 00 a8 b0 80 80 	addb   $0x80,-0x7f4f5800(%rax)
    1c76:	00 9f 00 04 98 1c    	add    %bl,0x1c980400(%rdi)
  struct real_pos_lru new_dst_lru = {};
    1c7c:	a3 1c 02 30 9f 04 ef 	movabs %eax,0x831eef049f30021c
    1c83:	1e 83 
    1c85:	1f                   	(bad)
    1c86:	02 30                	add    (%rax),%dh
    1c88:	9f                   	lahf
    1c89:	04 83                	add    $0x83,%al
      bpf_map_lookup_elem(&stats, &conn_rate_key);
    1c8b:	1f                   	(bad)
    1c8c:	88 1f                	mov    %bl,(%rdi)
    1c8e:	01 50 04             	add    %edx,0x4(%rax)
    1c91:	88 1f                	mov    %bl,(%rdi)
    1c93:	91                   	xchg   %eax,%ecx
    1c94:	1f                   	(bad)
    1c95:	03 77 f0             	add    -0x10(%rdi),%esi
    1c98:	00 00                	add    %al,(%rax)
    1c9a:	04 98                	add    $0x98,%al
    1c9c:	1c a3                	sbb    $0xa3,%al
    1c9e:	1c 02                	sbb    $0x2,%al
  if (!conn_rate_stats) {
    1ca0:	3c 9f                	cmp    $0x9f,%al
    1ca2:	04 ef                	add    $0xef,%al
    1ca4:	1e                   	(bad)
    1ca5:	91                   	xchg   %eax,%ecx
    1ca6:	1f                   	(bad)
    1ca7:	02 3c 9f             	add    (%rdi,%rbx,4),%bh
    1caa:	00 04 98             	add    %al,(%rax,%rbx,4)
    1cad:	1c a3                	sbb    $0xa3,%al
  *cur_time = bpf_ktime_get_ns();
    1caf:	1c 04                	sbb    $0x4,%al
  if ((*cur_time - conn_rate_stats->v2) > ONE_SEC) {
    1cb1:	10 80 01 9f 04 ef    	adc    %al,-0x10fb60ff(%rax)
    1cb7:	1e                   	(bad)
    1cb8:	91                   	xchg   %eax,%ecx
    1cb9:	1f                   	(bad)
    1cba:	04 10                	add    $0x10,%al
    1cbc:	80 01 9f             	addb   $0x9f,(%rcx)
    1cbf:	00 04 98             	add    %al,(%rax,%rbx,4)
    conn_rate_stats->v1 = 1;
    1cc2:	1c a3                	sbb    $0xa3,%al
    1cc4:	1c 02                	sbb    $0x2,%al
    1cc6:	38 9f 04 ef 1e 91    	cmp    %bl,-0x6ee110fc(%rdi)
    conn_rate_stats->v2 = *cur_time;
    1ccc:	1f                   	(bad)
    1ccd:	02 38                	add    (%rax),%bh
    1ccf:	9f                   	lahf
    1cd0:	00 04 a3             	add    %al,(%rbx,%riz,4)
    conn_rate_stats->v1 += 1;
    1cd3:	1c ab                	sbb    $0xab,%al
    1cd5:	1c 02                	sbb    $0x2,%al
    1cd7:	30 9f 04 ab 1c b4    	xor    %bl,-0x4be354fc(%rdi)
    if (conn_rate_stats->v1 > MAX_CONN_RATE) {
    1cdd:	1c 01                	sbb    $0x1,%al
    1cdf:	50                   	push   %rax
    1ce0:	00 04 b4             	add    %al,(%rsp,%rsi,4)
    1ce3:	1c cb                	sbb    $0xcb,%al
    1ce5:	1c 01                	sbb    $0x1,%al
    1ce7:	50                   	push   %rax
    1ce8:	00 04 83             	add    %al,(%rbx,%rax,4)
    if (vip_info->flags & F_HASH_DPORT_ONLY) {
    1ceb:	1f                   	(bad)
    1cec:	88 1f                	mov    %bl,(%rdi)
    1cee:	01 50 04             	add    %edx,0x4(%rax)
    1cf1:	88 1f                	mov    %bl,(%rdi)
    1cf3:	d2 20                	shlb   %cl,(%rax)
    1cf5:	03 77 f0             	add    -0x10(%rdi),%esi
    b += *(u32*)(k + 4);
    1cf8:	00 04 d2             	add    %al,(%rdx,%rdx,8)
    c += *(u32*)(k + 8);
    1cfb:	20 d4                	and    %dl,%ah
    1cfd:	20 01                	and    %al,(%rcx)
      a += (u32)k[3] << 24;
    1cff:	55                   	push   %rbp
    1d00:	04 d4                	add    $0xd4,%al
    1d02:	20 8a 21 03 77 f0    	and    %cl,-0xf88fcdf(%rdx)
      a += (u32)k[1] << 8;
    1d08:	00 04 ee             	add    %al,(%rsi,%rbp,8)
    1d0b:	21 b9 23 03 77 f0    	and    %edi,-0xf88fcdd(%rcx)
      a += k[0];
    1d11:	00 04 92             	add    %al,(%rdx,%rdx,4)
    1d14:	24 fa                	and    $0xfa,%al
    1d16:	2d 03 77 f0 00       	sub    $0xf07703,%eax
      pckt->flow.port16[0] = pckt->flow.port16[1];
    1d1b:	04 ea                	add    $0xea,%al
    1d1d:	2e 90                	cs nop
    1d1f:	2f                   	(bad)
    1d20:	03 77 f0             	add    -0x10(%rdi),%esi
      memset(pckt->flow.srcv6, 0, 16);
    1d23:	00 04 90             	add    %al,(%rax,%rdx,4)
    1d26:	2f                   	(bad)
    1d27:	94                   	xchg   %eax,%esp
    1d28:	2f                   	(bad)
    1d29:	01 55 04             	add    %edx,0x4(%rbp)
    1d2c:	94                   	xchg   %eax,%esp
    1d2d:	2f                   	(bad)
    1d2e:	c7                   	(bad)
    1d2f:	30 03                	xor    %al,(%rbx)
    1d31:	77 f0                	ja     1d23 <balancer_ingress+0x1d23>
    1d33:	00 04 cc             	add    %al,(%rsp,%rcx,8)
    1d36:	41 a6                	rex.B cmpsb %es:(%rdi),%ds:(%rsi)
    1d38:	42 03 77 f0          	rex.X add -0x10(%rdi),%esi
    1d3c:	00 04 91             	add    %al,(%rcx,%rdx,4)
    1d3f:	43 f8                	rex.XB clc
    1d41:	43 03 77 f0          	rex.XB add -0x10(%r15),%esi
    c += *(u32*)(k + 8);
    1d45:	00 04 f8             	add    %al,(%rax,%rdi,8)
    1d48:	43 fa                	rex.XB cli
    __jhash_mix(a, b, c);
    1d4a:	43 01 55 04          	rex.XB add %edx,0x4(%r13)
  return (word << shift) | (word >> ((-shift) & 31));
    1d4e:	fa                   	cli
    __jhash_mix(a, b, c);
    1d4f:	43 b5 44             	rex.XB mov $0x44,%r13b
    b += *(u32*)(k + 4);
    1d52:	03 77 f0             	add    -0x10(%rdi),%esi
    1d55:	00 04 f3             	add    %al,(%rbx,%rsi,8)
    1d58:	44 81 45 03 77 f0 00 	rex.R addl $0x400f077,0x3(%rbp)
    1d5f:	04 
    __jhash_mix(a, b, c);
    1d60:	f5                   	cmc
    1d61:	45 c1 47 03 77       	rex.RB roll $0x77,0x3(%r15)
  return (word << shift) | (word >> ((-shift) & 31));
    1d66:	f0 00 04 c1          	lock add %al,(%rcx,%rax,8)
    __jhash_mix(a, b, c);
    1d6a:	47 c5 47 01          	(bad)
  return (word << shift) | (word >> ((-shift) & 31));
    1d6e:	55                   	push   %rbp
    1d6f:	04 c5                	add    $0xc5,%al
    __jhash_mix(a, b, c);
    1d71:	47 e5 47             	rex.RXB in $0x47,%eax
    1d74:	03 77 f0             	add    -0x10(%rdi),%esi
    1d77:	00 00                	add    %al,(%rax)
  return (word << shift) | (word >> ((-shift) & 31));
    1d79:	04 93                	add    $0x93,%al
    1d7b:	1d f6 1d 02 30       	sbb    $0x30021df6,%eax
    __jhash_mix(a, b, c);
    1d80:	9f                   	lahf
    1d81:	04 9a                	add    $0x9a,%al
    1d83:	21 ee                	and    %ebp,%esi
  return (word << shift) | (word >> ((-shift) & 31));
    1d85:	21 02                	and    %eax,(%rdx)
    1d87:	30 9f 04 b9 23 92    	xor    %bl,-0x6ddc46fc(%rdi)
    __jhash_mix(a, b, c);
    1d8d:	24 02                	and    $0x2,%al
  return (word << shift) | (word >> ((-shift) & 31));
    1d8f:	30 9f 04 fa 2d e0    	xor    %bl,-0x1fd205fc(%rdi)
    1d95:	2e 02 30             	cs add (%rax),%dh
      a += (u32)k[3] << 24;
    1d98:	9f                   	lahf
    1d99:	04 da                	add    $0xda,%al
    1d9b:	30 ec                	xor    %ch,%ah
    1d9d:	31 02                	xor    %eax,(%rdx)
      a += (u32)k[2] << 16;
    1d9f:	30 9f 04 ad 42 fe    	xor    %bl,-0x1bd52fc(%rdi)
    1da5:	42 02 30             	rex.X add (%rax),%sil
      a += (u32)k[1] << 8;
    1da8:	9f                   	lahf
    1da9:	04 b5                	add    $0xb5,%al
    1dab:	44                   	rex.R
    1dac:	f3 44 02 30          	repz add (%rax),%r14b
      a += (u32)k[2] << 16;
    1db0:	9f                   	lahf
      a += k[0];
    1db1:	04 81                	add    $0x81,%al
    1db3:	45 f5                	rex.RB cmc
      a += (u32)k[1] << 8;
    1db5:	45 02 30             	add    (%r8),%r14b
      a += k[0];
    1db8:	9f                   	lahf
    __jhash_mix(a, b, c);
    1db9:	00 04 93             	add    %al,(%rbx,%rdx,4)
      __jhash_final(a, b, c);
    1dbc:	1d a4 1d 02 30       	sbb    $0x30021da4,%eax
  return (word << shift) | (word >> ((-shift) & 31));
    1dc1:	9f                   	lahf
    1dc2:	04 a4                	add    $0xa4,%al
      __jhash_final(a, b, c);
    1dc4:	1d ad 1d 01 56       	sbb    $0x56011dad,%eax
  return (word << shift) | (word >> ((-shift) & 31));
    1dc9:	00 04 ad 1d f6 1d 01 	add    %al,0x11df61d(,%rbp,4)
    1dd0:	56                   	push   %rsi
    1dd1:	04 9a                	add    $0x9a,%al
    1dd3:	21 d7                	and    %edx,%edi
      __jhash_final(a, b, c);
    1dd5:	21 01                	and    %eax,(%rcx)
    1dd7:	56                   	push   %rsi
    1dd8:	04 b9                	add    $0xb9,%al
  return (word << shift) | (word >> ((-shift) & 31));
    1dda:	23 92 24 01 56 04    	and    0x4560124(%rdx),%edx
      __jhash_final(a, b, c);
    1de0:	fa                   	cli
    1de1:	2d e0 2e 01 56       	sub    $0x56012ee0,%eax
  return (word << shift) | (word >> ((-shift) & 31));
    1de6:	04 da                	add    $0xda,%al
      __jhash_final(a, b, c);
    1de8:	30 ec                	xor    %ch,%ah
    1dea:	31 01                	xor    %eax,(%rcx)
  return (word << shift) | (word >> ((-shift) & 31));
    1dec:	56                   	push   %rsi
    1ded:	04 ad                	add    $0xad,%al
      __jhash_final(a, b, c);
    1def:	42 fe 42 01          	rex.X incb 0x1(%rdx)
  return (word << shift) | (word >> ((-shift) & 31));
    1df3:	56                   	push   %rsi
    1df4:	04 b5                	add    $0xb5,%al
  a += initval;
    1df6:	44                   	rex.R
    1df7:	f3 44 01 56 04       	repz add %r10d,0x4(%rsi)
  b += initval;
    1dfc:	81 45 f5 45 01 56 00 	addl   $0x560145,-0xb(%rbp)
  a += initval;
    1e03:	04 b6                	add    $0xb6,%al
    1e05:	1d ba 1d 01 53       	sbb    $0x53011dba,%eax
  __jhash_final(a, b, c);
    1e0a:	00 04 b6             	add    %al,(%rsi,%rsi,4)
    1e0d:	1d f6 1d 01 5f       	sbb    $0x5f011df6,%eax
  return (word << shift) | (word >> ((-shift) & 31));
    1e12:	04 9a                	add    $0x9a,%al
  __jhash_final(a, b, c);
    1e14:	21 b0 21 01 5f 04    	and    %esi,0x45f0121(%rax)
  return (word << shift) | (word >> ((-shift) & 31));
    1e1a:	b9 23 92 24 01       	mov    $0x1249223,%ecx
  __jhash_final(a, b, c);
    1e1f:	5f                   	pop    %rdi
  return (word << shift) | (word >> ((-shift) & 31));
    1e20:	04 fa                	add    $0xfa,%al
    1e22:	2d c5 2e 01 5f       	sub    $0x5f012ec5,%eax
  __jhash_final(a, b, c);
    1e27:	00 04 b6             	add    %al,(%rsi,%rsi,4)
  return (word << shift) | (word >> ((-shift) & 31));
    1e2a:	1d f6 1d 02 31       	sbb    $0x31021df6,%eax
  __jhash_final(a, b, c);
    1e2f:	9f                   	lahf
    1e30:	04 9a                	add    $0x9a,%al
  return (word << shift) | (word >> ((-shift) & 31));
    1e32:	21 b0 21 02 31 9f    	and    %esi,-0x60cefddf(%rax)
  __jhash_final(a, b, c);
    1e38:	04 b9                	add    $0xb9,%al
    1e3a:	23 92 24 02 31 9f    	and    -0x60cefddc(%rdx),%edx
    1e40:	04 fa                	add    $0xfa,%al
  return (word << shift) | (word >> ((-shift) & 31));
    1e42:	2d c5 2e 02 31       	sub    $0x31022ec5,%eax
    1e47:	9f                   	lahf
    1e48:	00 04 b6             	add    %al,(%rsi,%rsi,4)
    1e4b:	1d f6 1d 12 30       	sbb    $0x30121df6,%eax
    hash = get_packet_hash(pckt, hash_16bytes) % RING_SIZE;
    1e50:	20 9f 93 04 30 20    	and    %bl,0x20300493(%rdi)
    1e56:	9f                   	lahf
    1e57:	93                   	xchg   %eax,%ebx
    1e58:	01 30                	add    %esi,(%rax)
    1e5a:	9f                   	lahf
    1e5b:	93                   	xchg   %eax,%ebx
    1e5c:	01 30                	add    %esi,(%rax)
    key = RING_SIZE * (vip_info->vip_num) + hash;
    1e5e:	9f                   	lahf
    1e5f:	93                   	xchg   %eax,%ebx
    1e60:	02 04 9a             	add    (%rdx,%rbx,4),%al
    1e63:	21 b0 21 12 30 20    	and    %esi,0x20301221(%rax)
    1e69:	9f                   	lahf
    real_pos = bpf_map_lookup_elem(&ch_rings, &key);
    1e6a:	93                   	xchg   %eax,%ebx
    1e6b:	04 30                	add    $0x30,%al
    1e6d:	20 9f 93 01 30 9f    	and    %bl,-0x60cffe6d(%rdi)
    1e73:	93                   	xchg   %eax,%ebx
    1e74:	01 30                	add    %esi,(%rax)
    1e76:	9f                   	lahf
    1e77:	93                   	xchg   %eax,%ebx
    1e78:	02 04 b9             	add    (%rcx,%rdi,4),%al
    1e7b:	23 db                	and    %ebx,%ebx
    1e7d:	23 12                	and    (%rdx),%edx
    key = *real_pos;
    1e7f:	30 20                	xor    %ah,(%rax)
    1e81:	9f                   	lahf
    1e82:	93                   	xchg   %eax,%ebx
    1e83:	04 30                	add    $0x30,%al
    1e85:	20 9f 93 01 30 9f    	and    %bl,-0x60cffe6d(%rdi)
  pckt->real_index = key;
    1e8b:	93                   	xchg   %eax,%ebx
    1e8c:	01 30                	add    %esi,(%rax)
  *real = bpf_map_lookup_elem(&reals, &key);
    1e8e:	9f                   	lahf
    1e8f:	93                   	xchg   %eax,%ebx
    1e90:	02 04 db             	add    (%rbx,%rbx,8),%al
    1e93:	23 f9                	and    %ecx,%edi
  if (!(*real)) {
    1e95:	23 10                	and    (%rax),%edx
      bpf_map_lookup_elem(&stats, &ch_drop_stats_key);
    1e97:	30 20                	xor    %ah,(%rax)
    1e99:	9f                   	lahf
    1e9a:	93                   	xchg   %eax,%ebx
    1e9b:	04 51                	add    $0x51,%al
    1e9d:	93                   	xchg   %eax,%ebx
    1e9e:	01 30                	add    %esi,(%rax)
    1ea0:	9f                   	lahf
    1ea1:	93                   	xchg   %eax,%ebx
    1ea2:	01 30                	add    %esi,(%rax)
    1ea4:	9f                   	lahf
    1ea5:	93                   	xchg   %eax,%ebx
    1ea6:	02 04 f9             	add    (%rcx,%rdi,8),%al
  if (!ch_drop_stats) {
    1ea9:	23 81 24 0d 93 04    	and    0x4930d24(%rcx),%eax
      bpf_map_lookup_elem(&stats, &ch_drop_stats_key);
    1eaf:	51                   	push   %rcx
    1eb0:	93                   	xchg   %eax,%ebx
    1eb1:	01 30                	add    %esi,(%rax)
    1eb3:	9f                   	lahf
    1eb4:	93                   	xchg   %eax,%ebx
    1eb5:	01 30                	add    %esi,(%rax)
    1eb7:	9f                   	lahf
    1eb8:	93                   	xchg   %eax,%ebx
    1eb9:	02 04 81             	add    (%rcx,%rax,4),%al
    1ebc:	24 92                	and    $0x92,%al
    1ebe:	24 0a                	and    $0xa,%al
  if (!ch_drop_stats) {
    1ec0:	93                   	xchg   %eax,%ebx
    1ec1:	05 30 9f 93 01       	add    $0x1939f30,%eax
    1ec6:	30 9f 93 02 04 fa    	xor    %bl,-0x5fbfd6d(%rdi)
    1ecc:	2d 86 2e 10 30       	sub    $0x30102e86,%eax
}
    1ed1:	20 9f 93 04 51 93    	and    %bl,-0x6caefb6d(%rdi)
    1ed7:	01 30                	add    %esi,(%rax)
    1ed9:	9f                   	lahf
    1eda:	93                   	xchg   %eax,%ebx
    1edb:	01 30                	add    %esi,(%rax)
    1edd:	9f                   	lahf
    1ede:	93                   	xchg   %eax,%ebx
    1edf:	02 04 86             	add    (%rsi,%rax,4),%al
    1ee2:	2e 9b                	cs fwait
    1ee4:	2e 0f 30             	cs wrmsr
  if (lru_map && !(vip_info->flags & F_LRU_BYPASS) && !under_flood) {
    1ee7:	20 9f 93 04 93 01    	and    %bl,0x1930493(%rdi)
    1eed:	30 9f 93 01 30 9f    	xor    %bl,-0x60cffe6d(%rdi)
    1ef3:	93                   	xchg   %eax,%ebx
    1ef4:	02 04 9b             	add    (%rbx,%rbx,4),%al
    1ef7:	2e 9f                	cs lahf
    1ef9:	2e 0a 93 05 30 9f 93 	cs or  -0x6c60cffb(%rbx),%dl
    1f00:	01 30                	add    %esi,(%rax)
    1f02:	9f                   	lahf
    1f03:	93                   	xchg   %eax,%ebx
    1f04:	02 04 9f             	add    (%rdi,%rbx,4),%al
    1f07:	2e a3 2e 10 30 20 9f 	cs movabs %eax,0x5104939f2030102e
    1f0e:	93 04 51 
  if (XDP_ADJUST_HEAD_FUNC(xdp, 0 - (int)sizeof(struct ipv6hdr))) {
    1f11:	93                   	xchg   %eax,%ebx
    1f12:	01 30                	add    %esi,(%rax)
    1f14:	9f                   	lahf
    1f15:	93                   	xchg   %eax,%ebx
    1f16:	01 30                	add    %esi,(%rax)
    1f18:	9f                   	lahf
    1f19:	93                   	xchg   %eax,%ebx
  data = (void*)(long)xdp->data;
    1f1a:	02 04 a3             	add    (%rbx,%riz,4),%al
    1f1d:	2e b5 2e             	cs mov $0x2e,%ch
  data_end = (void*)(long)xdp->data_end;
    1f20:	0f 30                	wrmsr
  ip6h = data + sizeof(struct ethhdr);
    1f22:	20 9f 93 04 93 01    	and    %bl,0x1930493(%rdi)
  if (new_eth + 1 > data_end || old_eth + 1 > data_end || ip6h + 1 > data_end) {
    1f28:	30 9f 93 01 30 9f    	xor    %bl,-0x60cffe6d(%rdi)
    1f2e:	93                   	xchg   %eax,%ebx
    1f2f:	02 04 b5 2e bd 2e 0a 	add    0xa2ebd2e(,%rsi,4),%al
    1f36:	93                   	xchg   %eax,%ebx
    1f37:	05 30 9f 93 01       	add    $0x1939f30,%eax
    1f3c:	30 9f 93 02 04 bd    	xor    %bl,-0x42fbfd6d(%rdi)
    1f42:	2e c5 2e 06          	(bad)
  memcpy(new_eth->h_dest, cval->mac, 6);
    1f46:	93                   	xchg   %eax,%ebx
    1f47:	06                   	(bad)
    1f48:	30 9f 93 02 00 04    	xor    %bl,0x4000293(%rdi)
    1f4e:	d8 1d e8 1d 01 53    	fcomps 0x53011de8(%rip)        # 53013d3c <_license+0x53011957>
    1f54:	04 9a                	add    $0x9a,%al
  memcpy(new_eth->h_source, old_eth->h_dest, 6);
    1f56:	21 b0 21 01 53 04    	and    %esi,0x4530121(%rax)
    1f5c:	b9 23 c7 23 01       	mov    $0x123c723,%ecx
    1f61:	53                   	push   %rbx
    1f62:	00 04 d8             	add    %al,(%rax,%rbx,8)
  new_eth->h_proto = BE_ETH_P_IPV6;
    1f65:	1d e8 1d 01 53       	sbb    $0x53011de8,%eax
    1f6a:	04 9a                	add    $0x9a,%al
    1f6c:	21 b0 21 01 53 04    	and    %esi,0x4530121(%rax)
  saddr[3] = src ^ port;
    1f72:	b9 23 c7 23 01       	mov    $0x123c723,%ecx
  create_v6_hdr(ip6h, pckt->tos, saddr, dst->dstv6, payload_len, proto);
    1f77:	53                   	push   %rbx
    1f78:	00 04 d8             	add    %al,(%rax,%rbx,8)
  memset(ip6h->flow_lbl, 0, sizeof(ip6h->flow_lbl));
    1f7b:	1d f6 1d 02 30       	sbb    $0x30021df6,%eax
    1f80:	9f                   	lahf
  ip6h->priority = (tc & 0xF0) >> 4;
    1f81:	04 9a                	add    $0x9a,%al
    1f83:	21 b0 21 02 30 9f    	and    %esi,-0x60cffddf(%rax)
    1f89:	04 b9                	add    $0xb9,%al
    1f8b:	23 bd 23 02 30 9f    	and    -0x60cffddd(%rbp),%edi
  ip6h->flow_lbl[0] = (tc & 0x0F) << 4;
    1f91:	04 ca                	add    $0xca,%al
  ip6h->nexthdr = proto;
    1f93:	23 88 24 01 50 04    	and    0x4500124(%rax),%ecx
  ip6h->payload_len = bpf_htons(payload_len);
    1f99:	fa                   	cli
    1f9a:	2d 9b 2e 01 50       	sub    $0x50012e9b,%eax
    1f9f:	04 9f                	add    $0x9f,%al
    1fa1:	2e b5 2e             	cs mov $0x2e,%ch
  memcpy(ip6h->saddr.s6_addr32, saddr, 16);
    1fa4:	01 50 00             	add    %edx,0x0(%rax)
    1fa7:	04 fd                	add    $0xfd,%al
    1fa9:	1d 8f 1e 02 30       	sbb    $0x30021e8f,%eax
    1fae:	9f                   	lahf
    1faf:	04 8f                	add    $0x8f,%al
    1fb1:	1e                   	(bad)
    1fb2:	98                   	cwtl
    1fb3:	1e                   	(bad)
    1fb4:	01 50 00             	add    %edx,0x0(%rax)
    1fb7:	04 ba                	add    $0xba,%al
    1fb9:	1e                   	(bad)
    1fba:	c2 1e 02             	ret    $0x21e
    1fbd:	30 9f 04 c2 1e cb    	xor    %bl,-0x34e13dfc(%rdi)
    1fc3:	1e                   	(bad)
    1fc4:	01 56 00             	add    %edx,0x0(%rsi)
    1fc7:	04 cb                	add    $0xcb,%al
    if (pckt->flow.proto == IPPROTO_UDP) {
    1fc9:	1e                   	(bad)
    1fca:	ea                   	(bad)
    1fcb:	1e                   	(bad)
    1fcc:	01 56 00             	add    %edx,0x0(%rsi)
      new_dst_lru.atime = cur_time;
    1fcf:	04 a6                	add    $0xa6,%al
    1fd1:	1f                   	(bad)
    1fd2:	e7 1f                	out    %eax,$0x1f
    new_dst_lru.pos = key;
    1fd4:	02 30                	add    (%rax),%dh
    1fd6:	9f                   	lahf
    1fd7:	04 ee                	add    $0xee,%al
    1fd9:	21 b9 23 02 30 9f    	and    %edi,-0x60cffddd(%rcx)
    1fdf:	04 a8                	add    $0xa8,%al
    1fe1:	30 c7                	xor    %al,%bh
    1fe3:	30 02                	xor    %al,(%rdx)
    1fe5:	30 9f 04 cc 41 a6    	xor    %bl,-0x59be33fc(%rdi)
    1feb:	42 02 30             	rex.X add (%rax),%sil
    bpf_map_update_elem(lru_map, &pckt->flow, &new_dst_lru, BPF_ANY);
    1fee:	9f                   	lahf
    1fef:	04 91                	add    $0x91,%al
    1ff1:	43 b5 44             	rex.XB mov $0x44,%r13b
      if (update_vip_lru_miss_stats(&vip, &pckt, vip_info, is_ipv6) >= 0) {
    1ff4:	02 30                	add    (%rax),%dh
    1ff6:	9f                   	lahf
    1ff7:	04 f3                	add    $0xf3,%al
    1ff9:	44 81 45 02 30 9f 04 	rex.R addl $0xf5049f30,0x2(%rbp)
    2000:	f5 
                        (lru_miss_stat_vip->vipv6[0] == vip->vipv6[0] &&
    2001:	45 e5 47             	rex.RB in $0x47,%eax
    2004:	02 30                	add    (%rax),%dh
    2006:	9f                   	lahf
    2007:	00 04 a6             	add    %al,(%rsi,%riz,4)
    200a:	1f                   	(bad)
    200b:	b7 1f                	mov    $0x1f,%bh
    200d:	02 30                	add    (%rax),%dh
                         lru_miss_stat_vip->vipv6[1] == vip->vipv6[1] &&
    200f:	9f                   	lahf
    2010:	04 b7                	add    $0xb7,%al
    2012:	1f                   	(bad)
    2013:	c4                   	(bad)
    2014:	1f                   	(bad)
    2015:	01 50 04             	add    %edx,0x4(%rax)
    2018:	c4                   	(bad)
    2019:	1f                   	(bad)
                         lru_miss_stat_vip->vipv6[2] == vip->vipv6[2] &&
    201a:	cd 1f                	int    $0x1f
    201c:	02 77 00             	add    0x0(%rdi),%dh
    201f:	00 04 c0             	add    %al,(%rax,%rax,8)
    2022:	1f                   	(bad)
    2023:	c4                   	(bad)
    2024:	1f                   	(bad)
    2025:	01 50 04             	add    %edx,0x4(%rax)
    2028:	c4                   	(bad)
    2029:	1f                   	(bad)
    202a:	cd 1f                	int    $0x1f
    202c:	02 77 00             	add    0x0(%rdi),%dh
    202f:	04 cd                	add    $0xcd,%al
    2031:	1f                   	(bad)
    2032:	de 1f                	ficomps (%rdi)
  bool port_match = lru_miss_stat_vip->port == vip->port;
    2034:	01 50 04             	add    %edx,0x4(%rax)
    2037:	de 1f                	ficomps (%rdi)
    2039:	e7 1f                	out    %eax,$0x1f
    203b:	02 77 00             	add    0x0(%rdi),%dh
    203e:	04 ee                	add    $0xee,%al
  bool proto_match = lru_miss_stat_vip->proto = vip->proto;
    2040:	21 e9                	and    %ebp,%ecx
    2042:	22 02                	and    (%rdx),%al
    2044:	77 00                	ja     2046 <balancer_ingress+0x2046>
    2046:	04 e9                	add    $0xe9,%al
    2048:	22 8e 23 01 50 04    	and    0x4500123(%rsi),%cl
  bool vip_match = address_match && port_match && proto_match;
    204e:	8e 23                	mov    (%rbx),%fs
    2050:	ab                   	stos   %eax,%es:(%rdi)
    2051:	23 02                	and    (%rdx),%eax
    2053:	77 00                	ja     2055 <balancer_ingress+0x2055>
    2055:	04 a8                	add    $0xa8,%al
    __u32* lru_miss_stat = bpf_map_lookup_elem(&lru_miss_stats, &lru_stats_key);
    2057:	30 c7                	xor    %al,%bh
    2059:	30 02                	xor    %al,(%rdx)
    205b:	77 00                	ja     205d <balancer_ingress+0x205d>
    205d:	04 cc                	add    $0xcc,%al
    205f:	41 a6                	rex.B cmpsb %es:(%rdi),%ds:(%rsi)
    2061:	42 02 77 00          	rex.X add 0x0(%rdi),%sil
    2065:	04 95                	add    $0x95,%al
    2067:	43 fa                	rex.XB cli
    2069:	43 01 51 04          	rex.XB add %edx,0x4(%r9)
    206d:	fa                   	cli
    206e:	43 93                	rex.XB xchg %eax,%r11d
    2070:	44 02 77 00          	add    0x0(%rdi),%r14b
    2074:	04 93                	add    $0x93,%al
    2076:	44 97                	rex.R xchg %eax,%edi
    2078:	44 01 50 04          	add    %r10d,0x4(%rax)
    207c:	97                   	xchg   %eax,%edi
    207d:	44 9c                	rex.R pushf
    if (!lru_miss_stat) {
    207f:	44 02 77 00          	add    0x0(%rdi),%r14b
    2083:	04 9c                	add    $0x9c,%al
    2085:	44 b0 44             	rex.R mov $0x44,%al
    *lru_miss_stat += 1;
    2088:	01 51 04             	add    %edx,0x4(%rcx)
    208b:	f3 44 81 45 01 51 04 	repz rex.R addl $0x45f50451,0x1(%rbp)
    2092:	f5 45 
    2094:	bb 46 02 77 00       	mov    $0x770246,%ebx
    2099:	04 bb                	add    $0xbb,%al
    209b:	46 db 46 01          	rex.RX fildl 0x1(%rsi)
    209f:	50                   	push   %rax
    20a0:	04 db                	add    $0xdb,%al
    20a2:	46 c9                	rex.RX leave
    20a4:	47 02 77 00          	rex.RXB add 0x0(%r15),%r14b
    20a8:	04 c9                	add    $0xc9,%al
    20aa:	47 cd 47             	rex.RXB int $0x47
    20ad:	01 50 04             	add    %edx,0x4(%rax)
    20b0:	cd 47                	int    $0x47
      data_stats->v2 += 1;
    20b2:	d5                   	(bad)
    20b3:	47 02 77 00          	rex.RXB add 0x0(%r15),%r14b
    20b7:	04 d5                	add    $0xd5,%al
    20b9:	47 e5 47             	rex.RXB in $0x47,%eax
  data_stats = bpf_map_lookup_elem(&stats, &vip_num);
    20bc:	01 50 00             	add    %edx,0x0(%rax)
    20bf:	04 cd                	add    $0xcd,%al
    20c1:	1f                   	(bad)
    20c2:	d1 1f                	rcrl   (%rdi)
    20c4:	01 53 00             	add    %edx,0x0(%rbx)
    20c7:	04 cd                	add    $0xcd,%al
    20c9:	1f                   	(bad)
    20ca:	e7 1f                	out    %eax,$0x1f
        (connId[1] << 24) | (connId[2] << 16) | (connId[3] << 8) | (connId[4]);
    20cc:	01 5f 04             	add    %ebx,0x4(%rdi)
    20cf:	ee                   	out    %al,(%dx)
    20d0:	21 e5                	and    %esp,%ebp
    20d2:	22 01                	and    (%rcx),%al
    20d4:	5f                   	pop    %rdi
    20d5:	04 a8                	add    $0xa8,%al
    20d7:	30 c7                	xor    %al,%bh
    20d9:	30 01                	xor    %al,(%rcx)
    20db:	5f                   	pop    %rdi
    20dc:	04 cc                	add    $0xcc,%al
    20de:	41 97                	xchg   %eax,%r15d
    20e0:	42 01 5f 00          	rex.X add %ebx,0x0(%rdi)
    20e4:	04 cd                	add    $0xcd,%al
    20e6:	1f                   	(bad)
    20e7:	e7 1f                	out    %eax,$0x1f
    20e9:	02 30                	add    (%rax),%dh
    20eb:	9f                   	lahf
    20ec:	04 ee                	add    $0xee,%al
    20ee:	21 e5                	and    %esp,%ebp
    20f0:	22 02                	and    (%rdx),%al
    result.server_id = (connId[1] << 16) | (connId[2] << 8) | (connId[3]);
    20f2:	30 9f 04 a8 30 c7    	xor    %bl,-0x38cf57fc(%rdi)
    20f8:	30 02                	xor    %al,(%rdx)
    20fa:	30 9f 04 cc 41 97    	xor    %bl,-0x68be33fc(%rdi)
    2100:	42 02 30             	rex.X add (%rax),%sil
    2103:	9f                   	lahf
    2104:	00 04 cd 1f e7 1f 12 	add    %al,0x121fe71f(,%rcx,8)
    210b:	30 20                	xor    %ah,(%rax)
    210d:	9f                   	lahf
    210e:	93                   	xchg   %eax,%ebx
      if (qpr.server_id > 0) {
    210f:	04 30                	add    $0x30,%al
    2111:	20 9f 93 01 30 9f    	and    %bl,-0x60cffe6d(%rdi)
  if (cid_version == QUIC_CONNID_VERSION_V1) {
    2117:	93                   	xchg   %eax,%ebx
    2118:	01 30                	add    %esi,(%rax)
    211a:	9f                   	lahf
    211b:	93                   	xchg   %eax,%ebx
    211c:	02 04 ee             	add    (%rsi,%rbp,8),%al
    211f:	21 98 22 12 30 20    	and    %ebx,0x20301222(%rax)
    2125:	9f                   	lahf
    2126:	93                   	xchg   %eax,%ebx
    2127:	04 30                	add    $0x30,%al
    2129:	20 9f 93 01 30 9f    	and    %bl,-0x60cffe6d(%rdi)
              quic_packets_stats->cid_unknown_real_dropped += 1;
    212f:	93                   	xchg   %eax,%ebx
    2130:	01 30                	add    %esi,(%rax)
    2132:	9f                   	lahf
    2133:	93                   	xchg   %eax,%ebx
    2134:	02 04 98             	add    (%rax,%rbx,4),%al
      bpf_map_lookup_elem(&stats, &conn_rate_key);
    2137:	22 b6 22 10 30 20    	and    0x20301022(%rsi),%dh
    213d:	9f                   	lahf
    213e:	93                   	xchg   %eax,%ebx
    213f:	04 51                	add    $0x51,%al
    2141:	93                   	xchg   %eax,%ebx
    2142:	01 30                	add    %esi,(%rax)
    2144:	9f                   	lahf
    2145:	93                   	xchg   %eax,%ebx
    2146:	01 30                	add    %esi,(%rax)
  if (!conn_rate_stats) {
    2148:	9f                   	lahf
    2149:	93                   	xchg   %eax,%ebx
    214a:	02 04 b6             	add    (%rsi,%rsi,4),%al
    214d:	22 be 22 0d 93 04    	and    0x4930d22(%rsi),%bh
    2153:	51                   	push   %rcx
    2154:	93                   	xchg   %eax,%ebx
    2155:	01 30                	add    %esi,(%rax)
    2157:	9f                   	lahf
  *cur_time = bpf_ktime_get_ns();
    2158:	93                   	xchg   %eax,%ebx
    2159:	01 30                	add    %esi,(%rax)
  if ((*cur_time - conn_rate_stats->v2) > ONE_SEC) {
    215b:	9f                   	lahf
    215c:	93                   	xchg   %eax,%ebx
    215d:	02 04 be             	add    (%rsi,%rdi,4),%al
    2160:	22 cf                	and    %bh,%cl
    2162:	22 0a                	and    (%rdx),%cl
    2164:	93                   	xchg   %eax,%ebx
    2165:	05 30 9f 93 01       	add    $0x1939f30,%eax
    216a:	30 9f 93 02 04 cf    	xor    %bl,-0x30fbfd6d(%rdi)
    conn_rate_stats->v1 = 1;
    2170:	22 e5                	and    %ch,%ah
    2172:	22 12                	and    (%rdx),%dl
    2174:	30 20                	xor    %ah,(%rax)
    conn_rate_stats->v2 = *cur_time;
    2176:	9f                   	lahf
    2177:	93                   	xchg   %eax,%ebx
    2178:	04 30                	add    $0x30,%al
    217a:	20 9f 93 01 30 9f    	and    %bl,-0x60cffe6d(%rdi)
    2180:	93                   	xchg   %eax,%ebx
    2181:	01 30                	add    %esi,(%rax)
    2183:	9f                   	lahf
    2184:	93                   	xchg   %eax,%ebx
    2185:	02 04 a8             	add    (%rax,%rbp,4),%al
    2188:	30 c7                	xor    %al,%bh
    218a:	30 12                	xor    %dl,(%rdx)
    218c:	30 20                	xor    %ah,(%rax)
    218e:	9f                   	lahf
    218f:	93                   	xchg   %eax,%ebx
    2190:	04 30                	add    $0x30,%al
    2192:	20 9f 93 01 30 9f    	and    %bl,-0x60cffe6d(%rdi)
    2198:	93                   	xchg   %eax,%ebx
    2199:	01 30                	add    %esi,(%rax)
        __u32* real_pos = bpf_map_lookup_elem(&server_id_map, &key);
    219b:	9f                   	lahf
    219c:	93                   	xchg   %eax,%ebx
    219d:	02 04 cc             	add    (%rsp,%rcx,8),%al
        if (real_pos) {
    21a0:	41 d8 41 10          	fadds  0x10(%r9)
    21a4:	30 20                	xor    %ah,(%rax)
    21a6:	9f                   	lahf
    21a7:	93                   	xchg   %eax,%ebx
    21a8:	04 51                	add    $0x51,%al
    21aa:	93                   	xchg   %eax,%ebx
          key = *real_pos;
    21ab:	01 30                	add    %esi,(%rax)
    21ad:	9f                   	lahf
    21ae:	93                   	xchg   %eax,%ebx
    21af:	01 30                	add    %esi,(%rax)
    21b1:	9f                   	lahf
    21b2:	93                   	xchg   %eax,%ebx
    21b3:	02 04 d8             	add    (%rax,%rbx,8),%al
          if (key == 0) {
    21b6:	41 ed                	rex.B in (%dx),%eax
            pckt.real_index = key;
    21b8:	41 0f 30             	rex.B wrmsr
    21bb:	20 9f 93 04 93 01    	and    %bl,0x1930493(%rdi)
            dst = bpf_map_lookup_elem(&reals, &key);
    21c1:	30 9f 93 01 30 9f    	xor    %bl,-0x60cffe6d(%rdi)
    21c7:	93                   	xchg   %eax,%ebx
    21c8:	02 04 ed 41 f1 41 0a 	add    0xa41f141(,%rbp,8),%al
    21cf:	93                   	xchg   %eax,%ebx
    21d0:	05 30 9f 93 01       	add    $0x1939f30,%eax
    21d5:	30 9f 93 02 04 f1    	xor    %bl,-0xefbfd6d(%rdi)
    21db:	41 f5                	rex.B cmc
    21dd:	41 10 30             	adc    %sil,(%r8)
            if (!dst) {
    21e0:	20 9f 93 04 51 93    	and    %bl,-0x6caefb6d(%rdi)
    21e6:	01 30                	add    %esi,(%rax)
    21e8:	9f                   	lahf
    21e9:	93                   	xchg   %eax,%ebx
    21ea:	01 30                	add    %esi,(%rax)
    21ec:	9f                   	lahf
    21ed:	93                   	xchg   %eax,%ebx
    21ee:	02 04 f5 41 87 42 0f 	add    0xf428741(,%rsi,8),%al
    21f5:	30 20                	xor    %ah,(%rax)
    21f7:	9f                   	lahf
  struct real_pos_lru* dst_lru = real_bpf_map_lookup_elem(lru_map, &pckt->flow);
    21f8:	93                   	xchg   %eax,%ebx
    21f9:	04 93                	add    $0x93,%al
  if (dst_lru) {
    21fb:	01 30                	add    %esi,(%rax)
    21fd:	9f                   	lahf
    21fe:	93                   	xchg   %eax,%ebx
    21ff:	01 30                	add    %esi,(%rax)
    2201:	9f                   	lahf
    2202:	93                   	xchg   %eax,%ebx
    if (dst_lru->pos == pckt->real_index) {
    2203:	02 04 87             	add    (%rdi,%rax,4),%al
    2206:	42 8f 42 0a          	rex.X pop 0xa(%rdx)
    220a:	93                   	xchg   %eax,%ebx
    220b:	05 30 9f 93 01       	add    $0x1939f30,%eax
    2210:	30 9f 93 02 04 8f    	xor    %bl,-0x70fbfd6d(%rdi)
              quic_packets_stats->dst_match_in_lru += 1;
    2216:	42 97                	rex.X xchg %eax,%edi
    2218:	42 06                	rex.X (bad)
    221a:	93                   	xchg   %eax,%ebx
    221b:	06                   	(bad)
    221c:	30 9f 93 02 00 04    	xor    %bl,0x4000293(%rdi)
    2222:	ee                   	out    %al,(%dx)
    2223:	1f                   	(bad)
    2224:	f6 1f                	negb   (%rdi)
    2226:	02 30                	add    (%rax),%dh
    2228:	9f                   	lahf
    2229:	04 f6                	add    $0xf6,%al
    222b:	1f                   	(bad)
    222c:	83 20 01             	andl   $0x1,(%rax)
    222f:	50                   	push   %rax
    2230:	04 83                	add    $0x83,%al
    2232:	20 8c 20 02 77 00 00 	and    %cl,0x7702(%rax,%riz,1)
              quic_packets_stats->dst_mismatch_in_lru += 1;
    2239:	04 ff                	add    $0xff,%al
    223b:	1f                   	(bad)
      bpf_map_lookup_elem(&server_id_stats, &vip_num);
    223c:	83 20 01             	andl   $0x1,(%rax)
    223f:	50                   	push   %rax
    2240:	04 83                	add    $0x83,%al
    2242:	20 8c 20 02 77 00 04 	and    %cl,0x4007702(%rax,%riz,1)
    2249:	8c 20                	mov    %fs,(%rax)
    224b:	90                   	nop
    224c:	20 01                	and    %al,(%rcx)
    224e:	50                   	push   %rax
    224f:	04 a2                	add    $0xa2,%al
    2251:	20 a7 20 02 77 00    	and    %ah,0x770220(%rdi)
    2257:	00 04 c1             	add    %al,(%rcx,%rax,8)
    225a:	20 8a 21 03 77 10    	and    %cl,0x10770321(%rdx)
    2260:	9f                   	lahf
    2261:	04 92                	add    $0x92,%al
    2263:	24 bf                	and    $0xbf,%al
    2265:	24 03                	and    $0x3,%al
    2267:	77 10                	ja     2279 <balancer_ingress+0x2279>
  if (!per_vip_stats) {
    2269:	9f                   	lahf
    226a:	00 04 d2             	add    %al,(%rdx,%rdx,8)
    per_vip_stats->v2 += 1;
    226d:	20 d4                	and    %dl,%ah
    226f:	20 01                	and    %al,(%rcx)
    2271:	55                   	push   %rbp
    2272:	04 d4                	add    $0xd4,%al
    2274:	20 8a 21 03 77 f0    	and    %cl,-0xf88fcdf(%rdx)
              quic_packets_stats->cid_unknown_real_dropped += 1;
    227a:	00 04 92             	add    %al,(%rdx,%rdx,4)
    227d:	24 bf                	and    $0xbf,%al
    227f:	24 03                	and    $0x3,%al
    conn_rate_stats->v1 += 1;
    2281:	77 f0                	ja     2273 <balancer_ingress+0x2273>
    2283:	00 00                	add    %al,(%rax)
    2285:	04 c1                	add    $0xc1,%al
    2287:	20 8a 21 02 30 9f    	and    %cl,-0x60cffddf(%rdx)
    if (conn_rate_stats->v1 > MAX_CONN_RATE) {
    228d:	04 92                	add    $0x92,%al
    228f:	24 bf                	and    $0xbf,%al
    2291:	24 02                	and    $0x2,%al
  struct real_pos_lru new_dst_lru = {};
    2293:	30 9f 00 04 d4 20    	xor    %bl,0x20d40400(%rdi)
    2299:	e7 20                	out    %eax,$0x20
    229b:	01 50 04             	add    %edx,0x4(%rax)
    229e:	e7 20                	out    %eax,$0x20
    22a0:	8a 21                	mov    (%rcx),%ah
    22a2:	01 53 04             	add    %edx,0x4(%rbx)
  new_dst_lru.pos = pckt->real_index;
    22a5:	92                   	xchg   %eax,%edx
    22a6:	24 bf                	and    $0xbf,%al
    22a8:	24 01                	and    $0x1,%al
    22aa:	53                   	push   %rbx
    22ab:	00 04 f0             	add    %al,(%rax,%rsi,8)
    22ae:	20 8a 21 01 50 04    	and    %cl,0x4500121(%rdx)
    22b4:	92                   	xchg   %eax,%edx
    22b5:	24 96                	and    $0x96,%al
    22b7:	24 01                	and    $0x1,%al
    22b9:	50                   	push   %rax
    22ba:	00 04 b5 21 d7 21 02 	add    %al,0x221d721(,%rsi,4)
    22c1:	30 9f 04 d7 21 e0    	xor    %bl,-0x1fde28fc(%rdi)
              quic_packets_stats->dst_not_found_in_lru += 1;
    22c7:	21 01                	and    %eax,(%rcx)
    22c9:	56                   	push   %rsi
    22ca:	00 04 e0             	add    %al,(%rax,%riz,8)
    22cd:	21 ee                	and    %ebp,%esi
    22cf:	21 01                	and    %eax,(%rcx)
    22d1:	56                   	push   %rsi
            quic_packets_stats->cid_routed += 1;
    22d2:	00 04 f2             	add    %al,(%rdx,%rsi,8)
    22d5:	21 fe                	and    %edi,%esi
  original_sport = pckt.flow.port16[0];
    22d7:	21 01                	and    %eax,(%rcx)
    22d9:	53                   	push   %rbx
    22da:	04 cf                	add    $0xcf,%al
    22dc:	22 e5                	and    %ch,%ah
    22de:	22 01                	and    (%rcx),%al
    22e0:	53                   	push   %rbx
    22e1:	04 a8                	add    $0xa8,%al
    22e3:	30 b6 30 01 53 00    	xor    %dh,0x530130(%rsi)
  data_stats = bpf_map_lookup_elem(&stats, &vip_num);
    22e9:	04 f2                	add    $0xf2,%al
    22eb:	21 fe                	and    %edi,%esi
    22ed:	21 01                	and    %eax,(%rcx)
    22ef:	53                   	push   %rbx
    22f0:	04 cf                	add    $0xcf,%al
    22f2:	22 e5                	and    %ch,%ah
    22f4:	22 01                	and    (%rcx),%al
      bpf_map_lookup_elem(&stats, &conn_rate_key);
    22f6:	53                   	push   %rbx
    22f7:	04 a8                	add    $0xa8,%al
    22f9:	30 b6 30 01 53 00    	xor    %dh,0x530130(%rsi)
    22ff:	04 f2                	add    $0xf2,%al
    2301:	21 87 22 02 30 9f    	and    %eax,-0x60cffdde(%rdi)
  if (!conn_rate_stats) {
    2307:	04 87                	add    $0x87,%al
    2309:	22 c5                	and    %ch,%al
    230b:	22 01                	and    (%rcx),%al
    230d:	50                   	push   %rax
    230e:	04 cf                	add    $0xcf,%al
    2310:	22 e5                	and    %ch,%ah
    2312:	22 02                	and    (%rdx),%al
    2314:	30 9f 04 a8 30 ac    	xor    %bl,-0x53cf57fc(%rdi)
  if ((*cur_time - conn_rate_stats->v2) > ONE_SEC) {
    231a:	30 02                	xor    %al,(%rdx)
    231c:	30 9f 04 b9 30 c7    	xor    %bl,-0x38cf46fc(%rdi)
    2322:	30 01                	xor    %al,(%rcx)
    2324:	53                   	push   %rbx
    2325:	04 cc                	add    $0xcc,%al
    2327:	41 ed                	rex.B in (%dx),%eax
    conn_rate_stats->v1 = 1;
    2329:	41 01 50 04          	add    %edx,0x4(%r8)
    232d:	f1                   	int1
    232e:	41 87 42 01          	xchg   %eax,0x1(%r10)
    conn_rate_stats->v2 = *cur_time;
    2332:	50                   	push   %rax
    2333:	00 04 98             	add    %al,(%rax,%rbx,4)
      dst_lru->pos = pckt->real_index;
    2336:	22 be 22 01 51 04    	and    0x4510122(%rsi),%bh
              quic_packets_stats->dst_mismatch_in_lru += 1;
    233c:	cc                   	int3
    233d:	41 d8 41 01          	fadds  0x1(%r9)
      bpf_map_lookup_elem(&server_id_stats, &vip_num);
    2341:	51                   	push   %rcx
    2342:	04 f1                	add    $0xf1,%al
    2344:	41 f5                	rex.B cmc
    2346:	41 01 51 00          	add    %edx,0x0(%r9)
    234a:	04 ee                	add    $0xee,%al
    234c:	22 9e 23 02 30 9f    	and    -0x60cffddd(%rsi),%bl
    2352:	04 9e                	add    $0x9e,%al
    2354:	23 a7 23 01 50 00    	and    0x500123(%rdi),%esp
    235a:	04 a7                	add    $0xa7,%al
    235c:	23 ab 23 01 50 04    	and    0x4500123(%rbx),%ebp
    2362:	ab                   	stos   %eax,%es:(%rdi)
    2363:	23 b9 23 02 77 00    	and    0x770223(%rcx),%edi
    2369:	00 04 b9             	add    %al,(%rcx,%rdi,4)
    236c:	23 c3                	and    %ebx,%eax
    236e:	23 01                	and    (%rcx),%eax
    2370:	53                   	push   %rbx
    2371:	00 04 db             	add    %al,(%rbx,%rbx,8)
  if (!per_vip_stats) {
    2374:	23 81 24 01 51 04    	and    0x4510124(%rcx),%eax
    per_vip_stats->v2 += 1;
    237a:	fa                   	cli
    237b:	2d 86 2e 01 51       	sub    $0x51012e86,%eax
    conn_rate_stats->v1 += 1;
    2380:	04 9f                	add    $0x9f,%al
    2382:	2e a3 2e 01 51 00 04 	cs movabs %eax,0xa92498040051012e
    2389:	98 24 a9 
    if (conn_rate_stats->v1 > MAX_CONN_RATE) {
    238c:	24 01                	and    $0x1,%al
    238e:	50                   	push   %rax
    238f:	00 04 98             	add    %al,(%rax,%rbx,4)
  struct real_pos_lru new_dst_lru = {};
    2392:	24 a9                	and    $0xa9,%al
    2394:	24 01                	and    $0x1,%al
    2396:	50                   	push   %rax
    2397:	00 04 a5 24 bf 24 02 	add    %al,0x224bf24(,%riz,4)
    239e:	30 9f 00 04 c4 24    	xor    %bl,0x24c40400(%rdi)
  new_dst_lru.pos = pckt->real_index;
    23a4:	cf                   	iret
    23a5:	24 02                	and    $0x2,%al
    23a7:	77 08                	ja     23b1 <balancer_ingress+0x23b1>
    23a9:	04 cf                	add    $0xcf,%al
    23ab:	24 fc                	and    $0xfc,%al
    23ad:	24 01                	and    $0x1,%al
    23af:	51                   	push   %rcx
    23b0:	04 fc                	add    $0xfc,%al
    23b2:	24 fa                	and    $0xfa,%al
    23b4:	25 02 77 08 00       	and    $0x87702,%eax
    23b9:	04 d9                	add    $0xd9,%al
    23bb:	24 e1                	and    $0xe1,%al
    23bd:	24 02                	and    $0x2,%al
    23bf:	30 9f 04 e1 24 ea    	xor    %bl,-0x15db1efc(%rdi)
    23c5:	24 01                	and    $0x1,%al
    23c7:	53                   	push   %rbx
    23c8:	00 04 ea             	add    %al,(%rdx,%rbp,8)
              quic_packets_stats->dst_not_found_in_lru += 1;
    23cb:	24 ab                	and    $0xab,%al
    23cd:	25 01 53 00 04       	and    $0x4005301,%eax
    23d2:	ab                   	stos   %eax,%es:(%rdi)
    23d3:	25 c3 25 02 30       	and    $0x300225c3,%eax
            quic_packets_stats->cid_routed += 1;
    23d8:	9f                   	lahf
    23d9:	04 c3                	add    $0xc3,%al
  original_sport = pckt.flow.port16[0];
    23db:	25 c8 25 01 50       	and    $0x500125c8,%eax
    23e0:	00 04 c3             	add    %al,(%rbx,%rax,8)
    23e3:	25 d2 25 01 50       	and    $0x500125d2,%eax
    23e8:	00 04 d2             	add    %al,(%rdx,%rdx,8)
    23eb:	25 df 25 01 50       	and    $0x500125df,%eax
    23f0:	00 04 d7             	add    %al,(%rdi,%rdx,8)
    23f3:	25 df 25 02 30       	and    $0x300225df,%eax
    23f8:	9f                   	lahf
    23f9:	04 df                	add    $0xdf,%al
    23fb:	25 e8 25 01 50       	and    $0x500125e8,%eax
    2400:	00 04 e8             	add    %al,(%rax,%rbp,8)
    2403:	25 fa 25 01 50       	and    $0x500125fa,%eax
    2408:	00 04 83             	add    %al,(%rbx,%rax,4)
    240b:	26 9e                	es sahf
    240d:	26 02 30             	es add (%rax),%dh
    2410:	9f                   	lahf
    2411:	04 9e                	add    $0x9e,%al
    2413:	26 a7                	cmpsl  %es:(%rdi),%ds:(%rsi)
    2415:	26 01 52 00          	es add %edx,0x0(%rdx)
    2419:	04 bf                	add    $0xbf,%al
    241b:	26 b0 28             	es mov $0x28,%al
    241e:	01 53 04             	add    %edx,0x4(%rbx)
    2421:	bf 2c c2 2d 01       	mov    $0x12dc22c,%edi
    2426:	53                   	push   %rbx
    2427:	00 04 c6             	add    %al,(%rsi,%rax,8)
    242a:	26 e9 26 02 30 9f    	es jmp ffffffff9f302656 <ch_rings+0x36ff7ca7d656>
    2430:	04 e9                	add    $0xe9,%al
    2432:	26 f2 26 01 52 00    	es repnz es add %edx,0x0(%rdx)
    2438:	04 d1                	add    $0xd1,%al
    243a:	26 fb                	es sti
    243c:	26 04 10             	es add $0x10,%al
    243f:	80 20 9f             	andb   $0x9f,(%rax)
    2442:	00 04 d1             	add    %al,(%rcx,%rdx,8)
    2445:	26 fb                	es sti
    2447:	26 02 38             	es add (%rax),%bh
    244a:	9f                   	lahf
    244b:	00 04 94             	add    %al,(%rsp,%rdx,4)
    244e:	27                   	(bad)
    244f:	b0 28                	mov    $0x28,%al
    2451:	12 73 00             	adc    0x0(%rbx),%dh
    2454:	10 ff                	adc    %bh,%bh
    2456:	ff 03                	incl   (%rbx)
    2458:	1a a8 ab 80 80 00    	sbb    0x8080ab(%rax),%ch
    245e:	a8 b0                	test   $0xb0,%al
    2460:	80 80 00 9f 00 04 e6 	addb   $0xe6,0x4009f00(%rax)
    2467:	27                   	(bad)
    2468:	da 28                	fisubrl (%rax)
    246a:	0e                   	(bad)
    246b:	7c 00                	jl     246d <_license+0x88>
    246d:	10 ff                	adc    %bh,%bh
    246f:	ff                   	(bad)
    2470:	ff                   	(bad)
    2471:	ff 0f                	decl   (%rdi)
    2473:	1a 10                	sbb    (%rax),%dl
    2475:	ac                   	lods   %ds:(%rsi),%al
    2476:	21 21                	and    %esp,(%rcx)
    2478:	9f                   	lahf
    2479:	00 04 9a             	add    %al,(%rdx,%rbx,4)
    247c:	27                   	(bad)
    247d:	e8 28 02 30 9f       	call   ffffffff9f3026aa <ch_rings+0x36ff7ca7d6aa>
    2482:	00 04 b7             	add    %al,(%rdi,%rsi,4)
    2485:	27                   	(bad)
    2486:	e8 28 01 50 00       	call   5025b3 <_license+0x5001ce>
    248b:	04 bb                	add    $0xbb,%al
    248d:	27                   	(bad)
    248e:	f8                   	clc
    248f:	27                   	(bad)
    2490:	01 52 00             	add    %edx,0x0(%rdx)
    2493:	04 bb                	add    $0xbb,%al
    2495:	27                   	(bad)
    2496:	e8 28 01 50 00       	call   5025c3 <_license+0x5001de>
    249b:	04 bf                	add    $0xbf,%al
    249d:	27                   	(bad)
    249e:	cc                   	int3
    249f:	27                   	(bad)
    24a0:	01 51 00             	add    %edx,0x0(%rcx)
    24a3:	04 bf                	add    $0xbf,%al
    24a5:	27                   	(bad)
    24a6:	e8 28 03 70 14       	call   147027d3 <_license+0x147003ee>
    24ab:	9f                   	lahf
    24ac:	00 04 a6             	add    %al,(%rsi,%riz,4)
    24af:	28 da                	sub    %bl,%dl
    24b1:	28 0e                	sub    %cl,(%rsi)
    24b3:	7c 00                	jl     24b5 <_license+0xd0>
    24b5:	10 ff                	adc    %bh,%bh
    24b7:	ff                   	(bad)
    24b8:	ff                   	(bad)
    24b9:	ff 0f                	decl   (%rdi)
    24bb:	1a 10                	sbb    (%rax),%dl
    24bd:	ac                   	lods   %ds:(%rsi),%al
    24be:	21 21                	and    %esp,(%rcx)
    24c0:	9f                   	lahf
    24c1:	00 04 a6             	add    %al,(%rsi,%riz,4)
    24c4:	28 b0 28 01 53 00    	sub    %dh,0x530128(%rax)
    24ca:	04 a6                	add    $0xa6,%al
    24cc:	28 cf                	sub    %cl,%bh
    24ce:	28 01                	sub    %al,(%rcx)
    24d0:	51                   	push   %rcx
    24d1:	00 04 cb             	add    %al,(%rbx,%rcx,8)
    24d4:	28 cf                	sub    %cl,%bh
    24d6:	28 03                	sub    %al,(%rbx)
    24d8:	11 00                	adc    %eax,(%rax)
    24da:	9f                   	lahf
    24db:	04 cf                	add    $0xcf,%al
    24dd:	28 d2                	sub    %dl,%dl
    24df:	28 03                	sub    %al,(%rbx)
    24e1:	11 01                	adc    %eax,(%rcx)
    24e3:	9f                   	lahf
    24e4:	04 d2                	add    $0xd2,%al
    24e6:	28 d6                	sub    %dl,%dh
    24e8:	28 03                	sub    %al,(%rbx)
    24ea:	11 04 9f             	adc    %eax,(%rdi,%rbx,4)
    24ed:	04 d6                	add    $0xd6,%al
    24ef:	28 da                	sub    %bl,%dl
    24f1:	28 03                	sub    %al,(%rbx)
    24f3:	11 07                	adc    %eax,(%rdi)
    24f5:	9f                   	lahf
    24f6:	04 da                	add    $0xda,%al
    24f8:	28 e0                	sub    %ah,%al
    24fa:	28 03                	sub    %al,(%rbx)
    24fc:	11 08                	adc    %ecx,(%rax)
    24fe:	9f                   	lahf
    24ff:	04 e0                	add    $0xe0,%al
    2501:	28 e8                	sub    %ch,%al
    2503:	28 03                	sub    %al,(%rbx)
    2505:	11 09                	adc    %ecx,(%rcx)
    2507:	9f                   	lahf
    2508:	00 04 cb             	add    %al,(%rbx,%rcx,8)
    250b:	28 cf                	sub    %cl,%bh
    250d:	28 05 70 0e 23 02    	sub    %al,0x2230e70(%rip)        # 2233383 <_license+0x2230f9e>
    2513:	9f                   	lahf
    2514:	04 cf                	add    $0xcf,%al
    2516:	28 d2                	sub    %dl,%dl
    2518:	28 05 70 0e 23 04    	sub    %al,0x4230e70(%rip)        # 423338e <_license+0x4230fa9>
    251e:	9f                   	lahf
    251f:	04 d2                	add    $0xd2,%al
    2521:	28 d6                	sub    %dl,%dh
    2523:	28 05 70 0e 23 0a    	sub    %al,0xa230e70(%rip)        # a233399 <_license+0xa230fb4>
    2529:	9f                   	lahf
    252a:	04 d6                	add    $0xd6,%al
    252c:	28 da                	sub    %bl,%dl
    252e:	28 05 70 0e 23 10    	sub    %al,0x10230e70(%rip)        # 102333a4 <_license+0x10230fbf>
    2534:	9f                   	lahf
    2535:	04 da                	add    $0xda,%al
    2537:	28 e0                	sub    %ah,%al
    2539:	28 05 70 0e 23 12    	sub    %al,0x12230e70(%rip)        # 122333af <_license+0x12230fca>
    253f:	9f                   	lahf
    2540:	04 e0                	add    $0xe0,%al
    2542:	28 e8                	sub    %ch,%al
    2544:	28 07                	sub    %al,(%rdi)
    2546:	70 0e                	jo     2556 <_license+0x171>
    2548:	23 12                	and    (%rdx),%edx
    254a:	23 02                	and    (%rdx),%eax
    254c:	9f                   	lahf
    254d:	00 04 ef             	add    %al,(%rdi,%rbp,8)
    2550:	28 f7                	sub    %dh,%bh
    2552:	28 02                	sub    %al,(%rdx)
    2554:	30 9f 04 f7 28 80    	xor    %bl,-0x7fd708fc(%rdi)
    255a:	29 01                	sub    %eax,(%rcx)
    255c:	50                   	push   %rax
    255d:	00 04 80             	add    %al,(%rax,%rax,4)
    2560:	29 9a 29 01 50 00    	sub    %ebx,0x500129(%rdx)
    2566:	04 9a                	add    $0x9a,%al
    2568:	29 b7 2c 03 77 10    	sub    %esi,0x1077032c(%rdi)
    256e:	9f                   	lahf
    256f:	04 ea                	add    $0xea,%al
    2571:	2e 99                	cs cltd
    2573:	2f                   	(bad)
    2574:	03 77 10             	add    0x10(%rdi),%esi
    2577:	9f                   	lahf
    2578:	00 04 9a             	add    %al,(%rdx,%rbx,4)
    257b:	29 8a 2a 02 77 08    	sub    %ecx,0x877022a(%rdx)
    2581:	04 8a                	add    $0x8a,%al
    2583:	2a 9f 2a 01 52 04    	sub    0x452012a(%rdi),%bl
    2589:	9f                   	lahf
    258a:	2a a0 2b 02 77 08    	sub    0x877022b(%rax),%ah
    2590:	04 a0                	add    $0xa0,%al
    2592:	2b a5 2b 01 51 04    	sub    0x451012b(%rbp),%esp
    2598:	a5                   	movsl  %ds:(%rsi),%es:(%rdi)
    2599:	2b a7 2c 02 77 08    	sub    0x877022c(%rdi),%esp
    259f:	04 a7                	add    $0xa7,%al
    25a1:	2c a9                	sub    $0xa9,%al
    25a3:	2c 01                	sub    $0x1,%al
    25a5:	52                   	push   %rdx
    25a6:	04 a9                	add    $0xa9,%al
    25a8:	2c b7                	sub    $0xb7,%al
    25aa:	2c 02                	sub    $0x2,%al
    25ac:	77 08                	ja     25b6 <_license+0x1d1>
    25ae:	04 ea                	add    $0xea,%al
    25b0:	2e 99                	cs cltd
    25b2:	2f                   	(bad)
    25b3:	02 77 08             	add    0x8(%rdi),%dh
    25b6:	00 04 9a             	add    %al,(%rdx,%rbx,4)
    25b9:	29 b7 2c 02 30 9f    	sub    %esi,-0x60cffdd4(%rdi)
    25bf:	04 ea                	add    $0xea,%al
    25c1:	2e 99                	cs cltd
    25c3:	2f                   	(bad)
    25c4:	02 30                	add    (%rax),%dh
    25c6:	9f                   	lahf
    25c7:	00 04 9a             	add    %al,(%rdx,%rbx,4)
    25ca:	29 b7 2c 03 77 f0    	sub    %esi,-0xf88fcd4(%rdi)
    25d0:	00 04 ea             	add    %al,(%rdx,%rbp,8)
    25d3:	2e 90                	cs nop
    25d5:	2f                   	(bad)
    25d6:	03 77 f0             	add    -0x10(%rdi),%esi
    25d9:	00 04 90             	add    %al,(%rax,%rdx,4)
    25dc:	2f                   	(bad)
    25dd:	94                   	xchg   %eax,%esp
    25de:	2f                   	(bad)
    25df:	01 55 00             	add    %edx,0x0(%rbp)
    25e2:	04 ac                	add    $0xac,%al
    25e4:	29 85 2a 02 30 9f    	sub    %eax,-0x60cffdd6(%rbp)
    25ea:	04 85                	add    $0x85,%al
    25ec:	2a b1 2c 11 7e 00    	sub    0x7e112c(%rcx),%dh
    25f2:	10 ff                	adc    %bh,%bh
    25f4:	01 1a                	add    %ebx,(%rdx)
    25f6:	a8 ba                	test   $0xba,%al
    25f8:	80 80 00 a8 bf 80 80 	addb   $0x80,-0x7f405800(%rax)
    25ff:	00 9f 00 04 ac 29    	add    %bl,0x29ac0400(%rdi)
    2605:	b7 2c                	mov    $0x2c,%bh
    2607:	02 30                	add    (%rax),%dh
    2609:	9f                   	lahf
    260a:	04 ea                	add    $0xea,%al
    260c:	2e 99                	cs cltd
    260e:	2f                   	(bad)
    260f:	02 30                	add    (%rax),%dh
    2611:	9f                   	lahf
    2612:	00 04 ac             	add    %al,(%rsp,%rbp,4)
    2615:	29 b7 2c 02 30 9f    	sub    %esi,-0x60cffdd4(%rdi)
    261b:	04 ea                	add    $0xea,%al
    261d:	2e f1                	cs int1
    261f:	2e 02 30             	cs add (%rax),%dh
    2622:	9f                   	lahf
    2623:	04 f1                	add    $0xf1,%al
    2625:	2e f6 2e             	cs imulb (%rsi)
    2628:	01 50 00             	add    %edx,0x0(%rax)
    262b:	04 ac                	add    $0xac,%al
    262d:	29 b4 29 02 30 9f 04 	sub    %esi,0x49f3002(%rcx,%rbp,1)
    2634:	b4 29                	mov    $0x29,%ah
    2636:	c5 29 01             	(bad)
    2639:	53                   	push   %rbx
    263a:	00 04 bd 29 82 2a 01 	add    %al,0x12a8229(,%rdi,4)
    2641:	53                   	push   %rbx
    2642:	00 04 85 2a d0 2b 02 	add    %al,0x22bd02a(,%rax,4)
    2649:	30 9f 04 fb 2b 9a    	xor    %bl,-0x65d404fc(%rdi)
    264f:	2c 02                	sub    $0x2,%al
    2651:	30 9f 00 04 c4 2a    	xor    %bl,0x2ac40400(%rdi)
    2657:	83 2b 01             	subl   $0x1,(%rbx)
    265a:	54                   	push   %rsp
    265b:	00 04 bb             	add    %al,(%rbx,%rdi,4)
    265e:	2a c4                	sub    %ah,%al
    2660:	2a 02                	sub    (%rdx),%al
    2662:	30 9f 04 c4 2a cc    	xor    %bl,-0x33d53bfc(%rdi)
    2668:	2a 0c 10             	sub    (%rax,%rdx,1),%cl
    266b:	f7 81 b7 85 fe ff ff 	testl  $0x1ffffff,-0x17a49(%rcx)
    2672:	ff ff 01 
    2675:	9f                   	lahf
    2676:	04 cc                	add    $0xcc,%al
    2678:	2a 9b 2b 01 52 00    	sub    0x52012b(%rbx),%bl
    267e:	04 bb                	add    $0xbb,%al
    2680:	2a fc                	sub    %ah,%bh
    2682:	2a 01                	sub    (%rcx),%al
    2684:	51                   	push   %rcx
    2685:	00 04 9b             	add    %al,(%rbx,%rbx,4)
    2688:	2b ba 2b 01 52 00    	sub    0x52012b(%rdx),%edi
    268e:	04 ac                	add    $0xac,%al
    2690:	2b c4                	sub    %esp,%eax
    2692:	2b 01                	sub    (%rcx),%eax
    2694:	51                   	push   %rcx
    2695:	04 c4                	add    $0xc4,%al
    2697:	2b cb                	sub    %ebx,%ecx
    2699:	2b 01                	sub    (%rcx),%eax
    269b:	52                   	push   %rdx
    269c:	04 cb                	add    $0xcb,%al
    269e:	2b b7 2c 01 53 04    	sub    0x453012c(%rdi),%esi
    26a4:	ea                   	(bad)
    26a5:	2e 99                	cs cltd
    26a7:	2f                   	(bad)
    26a8:	01 53 00             	add    %edx,0x0(%rbx)
    26ab:	04 ac                	add    $0xac,%al
    26ad:	2b b2 2b 02 30 9f    	sub    -0x60cffdd5(%rdx),%esi
    26b3:	00 04 d4             	add    %al,(%rsp,%rdx,8)
    26b6:	2b da                	sub    %edx,%ebx
    26b8:	2b 02                	sub    (%rdx),%eax
    26ba:	30 9f 00 04 dc 2b    	xor    %bl,0x2bdc0400(%rdi)
    26c0:	e4 2b                	in     $0x2b,%al
    26c2:	02 30                	add    (%rax),%dh
    26c4:	9f                   	lahf
    26c5:	04 e4                	add    $0xe4,%al
    26c7:	2b ed                	sub    %ebp,%ebp
    26c9:	2b 01                	sub    (%rcx),%eax
    26cb:	50                   	push   %rax
    26cc:	00 04 ed 2b fb 2b 01 	add    %al,0x12bfb2b(,%rbp,8)
    26d3:	50                   	push   %rax
    26d4:	00 04 fb             	add    %al,(%rbx,%rdi,8)
    26d7:	2b 83 2c 02 30 9f    	sub    -0x60cffdd4(%rbx),%eax
    26dd:	04 83                	add    $0x83,%al
    26df:	2c 8c                	sub    $0x8c,%al
    26e1:	2c 01                	sub    $0x1,%al
    26e3:	50                   	push   %rax
    26e4:	00 04 8c             	add    %al,(%rsp,%rcx,4)
    26e7:	2c 9a                	sub    $0x9a,%al
    26e9:	2c 01                	sub    $0x1,%al
    26eb:	50                   	push   %rax
    26ec:	00 04 bf             	add    %al,(%rdi,%rdi,4)
    26ef:	2c c2                	sub    $0xc2,%al
    26f1:	2d 12 73 00 10       	sub    $0x10007312,%eax
    26f6:	ff                   	(bad)
    26f7:	ff 03                	incl   (%rbx)
    26f9:	1a a8 ab 80 80 00    	sbb    0x8080ab(%rax),%ch
    26ff:	a8 b0                	test   $0xb0,%al
    2701:	80 80 00 9f 00 04 dc 	addb   $0xdc,0x4009f00(%rax)
    2708:	2c fa                	sub    $0xfa,%al
    270a:	2d 01 50 00 04       	sub    $0x4005001,%eax
    270f:	e0 2c                	loopne 273d <_license+0x358>
    2711:	8e 2d 01 52 00 04    	mov    0x4005201(%rip),%gs        # 4007918 <_license+0x4005533>
    2717:	e0 2c                	loopne 2745 <_license+0x360>
    2719:	fa                   	cli
    271a:	2d 01 50 00 04       	sub    $0x4005001,%eax
    271f:	e4 2c                	in     $0x2c,%al
    2721:	f1                   	int1
    2722:	2c 01                	sub    $0x1,%al
    2724:	51                   	push   %rcx
    2725:	00 04 e4             	add    %al,(%rsp,%riz,8)
    2728:	2c fa                	sub    $0xfa,%al
    272a:	2d 03 70 28 9f       	sub    $0x9f287003,%eax
    272f:	00 04 ba             	add    %al,(%rdx,%rdi,4)
    2732:	2d fa 2d 02 34       	sub    $0x34022dfa,%eax
    2737:	9f                   	lahf
    2738:	00 04 ba             	add    %al,(%rdx,%rdi,4)
    273b:	2d be 2d 0c 31       	sub    $0x310c2dbe,%eax
    2740:	9f                   	lahf
    2741:	93                   	xchg   %eax,%ebx
    2742:	04 30                	add    $0x30,%al
    2744:	9f                   	lahf
    2745:	93                   	xchg   %eax,%ebx
    2746:	04 30                	add    $0x30,%al
    2748:	9f                   	lahf
    2749:	93                   	xchg   %eax,%ebx
    274a:	04 04                	add    $0x4,%al
    274c:	be 2d fa 2d 0f       	mov    $0xf2dfa2d,%esi
    2751:	31 9f 93 04 30 9f    	xor    %ebx,-0x60cffb6d(%rdi)
    2757:	93                   	xchg   %eax,%ebx
    2758:	04 30                	add    $0x30,%al
    275a:	9f                   	lahf
    275b:	93                   	xchg   %eax,%ebx
    275c:	04 52                	add    $0x52,%al
    275e:	93                   	xchg   %eax,%ebx
    275f:	04 00                	add    $0x0,%al
    2761:	04 be                	add    $0xbe,%al
    2763:	2d c2 2d 01 53       	sub    $0x53012dc2,%eax
    2768:	00 04 c2             	add    %al,(%rdx,%rax,8)
    276b:	2d d6 2d 01 53       	sub    $0x53012dd6,%eax
    2770:	00 04 bd 2e c5 2e 03 	add    %al,0x32ec52e(,%rdi,4)
    2777:	50                   	push   %rax
    2778:	93                   	xchg   %eax,%ebx
    2779:	04 04                	add    $0x4,%al
    277b:	c5 2e e0             	(bad)
    277e:	2e 06                	cs (bad)
    2780:	50                   	push   %rax
    2781:	93                   	xchg   %eax,%ebx
    2782:	04 51                	add    $0x51,%al
    2784:	93                   	xchg   %eax,%ebx
    2785:	01 04 da             	add    %eax,(%rdx,%rbx,8)
    2788:	30 8e 31 06 50 93    	xor    %cl,-0x6caff9cf(%rsi)
    278e:	04 51                	add    $0x51,%al
    2790:	93                   	xchg   %eax,%ebx
    2791:	01 04 8e             	add    %eax,(%rsi,%rcx,4)
    2794:	31 c0                	xor    %eax,%eax
    2796:	31 05 93 04 51 93    	xor    %eax,-0x6caefb6d(%rip)        # ffffffff93512c2f <ch_rings+0x36ff70c8dc2f>
    279c:	01 04 e1             	add    %eax,(%rcx,%riz,8)
    279f:	31 e8                	xor    %ebp,%eax
    27a1:	31 06                	xor    %eax,(%rsi)
    27a3:	50                   	push   %rax
    27a4:	93                   	xchg   %eax,%ebx
    27a5:	04 51                	add    $0x51,%al
    27a7:	93                   	xchg   %eax,%ebx
    27a8:	01 04 e8             	add    %eax,(%rax,%rbp,8)
    27ab:	31 ec                	xor    %ebp,%esp
    27ad:	31 05 93 04 51 93    	xor    %eax,-0x6caefb6d(%rip)        # ffffffff93512c46 <ch_rings+0x36ff70c8dc46>
    27b3:	01 04 ad 42 b7 42 05 	add    %eax,0x542b742(,%rbp,4)
    27ba:	93                   	xchg   %eax,%ebx
    27bb:	04 51                	add    $0x51,%al
    27bd:	93                   	xchg   %eax,%ebx
    27be:	01 00                	add    %eax,(%rax)
    27c0:	04 c5                	add    $0xc5,%al
    27c2:	2e e0 2e             	loopne,pn 27f3 <_license+0x40e>
    27c5:	01 56 04             	add    %edx,0x4(%rsi)
    27c8:	da 30                	fidivl (%rax)
    27ca:	e7 30                	out    %eax,$0x30
    27cc:	01 56 00             	add    %edx,0x0(%rsi)
    27cf:	04 c5                	add    $0xc5,%al
    27d1:	2e e0 2e             	loopne,pn 2802 <_license+0x41d>
    27d4:	01 51 04             	add    %edx,0x4(%rcx)
    27d7:	da 30                	fidivl (%rax)
    27d9:	e7 30                	out    %eax,$0x30
    27db:	01 51 00             	add    %edx,0x0(%rcx)
    27de:	04 ce                	add    $0xce,%al
    27e0:	2f                   	(bad)
    27e1:	f0 2f                	lock (bad)
    27e3:	02 30                	add    (%rax),%dh
    27e5:	9f                   	lahf
    27e6:	04 f0                	add    $0xf0,%al
    27e8:	2f                   	(bad)
    27e9:	f9                   	stc
    27ea:	2f                   	(bad)
    27eb:	01 50 00             	add    %edx,0x0(%rax)
    27ee:	04 f9                	add    $0xf9,%al
    27f0:	2f                   	(bad)
    27f1:	85 30                	test   %esi,(%rax)
    27f3:	01 50 00             	add    %edx,0x0(%rax)
    27f6:	04 a8                	add    $0xa8,%al
    27f8:	30 b2 30 01 53 00    	xor    %dh,0x530130(%rdx)
    27fe:	04 e0                	add    $0xe0,%al
    2800:	30 f8                	xor    %bh,%al
    2802:	30 01                	xor    %al,(%rcx)
    2804:	50                   	push   %rax
    2805:	04 f8                	add    $0xf8,%al
    2807:	30 98 31 01 52 00    	xor    %bl,0x520131(%rax)
    280d:	04 e0                	add    $0xe0,%al
    280f:	30 e5                	xor    %ah,%ch
    2811:	30 02                	xor    %al,(%rdx)
    2813:	30 9f 00 04 84 31    	xor    %bl,0x31840400(%rdi)
    2819:	a4                   	movsb  %ds:(%rsi),%es:(%rdi)
    281a:	31 02                	xor    %eax,(%rdx)
    281c:	30 9f 04 a4 31 ad    	xor    %bl,-0x52ce5bfc(%rdi)
    2822:	31 01                	xor    %eax,(%rcx)
    2824:	5e                   	pop    %rsi
    2825:	00 04 84             	add    %al,(%rsp,%rax,4)
    2828:	31 98 31 01 52 00    	xor    %ebx,0x520131(%rax)
    282e:	04 ad                	add    $0xad,%al
    2830:	31 d5                	xor    %edx,%ebp
    2832:	31 03                	xor    %eax,(%rbx)
    2834:	77 10                	ja     2846 <_license+0x461>
    2836:	9f                   	lahf
    2837:	04 b7                	add    $0xb7,%al
    2839:	42 fe 42 03          	rex.X incb 0x3(%rdx)
    283d:	77 10                	ja     284f <_license+0x46a>
    283f:	9f                   	lahf
    2840:	04 b5                	add    $0xb5,%al
    2842:	44 c9                	rex.R leave
    2844:	44 03 77 10          	add    0x10(%rdi),%r14d
    2848:	9f                   	lahf
    2849:	04 81                	add    $0x81,%al
    284b:	45 c7 45 03 77 10 9f 	rex.RB movl $0x9f1077,0x3(%r13)
    2852:	00 
    2853:	04 be                	add    $0xbe,%al
    2855:	31 c0                	xor    %eax,%eax
    2857:	31 01                	xor    %eax,(%rcx)
    2859:	55                   	push   %rbp
    285a:	04 c0                	add    $0xc0,%al
    285c:	31 d5                	xor    %edx,%ebp
    285e:	31 02                	xor    %eax,(%rdx)
    2860:	77 08                	ja     286a <_license+0x485>
    2862:	04 b7                	add    $0xb7,%al
    2864:	42 fe 42 02          	rex.X incb 0x2(%rdx)
    2868:	77 08                	ja     2872 <_license+0x48d>
    286a:	04 b5                	add    $0xb5,%al
    286c:	44 c9                	rex.R leave
    286e:	44 02 77 08          	add    0x8(%rdi),%r14b
    2872:	04 81                	add    $0x81,%al
    2874:	45 c3                	rex.RB ret
    2876:	45 02 77 08          	add    0x8(%r15),%r14b
    287a:	04 c3                	add    $0xc3,%al
    287c:	45 c7 45 01 55 00 04 	rex.RB movl $0xc0040055,0x1(%r13)
    2883:	c0 
    2884:	31 d5                	xor    %edx,%ebp
    2886:	31 01                	xor    %eax,(%rcx)
    2888:	50                   	push   %rax
    2889:	04 b7                	add    $0xb7,%al
    288b:	42 d8 42 01          	rex.X fadds 0x1(%rdx)
    288f:	50                   	push   %rax
    2890:	04 b5                	add    $0xb5,%al
    2892:	44 c9                	rex.R leave
    2894:	44 01 50 00          	add    %r10d,0x0(%rax)
    2898:	04 d5                	add    $0xd5,%al
    289a:	31 e1                	xor    %esp,%ecx
    289c:	31 03                	xor    %eax,(%rbx)
    289e:	11 01                	adc    %eax,(%rcx)
    28a0:	9f                   	lahf
    28a1:	04 b7                	add    $0xb7,%al
    28a3:	44                   	rex.R
    28a4:	f3 44 03 11          	repz add (%rcx),%r10d
    28a8:	01 9f 04 c7 45 f5    	add    %ebx,-0xaba38fc(%rdi)
    28ae:	45 03 11             	add    (%r9),%r10d
    28b1:	01 9f 00 04 8a 32    	add    %ebx,0x328a0400(%rdi)
    28b7:	d6                   	(bad)
    28b8:	32 03                	xor    (%rbx),%al
    28ba:	77 10                	ja     28cc <_license+0x4e7>
    28bc:	9f                   	lahf
    28bd:	04 db                	add    $0xdb,%al
    28bf:	32 89 33 03 77 10    	xor    0x10770333(%rcx),%cl
    28c5:	9f                   	lahf
    28c6:	00 04 a1             	add    %al,(%rcx,%riz,4)
    28c9:	32 a3 32 01 55 04    	xor    0x4550132(%rbx),%ah
    28cf:	a3 32 d6 32 02 77 08 	movabs %eax,0xdb0408770232d632
    28d6:	04 db 
    28d8:	32 89 33 02 77 08    	xor    0x8770233(%rcx),%cl
    28de:	00 04 8a             	add    %al,(%rdx,%rcx,4)
    28e1:	32 d6                	xor    %dh,%dl
    28e3:	32 02                	xor    (%rdx),%al
    28e5:	30 9f 04 db 32 89    	xor    %bl,-0x76cd24fc(%rdi)
    28eb:	33 02                	xor    (%rdx),%eax
    28ed:	30 9f 00 04 a3 32    	xor    %bl,0x32a30400(%rdi)
    28f3:	b2 32                	mov    $0x32,%dl
    28f5:	01 50 04             	add    %edx,0x4(%rax)
    28f8:	b2 32                	mov    $0x32,%dl
    28fa:	d1 32                	shll   (%rdx)
    28fc:	01 56 04             	add    %edx,0x4(%rsi)
    28ff:	db 32                	(bad)  (%rdx)
    2901:	89 33                	mov    %esi,(%rbx)
    2903:	01 56 00             	add    %edx,0x0(%rsi)
    2906:	04 bb                	add    $0xbb,%al
    2908:	32 d1                	xor    %cl,%dl
    290a:	32 01                	xor    (%rcx),%al
    290c:	50                   	push   %rax
    290d:	04 db                	add    $0xdb,%al
    290f:	32 df                	xor    %bh,%bl
    2911:	32 01                	xor    (%rcx),%al
    2913:	50                   	push   %rax
    2914:	00 04 e2             	add    %al,(%rdx,%riz,8)
    2917:	32 f3                	xor    %bl,%dh
    2919:	32 01                	xor    (%rcx),%al
    291b:	50                   	push   %rax
    291c:	00 04 e2             	add    %al,(%rdx,%riz,8)
    291f:	32 f3                	xor    %bl,%dh
    2921:	32 01                	xor    (%rcx),%al
    2923:	50                   	push   %rax
    2924:	00 04 ef             	add    %al,(%rdi,%rbp,8)
    2927:	32 89 33 02 30 9f    	xor    -0x60cffdcd(%rcx),%cl
    292d:	00 04 8f             	add    %al,(%rdi,%rcx,4)
    2930:	33 c1                	xor    %ecx,%eax
    2932:	33 01                	xor    (%rcx),%eax
    2934:	55                   	push   %rbp
    2935:	04 c1                	add    $0xc1,%al
    2937:	33 e0                	xor    %eax,%esp
    2939:	34 01                	xor    $0x1,%al
    293b:	5f                   	pop    %rdi
    293c:	00 04 a4             	add    %al,(%rsp,%riz,4)
    293f:	33 ac 33 02 30 9f 04 	xor    0x49f3002(%rbx,%rsi,1),%ebp
    2946:	ac                   	lods   %ds:(%rsi),%al
    2947:	33 b5 33 01 56 00    	xor    0x560133(%rbp),%esi
    294d:	04 b5                	add    $0xb5,%al
    294f:	33 85 34 01 56 00    	xor    0x560134(%rbp),%eax
    2955:	04 85                	add    $0x85,%al
    2957:	34 a3                	xor    $0xa3,%al
    2959:	34 02                	xor    $0x2,%al
    295b:	30 9f 04 a3 34 a8    	xor    %bl,-0x57cb5cfc(%rdi)
    2961:	34 01                	xor    $0x1,%al
    2963:	50                   	push   %rax
    2964:	00 04 a3             	add    %al,(%rbx,%riz,4)
    2967:	34 b2                	xor    $0xb2,%al
    2969:	34 01                	xor    $0x1,%al
    296b:	50                   	push   %rax
    296c:	00 04 b8             	add    %al,(%rax,%rdi,4)
    296f:	34 c5                	xor    $0xc5,%al
    2971:	34 01                	xor    $0x1,%al
    2973:	50                   	push   %rax
    2974:	00 04 bd 34 c5 34 02 	add    %al,0x234c534(,%rdi,4)
    297b:	30 9f 04 c5 34 ce    	xor    %bl,-0x31cb3afc(%rdi)
    2981:	34 01                	xor    $0x1,%al
    2983:	50                   	push   %rax
    2984:	00 04 ce             	add    %al,(%rsi,%rcx,8)
    2987:	34 e0                	xor    $0xe0,%al
    2989:	34 01                	xor    $0x1,%al
    298b:	50                   	push   %rax
    298c:	00 04 e9             	add    %al,(%rcx,%rbp,8)
    298f:	34 fd                	xor    $0xfd,%al
    2991:	34 02                	xor    $0x2,%al
    2993:	30 9f 04 fd 34 86    	xor    %bl,-0x79cb02fc(%rdi)
    2999:	35 01 52 04 bb       	xor    $0xbb045201,%eax
    299e:	41 cc                	rex.B int3
    29a0:	41 02 30             	add    (%r8),%sil
    29a3:	9f                   	lahf
    29a4:	04 e4                	add    $0xe4,%al
    29a6:	45 f5                	rex.RB cmc
    29a8:	45 02 30             	add    (%r8),%r14b
    29ab:	9f                   	lahf
    29ac:	00 04 e9             	add    %al,(%rcx,%rbp,8)
    29af:	34 8f                	xor    $0x8f,%al
    29b1:	35 02 36 9f 04       	xor    $0x49f3602,%eax
    29b6:	bb 41 cc 41 02       	mov    $0x241cc41,%ebx
    29bb:	36 9f                	ss lahf
    29bd:	04 e4                	add    $0xe4,%al
    29bf:	45 f5                	rex.RB cmc
    29c1:	45 02 36             	add    (%r14),%r14b
    29c4:	9f                   	lahf
    29c5:	00 04 e9             	add    %al,(%rcx,%rbp,8)
    29c8:	34 8f                	xor    $0x8f,%al
    29ca:	35 04 10 80 08       	xor    $0x8801004,%eax
    29cf:	9f                   	lahf
    29d0:	04 bb                	add    $0xbb,%al
    29d2:	41 cc                	rex.B int3
    29d4:	41 04 10             	rex.B add $0x10,%al
    29d7:	80 08 9f             	orb    $0x9f,(%rax)
    29da:	04 e4                	add    $0xe4,%al
    29dc:	45 f5                	rex.RB cmc
    29de:	45 04 10             	rex.RB add $0x10,%al
    29e1:	80 08 9f             	orb    $0x9f,(%rax)
    29e4:	00 04 e9             	add    %al,(%rcx,%rbp,8)
    29e7:	34 8f                	xor    $0x8f,%al
    29e9:	35 02 38 9f 04       	xor    $0x49f3802,%eax
    29ee:	bb 41 cc 41 02       	mov    $0x241cc41,%ebx
    29f3:	38 9f 04 e4 45 f5    	cmp    %bl,-0xaba1bfc(%rdi)
    29f9:	45 02 38             	add    (%r8),%r15b
    29fc:	9f                   	lahf
    29fd:	00 04 a5 35 c8 35 02 	add    %al,0x235c835(,%riz,4)
    2a04:	30 9f 04 c8 35 d1    	xor    %bl,-0x2eca37fc(%rdi)
    2a0a:	35 01 52 00 04       	xor    $0x4005201,%eax
    2a0f:	b0 35                	mov    $0x35,%al
    2a11:	da 35 04 10 80 20    	fidivl 0x20801004(%rip)        # 20803a1b <_license+0x20801636>
    2a17:	9f                   	lahf
    2a18:	00 04 b0             	add    %al,(%rax,%rsi,4)
    2a1b:	35 da 35 02 38       	xor    $0x380235da,%eax
    2a20:	9f                   	lahf
    2a21:	00 04 c8             	add    %al,(%rax,%rcx,8)
    2a24:	36 bd 37 0e 73 00    	ss mov $0x730e37,%ebp
    2a2a:	10 ff                	adc    %bh,%bh
    2a2c:	ff                   	(bad)
    2a2d:	ff                   	(bad)
    2a2e:	ff 0f                	decl   (%rdi)
    2a30:	1a 10                	sbb    (%rax),%dl
    2a32:	ac                   	lods   %ds:(%rsi),%al
    2a33:	21 21                	and    %esp,(%rcx)
    2a35:	9f                   	lahf
    2a36:	00 04 fb             	add    %al,(%rbx,%rdi,8)
    2a39:	35 c6 37 02 30       	xor    $0x300237c6,%eax
    2a3e:	9f                   	lahf
    2a3f:	00 04 98             	add    %al,(%rax,%rbx,4)
    2a42:	36 c6                	ss (bad)
    2a44:	37                   	(bad)
    2a45:	01 50 00             	add    %edx,0x0(%rax)
    2a48:	04 9c                	add    $0x9c,%al
    2a4a:	36 bf 36 01 52 00    	ss mov $0x520136,%edi
    2a50:	04 9c                	add    $0x9c,%al
    2a52:	36 c6                	ss (bad)
    2a54:	37                   	(bad)
    2a55:	01 50 00             	add    %edx,0x0(%rax)
    2a58:	04 a0                	add    $0xa0,%al
    2a5a:	36 c6                	ss (bad)
    2a5c:	37                   	(bad)
    2a5d:	03 70 14             	add    0x14(%rax),%esi
    2a60:	9f                   	lahf
    2a61:	00 04 86             	add    %al,(%rsi,%rax,4)
    2a64:	37                   	(bad)
    2a65:	bd 37 0e 73 00       	mov    $0x730e37,%ebp
    2a6a:	10 ff                	adc    %bh,%bh
    2a6c:	ff                   	(bad)
    2a6d:	ff                   	(bad)
    2a6e:	ff 0f                	decl   (%rdi)
    2a70:	1a 10                	sbb    (%rax),%dl
    2a72:	ac                   	lods   %ds:(%rsi),%al
    2a73:	21 21                	and    %esp,(%rcx)
    2a75:	9f                   	lahf
    2a76:	00 04 86             	add    %al,(%rsi,%rax,4)
    2a79:	37                   	(bad)
    2a7a:	b2 37                	mov    $0x37,%dl
    2a7c:	01 51 00             	add    %edx,0x0(%rcx)
    2a7f:	04 ae                	add    $0xae,%al
    2a81:	37                   	(bad)
    2a82:	b2 37                	mov    $0x37,%dl
    2a84:	03 11                	add    (%rcx),%edx
    2a86:	00 9f 04 b2 37 b6    	add    %bl,-0x49c84dfc(%rdi)
    2a8c:	37                   	(bad)
    2a8d:	03 11                	add    (%rcx),%edx
    2a8f:	01 9f 04 b6 37 ba    	add    %ebx,-0x45c849fc(%rdi)
    2a95:	37                   	(bad)
    2a96:	03 11                	add    (%rcx),%edx
    2a98:	04 9f                	add    $0x9f,%al
    2a9a:	04 ba                	add    $0xba,%al
    2a9c:	37                   	(bad)
    2a9d:	bd 37 03 11 07       	mov    $0x7110337,%ebp
    2aa2:	9f                   	lahf
    2aa3:	04 bd                	add    $0xbd,%al
    2aa5:	37                   	(bad)
    2aa6:	c3                   	ret
    2aa7:	37                   	(bad)
    2aa8:	03 11                	add    (%rcx),%edx
    2aaa:	08 9f 04 c3 37 c6    	or     %bl,-0x39c83cfc(%rdi)
    2ab0:	37                   	(bad)
    2ab1:	03 11                	add    (%rcx),%edx
    2ab3:	09 9f 00 04 ae 37    	or     %ebx,0x37ae0400(%rdi)
    2ab9:	b2 37                	mov    $0x37,%dl
    2abb:	05 70 0e 23 02       	add    $0x2230e70,%eax
    2ac0:	9f                   	lahf
    2ac1:	04 b2                	add    $0xb2,%al
    2ac3:	37                   	(bad)
    2ac4:	b6 37                	mov    $0x37,%dh
    2ac6:	05 70 0e 23 04       	add    $0x4230e70,%eax
    2acb:	9f                   	lahf
    2acc:	04 b6                	add    $0xb6,%al
    2ace:	37                   	(bad)
    2acf:	ba 37 05 70 0e       	mov    $0xe700537,%edx
    2ad4:	23 0a                	and    (%rdx),%ecx
    2ad6:	9f                   	lahf
    2ad7:	04 ba                	add    $0xba,%al
    2ad9:	37                   	(bad)
    2ada:	bd 37 05 70 0e       	mov    $0xe700537,%ebp
    2adf:	23 10                	and    (%rax),%edx
    2ae1:	9f                   	lahf
    2ae2:	04 bd                	add    $0xbd,%al
    2ae4:	37                   	(bad)
    2ae5:	c3                   	ret
    2ae6:	37                   	(bad)
    2ae7:	05 70 0e 23 12       	add    $0x12230e70,%eax
    2aec:	9f                   	lahf
    2aed:	04 c3                	add    $0xc3,%al
    2aef:	37                   	(bad)
    2af0:	c6                   	(bad)
    2af1:	37                   	(bad)
    2af2:	07                   	(bad)
    2af3:	70 0e                	jo     2b03 <_license+0x71e>
    2af5:	23 12                	and    (%rdx),%edx
    2af7:	23 02                	and    (%rdx),%eax
    2af9:	9f                   	lahf
    2afa:	00 04 ca             	add    %al,(%rdx,%rcx,8)
    2afd:	38 d2                	cmp    %dl,%dl
    2aff:	38 02                	cmp    %al,(%rdx)
    2b01:	30 9f 04 d2 38 db    	xor    %bl,-0x24c72dfc(%rdi)
    2b07:	38 01                	cmp    %al,(%rcx)
    2b09:	50                   	push   %rax
    2b0a:	00 04 db             	add    %al,(%rbx,%rbx,8)
    2b0d:	38 f5                	cmp    %dh,%ch
    2b0f:	38 01                	cmp    %al,(%rcx)
    2b11:	50                   	push   %rax
    2b12:	00 04 f5 38 c4 3d 03 	add    %al,0x33dc438(,%rsi,8)
    2b19:	77 10                	ja     2b2b <_license+0x746>
    2b1b:	9f                   	lahf
    2b1c:	04 e5                	add    $0xe5,%al
    2b1e:	3d fe 3d 03 77       	cmp    $0x77033dfe,%eax
    2b23:	10 9f 04 c8 3f f6    	adc    %bl,-0x9c037fc(%rdi)
    2b29:	3f                   	(bad)
    2b2a:	03 77 10             	add    0x10(%rdi),%esi
    2b2d:	9f                   	lahf
    2b2e:	00 04 f5 38 c4 3d 02 	add    %al,0x23dc438(,%rsi,8)
    2b35:	31 9f 04 e5 3d fe    	xor    %ebx,-0x1c21afc(%rdi)
    2b3b:	3d 02 31 9f 04       	cmp    $0x49f3102,%eax
    2b40:	c8 3f f6 3f          	enter  $0xf63f,$0x3f
    2b44:	02 31                	add    (%rcx),%dh
    2b46:	9f                   	lahf
    2b47:	00 04 f5 38 c4 3d 02 	add    %al,0x23dc438(,%rsi,8)
    2b4e:	77 08                	ja     2b58 <_license+0x773>
    2b50:	04 e5                	add    $0xe5,%al
    2b52:	3d fe 3d 02 77       	cmp    $0x77023dfe,%eax
    2b57:	08 04 c8             	or     %al,(%rax,%rcx,8)
    2b5a:	3f                   	(bad)
    2b5b:	ee                   	out    %al,(%dx)
    2b5c:	3f                   	(bad)
    2b5d:	02 77 08             	add    0x8(%rdi),%dh
    2b60:	04 ee                	add    $0xee,%al
    2b62:	3f                   	(bad)
    2b63:	f2 3f                	repnz (bad)
    2b65:	01 55 00             	add    %edx,0x0(%rbp)
    2b68:	04 8b                	add    $0x8b,%al
    2b6a:	39 ea                	cmp    %ebp,%edx
    2b6c:	39 02                	cmp    %eax,(%rdx)
    2b6e:	30 9f 04 ea 39 c4    	xor    %bl,-0x3bc615fc(%rdi)
    2b74:	3d 11 7e 00 10       	cmp    $0x10007e11,%eax
    2b79:	ff 01                	incl   (%rcx)
    2b7b:	1a a8 ba 80 80 00    	sbb    0x8080ba(%rax),%ch
    2b81:	a8 bf                	test   $0xbf,%al
    2b83:	80 80 00 9f 04 e5 3d 	addb   $0x3d,-0x1afb6100(%rax)
    2b8a:	f8                   	clc
    2b8b:	3d 11 7e 00 10       	cmp    $0x10007e11,%eax
    2b90:	ff 01                	incl   (%rcx)
    2b92:	1a a8 ba 80 80 00    	sbb    0x8080ba(%rax),%ch
    2b98:	a8 bf                	test   $0xbf,%al
    2b9a:	80 80 00 9f 00 04 8b 	addb   $0x8b,0x4009f00(%rax)
    2ba1:	39 c4                	cmp    %eax,%esp
    2ba3:	3d 02 30 9f 04       	cmp    $0x49f3002,%eax
    2ba8:	e5 3d                	in     $0x3d,%eax
    2baa:	fe                   	(bad)
    2bab:	3d 02 30 9f 04       	cmp    $0x49f3002,%eax
    2bb0:	c8 3f f6 3f          	enter  $0xf63f,$0x3f
    2bb4:	02 30                	add    (%rax),%dh
    2bb6:	9f                   	lahf
    2bb7:	00 04 8b             	add    %al,(%rbx,%rcx,4)
    2bba:	39 c4                	cmp    %eax,%esp
    2bbc:	3d 02 30 9f 04       	cmp    $0x49f3002,%eax
    2bc1:	e5 3d                	in     $0x3d,%eax
    2bc3:	fe                   	(bad)
    2bc4:	3d 02 30 9f 04       	cmp    $0x49f3002,%eax
    2bc9:	c8 3f cf 3f          	enter  $0xcf3f,$0x3f
    2bcd:	02 30                	add    (%rax),%dh
    2bcf:	9f                   	lahf
    2bd0:	04 cf                	add    $0xcf,%al
    2bd2:	3f                   	(bad)
    2bd3:	d4                   	(bad)
    2bd4:	3f                   	(bad)
    2bd5:	01 50 00             	add    %edx,0x0(%rax)
    2bd8:	04 8b                	add    $0x8b,%al
    2bda:	39 93 39 02 30 9f    	cmp    %edx,-0x60cffdc7(%rbx)
    2be0:	04 93                	add    $0x93,%al
    2be2:	39 a4 39 01 53 00 04 	cmp    %esp,0x4005301(%rcx,%rdi,1)
    2be9:	9c                   	pushf
    2bea:	39 e4                	cmp    %esp,%esp
    2bec:	39 01                	cmp    %eax,(%rcx)
    2bee:	53                   	push   %rbx
    2bef:	00 04 ea             	add    %al,(%rdx,%rbp,8)
    2bf2:	39 8a 3d 02 31 9f    	cmp    %ecx,-0x60cefdc3(%rdx)
    2bf8:	04 ae                	add    $0xae,%al
    2bfa:	3d c4 3d 02 31       	cmp    $0x31023dc4,%eax
    2bff:	9f                   	lahf
    2c00:	00 04 ca             	add    %al,(%rdx,%rcx,8)
    2c03:	3a cf                	cmp    %bh,%cl
    2c05:	3a 01                	cmp    (%rcx),%al
    2c07:	53                   	push   %rbx
    2c08:	04 d1                	add    $0xd1,%al
    2c0a:	3a e1                	cmp    %cl,%ah
    2c0c:	3a 0c 10             	cmp    (%rax,%rdx,1),%cl
    2c0f:	ff 81 b7 f5 fd ff    	incl   -0x20a49(%rcx)
    2c15:	ff                   	(bad)
    2c16:	ff                   	(bad)
    2c17:	ff 01                	incl   (%rcx)
    2c19:	9f                   	lahf
    2c1a:	04 e1                	add    $0xe1,%al
    2c1c:	3a ec                	cmp    %ah,%ch
    2c1e:	3a 01                	cmp    (%rcx),%al
    2c20:	54                   	push   %rsp
    2c21:	04 f3                	add    $0xf3,%al
    2c23:	3a f5                	cmp    %ch,%dh
    2c25:	3a 01                	cmp    (%rcx),%al
    2c27:	54                   	push   %rsp
    2c28:	04 f5                	add    $0xf5,%al
    2c2a:	3a 96 3b 01 52 04    	cmp    0x452013b(%rsi),%dl
    2c30:	c5 3b f5             	(bad)
    2c33:	3b 01                	cmp    (%rcx),%eax
    2c35:	52                   	push   %rdx
    2c36:	00 04 cc             	add    %al,(%rsp,%rcx,8)
    2c39:	3a d1                	cmp    %cl,%dl
    2c3b:	3a 01                	cmp    (%rcx),%al
    2c3d:	51                   	push   %rcx
    2c3e:	04 ec                	add    $0xec,%al
    2c40:	3a 80 3b 01 53 04    	cmp    0x453013b(%rax),%al
    2c46:	80 3b 9f             	cmpb   $0x9f,(%rbx)
    2c49:	3b 01                	cmp    (%rcx),%eax
    2c4b:	54                   	push   %rsp
    2c4c:	04 b9                	add    $0xb9,%al
    2c4e:	3b ee                	cmp    %esi,%ebp
    2c50:	3b 01                	cmp    (%rcx),%eax
    2c52:	51                   	push   %rcx
    2c53:	00 04 d1             	add    %al,(%rcx,%rdx,8)
    2c56:	3a f2                	cmp    %dl,%dh
    2c58:	3c 03                	cmp    $0x3,%al
    2c5a:	77 10                	ja     2c6c <_license+0x887>
    2c5c:	9f                   	lahf
    2c5d:	00 04 d1             	add    %al,(%rcx,%rdx,8)
    2c60:	3a f2                	cmp    %dl,%dh
    2c62:	3c 02                	cmp    $0x2,%al
    2c64:	31 9f 00 04 d1 3a    	xor    %ebx,0x3ad10400(%rdi)
    2c6a:	f2 3c 04             	repnz cmp $0x4,%al
    2c6d:	10 80 04 9f 00 04    	adc    %al,0x4009f04(%rax)
    2c73:	d1 3a                	sarl   (%rdx)
    2c75:	d9 3a                	fnstcw (%rdx)
    2c77:	0c 10                	or     $0x10,%al
    2c79:	ff 81 b7 f5 fd ff    	incl   -0x20a49(%rcx)
    2c7f:	ff                   	(bad)
    2c80:	ff                   	(bad)
    2c81:	ff 01                	incl   (%rcx)
    2c83:	9f                   	lahf
    2c84:	04 d9                	add    $0xd9,%al
    2c86:	3a ea                	cmp    %dl,%ch
    2c88:	3a 01                	cmp    (%rcx),%al
    2c8a:	51                   	push   %rcx
    2c8b:	04 ea                	add    $0xea,%al
    2c8d:	3a 8b 3b 01 55 04    	cmp    0x455013b(%rbx),%cl
    2c93:	8b 3b                	mov    (%rbx),%edi
    2c95:	f5                   	cmc
    2c96:	3b 01                	cmp    (%rcx),%eax
    2c98:	53                   	push   %rbx
    2c99:	00 04 98             	add    %al,(%rax,%rbx,4)
    2c9c:	3b f2                	cmp    %edx,%esi
    2c9e:	3c 05                	cmp    $0x5,%al
    2ca0:	77 10                	ja     2cb2 <_license+0x8cd>
    2ca2:	23 0c 9f             	and    (%rdi,%rbx,4),%ecx
    2ca5:	00 04 86             	add    %al,(%rsi,%rax,4)
    2ca8:	3c be                	cmp    $0xbe,%al
    2caa:	3c 01                	cmp    $0x1,%al
    2cac:	52                   	push   %rdx
    2cad:	00 04 80             	add    %al,(%rax,%rax,4)
    2cb0:	3c c5                	cmp    $0xc5,%al
    2cb2:	3c 01                	cmp    $0x1,%al
    2cb4:	54                   	push   %rsp
    2cb5:	00 04 f5 3b 80 3c 02 	add    %al,0x23c803b(,%rsi,8)
    2cbc:	30 9f 04 80 3c 8e    	xor    %bl,-0x71c37ffc(%rdi)
    2cc2:	3c 0c                	cmp    $0xc,%al
    2cc4:	10 f7                	adc    %dh,%bh
    2cc6:	81 b7 85 fe ff ff ff 	xorl   $0x9f01ffff,-0x17b(%rdi)
    2ccd:	ff 01 9f 
    2cd0:	04 8e                	add    $0x8e,%al
    2cd2:	3c dd                	cmp    $0xdd,%al
    2cd4:	3c 01                	cmp    $0x1,%al
    2cd6:	51                   	push   %rcx
    2cd7:	00 04 dd 3c fe 3c 01 	add    %al,0x13cfe3c(,%rbx,8)
    2cde:	51                   	push   %rcx
    2cdf:	00 04 ea             	add    %al,(%rdx,%rbp,8)
    2ce2:	3c f4                	cmp    $0xf4,%al
    2ce4:	3c 01                	cmp    $0x1,%al
    2ce6:	52                   	push   %rdx
    2ce7:	04 85                	add    $0x85,%al
    2ce9:	3d c4 3d 01 56       	cmp    $0x56013dc4,%eax
    2cee:	04 e5                	add    $0xe5,%al
    2cf0:	3d fe 3d 01 56       	cmp    $0x56013dfe,%eax
    2cf5:	04 c8                	add    $0xc8,%al
    2cf7:	3f                   	(bad)
    2cf8:	f6 3f                	idivb  (%rdi)
    2cfa:	01 56 00             	add    %edx,0x0(%rsi)
    2cfd:	04 ea                	add    $0xea,%al
    2cff:	3c f4                	cmp    $0xf4,%al
    2d01:	3c 01                	cmp    $0x1,%al
    2d03:	52                   	push   %rdx
    2d04:	00 04 ea             	add    %al,(%rdx,%rbp,8)
    2d07:	3c f0                	cmp    $0xf0,%al
    2d09:	3c 02                	cmp    $0x2,%al
    2d0b:	30 9f 00 04 8e 3d    	xor    %bl,0x3d8e0400(%rdi)
    2d11:	94                   	xchg   %eax,%esp
    2d12:	3d 02 30 9f 00       	cmp    $0x9f3002,%eax
    2d17:	04 96                	add    $0x96,%al
    2d19:	3d 9e 3d 02 30       	cmp    $0x30023d9e,%eax
    2d1e:	9f                   	lahf
    2d1f:	04 9e                	add    $0x9e,%al
    2d21:	3d a7 3d 01 50       	cmp    $0x50013da7,%eax
    2d26:	00 04 a7             	add    %al,(%rdi,%riz,4)
    2d29:	3d ae 3d 01 50       	cmp    $0x50013dae,%eax
    2d2e:	00 04 ae             	add    %al,(%rsi,%rbp,4)
    2d31:	3d b6 3d 02 30       	cmp    $0x30023db6,%eax
    2d36:	9f                   	lahf
    2d37:	04 b6                	add    $0xb6,%al
    2d39:	3d bf 3d 01 50       	cmp    $0x50013dbf,%eax
    2d3e:	00 04 bf             	add    %al,(%rdi,%rdi,4)
    2d41:	3d c4 3d 01 50       	cmp    $0x50013dc4,%eax
    2d46:	00 04 9e             	add    %al,(%rsi,%rbx,4)
    2d49:	3e b4 3f             	ds mov $0x3f,%ah
    2d4c:	01 50 00             	add    %edx,0x0(%rax)
    2d4f:	04 a2                	add    $0xa2,%al
    2d51:	3e c3                	ds ret
    2d53:	3e 01 52 00          	ds add %edx,0x0(%rdx)
    2d57:	04 a2                	add    $0xa2,%al
    2d59:	3e b4 3f             	ds mov $0x3f,%ah
    2d5c:	01 50 00             	add    %edx,0x0(%rax)
    2d5f:	04 a6                	add    $0xa6,%al
    2d61:	3e af                	ds scas %es:(%rdi),%eax
    2d63:	3e 01 51 00          	ds add %edx,0x0(%rcx)
    2d67:	04 a6                	add    $0xa6,%al
    2d69:	3e b4 3f             	ds mov $0x3f,%ah
    2d6c:	03 70 28             	add    0x28(%rax),%esi
    2d6f:	9f                   	lahf
    2d70:	00 04 ef             	add    %al,(%rdi,%rbp,8)
    2d73:	3e b4 3f             	ds mov $0x3f,%ah
    2d76:	03 10                	add    (%rax),%edx
    2d78:	29 9f 00 04 ef 3e    	sub    %ebx,0x3eef0400(%rdi)
    2d7e:	f3 3e 0c 31          	repz ds or $0x31,%al
    2d82:	9f                   	lahf
    2d83:	93                   	xchg   %eax,%ebx
    2d84:	04 30                	add    $0x30,%al
    2d86:	9f                   	lahf
    2d87:	93                   	xchg   %eax,%ebx
    2d88:	04 30                	add    $0x30,%al
    2d8a:	9f                   	lahf
    2d8b:	93                   	xchg   %eax,%ebx
    2d8c:	04 04                	add    $0x4,%al
    2d8e:	f3 3e b4 3f          	repz ds mov $0x3f,%ah
    2d92:	0f 31                	rdtsc
    2d94:	9f                   	lahf
    2d95:	93                   	xchg   %eax,%ebx
    2d96:	04 30                	add    $0x30,%al
    2d98:	9f                   	lahf
    2d99:	93                   	xchg   %eax,%ebx
    2d9a:	04 30                	add    $0x30,%al
    2d9c:	9f                   	lahf
    2d9d:	93                   	xchg   %eax,%ebx
    2d9e:	04 54                	add    $0x54,%al
    2da0:	93                   	xchg   %eax,%ebx
    2da1:	04 00                	add    $0x0,%al
    2da3:	04 f7                	add    $0xf7,%al
    2da5:	3e 9d                	ds popf
    2da7:	3f                   	(bad)
    2da8:	01 5c 00 04          	add    %ebx,0x4(%rax,%rax,1)
    2dac:	f7 3e                	idivl  (%rsi)
    2dae:	9d                   	popf
    2daf:	3f                   	(bad)
    2db0:	01 5c 00 04          	add    %ebx,0x4(%rax,%rax,1)
    2db4:	fb                   	sti
    2db5:	3e 8f                	ds (bad)
    2db7:	3f                   	(bad)
    2db8:	01 52 00             	add    %edx,0x0(%rdx)
    2dbb:	04 d6                	add    $0xd6,%al
    2dbd:	40 e3 40             	rex jrcxz 2e00 <_license+0xa1b>
    2dc0:	01 50 00             	add    %edx,0x0(%rax)
    2dc3:	04 d6                	add    $0xd6,%al
    2dc5:	40 f5                	rex cmc
    2dc7:	40 02 30             	add    (%rax),%sil
    2dca:	9f                   	lahf
    2dcb:	04 f5                	add    $0xf5,%al
    2dcd:	40 fe 40 01          	rex incb 0x1(%rax)
    2dd1:	50                   	push   %rax
    2dd2:	00 04 d6             	add    %al,(%rsi,%rdx,8)
    2dd5:	40 e3 40             	rex jrcxz 2e18 <_license+0xa33>
    2dd8:	01 50 00             	add    %edx,0x0(%rax)
    2ddb:	04 fe                	add    $0xfe,%al
    2ddd:	40 8a 41 01          	rex mov 0x1(%rcx),%al
    2de1:	50                   	push   %rax
    2de2:	00 04 8f             	add    %al,(%rdi,%rcx,4)
    2de5:	42 97                	rex.X xchg %eax,%edi
    2de7:	42 03 50 93          	rex.X add -0x6d(%rax),%edx
    2deb:	04 04                	add    $0x4,%al
    2ded:	97                   	xchg   %eax,%edi
    2dee:	42 a6                	rex.X cmpsb %es:(%rdi),%ds:(%rsi)
    2df0:	42 06                	rex.X (bad)
    2df2:	50                   	push   %rax
    2df3:	93                   	xchg   %eax,%ebx
    2df4:	04 51                	add    $0x51,%al
    2df6:	93                   	xchg   %eax,%ebx
    2df7:	01 04 91             	add    %eax,(%rcx,%rdx,4)
    2dfa:	43 c8 43 03 50       	rex.XB enter $0x343,$0x50
    2dff:	93                   	xchg   %eax,%ebx
    2e00:	04 04                	add    $0x4,%al
    2e02:	9c                   	pushf
    2e03:	44 a7                	rex.R cmpsl %es:(%rdi),%ds:(%rsi)
    2e05:	44 03 50 93          	add    -0x6d(%rax),%r10d
    2e09:	04 00                	add    $0x0,%al
    2e0b:	04 97                	add    $0x97,%al
    2e0d:	42 a6                	rex.X cmpsb %es:(%rdi),%ds:(%rsi)
    2e0f:	42 02 77 00          	rex.X add 0x0(%rdi),%sil
    2e13:	04 95                	add    $0x95,%al
    2e15:	43 a1 43 01 51 00 04 	rex.XB movabs 0xa642970400510143,%eax
    2e1c:	97 42 a6 
    2e1f:	42 01 51 00          	rex.X add %edx,0x0(%rcx)
    2e23:	04 b7                	add    $0xb7,%al
    2e25:	42 fe 42 04          	rex.X incb 0x4(%rdx)
    2e29:	10 82 04 9f 04 81    	adc    %al,-0x7efb60fc(%rdx)
    2e2f:	45 93                	rex.RB xchg %eax,%r11d
    2e31:	45 04 10             	rex.RB add $0x10,%al
    2e34:	82                   	(bad)
    2e35:	04 9f                	add    $0x9f,%al
    2e37:	00 04 b7             	add    %al,(%rdi,%rsi,4)
    2e3a:	42 bf 42 02 30 9f    	rex.X mov $0x9f300242,%edi
    2e40:	04 bf                	add    $0xbf,%al
    2e42:	42 c8 42 01 53       	rex.X enter $0x142,$0x53
    2e47:	00 04 c8             	add    %al,(%rax,%rcx,8)
    2e4a:	42 fe 42 01          	rex.X incb 0x1(%rdx)
    2e4e:	53                   	push   %rbx
    2e4f:	04 81                	add    $0x81,%al
    2e51:	45 93                	rex.RB xchg %eax,%r11d
    2e53:	45 01 53 00          	add    %r10d,0x0(%r11)
    2e57:	04 9a                	add    $0x9a,%al
    2e59:	43 b2 43             	rex.XB mov $0x43,%r10b
    2e5c:	01 50 04             	add    %edx,0x4(%rax)
    2e5f:	b2 43                	mov    $0x43,%dl
    2e61:	d2 43 01             	rolb   %cl,0x1(%rbx)
    2e64:	52                   	push   %rdx
    2e65:	00 04 9a             	add    %al,(%rdx,%rbx,4)
    2e68:	43 9f                	rex.XB lahf
    2e6a:	43 02 30             	rex.XB add (%r8),%sil
    2e6d:	9f                   	lahf
    2e6e:	00 04 be             	add    %al,(%rsi,%rdi,4)
    2e71:	43 de 43 02          	rex.XB fiadds 0x2(%r11)
    2e75:	30 9f 04 de 43 e7    	xor    %bl,-0x18bc21fc(%rdi)
    2e7b:	43 01 5e 00          	rex.XB add %ebx,0x0(%r14)
    2e7f:	04 be                	add    $0xbe,%al
    2e81:	43 d2 43 01          	rex.XB rolb %cl,0x1(%r11)
    2e85:	52                   	push   %rdx
    2e86:	00 04 e7             	add    %al,(%rdi,%riz,8)
    2e89:	43 8f 44 03 77       	pop    0x77(%r11,%r8,1)
    2e8e:	10 9f 04 f5 45 d1    	adc    %bl,-0x2eba0afc(%rdi)
    2e94:	46 03 77 10          	rex.RX add 0x10(%rdi),%r14d
    2e98:	9f                   	lahf
    2e99:	04 ff                	add    $0xff,%al
    2e9b:	46 c5 47 03          	(bad)
    2e9f:	77 10                	ja     2eb1 <_license+0xacc>
    2ea1:	9f                   	lahf
    2ea2:	00 04 f8             	add    %al,(%rax,%rdi,8)
    2ea5:	43 fa                	rex.XB cli
    2ea7:	43 01 55 04          	rex.XB add %edx,0x4(%r13)
    2eab:	fa                   	cli
    2eac:	43 8f 44 03 77       	pop    0x77(%r11,%r8,1)
    2eb1:	f0 00 04 f5 45 d1 46 	lock add %al,0x346d145(,%rsi,8)
    2eb8:	03 
    2eb9:	77 f0                	ja     2eab <_license+0xac6>
    2ebb:	00 04 ff             	add    %al,(%rdi,%rdi,8)
    2ebe:	46 c1 47 03 77       	rex.RX roll $0x77,0x3(%rdi)
    2ec3:	f0 00 04 c1          	lock add %al,(%rcx,%rax,8)
    2ec7:	47 c5 47 01          	(bad)
    2ecb:	55                   	push   %rbp
    2ecc:	00 04 fa             	add    %al,(%rdx,%rdi,8)
    2ecf:	43 8f 44 01 50       	pop    0x50(%r9,%r8,1)
    2ed4:	04 f5                	add    $0xf5,%al
    2ed6:	45 96                	rex.RB xchg %eax,%r14d
    2ed8:	46 01 50 04          	rex.RX add %r10d,0x4(%rax)
    2edc:	b5 46                	mov    $0x46,%ch
    2ede:	bb 46 01 50 00       	mov    $0x500146,%ebx
    2ee3:	04 8f                	add    $0x8f,%al
    2ee5:	44 9c                	rex.R pushf
    2ee7:	44 03 11             	add    (%rcx),%r10d
    2eea:	01 9f 04 b7 46 ff    	add    %ebx,-0xb948fc(%rdi)
    2ef0:	46 03 11             	rex.RX add (%rcx),%r10d
    2ef3:	01 9f 04 c5 47 e5    	add    %ebx,-0x1ab83afc(%rdi)
    2ef9:	47 03 11             	rex.RXB add (%r9),%r10d
    2efc:	01 9f 00 04 bc 44    	add    %ebx,0x44bc0400(%rdi)
    2f02:	df 44 02 30          	filds  0x30(%rdx,%rax,1)
    2f06:	9f                   	lahf
    2f07:	04 df                	add    $0xdf,%al
    2f09:	44 e8 44 01 50 00    	rex.R call 503053 <_license+0x500c6e>
    2f0f:	04 e8                	add    $0xe8,%al
    2f11:	44 f1                	rex.R int1
    2f13:	44 01 50 00          	add    %r10d,0x0(%rax)
    2f17:	04 dc                	add    $0xdc,%al
    2f19:	45 e0 45             	rex.RB loopne 2f61 <_license+0xb7c>
    2f1c:	01 50 04             	add    %edx,0x4(%rax)
    2f1f:	e0 45                	loopne 2f66 <_license+0xb81>
    2f21:	f5                   	cmc
    2f22:	45 03 77 f0          	add    -0x10(%r15),%r14d
    2f26:	00 00                	add    %al,(%rax)
    2f28:	04 f5                	add    $0xf5,%al
    2f2a:	45 b5 46             	rex.RB mov $0x46,%r13b
    2f2d:	04 10                	add    $0x10,%al
    2f2f:	82                   	(bad)
    2f30:	04 9f                	add    $0x9f,%al
    2f32:	04 ff                	add    $0xff,%al
    2f34:	46 91                	rex.RX xchg %eax,%ecx
    2f36:	47 04 10             	rex.RXB add $0x10,%al
    2f39:	82                   	(bad)
    2f3a:	04 9f                	add    $0x9f,%al
    2f3c:	00 04 f5 45 fd 45 02 	add    %al,0x245fd45(,%rsi,8)
    2f43:	30 9f 04 fd 45 86    	xor    %bl,-0x79ba02fc(%rdi)
    2f49:	46 01 53 00          	rex.RX add %r10d,0x0(%rbx)
    2f4d:	04 86                	add    $0x86,%al
    2f4f:	46 b5 46             	rex.RX mov $0x46,%bpl
    2f52:	01 53 04             	add    %edx,0x4(%rbx)
    2f55:	ff 46 91             	incl   -0x6f(%rsi)
    2f58:	47 01 53 00          	rex.RXB add %r10d,0x0(%r11)
    2f5c:	04 c0                	add    $0xc0,%al
    2f5e:	46 eb 46             	rex.RX jmp 2fa7 <_license+0xbc2>
    2f61:	02 30                	add    (%rax),%dh
    2f63:	9f                   	lahf
    2f64:	04 eb                	add    $0xeb,%al
    2f66:	46 f4                	rex.RX hlt
    2f68:	46 01 50 00          	rex.RX add %r10d,0x0(%rax)
    2f6c:	04 f4                	add    $0xf4,%al
    2f6e:	46 fd                	rex.RX std
    2f70:	46 01 50 00          	rex.RX add %r10d,0x0(%rax)
    2f74:	04 e0                	add    $0xe0,%al
    2f76:	47 e5 47             	rex.RXB in $0x47,%eax
    2f79:	01 5f 00             	add    %ebx,0x0(%rdi)

Disassembly of section .debug_abbrev:

0000000000000000 <.debug_abbrev>:
  void* data = (void*)(long)ctx->data;
   0:	01 11                	add    %edx,(%rcx)
   2:	01 25 25 13 05 03    	add    %esp,0x3051325(%rip)        # 305132d <_license+0x304ef48>
   8:	25 72 17 10 17       	and    $0x17101772,%eax
   d:	1b 25 11 1b 12 06    	sbb    0x6121b11(%rip),%esp        # 6121b24 <_license+0x611f73f>
  13:	73 17                	jae    2c <balancer_ingress+0x2c>
  15:	74 17                	je     2e <balancer_ingress+0x2e>
  17:	8c 01                	mov    %es,(%rcx)
  void* data_end = (void*)(long)ctx->data_end;
  19:	17                   	(bad)
  1a:	00 00                	add    %al,(%rax)
  if (data + nh_off > data_end) {
  1c:	02 24 00             	add    (%rax,%rax,1),%ah
  1f:	03 26                	add    (%rsi),%esp
  21:	3e 0b 0b             	ds or  (%rbx),%ecx
  24:	0b 00                	or     (%rax),%eax
  26:	00 03                	add    %al,(%rbx)
  28:	34 00                	xor    $0x0,%al
  2a:	03 25 49 13 3f 19    	add    0x193f1349(%rip),%esp        # 193f1379 <_license+0x193eef94>
  30:	3a 0b                	cmp    (%rbx),%cl
  eth_proto = eth->h_proto;
  32:	3b 05 02 18 00 00    	cmp    0x1802(%rip),%eax        # 183a <balancer_ingress+0x183a>
  if (eth_proto == BE_ETH_P_IP) {
  38:	04 01                	add    $0x1,%al
  3a:	01 49 13             	add    %ecx,0x13(%rcx)
  3d:	00 00                	add    %al,(%rax)
  3f:	05 21 00 49 13       	add    $0x13490021,%eax
  44:	37                   	(bad)
  45:	0b 00                	or     (%rax),%eax
  47:	00 06                	add    %al,(%rsi)
  49:	24 00                	and    $0x0,%al
  4b:	03 25 3e 0b 0b 0b    	add    0xb0b0b3e(%rip),%esp        # b0b0b8f <_license+0xb0ae7aa>
  struct packet_description pckt = {};
  51:	00 00                	add    %al,(%rax)
  53:	07                   	(bad)
  54:	24 00                	and    $0x0,%al
  56:	03 25 0b 0b 3e 0b    	add    0xb3e0b0b(%rip),%esp        # b3e0b67 <_license+0xb3de782>
  5c:	00 00                	add    %al,(%rax)
  5e:	08 34 00             	or     %dh,(%rax,%rax,1)
  61:	03 25 49 13 3f 19    	add    0x193f1349(%rip),%esp        # 193f13b0 <_license+0x193eefcb>
  67:	3a 0b                	cmp    (%rbx),%cl
  69:	3b 0b                	cmp    (%rbx),%ecx
  6b:	02 18                	add    (%rax),%bl
  6d:	00 00                	add    %al,(%rax)
  6f:	09 13                	or     %edx,(%rbx)
  71:	01 0b                	add    %ecx,(%rbx)
  73:	0b 3a                	or     (%rdx),%edi
  75:	0b 3b                	or     (%rbx),%edi
  77:	0b 00                	or     (%rax),%eax
  79:	00 0a                	add    %cl,(%rdx)
  7b:	0d 00 03 25 49       	or     $0x49250300,%eax
  80:	13 3a                	adc    (%rdx),%edi
  82:	0b 3b                	or     (%rbx),%edi
  84:	0b 38                	or     (%rax),%edi
  struct vip_definition vip = {};
  86:	0b 00                	or     (%rax),%eax
  88:	00 0b                	add    %cl,(%rbx)
  8a:	0f 00 49 13          	str    0x13(%rcx)
  8e:	00 00                	add    %al,(%rax)
  90:	0c 16                	or     $0x16,%al
  92:	00 49 13             	add    %cl,0x13(%rcx)
  95:	03 25 3a 0b 3b 0b    	add    0xb3b0b3a(%rip),%esp        # b3b0bd5 <_license+0xb3ae7f0>
  9b:	00 00                	add    %al,(%rax)
  9d:	0d 13 01 03 25       	or     $0x25030113,%eax
    if (iph + 1 > data_end) {
  a2:	0b 0b                	or     (%rbx),%ecx
  a4:	3a 0b                	cmp    (%rbx),%cl
  a6:	3b 0b                	cmp    (%rbx),%ecx
  a8:	00 00                	add    %al,(%rax)
  aa:	0e                   	(bad)
  ab:	0d 00 49 13 3a       	or     $0x3a134900,%eax
    if (iph->ihl != 5) {
  b0:	0b 3b                	or     (%rbx),%edi
  b2:	0b 38                	or     (%rax),%edi
  b4:	0b 00                	or     (%rax),%eax
  b6:	00 0f                	add    %cl,(%rdi)
  b8:	17                   	(bad)
    pckt->tos = iph->tos;
  b9:	01 0b                	add    %ecx,(%rbx)
  bb:	0b 3a                	or     (%rdx),%edi
  bd:	0b 3b                	or     (%rbx),%edi
  bf:	0b 00                	or     (%rax),%eax
    *protocol = iph->protocol;
  c1:	00 10                	add    %dl,(%rax)
    pckt->flow.proto = *protocol;
  c3:	21 00                	and    %eax,(%rax)
  c5:	49 13 37             	adc    (%r15),%rsi
    if (iph->frag_off & PCKT_FRAGMENTED) {
  c8:	05 00 00 11 21       	add    $0x21110000,%eax
  cd:	00 49 13             	add    %cl,0x13(%rcx)
  d0:	00 00                	add    %al,(%rax)
  d2:	12 21                	adc    (%rcx),%ah
  d4:	00 49 13             	add    %cl,0x13(%rcx)
  d7:	37                   	(bad)
  d8:	06                   	(bad)
  d9:	00 00                	add    %al,(%rax)
    if (*protocol == IPPROTO_ICMP) {
  db:	13 34 00             	adc    (%rax,%rax,1),%esi
  de:	03 25 49 13 3a 0b    	add    0xb3a1349(%rip),%esp        # b3a142d <_license+0xb39f048>
  if (icmp_hdr + 1 > data_end) {
  e4:	3b 0b                	cmp    (%rbx),%ecx
  e6:	00 00                	add    %al,(%rax)
  e8:	14 15                	adc    $0x15,%al
  ea:	01 49 13             	add    %ecx,0x13(%rcx)
  ed:	27                   	(bad)
  ee:	19 00                	sbb    %eax,(%rax)
  if (icmp_hdr->type == ICMP_ECHO) {
  f0:	00 15 05 00 49 13    	add    %dl,0x13490005(%rip)        # 134900fb <_license+0x1348dd16>
  f6:	00 00                	add    %al,(%rax)
  f8:	16                   	(bad)
  f9:	0f 00 00             	sldt   (%rax)
  fc:	00 17                	add    %dl,(%rdi)
  fe:	15 00 49 13 27       	adc    $0x27134900,%eax
 103:	19 00                	sbb    %eax,(%rax)
 105:	00 18                	add    %bl,(%rax)
 107:	04 01                	add    $0x1,%al
 109:	49 13 03             	adc    (%r11),%rax
 10c:	25 0b 0b 3a 0b       	and    $0xb3a0b0b,%eax
  icmp_hdr->type = ICMP_ECHOREPLY;
 111:	3b 05 00 00 19 28    	cmp    0x28190000(%rip),%eax        # 28190117 <_license+0x2818dd32>
  iph->ttl = DEFAULT_TTL;
 117:	00 03                	add    %al,(%rbx)
 119:	25 1c 0f 00 00       	and    $0xf1c,%eax
  tmp_addr = iph->daddr;
 11e:	1a 04 01             	sbb    (%rcx,%rax,1),%al
  iph->daddr = iph->saddr;
 121:	49 13 0b             	adc    (%r11),%rcx
  iph->saddr = tmp_addr;
 124:	0b 3a                	or     (%rdx),%edi
 126:	0b 3b                	or     (%rbx),%edi
 128:	0b 00                	or     (%rax),%eax
 12a:	00 1b                	add    %bl,(%rbx)
 12c:	0d 00 03 25 49       	or     $0x49250300,%eax
 131:	13 3a                	adc    (%rdx),%edi
 133:	0b 3b                	or     (%rbx),%edi
 135:	0b 0b                	or     (%rbx),%ecx
 137:	0b 0d 0b 0c 0b 38    	or     0x380b0c0b(%rip),%ecx        # 380b0d48 <_license+0x380ae963>
 13d:	0b 00                	or     (%rax),%eax
 13f:	00 1c 2e             	add    %bl,(%rsi,%rbp,1)
 142:	01 03                	add    %eax,(%rbx)
 144:	25 3a 0b 3b 05       	and    $0x53b0b3a,%eax
 149:	27                   	(bad)
 14a:	19 49 13             	sbb    %ecx,0x13(%rcx)
 14d:	20 21                	and    %ah,(%rcx)
 14f:	01 00                	add    %eax,(%rax)
 151:	00 1d 05 00 03 25    	add    %bl,0x25030005(%rip)        # 2503015c <_license+0x2502dd77>
 157:	3a 0b                	cmp    (%rbx),%cl
 159:	3b 05 49 13 00 00    	cmp    0x1349(%rip),%eax        # 14a8 <balancer_ingress+0x14a8>
  struct packet_description pckt = {};
 15f:	1e                   	(bad)
 160:	34 00                	xor    $0x0,%al
 162:	03 25 3a 0b 3b 05    	add    0x53b0b3a(%rip),%esp        # 53b0ca2 <_license+0x53ae8bd>
 168:	49 13 00             	adc    (%r8),%rax
 16b:	00 1f                	add    %bl,(%rdi)
 16d:	0b 01                	or     (%rcx),%eax
 16f:	00 00                	add    %al,(%rax)
 171:	20 13                	and    %dl,(%rbx)
 173:	01 03                	add    %eax,(%rbx)
 175:	25 0b 0b 3a 0b       	and    $0xb3a0b0b,%eax
 17a:	3b 05 00 00 21 0d    	cmp    0xd210000(%rip),%eax        # d210180 <_license+0xd20dd9b>
 180:	00 03                	add    %al,(%rbx)
 182:	25 49 13 3a 0b       	and    $0xb3a1349,%eax
 187:	3b 05 38 0b 00 00    	cmp    0xb38(%rip),%eax        # cc5 <balancer_ingress+0xcc5>
 18d:	22 13                	and    (%rbx),%dl
 18f:	00 03                	add    %al,(%rbx)
 191:	25 3c 19 00 00       	and    $0x193c,%eax
  struct vip_definition vip = {};
 196:	23 26                	and    (%rsi),%esp
 198:	00 49 13             	add    %cl,0x13(%rcx)
 19b:	00 00                	add    %al,(%rax)
 19d:	24 2e                	and    $0x2e,%al
 19f:	01 03                	add    %eax,(%rbx)
 1a1:	25 3a 0b 3b 0b       	and    $0xb3b0b3a,%eax
 1a6:	27                   	(bad)
 1a7:	19 49 13             	sbb    %ecx,0x13(%rcx)
 1aa:	20 21                	and    %ah,(%rcx)
 1ac:	01 00                	add    %eax,(%rax)
 1ae:	00 25 05 00 03 25    	add    %ah,0x25030005(%rip)        # 250301b9 <_license+0x2502ddd4>
    if (ip6h + 1 > data_end) {
 1b4:	3a 0b                	cmp    (%rbx),%cl
 1b6:	3b 0b                	cmp    (%rbx),%ecx
 1b8:	49 13 00             	adc    (%r8),%rax
 1bb:	00 26                	add    %ah,(%rsi)
    *protocol = ip6h->nexthdr;
 1bd:	34 00                	xor    $0x0,%al
    pckt->flow.proto = *protocol;
 1bf:	03 25 3a 0b 3b 0b    	add    0xb3b0b3a(%rip),%esp        # b3b0cff <_license+0xb3ae91a>
    pckt->tos = (ip6h->priority << 4) & 0xF0;
 1c5:	49 13 00             	adc    (%r8),%rax
 1c8:	00 27                	add    %ah,(%rdi)
 1ca:	2e 01 03             	cs add %eax,(%rbx)
    pckt->tos = pckt->tos | ((ip6h->flow_lbl[0] >> 4) & 0x0F);
 1cd:	25 3a 0b 3b 0b       	and    $0xb3b0b3a,%eax
 1d2:	27                   	(bad)
 1d3:	19 20                	sbb    %esp,(%rax)
 1d5:	21 01                	and    %eax,(%rcx)
 1d7:	00 00                	add    %al,(%rax)
    if (*protocol == IPPROTO_FRAGMENT) {
 1d9:	28 34 00             	sub    %dh,(%rax,%rax,1)
 1dc:	03 26                	add    (%rsi),%esp
 1de:	3a 0b                	cmp    (%rbx),%cl
 1e0:	3b 0b                	cmp    (%rbx),%ecx
 1e2:	49 13 00             	adc    (%r8),%rax
 1e5:	00 29                	add    %ch,(%rcx)
 1e7:	13 01                	adc    (%rcx),%eax
 1e9:	03 26                	add    (%rsi),%esp
 1eb:	0b 0b                	or     (%rbx),%ecx
  if (icmp_hdr + 1 > data_end) {
 1ed:	3a 0b                	cmp    (%rbx),%cl
 1ef:	3b 0b                	cmp    (%rbx),%ecx
 1f1:	00 00                	add    %al,(%rax)
 1f3:	2a 0d 00 03 26 49    	sub    0x49260300(%rip),%cl        # 492604f9 <_license+0x4925e114>
 1f9:	13 3a                	adc    (%rdx),%edi
  if (icmp_hdr->icmp6_type == ICMPV6_ECHO_REQUEST) {
 1fb:	0b 3b                	or     (%rbx),%edi
 1fd:	0b 0b                	or     (%rbx),%ecx
 1ff:	0b 0d 0b 0c 0b 38    	or     0x380b0c0b(%rip),%ecx        # 380b0e10 <_license+0x380aea2b>
 205:	0b 00                	or     (%rax),%eax
 207:	00 2b                	add    %ch,(%rbx)
 209:	0d 00 03 26 49       	or     $0x49260300,%eax
 20e:	13 3a                	adc    (%rdx),%edi
 210:	0b 3b                	or     (%rbx),%edi
 212:	0b 38                	or     (%rax),%edi
 214:	0b 00                	or     (%rax),%eax
 216:	00 2c 2e             	add    %ch,(%rsi,%rbp,1)
 219:	01 03                	add    %eax,(%rbx)
 21b:	26 3a 0b             	es cmp (%rbx),%cl
 21e:	3b 0b                	cmp    (%rbx),%ecx
 220:	27                   	(bad)
 221:	19 49 13             	sbb    %ecx,0x13(%rcx)
 224:	20 21                	and    %ah,(%rcx)
 226:	01 00                	add    %eax,(%rax)
 228:	00 2d 05 00 03 26    	add    %ch,0x26030005(%rip)        # 26030233 <_license+0x2602de4e>
 22e:	3a 0b                	cmp    (%rbx),%cl
 230:	3b 0b                	cmp    (%rbx),%ecx
 232:	49 13 00             	adc    (%r8),%rax
 235:	00 2e                	add    %ch,(%rsi)
 237:	2e 01 03             	cs add %eax,(%rbx)
 23a:	26 3a 0b             	es cmp (%rbx),%cl
 23d:	3b 05 27 19 49 13    	cmp    0x13491927(%rip),%eax        # 13491b6a <_license+0x1348f785>
 243:	20 21                	and    %ah,(%rcx)
 245:	01 00                	add    %eax,(%rax)
 247:	00 2f                	add    %ch,(%rdi)
 249:	34 00                	xor    $0x0,%al
 24b:	03 26                	add    (%rsi),%esp
 24d:	3a 0b                	cmp    (%rbx),%cl
 24f:	3b 05 49 13 00 00    	cmp    0x1349(%rip),%eax        # 159e <balancer_ingress+0x159e>
 255:	30 2e                	xor    %ch,(%rsi)
 257:	01 03                	add    %eax,(%rbx)
 259:	26 3a 0b             	es cmp (%rbx),%cl
 25c:	3b 0b                	cmp    (%rbx),%ecx
 25e:	27                   	(bad)
 25f:	19 20                	sbb    %esp,(%rax)
 261:	21 01                	and    %eax,(%rcx)
 263:	00 00                	add    %al,(%rax)
 265:	31 2e                	xor    %ebp,(%rsi)
 267:	01 03                	add    %eax,(%rbx)
 269:	26 3a 0b             	es cmp (%rbx),%cl
 26c:	3b 05 27 19 20 21    	cmp    0x21201927(%rip),%eax        # 21201b99 <_license+0x211ff7b4>
 272:	01 00                	add    %eax,(%rax)
 274:	00 32                	add    %dh,(%rdx)
 276:	05 00 03 26 3a       	add    $0x3a260300,%eax
 27b:	0b 3b                	or     (%rbx),%edi
 27d:	05 49 13 00 00       	add    $0x1349,%eax
 282:	33 2e                	xor    (%rsi),%ebp
 284:	01 03                	add    %eax,(%rbx)
 286:	26 3a 0b             	es cmp (%rbx),%cl
      memcpy(pckt->flow.srcv6, ip6h->saddr.s6_addr32, 16);
 289:	3b 0b                	cmp    (%rbx),%ecx
 28b:	20 21                	and    %ah,(%rcx)
 28d:	01 00                	add    %eax,(%rax)
 28f:	00 34 26             	add    %dh,(%rsi,%riz,1)
 292:	00 00                	add    %al,(%rax)
 294:	00 35 2e 01 11 1b    	add    %dh,0x1b11012e(%rip)        # 1b1103c8 <_license+0x1b10dfe3>
      memcpy(pckt->flow.dstv6, ip6h->daddr.s6_addr32, 16);
 29a:	12 06                	adc    (%rsi),%al
 29c:	40 18 7a 19          	sbb    %dil,0x19(%rdx)
 2a0:	03 26                	add    (%rsi),%esp
 2a2:	3a 0b                	cmp    (%rbx),%cl
 2a4:	3b 05 27 19 49 13    	cmp    0x13491927(%rip),%eax        # 13491bd1 <_license+0x1348f7ec>
 2aa:	3f                   	(bad)
 2ab:	19 00                	sbb    %eax,(%rax)
  if (protocol == IPPROTO_ICMPV6) {
 2ad:	00 36                	add    %dh,(%rsi)
 2af:	05 00 02 22 03       	add    $0x3220200,%eax
  if (icmp_hdr + 1 > data_end) {
 2b4:	26 3a 0b             	es cmp (%rbx),%cl
 2b7:	3b 05 49 13 00 00    	cmp    0x1349(%rip),%eax        # 1606 <balancer_ingress+0x1606>
 2bd:	37                   	(bad)
 2be:	34 00                	xor    $0x0,%al
 2c0:	02 22                	add    (%rdx),%ah
  if (icmp_hdr->type == ICMP_ECHO) {
 2c2:	03 25 3a 0b 3b 05    	add    0x53b0b3a(%rip),%esp        # 53b0e02 <_license+0x53aea1d>
 2c8:	49 13 00             	adc    (%r8),%rax
 2cb:	00 38                	add    %bh,(%rax)
 2cd:	34 00                	xor    $0x0,%al
 2cf:	02 22                	add    (%rdx),%ah
 2d1:	03 26                	add    (%rsi),%esp
 2d3:	3a 0b                	cmp    (%rbx),%cl
 2d5:	3b 05 49 13 00 00    	cmp    0x1349(%rip),%eax        # 1624 <balancer_ingress+0x1624>
  if ((data + sizeof(struct ethhdr) + sizeof(struct iphdr) +
 2db:	39 1d 01 31 13 55    	cmp    %ebx,0x55133101(%rip)        # 551333e2 <_license+0x55130ffd>
 2e1:	23 58 0b             	and    0xb(%rax),%ebx
       sizeof(struct icmphdr)) > data_end) {
 2e4:	59                   	pop    %rcx
 2e5:	05 57 0b 00 00       	add    $0xb57,%eax
  if ((data + sizeof(struct ethhdr) + sizeof(struct iphdr) +
 2ea:	3a 05 00 02 22 31    	cmp    0x31220200(%rip),%al        # 312204f0 <_license+0x3121e10b>
  icmp_hdr->type = ICMP_ECHOREPLY;
 2f0:	13 00                	adc    (%rax),%eax
  icmp_hdr->checksum += 0x0008;
 2f2:	00 3b                	add    %bh,(%rbx)
 2f4:	34 00                	xor    $0x0,%al
  iph->ttl = DEFAULT_TTL;
 2f6:	02 18                	add    (%rax),%bl
 2f8:	31 13                	xor    %edx,(%rbx)
  iph->daddr = iph->saddr;
 2fa:	00 00                	add    %al,(%rax)
 2fc:	3c 34                	cmp    $0x34,%al
  tmp_addr = iph->daddr;
 2fe:	00 02                	add    %al,(%rdx)
  iph->daddr = iph->saddr;
 300:	22 31                	and    (%rcx),%dh
 302:	13 00                	adc    (%rax),%eax
  iph->saddr = tmp_addr;
 304:	00 3d 1d 01 31 13    	add    %bh,0x1331011d(%rip)        # 13310427 <_license+0x1330e042>
 30a:	11 1b                	adc    %ebx,(%rbx)
 30c:	12 06                	adc    (%rsi),%al
 30e:	58                   	pop    %rax
 30f:	0b 59 05             	or     0x5(%rcx),%ebx
 312:	57                   	push   %rdi
 313:	0b 00                	or     (%rax),%eax
 315:	00 3e                	add    %bh,(%rsi)
 317:	05 00 02 18 31       	add    $0x31180200,%eax
 31c:	13 00                	adc    (%rax),%eax
 31e:	00 3f                	add    %bh,(%rdi)
 320:	34 00                	xor    $0x0,%al
 322:	1c 0f                	sbb    $0xf,%al
 324:	31 13                	xor    %edx,(%rbx)
 326:	00 00                	add    %al,(%rax)
 328:	40 1d 01 31 13 11    	rex sbb $0x11133101,%eax
 32e:	1b 12                	sbb    (%rdx),%edx
 330:	06                   	(bad)
 331:	58                   	pop    %rax
 332:	0b 59 0b             	or     0xb(%rcx),%ebx
 335:	57                   	push   %rdi
 336:	0b 00                	or     (%rax),%eax
 338:	00 41 0b             	add    %al,0xb(%rcx)
 33b:	01 11                	add    %edx,(%rcx)
 33d:	1b 12                	sbb    (%rdx),%edx
 33f:	06                   	(bad)
 340:	00 00                	add    %al,(%rax)
 342:	42 34 00             	rex.X xor $0x0,%al
 345:	1c 0d                	sbb    $0xd,%al
 347:	31 13                	xor    %edx,(%rbx)
 349:	00 00                	add    %al,(%rax)
 34b:	43 0b 01             	rex.XB or (%r9),%eax
 34e:	55                   	push   %rbp
 34f:	23 00                	and    (%rax),%eax
 351:	00 44 05 00          	add    %al,0x0(%rbp,%rax,1)
 355:	1c 0d                	sbb    $0xd,%al
 357:	31 13                	xor    %edx,(%rbx)
 359:	00 00                	add    %al,(%rax)
 35b:	45 34 00             	rex.RB xor $0x0,%al
 35e:	31 13                	xor    %edx,(%rbx)
 360:	00 00                	add    %al,(%rax)
 362:	46 05 00 1c 0f 31    	rex.RX add $0x310f1c00,%eax
 368:	13 00                	adc    (%rax),%eax
 36a:	00 47 1d             	add    %al,0x1d(%rdi)
 36d:	00 31                	add    %dh,(%rcx)
 36f:	13 11                	adc    (%rcx),%edx
 371:	1b 12                	sbb    (%rdx),%edx
 373:	06                   	(bad)
 374:	58                   	pop    %rax
 375:	0b 59 0b             	or     0xb(%rcx),%ebx
 378:	57                   	push   %rdi
 379:	0b 00                	or     (%rax),%eax
 37b:	00 48 1d             	add    %cl,0x1d(%rax)
 37e:	01 31                	add    %esi,(%rcx)
 380:	13 55 23             	adc    0x23(%rbp),%edx
 383:	58                   	pop    %rax
 384:	0b 59 0b             	or     0xb(%rcx),%ebx
 387:	57                   	push   %rdi
 388:	0b 00                	or     (%rax),%eax
 38a:	00 49 48             	add    %cl,0x48(%rcx)
 38d:	00 83 01 18 7d 1b    	add    %al,0x1b7d1801(%rbx)
 393:	00 00                	add    %al,(%rax)
	...

Disassembly of section .debug_info:

0000000000000000 <.debug_info>:
  void* data = (void*)(long)ctx->data;
       0:	cf                   	iret
       1:	43 00 00             	rex.XB add %al,(%r8)
       4:	05 00 01 08 00       	add    $0x80100,%eax
       9:	00 00                	add    %al,(%rax)
       b:	00 01                	add    %al,(%rcx)
       d:	00 0c 00             	add    %cl,(%rax,%rax,1)
      10:	01 08                	add    %ecx,(%rax)
      12:	00 00                	add    %al,(%rax)
      14:	00 00                	add    %al,(%rax)
      16:	00 00                	add    %al,(%rax)
  void* data_end = (void*)(long)ctx->data_end;
      18:	00 02                	add    %al,(%rdx)
      1a:	14 e5                	adc    $0xe5,%al
  if (data + nh_off > data_end) {
      1c:	23 00                	and    (%rax),%eax
      1e:	00 08                	add    %cl,(%rax)
      20:	00 00                	add    %al,(%rax)
      22:	00 0c 00             	add    %cl,(%rax,%rax,1)
      25:	00 00                	add    %al,(%rax)
      27:	0c 00                	or     $0x0,%al
      29:	00 00                	add    %al,(%rax)
      2b:	02 75 01             	add    0x1(%rbp),%dh
      2e:	07                   	(bad)
      2f:	02 02                	add    (%rdx),%al
  eth_proto = eth->h_proto;
      31:	74 01                	je     34 <balancer_ingress+0x34>
      33:	07                   	(bad)
      34:	04 02                	add    $0x2,%al
  if (eth_proto == BE_ETH_P_IP) {
      36:	73 01                	jae    39 <balancer_ingress+0x39>
      38:	07                   	(bad)
      39:	08 02                	or     %al,(%rdx)
      3b:	72 01                	jb     3e <balancer_ingress+0x3e>
      3d:	07                   	(bad)
      3e:	01 02                	add    %eax,(%rdx)
      40:	71 01                	jno    43 <balancer_ingress+0x43>
      42:	07                   	(bad)
      43:	01 03                	add    %eax,(%rbx)
      45:	03 50 00             	add    0x0(%rax),%edx
      48:	00 00                	add    %al,(%rax)
      4a:	00 4a 04             	add    %cl,0x4(%rdx)
      4d:	02 a1 00 04 5c 00    	add    0x5c0400(%rcx),%ah
  struct packet_description pckt = {};
      53:	00 00                	add    %al,(%rax)
      55:	05 60 00 00 00       	add    $0x60,%eax
      5a:	04 00                	add    $0x0,%al
      5c:	06                   	(bad)
      5d:	04 06                	add    $0x6,%al
      5f:	01 07                	add    %eax,(%rdi)
      61:	05 08 07 08 06       	add    $0x6080708,%eax
      66:	6f                   	outsl  %ds:(%rsi),(%dx)
      67:	00 00                	add    %al,(%rax)
      69:	00 01                	add    %al,(%rcx)
      6b:	29 02                	sub    %eax,(%rdx)
      6d:	a1 01 09 28 01 23 0a 	movabs 0xa1070a2301280901,%eax
      74:	07 a1 
      76:	00 00                	add    %al,(%rax)
      78:	00 01                	add    %al,(%rcx)
      7a:	24 00                	and    $0x0,%al
      7c:	0a 09                	or     (%rcx),%cl
      7e:	b6 00                	mov    $0x0,%dh
      80:	00 00                	add    %al,(%rax)
      82:	01 25 08 0a 0c c7    	add    %esp,-0x38f3f5f8(%rip)        # ffffffffc70c0a90 <ch_rings+0x36ffa483ba90>
  struct vip_definition vip = {};
      88:	00 00                	add    %al,(%rax)
      8a:	00 01                	add    %al,(%rcx)
      8c:	26 10 0a             	es adc %cl,(%rdx)
      8f:	14 1e                	adc    $0x1e,%al
      91:	01 00                	add    %eax,(%rax)
      93:	00 01                	add    %al,(%rcx)
      95:	27                   	(bad)
      96:	18 0a                	sbb    %cl,(%rdx)
      98:	15 2f 01 00 00       	adc    $0x12f,%eax
      9d:	01 28                	add    %ebp,(%rax)
      9f:	20 00                	and    %al,(%rax)
    if (iph + 1 > data_end) {
      a1:	0b a6 00 00 00 04    	or     0x4000000(%rsi),%esp
      a7:	b2 00                	mov    $0x0,%dl
      a9:	00 00                	add    %al,(%rax)
      ab:	05 60 00 00 00       	add    $0x60,%eax
    if (iph->ihl != 5) {
      b0:	02 00                	add    (%rax),%al
      b2:	06                   	(bad)
      b3:	08 05 04 0b bb 00    	or     %al,0xbb0b04(%rip)        # bb0bbd <_license+0xbae7d8>
    pckt->tos = iph->tos;
      b9:	00 00                	add    %al,(%rax)
      bb:	0c c3                	or     $0xc3,%al
      bd:	00 00                	add    %al,(%rax)
      bf:	00 0b                	add    %cl,(%rbx)
    *protocol = iph->protocol;
      c1:	02 1b                	add    (%rbx),%bl
    pckt->flow.proto = *protocol;
      c3:	06                   	(bad)
      c4:	0a 07                	or     (%rdi),%al
      c6:	04 0b                	add    $0xb,%al
    if (iph->frag_off & PCKT_FRAGMENTED) {
      c8:	cc                   	int3
      c9:	00 00                	add    %al,(%rax)
      cb:	00 0d 13 08 03 35    	add    %cl,0x35030813(%rip)        # 350308e4 <_license+0x3502e4ff>
      d1:	0e                   	(bad)
      d2:	d9 00                	flds   (%rax)
      d4:	00 00                	add    %al,(%rax)
      d6:	03 36                	add    (%rsi),%esi
      d8:	00 0f                	add    %cl,(%rdi)
      da:	08 03                	or     %al,(%rbx)
    if (*protocol == IPPROTO_ICMP) {
      dc:	36 0a 0c fa          	ss or  (%rdx,%rdi,8),%cl
      e0:	00 00                	add    %al,(%rax)
      e2:	00 03                	add    %al,(%rbx)
  if (icmp_hdr + 1 > data_end) {
      e4:	37                   	(bad)
      e5:	00 0a                	add    %cl,(%rdx)
      e7:	0f bb 00             	btc    %eax,(%rax)
      ea:	00 00                	add    %al,(%rax)
      ec:	03 38                	add    (%rax),%edi
      ee:	00 0a                	add    %cl,(%rdx)
  if (icmp_hdr->type == ICMP_ECHO) {
      f0:	10 06                	adc    %al,(%rsi)
      f2:	01 00                	add    %eax,(%rax)
      f4:	00 03                	add    %al,(%rbx)
      f6:	39 00                	cmp    %eax,(%rax)
      f8:	00 00                	add    %al,(%rax)
      fa:	0c 02                	or     $0x2,%al
      fc:	01 00                	add    %eax,(%rax)
      fe:	00 0e                	add    %cl,(%rsi)
     100:	02 1f                	add    (%rdi),%bl
     102:	06                   	(bad)
     103:	0d 07 08 04 12       	or     $0x12040807,%eax
     108:	01 00                	add    %eax,(%rax)
     10a:	00 05 60 00 00 00    	add    %al,0x60(%rip)        # 170 <balancer_ingress+0x170>
  icmp_hdr->type = ICMP_ECHOREPLY;
     110:	06                   	(bad)
     111:	00 0c 1a             	add    %cl,(%rdx,%rbx,1)
  icmp_hdr->checksum += 0x0008;
     114:	01 00                	add    %eax,(%rax)
     116:	00 12                	add    %dl,(%rdx)
  iph->ttl = DEFAULT_TTL;
     118:	02 15 06 11 08 01    	add    0x1081106(%rip),%dl        # 1081224 <_license+0x107ee3f>
  tmp_addr = iph->daddr;
     11e:	0b 23                	or     (%rbx),%esp
     120:	01 00                	add    %eax,(%rax)
  iph->daddr = iph->saddr;
     122:	00 04 b2             	add    %al,(%rdx,%rsi,4)
  iph->saddr = tmp_addr;
     125:	00 00                	add    %al,(%rax)
     127:	00 05 60 00 00 00    	add    %al,0x60(%rip)        # 18d <balancer_ingress+0x18d>
     12d:	10 00                	adc    %al,(%rax)
     12f:	0b 34 01             	or     (%rcx,%rax,1),%esi
     132:	00 00                	add    %al,(%rax)
     134:	04 b2                	add    $0xb2,%al
     136:	00 00                	add    %al,(%rax)
     138:	00 05 60 00 00 00    	add    %al,0x60(%rip)        # 19e <balancer_ingress+0x19e>
     13e:	00 00                	add    %al,(%rax)
     140:	08 16                	or     %dl,(%rsi)
     142:	4b 01 00             	rex.WXB add %rax,(%r8)
     145:	00 01                	add    %al,(%rcx)
     147:	3e 02 a1 02 09 28 01 	ds add 0x1280902(%rcx),%ah
     14e:	38 0a                	cmp    %cl,(%rdx)
     150:	07                   	(bad)
     151:	7d 01                	jge    154 <balancer_ingress+0x154>
     153:	00 00                	add    %al,(%rax)
     155:	01 39                	add    %edi,(%rcx)
     157:	00 0a                	add    %cl,(%rdx)
     159:	09 8e 01 00 00 01    	or     %ecx,0x1000001(%rsi)
  struct packet_description pckt = {};
     15f:	3a 08                	cmp    (%rax),%cl
     161:	0a 0c b6             	or     (%rsi,%rsi,4),%cl
     164:	00 00                	add    %al,(%rax)
     166:	00 01                	add    %al,(%rcx)
     168:	3b 10                	cmp    (%rax),%edx
     16a:	0a 14 cc             	or     (%rsp,%rcx,8),%dl
     16d:	01 00                	add    %eax,(%rax)
     16f:	00 01                	add    %al,(%rcx)
     171:	3c 18                	cmp    $0x18,%al
     173:	0a 15 2f 01 00 00    	or     0x12f(%rip),%dl        # 2a8 <balancer_ingress+0x2a8>
     179:	01 3d 20 00 0b 82    	add    %edi,-0x7df4ffe0(%rip)        # ffffffff820b019f <ch_rings+0x36ff5f82b19f>
     17f:	01 00                	add    %eax,(%rax)
     181:	00 04 b2             	add    %al,(%rdx,%rsi,4)
     184:	00 00                	add    %al,(%rax)
     186:	00 05 60 00 00 00    	add    %al,0x60(%rip)        # 1ec <balancer_ingress+0x1ec>
     18c:	01 00                	add    %eax,(%rax)
     18e:	0b 93 01 00 00 0d    	or     0xd000001(%rbx),%edx
     194:	1a 10                	sbb    (%rax),%dl
  struct vip_definition vip = {};
     196:	03 6e 0e             	add    0xe(%rsi),%ebp
     199:	a0 01 00 00 03 6f 00 	movabs 0x100f006f03000001,%al
     1a0:	0f 10 
     1a2:	03 6f 0a             	add    0xa(%rdi),%ebp
     1a5:	17                   	(bad)
     1a6:	b8 01 00 00 03       	mov    $0x3000001,%eax
     1ab:	70 00                	jo     1ad <balancer_ingress+0x1ad>
     1ad:	0a 19                	or     (%rcx),%bl
    if (ip6h + 1 > data_end) {
     1af:	c0 01 00             	rolb   $0x0,(%rcx)
     1b2:	00 03                	add    %al,(%rbx)
     1b4:	71 00                	jno    1b6 <balancer_ingress+0x1b6>
     1b6:	00 00                	add    %al,(%rax)
     1b8:	0c bb                	or     $0xbb,%al
     1ba:	00 00                	add    %al,(%rax)
    *protocol = ip6h->nexthdr;
     1bc:	00 18                	add    %bl,(%rax)
     1be:	04 22                	add    $0x22,%al
    pckt->flow.proto = *protocol;
     1c0:	04 b8                	add    $0xb8,%al
     1c2:	01 00                	add    %eax,(%rax)
    pckt->tos = (ip6h->priority << 4) & 0xF0;
     1c4:	00 05 60 00 00 00    	add    %al,0x60(%rip)        # 22a <balancer_ingress+0x22a>
     1ca:	04 00                	add    $0x0,%al
     1cc:	0b d1                	or     %ecx,%edx
    pckt->tos = pckt->tos | ((ip6h->flow_lbl[0] >> 4) & 0x0F);
     1ce:	01 00                	add    %eax,(%rax)
     1d0:	00 04 b2             	add    %al,(%rdx,%rsi,4)
     1d3:	00 00                	add    %al,(%rax)
     1d5:	00 10                	add    %dl,(%rax)
     1d7:	60                   	(bad)
     1d8:	00 00                	add    %al,(%rax)
    if (*protocol == IPPROTO_FRAGMENT) {
     1da:	00 00                	add    %al,(%rax)
     1dc:	02 00                	add    (%rax),%al
     1de:	08 1b                	or     %bl,(%rbx)
     1e0:	e9 01 00 00 01       	jmp    10001e6 <_license+0xffde01>
     1e5:	45 02 a1 03 09 20 01 	add    0x1200903(%r9),%r12b
     1ec:	40 0a 07             	rex or (%rdi),%al
  if (icmp_hdr + 1 > data_end) {
     1ef:	12 02                	adc    (%rdx),%al
     1f1:	00 00                	add    %al,(%rax)
     1f3:	01 41 00             	add    %eax,0x0(%rcx)
     1f6:	0a 09                	or     (%rcx),%cl
     1f8:	b6 00                	mov    $0x0,%dh
  if (icmp_hdr->icmp6_type == ICMPV6_ECHO_REQUEST) {
     1fa:	00 00                	add    %al,(%rax)
     1fc:	01 42 08             	add    %eax,0x8(%rdx)
     1ff:	0a 0c b6             	or     (%rsi,%rsi,4),%cl
     202:	00 00                	add    %al,(%rax)
     204:	00 01                	add    %al,(%rcx)
     206:	43 10 0a             	rex.XB adc %cl,(%r10)
     209:	14 7d                	adc    $0x7d,%al
     20b:	01 00                	add    %eax,(%rax)
     20d:	00 01                	add    %al,(%rcx)
     20f:	44 18 00             	sbb    %r8b,(%rax)
     212:	0b 17                	or     (%rdi),%edx
     214:	02 00                	add    (%rax),%al
     216:	00 04 b2             	add    %al,(%rdx,%rsi,4)
     219:	00 00                	add    %al,(%rax)
     21b:	00 05 60 00 00 00    	add    %al,0x60(%rip)        # 281 <balancer_ingress+0x281>
     221:	03 00                	add    (%rax),%eax
     223:	08 1c 2e             	or     %bl,(%rsi,%rbp,1)
     226:	02 00                	add    (%rax),%al
     228:	00 05 26 02 a1 04    	add    %al,0x4a10226(%rip)        # 4a10454 <_license+0x4a0e06f>
     22e:	09 28                	or     %ebp,(%rax)
     230:	05 20 0a 07 7d       	add    $0x7d070a20,%eax
     235:	01 00                	add    %eax,(%rax)
     237:	00 05 21 00 0a 09    	add    %al,0x90a0021(%rip)        # 90a025e <_license+0x909de79>
     23d:	60                   	(bad)
     23e:	02 00                	add    (%rax),%al
     240:	00 05 22 08 0a 0c    	add    %al,0xc0a0822(%rip)        # c0a0a68 <_license+0xc09e683>
     246:	a8 02                	test   $0x2,%al
     248:	00 00                	add    %al,(%rax)
     24a:	05 23 10 0a 14       	add    $0x140a1023,%eax
     24f:	cc                   	int3
     250:	01 00                	add    %eax,(%rax)
     252:	00 05 24 18 0a 15    	add    %al,0x150a1824(%rip)        # 150a1a7c <_license+0x1509f697>
     258:	2f                   	(bad)
     259:	01 00                	add    %eax,(%rax)
     25b:	00 05 25 20 00 0b    	add    %al,0xb002025(%rip)        # b002286 <_license+0xafffea1>
     261:	65 02 00             	add    %gs:(%rax),%al
     264:	00 0d 23 14 03 3e    	add    %cl,0x3e031423(%rip)        # 3e03168d <_license+0x3e02f2a8>
     26a:	0e                   	(bad)
     26b:	72 02                	jb     26f <balancer_ingress+0x26f>
     26d:	00 00                	add    %al,(%rax)
     26f:	03 3f                	add    (%rdi),%edi
     271:	00 0f                	add    %cl,(%rdi)
     273:	10 03                	adc    %al,(%rbx)
     275:	3f                   	(bad)
     276:	0a 1d b8 01 00 00    	or     0x1b8(%rip),%bl        # 434 <balancer_ingress+0x434>
     27c:	03 40 00             	add    0x0(%rax),%eax
     27f:	0a 1e                	or     (%rsi),%bl
     281:	c0 01 00             	rolb   $0x0,(%rcx)
     284:	00 03                	add    %al,(%rbx)
     286:	41 00 00             	add    %al,(%r8)
      memcpy(pckt->flow.srcv6, ip6h->saddr.s6_addr32, 16);
     289:	0a 1f                	or     (%rdi),%bl
     28b:	9c                   	pushf
     28c:	02 00                	add    (%rax),%al
     28e:	00 03                	add    %al,(%rbx)
     290:	43 10 0a             	rex.XB adc %cl,(%r10)
     293:	22 12                	and    (%rdx),%dl
     295:	01 00                	add    %eax,(%rax)
     297:	00 03                	add    %al,(%rbx)
     299:	44 12 00             	adc    (%rax),%r8b
      memcpy(pckt->flow.dstv6, ip6h->daddr.s6_addr32, 16);
     29c:	0c a4                	or     $0xa4,%al
     29e:	02 00                	add    (%rax),%al
     2a0:	00 21                	add    %ah,(%rcx)
     2a2:	02 18                	add    (%rax),%bl
     2a4:	06                   	(bad)
     2a5:	20 07                	and    %al,(%rdi)
     2a7:	02 0b                	add    (%rbx),%cl
     2a9:	ad                   	lods   %ds:(%rsi),%eax
     2aa:	02 00                	add    (%rax),%al
  if (protocol == IPPROTO_ICMPV6) {
     2ac:	00 0d 26 08 03 48    	add    %cl,0x48030826(%rip)        # 48030ad8 <_license+0x4802e6f3>
     2b2:	0a 24 bb             	or     (%rbx,%rdi,4),%ah
  if (icmp_hdr + 1 > data_end) {
     2b5:	00 00                	add    %al,(%rax)
     2b7:	00 03                	add    %al,(%rbx)
     2b9:	49 00 0a             	rex.WB add %cl,(%r10)
     2bc:	25 bb 00 00 00       	and    $0xbb,%eax
  if (icmp_hdr->type == ICMP_ECHO) {
     2c1:	03 4a 04             	add    0x4(%rdx),%ecx
     2c4:	00 08                	add    %cl,(%rax)
     2c6:	27                   	(bad)
     2c7:	d0 02                	rolb   (%rdx)
     2c9:	00 00                	add    %al,(%rax)
     2cb:	05 2f 02 a1 05       	add    $0x5a1022f,%eax
     2d0:	09 28                	or     %ebp,(%rax)
     2d2:	05 29 0a 07 02       	add    $0x2070a29,%eax
     2d7:	03 00                	add    (%rax),%eax
     2d9:	00 05 2a 00 0a 09    	add    %al,0x90a002a(%rip)        # 90a0309 <_license+0x909df24>
  if ((data + sizeof(struct ethhdr) + sizeof(struct iphdr) +
     2df:	13 03                	adc    (%rbx),%eax
     2e1:	00 00                	add    %al,(%rax)
     2e3:	05 2b 08 0a 0c       	add    $0xc0a082b,%eax
     2e8:	90                   	nop
     2e9:	03 00                	add    (%rax),%eax
     2eb:	00 05 2c 10 0a 14    	add    %al,0x140a102c(%rip)        # 140a131d <_license+0x1409ef38>
  icmp_hdr->checksum += 0x0008;
     2f1:	ad                   	lods   %ds:(%rsi),%eax
     2f2:	03 00                	add    (%rax),%eax
     2f4:	00 05 2d 18 0a 15    	add    %al,0x150a182d(%rip)        # 150a1b27 <_license+0x1509f742>
  iph->daddr = iph->saddr;
     2fa:	2f                   	(bad)
     2fb:	01 00                	add    %eax,(%rax)
  tmp_addr = iph->daddr;
     2fd:	00 05 2e 20 00 0b    	add    %al,0xb00202e(%rip)        # b002331 <_license+0xaffff4c>
  iph->saddr = tmp_addr;
     303:	07                   	(bad)
     304:	03 00                	add    (%rax),%eax
     306:	00 04 b2             	add    %al,(%rdx,%rsi,4)
     309:	00 00                	add    %al,(%rax)
     30b:	00 05 60 00 00 00    	add    %al,0x60(%rip)        # 371 <balancer_ingress+0x371>
     311:	09 00                	or     %eax,(%rax)
     313:	0b 18                	or     (%rax),%ebx
     315:	03 00                	add    (%rax),%eax
     317:	00 0d 2e 28 03 1a    	add    %cl,0x1a03282e(%rip)        # 1a032b4b <_license+0x1a030766>
     31d:	0e                   	(bad)
     31e:	25 03 00 00 03       	and    $0x3000003,%eax
     323:	1b 00                	sbb    (%rax),%eax
     325:	0f 10 03             	movups (%rbx),%xmm0
     328:	1b 0a                	sbb    (%rdx),%ecx
     32a:	28 b8 01 00 00 03    	sub    %bh,0x3000001(%rax)
     330:	1c 00                	sbb    $0x0,%al
     332:	0a 29                	or     (%rcx),%ch
     334:	c0 01 00             	rolb   $0x0,(%rcx)
     337:	00 03                	add    %al,(%rbx)
     339:	1d 00 00 0e 44       	sbb    $0x440e0000,%eax
     33e:	03 00                	add    (%rax),%eax
     340:	00 03                	add    %al,(%rbx)
     342:	1f                   	(bad)
     343:	10 0f                	adc    %cl,(%rdi)
     345:	10 03                	adc    %al,(%rbx)
     347:	1f                   	(bad)
     348:	0a 2a                	or     (%rdx),%ch
     34a:	b8 01 00 00 03       	mov    $0x3000001,%eax
     34f:	20 00                	and    %al,(%rax)
     351:	0a 2b                	or     (%rbx),%ch
     353:	c0 01 00             	rolb   $0x0,(%rcx)
     356:	00 03                	add    %al,(%rbx)
     358:	21 00                	and    %eax,(%rax)
     35a:	00 0e                	add    %cl,(%rsi)
     35c:	63 03                	movsxd (%rbx),%eax
     35e:	00 00                	add    %al,(%rax)
     360:	03 23                	add    (%rbx),%esp
     362:	20 0f                	and    %cl,(%rdi)
     364:	04 03                	add    $0x3,%al
     366:	23 0a                	and    (%rdx),%ecx
     368:	2c bb                	sub    $0xbb,%al
     36a:	00 00                	add    %al,(%rax)
     36c:	00 03                	add    %al,(%rbx)
     36e:	24 00                	and    $0x0,%al
     370:	0a 2d 84 03 00 00    	or     0x384(%rip),%ch        # 6fa <balancer_ingress+0x6fa>
     376:	03 25 00 00 0a 22    	add    0x220a0000(%rip),%esp        # 220a037c <_license+0x2209df97>
     37c:	12 01                	adc    (%rcx),%al
     37e:	00 00                	add    %al,(%rax)
     380:	03 27                	add    (%rdi),%esp
     382:	24 00                	and    $0x0,%al
     384:	04 9c                	add    $0x9c,%al
     386:	02 00                	add    (%rax),%al
     388:	00 05 60 00 00 00    	add    %al,0x60(%rip)        # 3ee <balancer_ingress+0x3ee>
     38e:	02 00                	add    (%rax),%al
     390:	0b 95 03 00 00 0d    	or     0xd000003(%rbp),%edx
     396:	31 10                	xor    %edx,(%rax)
     398:	03 4e 0a             	add    0xa(%rsi),%ecx
     39b:	2f                   	(bad)
     39c:	bb 00 00 00 03       	mov    $0x3000000,%ebx
     3a1:	4f 00 0a             	rex.WRXB add %r9b,(%r10)
     3a4:	30 fa                	xor    %bh,%dl
     3a6:	00 00                	add    %al,(%rax)
     3a8:	00 03                	add    %al,(%rbx)
     3aa:	50                   	push   %rax
     3ab:	08 00                	or     %al,(%rax)
     3ad:	0b b2 03 00 00 04    	or     0x4000003(%rdx),%esi
     3b3:	b2 00                	mov    $0x0,%dl
     3b5:	00 00                	add    %al,(%rax)
     3b7:	10 60 00             	adc    %ah,0x0(%rax)
     3ba:	00 00                	add    %al,(%rax)
     3bc:	e8 03 00 08 32       	call   320803c4 <_license+0x3207dfdf>
     3c1:	ca 03 00             	lret   $0x3
     3c4:	00 05 40 02 a1 06    	add    %al,0x6a10240(%rip)        # 6a1060a <_license+0x6a0e225>
     3ca:	09 28                	or     %ebp,(%rax)
     3cc:	05 32 0a 07 2e       	add    $0x2e070a32,%eax
     3d1:	04 00                	add    $0x0,%al
     3d3:	00 05 33 00 0a 09    	add    %al,0x90a0033(%rip)        # 90a040c <_license+0x909e027>
     3d9:	b6 00                	mov    $0x0,%dh
     3db:	00 00                	add    %al,(%rax)
     3dd:	05 34 08 0a 0c       	add    $0xc0a0834,%eax
     3e2:	b6 00                	mov    $0x0,%dh
  if (protocol == IPPROTO_IPIP) {
     3e4:	00 00                	add    %al,(%rax)
     3e6:	05 35 10 0a 14       	add    $0x140a1035,%eax
     3eb:	3f                   	(bad)
     3ec:	04 00                	add    $0x0,%al
     3ee:	00 05 36 18 0a 15    	add    %al,0x150a1836(%rip)        # 150a1c2a <_license+0x1509f845>
     3f4:	2f                   	(bad)
     3f5:	01 00                	add    %eax,(%rax)
     3f7:	00 05 37 20 0a 33    	add    %al,0x330a2037(%rip)        # 330a2434 <_license+0x330a004f>
  tcp = data + off;
     3fd:	50                   	push   %rax
     3fe:	04 00                	add    $0x0,%al
  if (is_ipv6) {
     400:	00 05 38 28 09 20    	add    %al,0x20092838(%rip)        # 20092c3e <_license+0x20090859>
  if (tcp + 1 > data_end) {
     406:	05 38 0a 07 02       	add    $0x2070a38,%eax
     40b:	03 00                	add    (%rax),%eax
     40d:	00 05 38 00 0a 09    	add    %al,0x90a0038(%rip)        # 90a044b <_license+0x909e066>
  if (tcp->syn) {
     413:	13 03                	adc    (%rbx),%eax
     415:	00 00                	add    %al,(%rax)
     417:	05 38 08 0a 0c       	add    $0xc0a0838,%eax
     41c:	90                   	nop
    pckt->flags |= F_SYN_SET;
     41d:	03 00                	add    (%rax),%eax
     41f:	00 05 38 10 0a 14    	add    %al,0x140a1038(%rip)        # 140a145d <_license+0x1409f078>
     425:	ad                   	lods   %ds:(%rsi),%eax
      pckt->flow.src = iph->saddr;
     426:	03 00                	add    (%rax),%eax
     428:	00 05 38 18 00 00    	add    %al,0x1838(%rip)        # 1c66 <balancer_ingress+0x1c66>
      pckt->flow.dst = iph->daddr;
     42e:	0b 33                	or     (%rbx),%esi
     430:	04 00                	add    $0x0,%al
     432:	00 04 b2             	add    %al,(%rdx,%rsi,4)
  if (protocol == IPPROTO_ICMPV6) {
     435:	00 00                	add    %al,(%rax)
     437:	00 05 60 00 00 00    	add    %al,0x60(%rip)        # 49d <balancer_ingress+0x49d>
  if (icmp_hdr + 1 > data_end) {
     43d:	0c 00                	or     $0x0,%al
     43f:	0b 44 04 00          	or     0x0(%rsp,%rax,1),%eax
     443:	00 04 b2             	add    %al,(%rdx,%rsi,4)
  if (icmp_hdr->icmp6_type == ICMPV6_ECHO_REQUEST) {
     446:	00 00                	add    %al,(%rax)
     448:	00 05 60 00 00 00    	add    %al,0x60(%rip)        # 4ae <balancer_ingress+0x4ae>
     44e:	80 00 04             	addb   $0x4,(%rax)
     451:	5b                   	pop    %rbx
     452:	04 00                	add    $0x0,%al
     454:	00 11                	add    %dl,(%rcx)
     456:	60                   	(bad)
     457:	00 00                	add    %al,(%rax)
     459:	00 00                	add    %al,(%rax)
     45b:	0b 04 04             	or     (%rsp,%rax,1),%eax
     45e:	00 00                	add    %al,(%rax)
     460:	08 34 6b             	or     %dh,(%rbx,%rbp,2)
     463:	04 00                	add    $0x0,%al
  if ((data + sizeof(struct ethhdr) + sizeof(struct ipv6hdr) +
     465:	00 05 49 02 a1 07    	add    %al,0x7a10249(%rip)        # 7a106b4 <_license+0x7a0e2cf>
     46b:	09 28                	or     %ebp,(%rax)
     46d:	05 43 0a 07 a1       	add    $0xa1070a43,%eax
     472:	00 00                	add    %al,(%rax)
     474:	00 05 44 00 0a 09    	add    %al,0x90a0044(%rip)        # 90a04be <_license+0x909e0d9>
     47a:	b6 00                	mov    $0x0,%dh
     47c:	00 00                	add    %al,(%rax)
     47e:	05 45 08 0a 0c       	add    $0xc0a0845,%eax
     483:	b6 00                	mov    $0x0,%dh
     485:	00 00                	add    %al,(%rax)
     487:	05 46 10 0a 14       	add    $0x140a1046,%eax
     48c:	9d                   	popf
     48d:	04 00                	add    $0x0,%al
     48f:	00 05 47 18 0a 15    	add    %al,0x150a1847(%rip)        # 150a1cdc <_license+0x1509f8f7>
     495:	2f                   	(bad)
     496:	01 00                	add    %eax,(%rax)
     498:	00 05 48 20 00 0b    	add    %al,0xb002048(%rip)        # b0024e6 <_license+0xb000101>
  tcp = data + off;
     49e:	a2 04 00 00 04 b2 00 	movabs %al,0xb204000004
     4a5:	00 00 
  if (tcp + 1 > data_end) {
     4a7:	12 60 00             	adc    0x0(%rax),%ah
     4aa:	00 00                	add    %al,(%rax)
     4ac:	00 02                	add    %al,(%rdx)
     4ae:	00 02                	add    %al,(%rdx)
     4b0:	00 08                	add    %cl,(%rax)
     4b2:	35 bc 04 00 00       	xor    $0x4bc,%eax
  if (tcp->syn) {
     4b7:	05 52 02 a1 08       	add    $0x8a10252,%eax
     4bc:	09 28                	or     %ebp,(%rax)
    pckt->flags |= F_SYN_SET;
     4be:	05 4c 0a 07 a1       	add    $0xa1070a4c,%eax
     4c3:	00 00                	add    %al,(%rax)
     4c5:	00 05 4d 00 0a 09    	add    %al,0x90a004d(%rip)        # 90a0518 <_license+0x909e133>
     4cb:	b6 00                	mov    $0x0,%dh
     4cd:	00 00                	add    %al,(%rax)
     4cf:	05 4e 08 0a 0c       	add    $0xc0a084e,%eax
        bpf_map_lookup_elem(&stats, &stats_key);
     4d4:	ee                   	out    %al,(%dx)
     4d5:	04 00                	add    $0x0,%al
     4d7:	00 05 4f 10 0a 14    	add    %al,0x140a104f(%rip)        # 140a152c <_license+0x1409f147>
     4dd:	21 05 00 00 05 50    	and    %eax,0x50050000(%rip)        # 500504e3 <_license+0x5004e0fe>
    if (!icmp_ptb_v6_stats) {
     4e3:	18 0a                	sbb    %cl,(%rdx)
     4e5:	15 2f 01 00 00       	adc    $0x12f,%eax
    icmp_ptb_v6_stats->v1 += 1;
     4ea:	05 51 20 00 0b       	add    $0xb002051,%eax
    __u32 mtu = bpf_ntohl(icmp_hdr->icmp6_mtu);
     4ef:	f3 04 00             	repz add $0x0,%al
     4f2:	00 0d 36 14 03 54    	add    %cl,0x54031436(%rip)        # 5403192e <_license+0x5402f549>
    if (mtu < MAX_MTU_IN_PTB_TO_DROP) {
     4f8:	0e                   	(bad)
     4f9:	00 05 00 00 03 55    	add    %al,0x55030000(%rip)        # 550304ff <_license+0x5502e11a>
      icmp_ptb_v6_stats->v2 += 1;
     4ff:	00 0f                	add    %cl,(%rdi)
  if (ip6h + 1 > data_end) {
     501:	10 03                	adc    %al,(%rbx)
     503:	55                   	push   %rbp
     504:	0a 2a                	or     (%rdx),%ch
     506:	b8 01 00 00 03       	mov    $0x3000001,%eax
     50b:	56                   	push   %rsi
     50c:	00 0a                	add    %cl,(%rdx)
  pckt->flow.proto = ip6h->nexthdr;
     50e:	2b c0                	sub    %eax,%eax
     510:	01 00                	add    %eax,(%rax)
     512:	00 03                	add    %al,(%rbx)
  pckt->flags |= F_ICMP;
     514:	57                   	push   %rdi
     515:	00 00                	add    %al,(%rax)
     517:	0a 24 12             	or     (%rdx,%rdx,1),%ah
  memcpy(pckt->flow.srcv6, ip6h->daddr.s6_addr32, 16);
     51a:	01 00                	add    %eax,(%rax)
     51c:	00 03                	add    %al,(%rbx)
     51e:	59                   	pop    %rcx
     51f:	10 00                	adc    %al,(%rax)
     521:	0b 26                	or     (%rsi),%esp
     523:	05 00 00 04 b2       	add    $0xb2040000,%eax
     528:	00 00                	add    %al,(%rax)
     52a:	00 10                	add    %dl,(%rax)
  memcpy(pckt->flow.dstv6, ip6h->saddr.s6_addr32, 16);
     52c:	60                   	(bad)
     52d:	00 00                	add    %al,(%rax)
     52f:	00 00                	add    %al,(%rax)
     531:	10 00                	adc    %al,(%rax)
     533:	08 37                	or     %dh,(%rdi)
     535:	3e 05 00 00 05 5b    	ds add $0x5b050000,%eax
     53b:	02 a1 09 09 28 05    	add    0x5280909(%rcx),%ah
     541:	55                   	push   %rbp
     542:	0a 07                	or     (%rdi),%al
     544:	70 05                	jo     54b <balancer_ingress+0x54b>
     546:	00 00                	add    %al,(%rax)
     548:	05 56 00 0a 09       	add    $0x90a0056,%eax
     54d:	b6 00                	mov    $0x0,%dh
     54f:	00 00                	add    %al,(%rax)
     551:	05 57 08 0a 0c       	add    $0xc0a0857,%eax
     556:	81 05 00 00 05 58 10 	addl   $0x21140a10,0x58050000(%rip)        # 58050560 <_license+0x5804e17b>
     55d:	0a 14 21 
    memcpy(dst_addr.addrv6, pckt->flow.dstv6, 16);
     560:	05 00 00 05 59       	add    $0x59050000,%eax
     565:	18 0a                	sbb    %cl,(%rdx)
     567:	15 2f 01 00 00       	adc    $0x12f,%eax
     56c:	05 5a 20 00 0b       	add    $0xb00205a,%eax
     571:	75 05                	jne    578 <balancer_ingress+0x578>
  __u32* decap_dst_flags = bpf_map_lookup_elem(&decap_dst, &dst_addr);
     573:	00 00                	add    %al,(%rax)
     575:	04 b2                	add    $0xb2,%al
     577:	00 00                	add    %al,(%rax)
     579:	00 05 60 00 00 00    	add    %al,0x60(%rip)        # 5df <balancer_ingress+0x5df>
     57f:	06                   	(bad)
     580:	00 0b                	add    %cl,(%rbx)
     582:	86 05 00 00 0d 3a    	xchg   %al,0x3a0d0000(%rip)        # 3a0d0588 <_license+0x3a0ce1a3>
     588:	10 03                	adc    %al,(%rbx)
     58a:	5d                   	pop    %rbp
     58b:	0a 38                	or     (%rax),%bh
  if (decap_dst_flags) {
     58d:	fa                   	cli
     58e:	00 00                	add    %al,(%rax)
     590:	00 03                	add    %al,(%rbx)
     592:	5e                   	pop    %rsi
     593:	00 0a                	add    %cl,(%rdx)
     595:	39 fa                	cmp    %edi,%edx
     597:	00 00                	add    %al,(%rax)
     599:	00 03                	add    %al,(%rbx)
     59b:	5f                   	pop    %rdi
    data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     59c:	08 00                	or     %al,(%rax)
     59e:	08 3b                	or     %bh,(%rbx)
     5a0:	a9 05 00 00 05       	test   $0x5000005,%eax
     5a5:	64 02 a1 0a 09 28 05 	add    %fs:0x528090a(%rcx),%ah
    if (!data_stats) {
     5ac:	5e                   	pop    %rsi
     5ad:	0a 07                	or     (%rdi),%al
     5af:	70 05                	jo     5b6 <balancer_ingress+0x5b6>
     5b1:	00 00                	add    %al,(%rax)
     5b3:	05 5f 00 0a 09       	add    $0x90a005f,%eax
    data_stats->v1 += 1;
     5b8:	b6 00                	mov    $0x0,%dh
    if ((data + offset + sizeof(struct ipv6hdr)) > data_end) {
     5ba:	00 00                	add    %al,(%rax)
     5bc:	05 60 08 0a 0c       	add    $0xc0a0860,%eax
     5c1:	b6 00                	mov    $0x0,%dh
     5c3:	00 00                	add    %al,(%rax)
     5c5:	05 61 10 0a 14       	add    $0x140a1061,%eax
     5ca:	21 05 00 00 05 62    	and    %eax,0x62050000(%rip)        # 620505d0 <_license+0x6204e1eb>
    if (!--ip6h->hop_limit) {
     5d0:	18 0a                	sbb    %cl,(%rdx)
     5d2:	15 2f 01 00 00       	adc    $0x12f,%eax
     5d7:	05 63 20 00 08       	add    $0x8002063,%eax
     5dc:	3c e6                	cmp    $0xe6,%al
     5de:	05 00 00 05 6c       	add    $0x6c050000,%eax
  memcpy(new_eth->h_source, old_eth->h_source, 6);
     5e3:	02 a1 0b 09 28 05    	add    0x528090b(%rcx),%ah
     5e9:	66 0a 07             	data16 or (%rdi),%al
     5ec:	a1 00 00 00 05 67 00 	movabs 0x90a006705000000,%eax
     5f3:	0a 09 
  memcpy(new_eth->h_dest, old_eth->h_dest, 6);
     5f5:	b6 00                	mov    $0x0,%dh
     5f7:	00 00                	add    %al,(%rax)
     5f9:	05 68 08 0a 0c       	add    $0xc0a0868,%eax
     5fe:	60                   	(bad)
     5ff:	02 00                	add    (%rax),%al
     601:	00 05 69 10 0a 14    	add    %al,0x140a1069(%rip)        # 140a1670 <_license+0x1409f28b>
     607:	7d 01                	jge    60a <balancer_ingress+0x60a>
  if (XDP_ADJUST_HEAD_FUNC(xdp, (int)sizeof(struct ipv6hdr))) {
     609:	00 00                	add    %al,(%rax)
     60b:	05 6a 18 0a 15       	add    $0x150a186a,%eax
     610:	2f                   	(bad)
     611:	01 00                	add    %eax,(%rax)
     613:	00 05 6b 20 00 08    	add    %al,0x800206b(%rip)        # 8002684 <_license+0x800029f>
     619:	3d 23 06 00 00       	cmp    $0x623,%eax
     61e:	05 75 02 a1 0c       	add    $0xca10275,%eax
     623:	09 28                	or     %ebp,(%rax)
  struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     625:	05 6f 0a 07 70       	add    $0x70070a6f,%eax
     62a:	05 00 00 05 70       	add    $0x70050000,%eax
     62f:	00 0a                	add    %cl,(%rdx)
     631:	09 b6 00 00 00 05    	or     %esi,0x5000000(%rsi)
  if (!data_stats) {
     637:	71 08                	jno    641 <balancer_ingress+0x641>
     639:	0a 0c 81             	or     (%rcx,%rax,4),%cl
     63c:	05 00 00 05 72       	add    $0x72050000,%eax
     641:	10 0a                	adc    %cl,(%rdx)
  if (action >= 0) {
     643:	14 55                	adc    $0x55,%al
     645:	06                   	(bad)
     646:	00 00                	add    %al,(%rax)
     648:	05 73 18 0a 15       	add    $0x150a1873,%eax
     64d:	2f                   	(bad)
  if (decap_dst_flags) {
     64e:	01 00                	add    %eax,(%rax)
     650:	00 05 74 20 00 0b    	add    %al,0xb002074(%rip)        # b0026ca <_license+0xb0002e5>
  if (action >= 0) {
     656:	5a                   	pop    %rdx
     657:	06                   	(bad)
     658:	00 00                	add    %al,(%rax)
     65a:	04 b2                	add    $0xb2,%al
     65c:	00 00                	add    %al,(%rax)
     65e:	00 10                	add    %dl,(%rax)
        bpf_map_lookup_elem(&stats, &xpop_stats_key);
     660:	60                   	(bad)
     661:	00 00                	add    %al,(%rax)
     663:	00 00                	add    %al,(%rax)
     665:	04 00                	add    $0x0,%al
     667:	08 3e                	or     %bh,(%rsi)
     669:	72 06                	jb     671 <balancer_ingress+0x671>
     66b:	00 00                	add    %al,(%rax)
     66d:	05 7e 02 a1 0d       	add    $0xda1027e,%eax
    if (xpop_stats_data) {
     672:	09 28                	or     %ebp,(%rax)
     674:	05 78 0a 07 70       	add    $0x70070a78,%eax
     679:	05 00 00 05 79       	add    $0x79050000,%eax
     67e:	00 0a                	add    %cl,(%rdx)
     680:	09 b6 00 00 00 05    	or     %esi,0x5000000(%rsi)
    memcpy(dst_addr.addrv6, pckt->flow.dstv6, 16);
     686:	7a 08                	jp     690 <balancer_ingress+0x690>
     688:	0a 0c a4             	or     (%rsp,%riz,4),%cl
     68b:	06                   	(bad)
     68c:	00 00                	add    %al,(%rax)
     68e:	05 7b 10 0a 14       	add    $0x140a107b,%eax
     693:	7d 01                	jge    696 <balancer_ingress+0x696>
     695:	00 00                	add    %al,(%rax)
  __u32* decap_dst_flags = bpf_map_lookup_elem(&decap_dst, &dst_addr);
     697:	05 7c 18 0a 15       	add    $0x150a187c,%eax
     69c:	2f                   	(bad)
     69d:	01 00                	add    %eax,(%rax)
     69f:	00 05 7d 20 00 0b    	add    %al,0xb00207d(%rip)        # b002722 <_license+0xb00033d>
     6a5:	a9 06 00 00 0d       	test   $0xd000006,%eax
     6aa:	4c 68 03 8e 0a 3f    	rex.WR push $0x3f0a8e03
     6b0:	fa                   	cli
     6b1:	00 00                	add    %al,(%rax)
  if (decap_dst_flags) {
     6b3:	00 03                	add    %al,(%rbx)
     6b5:	8f 00                	pop    (%rax)
     6b7:	0a 40 fa             	or     -0x6(%rax),%al
     6ba:	00 00                	add    %al,(%rax)
     6bc:	00 03                	add    %al,(%rbx)
     6be:	90                   	nop
     6bf:	08 0a                	or     %cl,(%rdx)
    data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     6c1:	41 fa                	rex.B cli
     6c3:	00 00                	add    %al,(%rax)
     6c5:	00 03                	add    %al,(%rbx)
     6c7:	91                   	xchg   %eax,%ecx
     6c8:	10 0a                	adc    %cl,(%rdx)
     6ca:	42 fa                	rex.X cli
     6cc:	00 00                	add    %al,(%rax)
     6ce:	00 03                	add    %al,(%rbx)
     6d0:	92                   	xchg   %eax,%edx
    if (!data_stats) {
     6d1:	18 0a                	sbb    %cl,(%rdx)
     6d3:	43 fa                	rex.XB cli
     6d5:	00 00                	add    %al,(%rax)
     6d7:	00 03                	add    %al,(%rbx)
     6d9:	93                   	xchg   %eax,%ebx
    data_stats->v1 += 1;
     6da:	20 0a                	and    %cl,(%rdx)
     6dc:	44 fa                	rex.R cli
    if ((data + offset + sizeof(struct iphdr)) > data_end) {
     6de:	00 00                	add    %al,(%rax)
     6e0:	00 03                	add    %al,(%rbx)
     6e2:	94                   	xchg   %eax,%esp
     6e3:	28 0a                	sub    %cl,(%rdx)
     6e5:	45 fa                	rex.RB cli
     6e7:	00 00                	add    %al,(%rax)
     6e9:	00 03                	add    %al,(%rbx)
     6eb:	95                   	xchg   %eax,%ebp
     6ec:	30 0a                	xor    %cl,(%rdx)
     6ee:	46 fa                	rex.RX cli
     6f0:	00 00                	add    %al,(%rax)
    csum = iph->check + 0x0001;
     6f2:	00 03                	add    %al,(%rbx)
     6f4:	96                   	xchg   %eax,%esi
     6f5:	38 0a                	cmp    %cl,(%rdx)
     6f7:	47 fa                	rex.RXB cli
    iph->check = (csum & 0xffff) + (csum >> 16);
     6f9:	00 00                	add    %al,(%rax)
     6fb:	00 03                	add    %al,(%rbx)
     6fd:	97                   	xchg   %eax,%edi
     6fe:	40 0a 48 fa          	rex or -0x6(%rax),%cl
     702:	00 00                	add    %al,(%rax)
     704:	00 03                	add    %al,(%rbx)
    if (!--iph->ttl) {
     706:	98                   	cwtl
     707:	48 0a 49 fa          	rex.W or -0x6(%rcx),%cl
     70b:	00 00                	add    %al,(%rax)
     70d:	00 03                	add    %al,(%rbx)
     70f:	99                   	cltd
     710:	50                   	push   %rax
     711:	0a 4a fa             	or     -0x6(%rdx),%cl
     714:	00 00                	add    %al,(%rax)
     716:	00 03                	add    %al,(%rbx)
  memcpy(new_eth->h_source, old_eth->h_source, 6);
     718:	9a                   	(bad)
     719:	58                   	pop    %rax
     71a:	0a 4b fa             	or     -0x6(%rbx),%cl
     71d:	00 00                	add    %al,(%rax)
     71f:	00 03                	add    %al,(%rbx)
     721:	9b                   	fwait
     722:	60                   	(bad)
     723:	00 08                	add    %cl,(%rax)
     725:	4d 2f                	rex.WRB (bad)
  memcpy(new_eth->h_dest, old_eth->h_dest, 6);
     727:	07                   	(bad)
     728:	00 00                	add    %al,(%rax)
     72a:	05 87 02 a1 0e       	add    $0xea10287,%eax
     72f:	09 28                	or     %ebp,(%rax)
     731:	05 81 0a 07 70       	add    $0x70070a81,%eax
     736:	05 00 00 05 82       	add    $0x82050000,%eax
     73b:	00 0a                	add    %cl,(%rdx)
     73d:	09 b6 00 00 00 05    	or     %esi,0x5000000(%rsi)
  if (XDP_ADJUST_HEAD_FUNC(xdp, (int)sizeof(struct ipv6hdr))) {
     743:	83 08 0a             	orl    $0xa,(%rax)
     746:	0c 61                	or     $0x61,%al
     748:	07                   	(bad)
     749:	00 00                	add    %al,(%rax)
     74b:	05 84 10 0a 14       	add    $0x140a1084,%eax
     750:	7d 01                	jge    753 <balancer_ingress+0x753>
     752:	00 00                	add    %al,(%rax)
     754:	05 85 18 0a 15       	add    $0x150a1885,%eax
     759:	2f                   	(bad)
     75a:	01 00                	add    %eax,(%rax)
  struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     75c:	00 05 86 20 00 0b    	add    %al,0xb002086(%rip)        # b0027e8 <_license+0xb000403>
     762:	66 07                	data16 (bad)
     764:	00 00                	add    %al,(%rax)
     766:	0d 4f 28 03 a7       	or     $0xa703284f,%eax
     76b:	0a 3f                	or     (%rdi),%bh
  if (!data_stats) {
     76d:	fa                   	cli
     76e:	00 00                	add    %al,(%rax)
     770:	00 03                	add    %al,(%rbx)
     772:	a8 00                	test   $0x0,%al
     774:	0a 43 fa             	or     -0x6(%rbx),%al
     777:	00 00                	add    %al,(%rax)
     779:	00 03                	add    %al,(%rbx)
  if (action >= 0) {
     77b:	a9 08 0a 41 fa       	test   $0xfa410a08,%eax
     780:	00 00                	add    %al,(%rax)
     782:	00 03                	add    %al,(%rbx)
     784:	aa                   	stos   %al,%es:(%rdi)
     785:	10 0a                	adc    %cl,(%rdx)
  if (decap_dst_flags) {
     787:	44 fa                	rex.R cli
  if (action >= 0) {
     789:	00 00                	add    %al,(%rax)
     78b:	00 03                	add    %al,(%rbx)
     78d:	ab                   	stos   %eax,%es:(%rdi)
     78e:	18 0a                	sbb    %cl,(%rdx)
     790:	4e fa                	rex.WRX cli
     792:	00 00                	add    %al,(%rax)
     794:	00 03                	add    %al,(%rbx)
     796:	ac                   	lods   %ds:(%rsi),%al
     797:	20 00                	and    %al,(%rax)
        bpf_map_lookup_elem(&stats, &xpop_stats_key);
     799:	08 50 a4             	or     %dl,-0x5c(%rax)
     79c:	07                   	(bad)
     79d:	00 00                	add    %al,(%rax)
     79f:	05 90 02 a1 0f       	add    $0xfa10290,%eax
     7a4:	09 28                	or     %ebp,(%rax)
     7a6:	05 8a 0a 07 70       	add    $0x70070a8a,%eax
    if (xpop_stats_data) {
     7ab:	05 00 00 05 8b       	add    $0x8b050000,%eax
     7b0:	00 0a                	add    %cl,(%rdx)
     7b2:	09 b6 00 00 00 05    	or     %esi,0x5000000(%rsi)
  udp = data + off;
     7b8:	8c 08                	mov    %cs,(%rax)
  if (is_ipv6) {
     7ba:	0a 0c 81             	or     (%rcx,%rax,4),%cl
  udp = data + off;
     7bd:	05 00 00 05 8d       	add    $0x8d050000,%eax
  if (udp + 1 > data_end) {
     7c2:	10 0a                	adc    %cl,(%rdx)
     7c4:	14 cc                	adc    $0xcc,%al
     7c6:	01 00                	add    %eax,(%rax)
     7c8:	00 05 8e 18 0a 15    	add    %al,0x150a188e(%rip)        # 150a205c <_license+0x1509fc77>
     7ce:	2f                   	(bad)
     7cf:	01 00                	add    %eax,(%rax)
     7d1:	00 05 8f 20 00 08    	add    %al,0x800208f(%rip)        # 8002866 <_license+0x8000481>
     7d7:	51                   	push   %rcx
     7d8:	e1 07                	loope  7e1 <balancer_ingress+0x7e1>
     7da:	00 00                	add    %al,(%rax)
     7dc:	05 a3 02 a1 10       	add    $0x10a102a3,%eax
     7e1:	09 28                	or     %ebp,(%rax)
     7e3:	05 9d 0a 07 a1       	add    $0xa1070a9d,%eax
     7e8:	00 00                	add    %al,(%rax)
     7ea:	00 05 9e 00 0a 09    	add    %al,0x90a009e(%rip)        # 90a088e <_license+0x909e4a9>
  if (icmp_hdr->code == ICMP_FRAG_NEEDED) {
     7f0:	b6 00                	mov    $0x0,%dh
     7f2:	00 00                	add    %al,(%rax)
     7f4:	05 9f 08 0a 0c       	add    $0xc0a089f,%eax
     7f9:	b6 00                	mov    $0x0,%dh
     7fb:	00 00                	add    %al,(%rax)
        bpf_map_lookup_elem(&stats, &stats_key);
     7fd:	05 a0 10 0a 14       	add    $0x140a10a0,%eax
     802:	13 08                	adc    (%rax),%ecx
     804:	00 00                	add    %al,(%rax)
     806:	05 a1 18 0a 15       	add    $0x150a18a1,%eax
     80b:	2f                   	(bad)
    if (!icmp_ptb_v4_stats) {
     80c:	01 00                	add    %eax,(%rax)
     80e:	00 05 a2 20 00 0b    	add    %al,0xb0020a2(%rip)        # b0028b6 <_license+0xb0004d1>
     814:	18 08                	sbb    %cl,(%rax)
    icmp_ptb_v4_stats->v1 += 1;
     816:	00 00                	add    %al,(%rax)
     818:	04 b2                	add    $0xb2,%al
    if (mtu < MAX_MTU_IN_PTB_TO_DROP) {
     81a:	00 00                	add    %al,(%rax)
     81c:	00 12                	add    %dl,(%rdx)
     81e:	60                   	(bad)
      icmp_ptb_v4_stats->v2 += 1;
     81f:	00 00                	add    %al,(%rax)
     821:	00 fe                	add    %bh,%dh
     823:	ff                   	(bad)
  if (iph + 1 > data_end) {
     824:	ff 00                	incl   (%rax)
     826:	00 08                	add    %cl,(%rax)
     828:	52                   	push   %rdx
     829:	32 08                	xor    (%rax),%cl
     82b:	00 00                	add    %al,(%rax)
     82d:	05 dc 02 a1 11       	add    $0x11a102dc,%eax
  if (iph->ihl != 5) {
     832:	09 28                	or     %ebp,(%rax)
     834:	05 d6 0a 07 70       	add    $0x70070ad6,%eax
     839:	05 00 00 05 d7       	add    $0xd7050000,%eax
  pckt->flow.proto = iph->protocol;
     83e:	00 0a                	add    %cl,(%rdx)
     840:	09 b6 00 00 00 05    	or     %esi,0x5000000(%rsi)
  pckt->flags |= F_ICMP;
     846:	d8 08                	fmuls  (%rax)
     848:	0a 0c 64             	or     (%rsp,%riz,2),%cl
  pckt->flow.src = iph->daddr;
     84b:	08 00                	or     %al,(%rax)
     84d:	00 05 d9 10 0a 14    	add    %al,0x140a10d9(%rip)        # 140a192c <_license+0x1409f547>
  pckt->flow.dst = iph->saddr;
     853:	7d 01                	jge    856 <balancer_ingress+0x856>
     855:	00 00                	add    %al,(%rax)
     857:	05 da 18 0a 15       	add    $0x150a18da,%eax
     85c:	2f                   	(bad)
     85d:	01 00                	add    %eax,(%rax)
     85f:	00 05 db 20 00 0b    	add    %al,0xb0020db(%rip)        # b002940 <_license+0xb00055b>
     865:	69 08 00 00 0d 55    	imul   $0x550d0000,(%rax),%ecx
     86b:	20 03                	and    %al,(%rbx)
     86d:	9f                   	lahf
     86e:	0a 3f                	or     (%rdi),%bh
     870:	fa                   	cli
    memcpy(vip.vipv6, pckt.flow.dstv6, 16);
     871:	00 00                	add    %al,(%rax)
     873:	00 03                	add    %al,(%rbx)
     875:	a0 00 0a 4a fa 00 00 	movabs 0x3000000fa4a0a00,%al
     87c:	00 03 
     87e:	a1 08 0a 53 fa 00 00 	movabs 0x3000000fa530a08,%eax
     885:	00 03 
  vip.port = pckt.flow.port16[1];
     887:	a2 10 0a 54 fa 00 00 	movabs %al,0x3000000fa540a10
     88e:	00 03 
  vip.proto = pckt.flow.proto;
     890:	a3 18 00 08 56 9e 08 	movabs %eax,0x89e56080018
     897:	00 00 
  vip_info = bpf_map_lookup_elem(&vip_map, &vip);
     899:	05 e4 02 a1 12       	add    $0x12a102e4,%eax
     89e:	09 28                	or     %ebp,(%rax)
     8a0:	05 de 0a 07 70       	add    $0x70070ade,%eax
     8a5:	05 00 00 05 df       	add    $0xdf050000,%eax
     8aa:	00 0a                	add    %cl,(%rdx)
     8ac:	09 b6 00 00 00 05    	or     %esi,0x5000000(%rsi)
     8b2:	e0 08                	loopne 8bc <balancer_ingress+0x8bc>
  if (!vip_info) {
     8b4:	0a 0c 81             	or     (%rcx,%rax,4),%cl
     8b7:	05 00 00 05 e1       	add    $0xe1050000,%eax
  if (data_end - data > MAX_PCKT_SIZE) {
     8bc:	10 0a                	adc    %cl,(%rdx)
     8be:	14 cc                	adc    $0xcc,%al
     8c0:	01 00                	add    %eax,(%rax)
     8c2:	00 05 e2 18 0a 15    	add    %al,0x150a18e2(%rip)        # 150a21aa <_license+0x1509fdc5>
     8c8:	2f                   	(bad)
     8c9:	01 00                	add    %eax,(%rax)
     8cb:	00 05 e3 20 00 08    	add    %al,0x80020e3(%rip)        # 80029b4 <_license+0x80005cf>
     8d1:	57                   	push   %rdi
     8d2:	db 08                	fisttpl (%rax)
     8d4:	00 00                	add    %al,(%rax)
     8d6:	05 f8 02 a1 13       	add    $0x13a102f8,%eax
  data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     8db:	09 28                	or     %ebp,(%rax)
     8dd:	05 e7 0a 07 48       	add    $0x48070ae7,%eax
     8e2:	09 00                	or     %eax,(%rax)
     8e4:	00 05 e8 00 0a 09    	add    %al,0x90a00e8(%rip)        # 90a09d2 <_license+0x909e5ed>
  if (!data_stats) {
     8ea:	60                   	(bad)
     8eb:	02 00                	add    (%rax),%al
     8ed:	00 05 e9 08 0a 0c    	add    %al,0xc0a08e9(%rip)        # c0a11dc <_license+0xc09edf7>
  data_stats->v1 += 1;
     8f3:	b6 00                	mov    $0x0,%dh
     8f5:	00 00                	add    %al,(%rax)
  if ((vip_info->flags & F_HASH_NO_SRC_PORT)) {
     8f7:	05 ea 10 0a 14       	add    $0x140a10ea,%eax
    pckt.flow.port16[0] = 0;
     8fc:	cc                   	int3
     8fd:	01 00                	add    %eax,(%rax)
     8ff:	00 05 eb 18 0a 15    	add    %al,0x150a18eb(%rip)        # 150a21f0 <_license+0x1509fe0b>
  vip_num = vip_info->vip_num;
     905:	7d 01                	jge    908 <balancer_ingress+0x908>
     907:	00 00                	add    %al,(%rax)
     909:	05 ec 20 0a 33       	add    $0x330a20ec,%eax
  __u32 cpu_num = bpf_get_smp_processor_id();
     90e:	59                   	pop    %rcx
     90f:	09 00                	or     %eax,(%rax)
     911:	00 05 ed 28 09 28    	add    %al,0x280928ed(%rip)        # 28093204 <_license+0x28090e1f>
     917:	05 ed 0a 07 7d       	add    $0x7d070aed,%eax
  void* lru_map = bpf_map_lookup_elem(&lru_mapping, &cpu_num);
     91c:	01 00                	add    %eax,(%rax)
     91e:	00 05 ed 00 0a 09    	add    %al,0x90a00ed(%rip)        # 90a0a11 <_license+0x909e62c>
    struct lb_stats* lru_stats = bpf_map_lookup_elem(&stats, &lru_stats_key);
     924:	b6 00                	mov    $0x0,%dh
     926:	00 00                	add    %al,(%rax)
     928:	05 ed 08 0a 0c       	add    $0xc0a08ed,%eax
     92d:	69 09 00 00 05 ed    	imul   $0xed050000,(%rcx),%ecx
     933:	10 0a                	adc    %cl,(%rdx)
    if (!lru_stats) {
     935:	14 21                	adc    $0x21,%al
     937:	05 00 00 05 ed       	add    $0xed050000,%eax
     93c:	18 0a                	sbb    %cl,(%rdx)
    lru_stats->v1 += 1;
     93e:	15 7d 01 00 00       	adc    $0x17d,%eax
     943:	05 ed 20 00 00       	add    $0x20ed,%eax
     948:	0b 4d 09             	or     0x9(%rbp),%ecx
     94b:	00 00                	add    %al,(%rax)
     94d:	04 b2                	add    $0xb2,%al
     94f:	00 00                	add    %al,(%rax)
     951:	00 05 60 00 00 00    	add    %al,0x60(%rip)        # 9b7 <balancer_ingress+0x9b7>
  if (icmp_hdr->code == ICMP_FRAG_NEEDED) {
     957:	0d 00 04 64 09       	or     $0x9640400,%eax
     95c:	00 00                	add    %al,(%rax)
     95e:	11 60 00             	adc    %esp,0x0(%rax)
     961:	00 00                	add    %al,(%rax)
     963:	00 0b                	add    %cl,(%rbx)
        bpf_map_lookup_elem(&stats, &stats_key);
     965:	15 09 00 00 0b       	adc    $0xb000009,%eax
     96a:	12 01                	adc    (%rcx),%al
     96c:	00 00                	add    %al,(%rax)
     96e:	13 58 76             	adc    0x76(%rax),%ebx
     971:	09 00                	or     %eax,(%rax)
     973:	00 06                	add    %al,(%rsi)
    if (!icmp_ptb_v4_stats) {
     975:	65 0b 7b 09          	or     %gs:0x9(%rbx),%edi
     979:	00 00                	add    %al,(%rax)
     97b:	14 b2                	adc    $0xb2,%al
     97d:	00 00                	add    %al,(%rax)
    icmp_ptb_v4_stats->v1 += 1;
     97f:	00 15 8b 09 00 00    	add    %dl,0x98b(%rip)        # 1310 <balancer_ingress+0x1310>
    if (mtu < MAX_MTU_IN_PTB_TO_DROP) {
     985:	15 b2 00 00 00       	adc    $0xb2,%eax
      icmp_ptb_v4_stats->v2 += 1;
     98a:	00 16                	add    %dl,(%rsi)
     98c:	13 59 94             	adc    -0x6c(%rcx),%ebx
  if (iph + 1 > data_end) {
     98f:	09 00                	or     %eax,(%rax)
     991:	00 06                	add    %al,(%rsi)
     993:	1e                   	(bad)
     994:	0b 99 09 00 00 14    	or     0x14000009(%rcx),%ebx
  if (iph->ihl != 5) {
     99a:	8b 09                	mov    (%rcx),%ecx
     99c:	00 00                	add    %al,(%rax)
     99e:	15 8b 09 00 00       	adc    $0x98b,%eax
     9a3:	15 8b 09 00 00       	adc    $0x98b,%eax
  pckt->flow.proto = iph->protocol;
     9a8:	00 13                	add    %dl,(%rbx)
     9aa:	5a                   	pop    %rdx
     9ab:	b1 09                	mov    $0x9,%cl
  pckt->flags |= F_ICMP;
     9ad:	00 00                	add    %al,(%rax)
     9af:	06                   	(bad)
     9b0:	31 0b                	xor    %ecx,(%rbx)
  pckt->flow.src = iph->daddr;
     9b2:	b6 09                	mov    $0x9,%dh
     9b4:	00 00                	add    %al,(%rax)
     9b6:	17                   	(bad)
     9b7:	02 01                	add    (%rcx),%al
  pckt->flow.dst = iph->saddr;
     9b9:	00 00                	add    %al,(%rax)
     9bb:	13 5b c3             	adc    -0x3d(%rbx),%ebx
     9be:	09 00                	or     %eax,(%rax)
     9c0:	00 06                	add    %al,(%rsi)
     9c2:	20 0b                	and    %cl,(%rbx)
     9c4:	c8 09 00 00          	enter  $0x9,$0x0
    vip.port = 0;
     9c8:	14 b2                	adc    $0xb2,%al
     9ca:	00 00                	add    %al,(%rax)
    vip_info = bpf_map_lookup_elem(&vip_map, &vip);
     9cc:	00 15 8b 09 00 00    	add    %dl,0x98b(%rip)        # 135d <balancer_ingress+0x135d>
     9d2:	15 8b 09 00 00       	adc    $0x98b,%eax
     9d7:	15 8b 09 00 00       	adc    $0x98b,%eax
     9dc:	15 02 01 00 00       	adc    $0x102,%eax
    if (!vip_info) {
     9e1:	00 18                	add    %bl,(%rax)
     9e3:	c3                   	ret
     9e4:	00 00                	add    %al,(%rax)
     9e6:	00 61 04             	add    %ah,0x4(%rcx)
     9e9:	07                   	(bad)
    if (!(vip_info->flags & F_HASH_DPORT_ONLY) &&
     9ea:	28 0c 19             	sub    %cl,(%rcx,%rbx,1)
     9ed:	5c                   	pop    %rsp
     9ee:	00 19                	add    %bl,(%rcx)
     9f0:	5d                   	pop    %rbp
     9f1:	01 19                	add    %ebx,(%rcx)
      pckt.flow.port16[1] = 0;
     9f3:	5e                   	pop    %rsi
     9f4:	02 19                	add    (%rcx),%bl
     9f6:	5f                   	pop    %rdi
     9f7:	03 19                	add    (%rcx),%ebx
     9f9:	60                   	(bad)
     9fa:	04 00                	add    $0x0,%al
     9fc:	1a c3                	sbb    %bl,%al
     9fe:	00 00                	add    %al,(%rax)
  struct address dst_addr = {};
     a00:	00 04 08             	add    %al,(%rax,%rcx,1)
     a03:	1d 19 62 00 19       	sbb    $0x19006219,%eax
     a08:	63 01                	movsxd (%rcx),%eax
     a0a:	19 64 02 19          	sbb    %esp,0x19(%rdx,%rax,1)
     a0e:	65 04 19             	gs add $0x19,%al
    dst_addr.addr = pckt->flow.dst;
     a11:	66 06                	data16 (bad)
     a13:	19 67 08             	sbb    %esp,0x8(%rdi)
     a16:	19 68 0c             	sbb    %ebp,0xc(%rax)
  __u32* decap_dst_flags = bpf_map_lookup_elem(&decap_dst, &dst_addr);
     a19:	19 69 11             	sbb    %ebp,0x11(%rcx)
     a1c:	19 6a 16             	sbb    %ebp,0x16(%rdx)
     a1f:	19 6b 1d             	sbb    %ebp,0x1d(%rbx)
     a22:	19 6c 21 19          	sbb    %ebp,0x19(%rcx,%riz,1)
     a26:	6d                   	insl   (%dx),%es:(%rdi)
     a27:	29 19                	sub    %ebx,(%rcx)
     a29:	6e                   	outsb  %ds:(%rsi),(%dx)
     a2a:	2e 19 6f 2f          	cs sbb %ebp,0x2f(%rdi)
     a2e:	19 70 32             	sbb    %esi,0x32(%rax)
     a31:	19 71 33             	sbb    %esi,0x33(%rcx)
  if (decap_dst_flags) {
     a34:	19 72 5c             	sbb    %esi,0x5c(%rdx)
     a37:	19 73 5e             	sbb    %esi,0x5e(%rbx)
     a3a:	19 74 62 19          	sbb    %esi,0x19(%rdx,%riz,2)
     a3e:	75 67                	jne    aa7 <balancer_ingress+0xaa7>
     a40:	19 76 6c             	sbb    %esi,0x6c(%rsi)
    data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     a43:	19 77 73             	sbb    %esi,0x73(%rdi)
     a46:	19 78 84             	sbb    %edi,-0x7c(%rax)
     a49:	01 19                	add    %ebx,(%rcx)
     a4b:	79 88                	jns    9d5 <balancer_ingress+0x9d5>
     a4d:	01 19                	add    %ebx,(%rcx)
     a4f:	7a 89                	jp     9da <balancer_ingress+0x9da>
     a51:	01 19                	add    %ebx,(%rcx)
    if (!data_stats) {
     a53:	7b 8f                	jnp    9e4 <balancer_ingress+0x9e4>
     a55:	01 19                	add    %ebx,(%rcx)
     a57:	7c 90                	jl     9e9 <balancer_ingress+0x9e9>
     a59:	01 19                	add    %ebx,(%rcx)
    data_stats->v1 += 1;
     a5b:	7d ff                	jge    a5c <balancer_ingress+0xa5c>
     a5d:	01 19                	add    %ebx,(%rcx)
     a5f:	7e 80                	jle    9e1 <balancer_ingress+0x9e1>
     a61:	02 19                	add    (%rcx),%bl
    if ((data + offset + sizeof(struct iphdr)) > data_end) {
     a63:	7f 86                	jg     9eb <balancer_ingress+0x9eb>
     a65:	02 19                	add    (%rcx),%bl
     a67:	80 87 02 00 06 81 05 	addb   $0x5,-0x7ef9fffe(%rdi)
     a6e:	08 0b                	or     %cl,(%rbx)
     a70:	fa                   	cli
     a71:	00 00                	add    %al,(%rax)
     a73:	00 0b                	add    %cl,(%rbx)
     a75:	5c                   	pop    %rsp
     a76:	00 00                	add    %al,(%rax)
    csum = iph->check + 0x0001;
     a78:	00 0b                	add    %cl,(%rbx)
     a7a:	9c                   	pushf
     a7b:	02 00                	add    (%rax),%al
     a7d:	00 0b                	add    %cl,(%rbx)
    iph->check = (csum & 0xffff) + (csum >> 16);
     a7f:	83 0a 00             	orl    $0x0,(%rdx)
     a82:	00 0d 91 28 09 76    	add    %cl,0x76092891(%rip)        # 76093319 <_license+0x76090f34>
     a88:	1b 82 12 01 00 00    	sbb    0x112(%rdx),%eax
    if (!--iph->ttl) {
     a8e:	09 78 01             	or     %edi,0x1(%rax)
     a91:	04 04                	add    $0x4,%al
     a93:	00 1b                	add    %bl,(%rbx)
     a95:	83 12 01             	adcl   $0x1,(%rdx)
     a98:	00 00                	add    %al,(%rax)
     a9a:	09 79 01             	or     %edi,0x1(%rcx)
  memcpy(new_eth->h_source, old_eth->h_source, 6);
     a9d:	04 00                	add    $0x0,%al
     a9f:	00 0a                	add    %cl,(%rdx)
     aa1:	84 11                	test   %dl,(%rcx)
     aa3:	0b 00                	or     (%rax),%eax
     aa5:	00 09                	add    %cl,(%rcx)
     aa7:	80 01 0a             	addb   $0xa,(%rcx)
     aaa:	85 1d 0b 00 00 09    	test   %ebx,0x900000b(%rip)        # 9000abb <_license+0x8ffe6d6>
  memcpy(new_eth->h_dest, old_eth->h_dest, 6);
     ab0:	82                   	(bad)
     ab1:	04 0a                	add    $0xa,%al
     ab3:	87 12                	xchg   %edx,(%rdx)
     ab5:	01 00                	add    %eax,(%rax)
  new_eth->h_proto = BE_ETH_P_IP;
     ab7:	00 09                	add    %cl,(%rcx)
     ab9:	83 06 0a             	addl   $0xa,(%rsi)
     abc:	88 12                	mov    %dl,(%rdx)
     abe:	01 00                	add    %eax,(%rax)
     ac0:	00 09                	add    %cl,(%rcx)
     ac2:	84 07                	test   %al,(%rdi)
  if (XDP_ADJUST_HEAD_FUNC(xdp, (int)sizeof(struct iphdr))) {
     ac4:	0e                   	(bad)
     ac5:	cc                   	int3
     ac6:	0a 00                	or     (%rax),%al
     ac8:	00 09                	add    %cl,(%rcx)
     aca:	86 08                	xchg   %cl,(%rax)
     acc:	0f 20 09             	mov    %cr1,%rcx
     acf:	86 0e                	xchg   %cl,(%rsi)
     ad1:	d8 0a                	fmuls  (%rdx)
     ad3:	00 00                	add    %al,(%rax)
     ad5:	09 86 00 09 20 09    	or     %eax,0x9200900(%rsi)
     adb:	86 0a                	xchg   %cl,(%rdx)
     add:	89 25 0b 00 00 09    	mov    %esp,0x900000b(%rip)        # 9000aee <_license+0x8ffe709>
  struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     ae3:	86 00                	xchg   %al,(%rax)
     ae5:	0a 8f 25 0b 00 00    	or     0xb25(%rdi),%cl
     aeb:	09 86 10 00 0a 90    	or     %eax,-0x6ff5fff0(%rsi)
  if (!data_stats) {
     af1:	f8                   	clc
     af2:	0a 00                	or     (%rax),%al
     af4:	00 09                	add    %cl,(%rcx)
     af6:	86 00                	xchg   %al,(%rax)
     af8:	09 20                	or     %esp,(%rax)
     afa:	09 86 0a 89 25 0b    	or     %eax,0xb25890a(%rsi)
  if (action >= 0) {
     b00:	00 00                	add    %al,(%rax)
     b02:	09 86 00 0a 8f 25    	or     %eax,0x258f0a00(%rsi)
     b08:	0b 00                	or     (%rax),%eax
  if (decap_dst_flags) {
     b0a:	00 09                	add    %cl,(%rcx)
     b0c:	86 10                	xchg   %dl,(%rax)
  if (action >= 0) {
     b0e:	00 00                	add    %al,(%rax)
     b10:	00 04 12             	add    %al,(%rdx,%rdx,1)
     b13:	01 00                	add    %eax,(%rax)
     b15:	00 05 60 00 00 00    	add    %al,0x60(%rip)        # b7b <balancer_ingress+0xb7b>
     b1b:	03 00                	add    (%rax),%eax
        bpf_map_lookup_elem(&stats, &xpop_stats_key);
     b1d:	0c 9c                	or     $0x9c,%al
     b1f:	02 00                	add    (%rax),%al
     b21:	00 86 04 20 0d 8e    	add    %al,-0x71f2dffc(%rsi)
     b27:	10 0a                	adc    %cl,(%rdx)
     b29:	21 0a                	and    %ecx,(%rdx)
     b2b:	8a 33                	mov    (%rbx),%dh
    if (xpop_stats_data) {
     b2d:	0b 00                	or     (%rax),%eax
     b2f:	00 0a                	add    %cl,(%rdx)
     b31:	28 00                	sub    %al,(%rax)
     b33:	0f 10 0a             	movups (%rdx),%xmm1
     b36:	22 0a                	and    (%rdx),%cl
     b38:	8b 54 0b 00          	mov    0x0(%rbx,%rcx,1),%edx
     b3c:	00 0a                	add    %cl,(%rdx)
     b3e:	23 00                	and    (%rax),%eax
     b40:	0a 8c 60 0b 00 00 0a 	or     0xa00000b(%rax,%riz,2),%cl
     b47:	25 00 0a 8d c0       	and    $0xc08d0a00,%eax
     b4c:	01 00                	add    %eax,(%rax)
     b4e:	00 0a                	add    %cl,(%rdx)
     b50:	26 00 00             	es add %al,(%rax)
     b53:	00 04 12             	add    %al,(%rdx,%rdx,1)
     b56:	01 00                	add    %eax,(%rax)
     b58:	00 05 60 00 00 00    	add    %al,0x60(%rip)        # bbe <balancer_ingress+0xbbe>
     b5e:	10 00                	adc    %al,(%rax)
     b60:	04 1d                	add    $0x1d,%al
     b62:	0b 00                	or     (%rax),%eax
     b64:	00 05 60 00 00 00    	add    %al,0x60(%rip)        # bca <balancer_ingress+0xbca>
        bpf_map_lookup_elem(&stats, &stats_key);
     b6a:	08 00                	or     %al,(%rax)
     b6c:	0b 71 0b             	or     0xb(%rcx),%esi
     b6f:	00 00                	add    %al,(%rax)
     b71:	0d 9b 14 0b 57       	or     $0x570b149b,%eax
    if (!icmp_ptb_v6_stats) {
     b76:	1b 92 12 01 00 00    	sbb    0x112(%rdx),%edx
     b7c:	0b 59 01             	or     0x1(%rcx),%ebx
    icmp_ptb_v6_stats->v1 += 1;
     b7f:	04 04                	add    $0x4,%al
     b81:	00 1b                	add    %bl,(%rbx)
    __u32 mtu = bpf_ntohl(icmp_hdr->icmp6_mtu);
     b83:	83 12 01             	adcl   $0x1,(%rdx)
     b86:	00 00                	add    %al,(%rax)
    if (mtu < MAX_MTU_IN_PTB_TO_DROP) {
     b88:	0b 5a 01             	or     0x1(%rdx),%ebx
     b8b:	04 00                	add    $0x0,%al
     b8d:	00 0a                	add    %cl,(%rdx)
     b8f:	93                   	xchg   %eax,%ebx
      icmp_ptb_v6_stats->v2 += 1;
     b90:	12 01                	adc    (%rcx),%al
     b92:	00 00                	add    %al,(%rax)
     b94:	0b 61 01             	or     0x1(%rcx),%esp
  if (ip6h + 1 > data_end) {
     b97:	0a 94 1d 0b 00 00 0b 	or     0xb00000b(%rbp,%rbx,1),%dl
     b9e:	62 02                	(bad)
     ba0:	0a 95 1d 0b 00 00    	or     0xb1d(%rbp),%dl
     ba6:	0b 63 04             	or     0x4(%rbx),%esp
  pckt->flow.proto = ip6h->nexthdr;
     ba9:	0a 96 1d 0b 00 00    	or     0xb1d(%rsi),%dl
  pckt->flags |= F_ICMP;
     baf:	0b 64 06 0a          	or     0xa(%rsi,%rax,1),%esp
  memcpy(pckt->flow.srcv6, ip6h->daddr.s6_addr32, 16);
     bb3:	97                   	xchg   %eax,%edi
     bb4:	12 01                	adc    (%rcx),%al
     bb6:	00 00                	add    %al,(%rax)
     bb8:	0b 65 08             	or     0x8(%rbp),%esp
     bbb:	0a 98 12 01 00 00    	or     0x112(%rax),%bl
     bc1:	0b 66 09             	or     0x9(%rsi),%esp
     bc4:	0a 99 1a 0c 00 00    	or     0xc1a(%rcx),%bl
  memcpy(pckt->flow.dstv6, ip6h->saddr.s6_addr32, 16);
     bca:	0b 67 0a             	or     0xa(%rdi),%esp
     bcd:	0e                   	(bad)
     bce:	d5                   	(bad)
     bcf:	0b 00                	or     (%rax),%eax
     bd1:	00 0b                	add    %cl,(%rbx)
     bd3:	68 0c 0f 08 0b       	push   $0xb080f0c
     bd8:	68 0e e1 0b 00       	push   $0xbe10e
  if (protocol == IPPROTO_IPIP) {
     bdd:	00 0b                	add    %cl,(%rbx)
     bdf:	68 00 09 08 0b       	push   $0xb080900
     be4:	68 0a 89 b8 01       	push   $0x1b8890a
     be9:	00 00                	add    %al,(%rax)
     beb:	0b 68 00             	or     0x0(%rax),%ebp
     bee:	0a 8f b8 01 00 00    	or     0x1b8(%rdi),%cl
     bf4:	0b 68 04             	or     0x4(%rax),%ebp
  struct address dst_addr = {};
     bf7:	00 0a                	add    %cl,(%rdx)
     bf9:	90                   	nop
     bfa:	01 0c 00             	add    %ecx,(%rax,%rax,1)
     bfd:	00 0b                	add    %cl,(%rbx)
     bff:	68 00 09 08 0b       	push   $0xb080900
     c04:	68 0a 89 b8 01       	push   $0x1b8890a
    dst_addr.addr = pckt->flow.dst;
     c09:	00 00                	add    %al,(%rax)
     c0b:	0b 68 00             	or     0x0(%rax),%ebp
  __u32* decap_dst_flags = bpf_map_lookup_elem(&decap_dst, &dst_addr);
     c0e:	0a 8f b8 01 00 00    	or     0x1b8(%rdi),%cl
     c14:	0b 68 04             	or     0x4(%rax),%ebp
     c17:	00 00                	add    %al,(%rax)
     c19:	00 0c 9c             	add    %cl,(%rsp,%rbx,4)
     c1c:	02 00                	add    (%rax),%al
     c1e:	00 9a 04 26 0b 27    	add    %bl,0x270b2604(%rdx)
     c24:	0c 00                	or     $0x0,%al
     c26:	00 14 b2             	add    %dl,(%rdx,%rsi,4)
  if (decap_dst_flags) {
     c29:	00 00                	add    %al,(%rax)
     c2b:	00 15 8b 09 00 00    	add    %dl,0x98b(%rip)        # 15bc <balancer_ingress+0x15bc>
     c31:	00 0b                	add    %cl,(%rbx)
     c33:	37                   	(bad)
     c34:	0c 00                	or     $0x0,%al
     c36:	00 0d 9e 0e 0c 29    	add    %cl,0x290c0e9e(%rip)        # 290c1ada <_license+0x290bf6f5>
    data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     c3c:	0a 24 12             	or     (%rdx,%rdx,1),%ah
     c3f:	01 00                	add    %eax,(%rax)
     c41:	00 0c 2a             	add    %cl,(%rdx,%rbp,1)
     c44:	00 0a                	add    %cl,(%rdx)
     c46:	83 bb 00 00 00 0c 2b 	cmpl   $0x2b,0xc000000(%rbx)
    if (!data_stats) {
     c4d:	01 0a                	add    %ecx,(%rdx)
     c4f:	9c                   	pushf
     c50:	12 01                	adc    (%rcx),%al
    data_stats->v1 += 1;
     c52:	00 00                	add    %al,(%rax)
     c54:	0c 2e                	or     $0x2e,%al
    if ((*data + offset) > *data_end) {
     c56:	05 0a 9d 61 0c       	add    $0xc619d0a,%eax
     c5b:	00 00                	add    %al,(%rax)
     c5d:	0c 32                	or     $0x32,%al
     c5f:	06                   	(bad)
     c60:	00 04 12             	add    %al,(%rdx,%rdx,1)
     c63:	01 00                	add    %eax,(%rax)
     c65:	00 05 60 00 00 00    	add    %al,0x60(%rip)        # ccb <balancer_ingress+0xccb>
    if ((data + offset + sizeof(struct ipv6hdr)) > data_end) {
     c6b:	08 00                	or     %al,(%rax)
     c6d:	0b 72 0c             	or     0xc(%rdx),%esi
     c70:	00 00                	add    %al,(%rax)
     c72:	0d a0 09 0c 35       	or     $0x350c09a0,%eax
     c77:	0a 24 12             	or     (%rdx,%rdx,1),%ah
     c7a:	01 00                	add    %eax,(%rax)
    if (!--ip6h->hop_limit) {
     c7c:	00 0c 36             	add    %cl,(%rsi,%rsi,1)
     c7f:	00 0a                	add    %cl,(%rdx)
     c81:	9f                   	lahf
     c82:	61                   	(bad)
     c83:	0c 00                	or     $0x0,%al
     c85:	00 0c 37             	add    %cl,(%rdi,%rsi,1)
     c88:	01 00                	add    %eax,(%rax)
     c8a:	0b 8f 0c 00 00 0c    	or     0xc00000c(%rdi),%ecx
  memcpy(new_eth->h_source, old_eth->h_source, 6);
     c90:	c3                   	ret
     c91:	00 00                	add    %al,(%rax)
     c93:	00 a1 0d 35 1c a2    	add    %ah,-0x5de3caf3(%rcx)
     c99:	00 a8 02 b2 00 00    	add    %ch,0xb202(%rax)
  memcpy(new_eth->h_dest, old_eth->h_dest, 6);
     c9f:	00 1d a3 00 a8 02    	add    %bl,0x2a800a3(%rip)        # 2a80d48 <_license+0x2a7e963>
     ca5:	4e 10 00             	rex.WRX adc %r8b,(%rax)
     ca8:	00 1d ae 00 a8 02    	add    %bl,0x2a800ae(%rip)        # 2a80d5c <_license+0x2a7e977>
     cae:	fa                   	cli
     caf:	00 00                	add    %al,(%rax)
     cb1:	00 1d af 00 a8 02    	add    %bl,0x2a800af(%rip)        # 2a80d66 <_license+0x2a7e981>
  if (XDP_ADJUST_HEAD_FUNC(xdp, (int)sizeof(struct ipv6hdr))) {
     cb7:	b8 10 00 00 1e       	mov    $0x1e000010,%eax
     cbc:	b1 00                	mov    $0x0,%cl
     cbe:	ad                   	lods   %ds:(%rsi),%eax
     cbf:	02 bc 10 00 00 1e 1d 	add    0x1d1e0000(%rax,%rdx,1),%bh
     cc6:	00 ae 02 65 02 00    	add    %ch,0x26502(%rsi)
     ccc:	00 1e                	add    %bl,(%rsi)
     cce:	a4                   	movsb  %ds:(%rsi),%es:(%rdi)
     ccf:	00 a9 02 8b 09 00    	add    %ch,0x98b02(%rcx)
  struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     cd5:	00 1e                	add    %bl,(%rsi)
     cd7:	a5                   	movsl  %ds:(%rsi),%es:(%rdi)
     cd8:	00 aa 02 8b 09 00    	add    %ch,0x98b02(%rdx)
     cde:	00 1e                	add    %bl,(%rsi)
     ce0:	2a 00                	sub    (%rax),%al
  if (!data_stats) {
     ce2:	ac                   	lods   %ds:(%rsi),%al
     ce3:	02 ee                	add    %dh,%ch
     ce5:	04 00                	add    $0x0,%al
     ce7:	00 1e                	add    %bl,(%rsi)
     ce9:	b5 00                	mov    $0x0,%ch
     ceb:	b7 02                	mov    $0x2,%bh
     ced:	bb 00 00 00 1e       	mov    $0x1e000000,%ebx
  if (action >= 0) {
     cf2:	b6 00                	mov    $0x0,%dh
     cf4:	b9 02 fa 00 00       	mov    $0xfa02,%ecx
     cf9:	00 1e                	add    %bl,(%rsi)
     cfb:	b7 00                	mov    $0x0,%bh
  if (decap_dst_flags) {
     cfd:	b5 02                	mov    $0x2,%ch
  if (action >= 0) {
     cff:	b2 00                	mov    $0x0,%dl
     d01:	00 00                	add    %al,(%rax)
     d03:	1e                   	(bad)
     d04:	98                   	cwtl
     d05:	00 b2 02 12 01 00    	add    %dh,0x11202(%rdx)
     d0b:	00 1e                	add    %bl,(%rsi)
     d0d:	b8 00 af 02 a8       	mov    $0xa802af00,%eax
        bpf_map_lookup_elem(&stats, &xpop_stats_key);
     d12:	02 00                	add    (%rax),%al
     d14:	00 1e                	add    %bl,(%rsi)
     d16:	b9 00 35 03 bb       	mov    $0xbb033500,%ecx
     d1b:	00 00                	add    %al,(%rax)
     d1d:	00 1e                	add    %bl,(%rsi)
    if (xpop_stats_data) {
     d1f:	ba 00 b0 02 81       	mov    $0x8102b000,%edx
     d24:	05 00 00 1e bb       	add    $0xbb1e0000,%eax
     d29:	00 45 03             	add    %al,0x3(%rbp)
  udp = data + off;
     d2c:	bb 00 00 00 1e       	mov    $0x1e000000,%ebx
  if (is_ipv6) {
     d31:	bc 00 46 03 8b       	mov    $0x8b034600,%esp
  if (udp + 1 > data_end) {
     d36:	09 00                	or     %eax,(%rax)
     d38:	00 1e                	add    %bl,(%rsi)
     d3a:	bd 00 b8 02 9c       	mov    $0x9c02b800,%ebp
     d3f:	02 00                	add    (%rax),%al
     d41:	00 1e                	add    %bl,(%rsi)
     d43:	be 00 b3 02 9c       	mov    $0x9c02b300,%esi
     d48:	02 00                	add    (%rax),%al
     d4a:	00 1e                	add    %bl,(%rsi)
     d4c:	bf 00 ab 02 c7       	mov    $0xc702ab00,%edi
     d51:	00 00                	add    %al,(%rax)
     d53:	00 1e                	add    %bl,(%rsi)
     d55:	c0 00 b1             	rolb   $0xb1,(%rax)
     d58:	02 fa                	add    %dl,%bh
     d5a:	00 00                	add    %al,(%rax)
     d5c:	00 1e                	add    %bl,(%rsi)
     d5e:	25 00 b6 02 bb       	and    $0xbb02b600,%eax
     d63:	00 00                	add    %al,(%rax)
     d65:	00 1f                	add    %bl,(%rdi)
     d67:	1e                   	(bad)
     d68:	c1 00 e8             	roll   $0xe8,(%rax)
     d6b:	02 b8 10 00 00 00    	add    0x10(%rax),%bh
     d71:	1f                   	(bad)
     d72:	1e                   	(bad)
     d73:	c1 00 e0             	roll   $0xe0,(%rax)
    vip.vip = pckt.flow.dst;
     d76:	02 b8 10 00 00 00    	add    0x10(%rax),%bh
  vip.port = pckt.flow.port16[1];
     d7c:	1f                   	(bad)
     d7d:	1e                   	(bad)
     d7e:	c2 00 12             	ret    $0x1200
     d81:	03 8b 09 00 00 1e    	add    0x1e000009(%rbx),%ecx
  vip.proto = pckt.flow.proto;
     d87:	07                   	(bad)
     d88:	00 12                	add    %dl,(%rdx)
     d8a:	03 e6                	add    %esi,%esp
     d8c:	10 00                	adc    %al,(%rax)
  vip_info = bpf_map_lookup_elem(&vip_map, &vip);
     d8e:	00 00                	add    %al,(%rax)
     d90:	1f                   	(bad)
     d91:	1e                   	(bad)
     d92:	c2 00 15             	ret    $0x1500
     d95:	03 8b 09 00 00 1e    	add    0x1e000009(%rbx),%ecx
     d9b:	07                   	(bad)
     d9c:	00 15 03 e6 10 00    	add    %dl,0x10e603(%rip)        # 10f3a5 <_license+0x10cfc0>
     da2:	00 00                	add    %al,(%rax)
     da4:	1f                   	(bad)
     da5:	1e                   	(bad)
     da6:	c2 00 36             	ret    $0x3600
     da9:	03 8b 09 00 00 1e    	add    0x1e000009(%rbx),%ecx
  if (!vip_info) {
     daf:	07                   	(bad)
     db0:	00 36                	add    %dh,(%rsi)
     db2:	03 e6                	add    %esi,%esp
  if (data_end - data > MAX_PCKT_SIZE) {
     db4:	10 00                	adc    %al,(%rax)
     db6:	00 1f                	add    %bl,(%rdi)
     db8:	1e                   	(bad)
     db9:	c3                   	ret
     dba:	00 36                	add    %dh,(%rsi)
     dbc:	03 bb 00 00 00 1e    	add    0x1e000000(%rbx),%edi
     dc2:	14 00                	adc    $0x0,%al
     dc4:	36 03 eb             	ss add %ebx,%ebp
     dc7:	10 00                	adc    %al,(%rax)
     dc9:	00 1e                	add    %bl,(%rsi)
     dcb:	c4                   	(bad)
     dcc:	00 36                	add    %dh,(%rsi)
     dce:	03 eb                	add    %ebx,%ebp
  data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     dd0:	10 00                	adc    %al,(%rax)
     dd2:	00 00                	add    %al,(%rax)
     dd4:	00 1f                	add    %bl,(%rdi)
     dd6:	1e                   	(bad)
     dd7:	c5 00 45             	(bad)
     dda:	03 fa                	add    %edx,%edi
     ddc:	00 00                	add    %al,(%rax)
     dde:	00 00                	add    %al,(%rax)
  if (!data_stats) {
     de0:	1f                   	(bad)
     de1:	1e                   	(bad)
     de2:	c2 00 46             	ret    $0x4600
     de5:	03 8b 09 00 00 1e    	add    0x1e000009(%rbx),%ecx
  data_stats->v1 += 1;
     deb:	07                   	(bad)
     dec:	00 46 03             	add    %al,0x3(%rsi)
  if ((vip_info->flags & F_HASH_NO_SRC_PORT)) {
     def:	e6 10                	out    %al,$0x10
     df1:	00 00                	add    %al,(%rax)
    pckt.flow.port16[0] = 0;
     df3:	1f                   	(bad)
     df4:	1e                   	(bad)
     df5:	c3                   	ret
     df6:	00 46 03             	add    %al,0x3(%rsi)
     df9:	bb 00 00 00 1e       	mov    $0x1e000000,%ebx
  vip_num = vip_info->vip_num;
     dfe:	14 00                	adc    $0x0,%al
     e00:	46 03 eb             	rex.RX add %ebx,%r13d
     e03:	10 00                	adc    %al,(%rax)
     e05:	00 1e                	add    %bl,(%rsi)
     e07:	c4                   	(bad)
     e08:	00 46 03             	add    %al,0x3(%rsi)
     e0b:	eb 10                	jmp    e1d <balancer_ingress+0xe1d>
  __u32 cpu_num = bpf_get_smp_processor_id();
     e0d:	00 00                	add    %al,(%rax)
     e0f:	00 00                	add    %al,(%rax)
     e11:	1f                   	(bad)
     e12:	1e                   	(bad)
     e13:	c6 00 49             	movb   $0x49,(%rax)
     e16:	03 bb 00 00 00 1e    	add    0x1e000000(%rbx),%edi
  void* lru_map = bpf_map_lookup_elem(&lru_mapping, &cpu_num);
     e1c:	c7 00 4a 03 81 05    	movl   $0x581034a,(%rax)
     e22:	00 00                	add    %al,(%rax)
    struct lb_stats* lru_stats = bpf_map_lookup_elem(&stats, &lru_stats_key);
     e24:	1f                   	(bad)
     e25:	1e                   	(bad)
     e26:	c2 00 4a             	ret    $0x4a00
     e29:	03 8b 09 00 00 1e    	add    0x1e000009(%rbx),%ecx
     e2f:	07                   	(bad)
     e30:	00 4a 03             	add    %cl,0x3(%rdx)
     e33:	e6 10                	out    %al,$0x10
    if (!lru_stats) {
     e35:	00 00                	add    %al,(%rax)
     e37:	1f                   	(bad)
     e38:	1e                   	(bad)
     e39:	c3                   	ret
     e3a:	00 4a 03             	add    %cl,0x3(%rdx)
    lru_stats->v1 += 1;
     e3d:	bb 00 00 00 1e       	mov    $0x1e000000,%ebx
     e42:	14 00                	adc    $0x0,%al
     e44:	4a 03 eb             	rex.WX add %rbx,%rbp
     e47:	10 00                	adc    %al,(%rax)
     e49:	00 1e                	add    %bl,(%rsi)
     e4b:	c4                   	(bad)
     e4c:	00 4a 03             	add    %cl,0x3(%rdx)
     e4f:	eb 10                	jmp    e61 <balancer_ingress+0xe61>
     e51:	00 00                	add    %al,(%rax)
     e53:	00 00                	add    %al,(%rax)
  void* lru_map = bpf_map_lookup_elem(&lru_mapping, &cpu_num);
     e55:	00 1f                	add    %bl,(%rdi)
     e57:	1e                   	(bad)
     e58:	c8 00 56 03          	enter  $0x5600,$0x3
     e5c:	b8 10 00 00 1f       	mov    $0x1f000010,%eax
     e61:	1e                   	(bad)
     e62:	c9                   	leave
     e63:	00 69 03             	add    %ch,0x3(%rcx)
     e66:	bb 00 00 00 1e       	mov    $0x1e000000,%ebx
     e6b:	ca 00 6a             	lret   $0x6a00
  if (!lru_map) {
     e6e:	03 a4 06 00 00 1e cb 	add    -0x34e20000(%rsi,%rax,1),%esp
     e75:	00 6f 03             	add    %ch,0x3(%rdi)
     e78:	f0 10 00             	lock adc %al,(%rax)
     e7b:	00 1f                	add    %bl,(%rdi)
     e7d:	1e                   	(bad)
     e7e:	c2 00 6b             	ret    $0x6b00
  if ((vip_info->flags & F_QUIC_VIP)) {
     e81:	03 8b 09 00 00 1e    	add    0x1e000009(%rbx),%ecx
     e87:	07                   	(bad)
    bool is_icmp = (pckt.flags & F_ICMP);
     e88:	00 6b 03             	add    %ch,0x3(%rbx)
     e8b:	e6 10                	out    %al,$0x10
    if (is_icmp) {
     e8d:	00 00                	add    %al,(%rax)
     e8f:	1f                   	(bad)
     e90:	1e                   	(bad)
     e91:	c3                   	ret
     e92:	00 6b 03             	add    %ch,0x3(%rbx)
     e95:	bb 00 00 00 1e       	mov    $0x1e000000,%ebx
     e9a:	14 00                	adc    $0x0,%al
     e9c:	6b 03 eb             	imul   $0xffffffeb,(%rbx),%eax
          bpf_map_lookup_elem(&quic_stats_map, &quic_packets_stats_key);
     e9f:	10 00                	adc    %al,(%rax)
     ea1:	00 1e                	add    %bl,(%rsi)
     ea3:	c4                   	(bad)
     ea4:	00 6b 03             	add    %ch,0x3(%rbx)
     ea7:	eb 10                	jmp    eb9 <balancer_ingress+0xeb9>
     ea9:	00 00                	add    %al,(%rax)
     eab:	00 00                	add    %al,(%rax)
      if (!quic_packets_stats) {
     ead:	1f                   	(bad)
     eae:	1e                   	(bad)
     eaf:	09 00                	or     %eax,(%rax)
     eb1:	74 03                	je     eb6 <balancer_ingress+0xeb6>
     eb3:	bb 00 00 00 1e       	mov    $0x1e000000,%ebx
  if ((data + off + sizeof(struct udphdr) + sizeof(__u8)) > data_end) {
     eb8:	d0 00                	rolb   (%rax)
  bool is_icmp = (pckt->flags & F_ICMP);
     eba:	75 03                	jne    ebf <balancer_ingress+0xebf>
     ebc:	b6 00                	mov    $0x0,%dh
     ebe:	00 00                	add    %al,(%rax)
  if ((data + off + sizeof(struct udphdr) + sizeof(__u8)) > data_end) {
     ec0:	1f                   	(bad)
     ec1:	1e                   	(bad)
     ec2:	c2 00 75             	ret    $0x7500
     ec5:	03 8b 09 00 00 1e    	add    0x1e000009(%rbx),%ecx
     ecb:	07                   	(bad)
     ecc:	00 75 03             	add    %dh,0x3(%rbp)
     ecf:	e6 10                	out    %al,$0x10
     ed1:	00 00                	add    %al,(%rax)
     ed3:	1f                   	(bad)
     ed4:	1e                   	(bad)
     ed5:	c3                   	ret
     ed6:	00 75 03             	add    %dh,0x3(%rbp)
  if ((*pkt_type & QUIC_LONG_HEADER) == QUIC_LONG_HEADER) {
     ed9:	bb 00 00 00 1e       	mov    $0x1e000000,%ebx
     ede:	14 00                	adc    $0x0,%al
     ee0:	75 03                	jne    ee5 <balancer_ingress+0xee5>
     ee2:	eb 10                	jmp    ef4 <balancer_ingress+0xef4>
    if (quic_data + sizeof(struct quic_short_header) > data_end) {
     ee4:	00 00                	add    %al,(%rax)
     ee6:	1e                   	(bad)
     ee7:	c4                   	(bad)
     ee8:	00 75 03             	add    %dh,0x3(%rbp)
     eeb:	eb 10                	jmp    efd <balancer_ingress+0xefd>
     eed:	00 00                	add    %al,(%rax)
     eef:	00 00                	add    %al,(%rax)
     ef1:	1f                   	(bad)
     ef2:	1e                   	(bad)
     ef3:	d1 00                	roll   (%rax)
     ef5:	89 03                	mov    %eax,(%rbx)
    vip.port = 0;
     ef7:	b2 00                	mov    $0x0,%dl
     ef9:	00 00                	add    %al,(%rax)
     efb:	1f                   	(bad)
     efc:	1e                   	(bad)
    vip_info = bpf_map_lookup_elem(&vip_map, &vip);
     efd:	c2 00 81             	ret    $0x8100
     f00:	03 8b 09 00 00 1e    	add    0x1e000009(%rbx),%ecx
     f06:	07                   	(bad)
     f07:	00 81 03 e6 10 00    	add    %al,0x10e603(%rcx)
     f0d:	00 1f                	add    %bl,(%rdi)
    if (!vip_info) {
     f0f:	1e                   	(bad)
     f10:	c3                   	ret
     f11:	00 81 03 bb 00 00    	add    %al,0xbb03(%rcx)
     f17:	00 1e                	add    %bl,(%rsi)
     f19:	14 00                	adc    $0x0,%al
    if (!(vip_info->flags & F_HASH_DPORT_ONLY) &&
     f1b:	81 03 eb 10 00 00    	addl   $0x10eb,(%rbx)
     f21:	1e                   	(bad)
     f22:	c4                   	(bad)
     f23:	00 81 03 eb 10 00    	add    %al,0x10eb03(%rcx)
      pckt.flow.port16[1] = 0;
     f29:	00 00                	add    %al,(%rax)
     f2b:	00 00                	add    %al,(%rax)
     f2d:	00 00                	add    %al,(%rax)
     f2f:	1f                   	(bad)
     f30:	1e                   	(bad)
     f31:	b9 00 5e 03 bb       	mov    $0xbb035e00,%ecx
     f36:	00 00                	add    %al,(%rax)
     f38:	00 1e                	add    %bl,(%rsi)
      struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     f3a:	ba 00 5f 03 81       	mov    $0x81035f00,%edx
     f3f:	05 00 00 1f 1e       	add    $0x1e1f0000,%eax
     f44:	c2 00 5f             	ret    $0x5f00
     f47:	03 8b 09 00 00 1e    	add    0x1e000009(%rbx),%ecx
      if (!data_stats) {
     f4d:	07                   	(bad)
     f4e:	00 5f 03             	add    %bl,0x3(%rdi)
     f51:	e6 10                	out    %al,$0x10
     f53:	00 00                	add    %al,(%rax)
      data_stats->v1 += 1;
     f55:	1f                   	(bad)
     f56:	1e                   	(bad)
     f57:	c3                   	ret
     f58:	00 5f 03             	add    %bl,0x3(%rdi)
        (icmp_hdr->icmp6_code == ICMPV6_ADDR_UNREACH) ||
     f5b:	bb 00 00 00 1e       	mov    $0x1e000000,%ebx
      if (ignorable_quic_icmp_code(data, data_end, is_ipv6)) {
     f60:	14 00                	adc    $0x0,%al
     f62:	5f                   	pop    %rdi
     f63:	03 eb                	add    %ebx,%ebp
     f65:	10 00                	adc    %al,(%rax)
        data_stats->v2 += 1;
     f67:	00 1e                	add    %bl,(%rsi)
     f69:	c4                   	(bad)
     f6a:	00 5f 03             	add    %bl,0x3(%rdi)
     f6d:	eb 10                	jmp    f7f <balancer_ingress+0xf7f>
  void* lru_map = bpf_map_lookup_elem(&lru_mapping, &cpu_num);
     f6f:	00 00                	add    %al,(%rax)
     f71:	00 00                	add    %al,(%rax)
     f73:	00 00                	add    %al,(%rax)
     f75:	1f                   	(bad)
     f76:	1e                   	(bad)
     f77:	c6 00 e9             	movb   $0xe9,(%rax)
     f7a:	03 bb 00 00 00 1e    	add    0x1e000000(%rbx),%edi
     f80:	c7 00 ea 03 81 05    	movl   $0x58103ea,(%rax)
     f86:	00 00                	add    %al,(%rax)
  if (!lru_map) {
     f88:	1f                   	(bad)
     f89:	1e                   	(bad)
     f8a:	c2 00 eb             	ret    $0xeb00
     f8d:	03 8b 09 00 00 1e    	add    0x1e000009(%rbx),%ecx
  if ((vip_info->flags & F_QUIC_VIP)) {
     f93:	07                   	(bad)
     f94:	00 eb                	add    %ch,%bl
     f96:	03 e6                	add    %esi,%esp
     f98:	10 00                	adc    %al,(%rax)
     f9a:	00 1f                	add    %bl,(%rdi)
     f9c:	1e                   	(bad)
     f9d:	c3                   	ret
     f9e:	00 eb                	add    %ch,%bl
    bool is_icmp = (pckt.flags & F_ICMP);
     fa0:	03 bb 00 00 00 1e    	add    0x1e000000(%rbx),%edi
     fa6:	14 00                	adc    $0x0,%al
     fa8:	eb 03                	jmp    fad <balancer_ingress+0xfad>
     faa:	eb 10                	jmp    fbc <balancer_ingress+0xfbc>
     fac:	00 00                	add    %al,(%rax)
     fae:	1e                   	(bad)
     faf:	c4                   	(bad)
          bpf_map_lookup_elem(&quic_stats_map, &quic_packets_stats_key);
     fb0:	00 eb                	add    %ch,%bl
     fb2:	03 eb                	add    %ebx,%ebp
     fb4:	10 00                	adc    %al,(%rax)
     fb6:	00 00                	add    %al,(%rax)
     fb8:	00 00                	add    %al,(%rax)
     fba:	1f                   	(bad)
     fbb:	1e                   	(bad)
     fbc:	c2 00 0e             	ret    $0xe00
     fbf:	04 8b                	add    $0x8b,%al
     fc1:	09 00                	or     %eax,(%rax)
     fc3:	00 1e                	add    %bl,(%rsi)
      if (!quic_packets_stats) {
     fc5:	07                   	(bad)
     fc6:	00 0e                	add    %cl,(%rsi)
     fc8:	04 e6                	add    $0xe6,%al
     fca:	10 00                	adc    %al,(%rax)
     fcc:	00 1f                	add    %bl,(%rdi)
  if ((data + off + sizeof(struct udphdr) + sizeof(__u8)) > data_end) {
     fce:	1e                   	(bad)
     fcf:	14 00                	adc    $0x0,%al
  bool is_icmp = (pckt->flags & F_ICMP);
     fd1:	0e                   	(bad)
     fd2:	04 eb                	add    $0xeb,%al
     fd4:	10 00                	adc    %al,(%rax)
  if ((data + off + sizeof(struct udphdr) + sizeof(__u8)) > data_end) {
     fd6:	00 1e                	add    %bl,(%rsi)
     fd8:	c4                   	(bad)
     fd9:	00 0e                	add    %cl,(%rsi)
     fdb:	04 eb                	add    $0xeb,%al
     fdd:	10 00                	adc    %al,(%rax)
     fdf:	00 1e                	add    %bl,(%rsi)
     fe1:	c3                   	ret
     fe2:	00 0e                	add    %cl,(%rsi)
     fe4:	04 bb                	add    $0xbb,%al
     fe6:	00 00                	add    %al,(%rax)
     fe8:	00 00                	add    %al,(%rax)
     fea:	00 1f                	add    %bl,(%rdi)
     fec:	1e                   	(bad)
     fed:	c2 00 16             	ret    $0x1600
      struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     ff0:	04 8b                	add    $0x8b,%al
     ff2:	09 00                	or     %eax,(%rax)
     ff4:	00 1e                	add    %bl,(%rsi)
     ff6:	07                   	(bad)
     ff7:	00 16                	add    %dl,(%rsi)
     ff9:	04 e6                	add    $0xe6,%al
     ffb:	10 00                	adc    %al,(%rax)
     ffd:	00 1f                	add    %bl,(%rdi)
     fff:	1e                   	(bad)
    1000:	14 00                	adc    $0x0,%al
    1002:	16                   	(bad)
      if (!data_stats) {
    1003:	04 eb                	add    $0xeb,%al
    1005:	10 00                	adc    %al,(%rax)
    1007:	00 1e                	add    %bl,(%rsi)
    1009:	c4                   	(bad)
    100a:	00 16                	add    %dl,(%rsi)
    100c:	04 eb                	add    $0xeb,%al
    100e:	10 00                	adc    %al,(%rax)
      data_stats->v1 += 1;
    1010:	00 1e                	add    %bl,(%rsi)
    1012:	c3                   	ret
    1013:	00 16                	add    %dl,(%rsi)
        (icmp_hdr->code == ICMP_PORT_UNREACH) ||
    1015:	04 bb                	add    $0xbb,%al
    1017:	00 00                	add    %al,(%rax)
    1019:	00 00                	add    %al,(%rax)
    101b:	00 1f                	add    %bl,(%rdi)
    101d:	1e                   	(bad)
    101e:	c2 00 08             	ret    $0x800
      if (ignorable_quic_icmp_code(data, data_end, is_ipv6)) {
    1021:	04 8b                	add    $0x8b,%al
        data_stats->v2 += 1;
    1023:	09 00                	or     %eax,(%rax)
    1025:	00 1e                	add    %bl,(%rsi)
    1027:	07                   	(bad)
    1028:	00 08                	add    %cl,(%rax)
    102a:	04 e6                	add    $0xe6,%al
    102c:	10 00                	adc    %al,(%rax)
    102e:	00 1f                	add    %bl,(%rdi)
  original_sport = pckt.flow.port16[0];
    1030:	1e                   	(bad)
    1031:	c3                   	ret
    1032:	00 08                	add    %cl,(%rax)
    1034:	04 bb                	add    $0xbb,%al
    if (!dst && !(pckt.flags & F_SYN_SET) &&
    1036:	00 00                	add    %al,(%rax)
    1038:	00 1e                	add    %bl,(%rsi)
    103a:	14 00                	adc    $0x0,%al
        !(vip_info->flags & F_LRU_BYPASS)) {
    103c:	08 04 eb             	or     %al,(%rbx,%rbp,8)
    if (!dst && !(pckt.flags & F_SYN_SET) &&
    103f:	10 00                	adc    %al,(%rax)
    1041:	00 1e                	add    %bl,(%rsi)
    1043:	c4                   	(bad)
    1044:	00 08                	add    %cl,(%rax)
    1046:	04 eb                	add    $0xeb,%al
    1048:	10 00                	adc    %al,(%rax)
    104a:	00 00                	add    %al,(%rax)
    104c:	00 00                	add    %al,(%rax)
    104e:	0b 53 10             	or     0x10(%rbx),%edx
    1051:	00 00                	add    %al,(%rax)
  dst_lru = real_bpf_map_lookup_elem(lru_map, &pckt->flow);
    1053:	20 ad 38 07 3f 0c    	and    %ch,0xc3f0738(%rbp)
    1059:	21 a4 8b 09 00 00 07 	and    %esp,0x7000009(%rbx,%rcx,4)
  if (!isGlobalLru && pckt->flow.proto == IPPROTO_UDP) {
    1060:	40 0c 00             	rex or $0x0,%al
    1063:	21 a5 8b 09 00 00    	and    %esp,0x98b(%rbp)
    1069:	07                   	(bad)
    106a:	41 0c 08             	rex.B or $0x8,%al
    106d:	21 a6 8b 09 00 00    	and    %esp,0x98b(%rsi)
    if (cur_time - dst_lru->atime > LRU_UDP_TIMEOUT) {
    1073:	07                   	(bad)
    1074:	42 0c 10             	rex.X or $0x10,%al
    1077:	21 a7 8b 09 00 00    	and    %esp,0x98b(%rdi)
    107d:	07                   	(bad)
    107e:	43 0c 18             	rex.XB or $0x18,%al
    1081:	21 a8 aa 10 00 00    	and    %ebp,0x10aa(%rax)
    1087:	07                   	(bad)
    1088:	44 0c 20             	rex.R or $0x20,%al
    108b:	21 aa b1 10 00 00    	and    %ebp,0x10b1(%rdx)
    1091:	07                   	(bad)
    1092:	45 0c 28             	rex.RB or $0x28,%al
    1095:	21 ac bb 00 00 00 07 	and    %ebp,0x7000000(%rbx,%rdi,4)
    if (quic_data + sizeof(struct quic_long_header) > data_end) {
    109c:	46 0c 30             	rex.RX or $0x30,%al
    109f:	21 24 bb             	and    %esp,(%rbx,%rdi,4)
    10a2:	00 00                	add    %al,(%rax)
    10a4:	00 07                	add    %al,(%rdi)
    10a6:	47 0c 34             	rex.RXB or $0x34,%al
    if ((*pkt_type & QUIC_PACKET_TYPE_MASK) < QUIC_HANDSHAKE) {
    10a9:	00 0b                	add    %cl,(%rbx)
    10ab:	af                   	scas   %es:(%rdi),%eax
    10ac:	10 00                	adc    %al,(%rax)
    10ae:	00 22                	add    %ah,(%rdx)
        quic_packets_stats->cid_initial += 1;
    10b0:	a9 0b b6 10 00       	test   $0x10b60b,%eax
    10b5:	00 22                	add    %ah,(%rdx)
    10b7:	ab                   	stos   %eax,%es:(%rdi)
    10b8:	06                   	(bad)
      bpf_map_lookup_elem(&server_id_stats, &vip_num);
    10b9:	b0 02                	mov    $0x2,%al
    10bb:	01 0d b4 30 03 2b    	add    %ecx,0x2b0330b4(%rip)        # 2b034175 <_license+0x2b031d90>
    10c1:	0a b2 18 03 00 00    	or     0x318(%rdx),%dh
    10c7:	03 2c 00             	add    (%rax,%rax,1),%ebp
    10ca:	0a b3 bb 00 00 00    	or     0xbb(%rbx),%dh
    10d0:	03 2d 28 0a 24 12    	add    0x12240a28(%rip),%ebp        # 12241afe <_license+0x1223f719>
    10d6:	01 00                	add    %eax,(%rax)
    10d8:	00 03                	add    %al,(%rbx)
    10da:	2e 2c 0a             	cs sub $0xa,%al
    10dd:	93                   	xchg   %eax,%ebx
    10de:	12 01                	adc    (%rcx),%al
  if (!per_vip_stats) {
    10e0:	00 00                	add    %al,(%rax)
    10e2:	03 30                	add    (%rax),%esi
    10e4:	2d 00 23 b2 00       	sub    $0xb22300,%eax
    10e9:	00 00                	add    %al,(%rax)
    10eb:	23 bb 00 00 00 0d    	and    0xd000000(%rbx),%edi
    10f1:	cf                   	iret
  if ((*pkt_type & QUIC_LONG_HEADER) == QUIC_LONG_HEADER) {
    10f2:	08 0c 3a             	or     %cl,(%rdx,%rdi,1)
    10f5:	0a cc                	or     %ah,%cl
    10f7:	b2 00                	mov    $0x0,%dl
    10f9:	00 00                	add    %al,(%rax)
    if (quic_data + sizeof(struct quic_short_header) > data_end) {
    10fb:	0c 3b                	or     $0x3b,%al
    10fd:	00 0a                	add    %cl,(%rdx)
    10ff:	cd 12                	int    $0x12
    1101:	01 00                	add    %eax,(%rax)
    1103:	00 0c 3c             	add    %cl,(%rsp,%rdi,1)
    1106:	04 0a                	add    $0xa,%al
  if (!connId) {
    1108:	ce                   	(bad)
    1109:	b8 10 00 00 0c       	mov    $0xc000010,%eax
    110e:	3d 05 00 1c d2       	cmp    $0xd21c0005,%eax
  __u8 connIdVersion = (connId[0] >> 6);
    1113:	0c c3                	or     $0xc3,%al
    1115:	01 b2 00 00 00 1d    	add    %esi,0x1d000000(%rdx)
  if (connIdVersion == QUIC_CONNID_VERSION_V1) {
    111b:	b1 0c                	mov    $0xc,%cl
    111d:	c4 01 7e 11 00       	vmovss %xmm8,(%r8)
    1122:	00 1d 98 0c c5 01    	add    %bl,0x1c50c98(%rip)        # 1c51dc0 <_license+0x1c4f9db>
    1128:	69 09 00 00 1d ae    	imul   $0xae1d0000,(%rcx),%ecx
    112e:	0c c6                	or     $0xc6,%al
    1130:	01 fa                	add    %edi,%edx
    1132:	00 00                	add    %al,(%rax)
        ((connId[0] & 0x3F) << 10) | (connId[1] << 2) | (connId[2] >> 6);
    1134:	00 1d b6 0c c7 01    	add    %bl,0x1c70cb6(%rip)        # 1c71df0 <_license+0x1c6fa0b>
    113a:	6f                   	outsl  %ds:(%rsi),(%dx)
    113b:	0a 00                	or     (%rax),%al
    113d:	00 1d bd 0c c8 01    	add    %bl,0x1c80cbd(%rip)        # 1c81e00 <_license+0x1c7fa1b>
    1143:	79 0a                	jns    114f <balancer_ingress+0x114f>
    1145:	00 00                	add    %al,(%rax)
    1147:	1d a4 0c c9 01       	sbb    $0x1c90ca4,%eax
    114c:	8b 09                	mov    (%rcx),%ecx
    114e:	00 00                	add    %al,(%rax)
    if (quic_data + sizeof(struct quic_long_header) > data_end) {
    1150:	1d a5 0c ca 01       	sbb    $0x1ca0ca5,%eax
    1155:	8b 09                	mov    (%rcx),%ecx
    1157:	00 00                	add    %al,(%rax)
    1159:	1d af 0c cb 01       	sbb    $0x1cb0caf,%eax
    if ((*pkt_type & QUIC_PACKET_TYPE_MASK) < QUIC_HANDSHAKE) {
    115e:	b8 10 00 00 1e       	mov    $0x1e000010,%eax
    1163:	d3 0c cd 01 6c 0b 00 	rorl   %cl,0xb6c01(,%rcx,8)
        quic_packets_stats->cid_initial += 1;
    116a:	00 1e                	add    %bl,(%rsi)
    116c:	d4                   	(bad)
    116d:	0c ce                	or     $0xce,%al
      bpf_map_lookup_elem(&server_id_stats, &vip_num);
    116f:	01 7e 0a             	add    %edi,0xa(%rsi)
    1172:	00 00                	add    %al,(%rax)
    1174:	1e                   	(bad)
    1175:	c0 0c cc 01          	rorb   $0x1,(%rsp,%rcx,8)
    1179:	fa                   	cli
    117a:	00 00                	add    %al,(%rax)
    117c:	00 00                	add    %al,(%rax)
    117e:	0b bc 10 00 00 1c d5 	or     -0x2ae40000(%rax,%rdx,1),%edi
    1185:	0e                   	(bad)
    1186:	13 01                	adc    (%rcx),%eax
    1188:	b2 00                	mov    $0x0,%dl
    118a:	00 00                	add    %al,(%rax)
    118c:	1d a4 0e 14 01       	sbb    $0x1140ea4,%eax
    1191:	8b 09                	mov    (%rcx),%ecx
    1193:	00 00                	add    %al,(%rax)
    1195:	1d a5 0e 15 01       	sbb    $0x1150ea5,%eax
    119a:	8b 09                	mov    (%rcx),%ecx
    119c:	00 00                	add    %al,(%rax)
    119e:	1d d6 0e 16 01       	sbb    $0x1160ed6,%eax
    11a3:	fa                   	cli
    11a4:	00 00                	add    %al,(%rax)
    11a6:	00 1d b1 0e 17 01    	add    %bl,0x1170eb1(%rip)        # 117205d <_license+0x116fc78>
  if (!per_vip_stats) {
    11ac:	7e 11                	jle    11bf <balancer_ingress+0x11bf>
    11ae:	00 00                	add    %al,(%rax)
    11b0:	1e                   	(bad)
    11b1:	d7                   	xlat   %ds:(%rbx)
    11b2:	0e                   	(bad)
    11b3:	18 01                	sbb    %al,(%rcx)
    11b5:	11 12                	adc    %edx,(%rdx)
    11b7:	00 00                	add    %al,(%rax)
    if (long_header->conn_id_lens < QUIC_MIN_CONNID_LEN) {
    11b9:	1e                   	(bad)
    11ba:	d3 0e                	rorl   %cl,(%rsi)
    11bc:	19 01                	sbb    %eax,(%rcx)
    11be:	6c                   	insb   (%dx),%es:(%rdi)
    11bf:	0b 00                	or     (%rax),%eax
    11c1:	00 1f                	add    %bl,(%rdi)
    11c3:	1e                   	(bad)
    11c4:	b9 0e 26 01 bb       	mov    $0xbb01260e,%ecx
    11c9:	00 00                	add    %al,(%rax)
  if (!connId) {
    11cb:	00 1e                	add    %bl,(%rsi)
    11cd:	e3 0e                	jrcxz  11dd <balancer_ingress+0x11dd>
    11cf:	27                   	(bad)
    11d0:	01 81 05 00 00 1e    	add    %eax,0x1e000005(%rcx)
  __u8 connIdVersion = (connId[0] >> 6);
    11d6:	e0 0e                	loopne 11e6 <balancer_ingress+0x11e6>
    11d8:	2d 01 9c 02 00       	sub    $0x29c01,%eax
  if (connIdVersion == QUIC_CONNID_VERSION_V1) {
    11dd:	00 1f                	add    %bl,(%rdi)
    11df:	1e                   	(bad)
    11e0:	c2 0e 28             	ret    $0x280e
    11e3:	01 8b 09 00 00 1e    	add    %ecx,0x1e000009(%rbx)
    11e9:	07                   	(bad)
    11ea:	0e                   	(bad)
    11eb:	28 01                	sub    %al,(%rcx)
    11ed:	e6 10                	out    %al,$0x10
    11ef:	00 00                	add    %al,(%rax)
    11f1:	1f                   	(bad)
    11f2:	1e                   	(bad)
    11f3:	c3                   	ret
    11f4:	0e                   	(bad)
    11f5:	28 01                	sub    %al,(%rcx)
        ((connId[0] & 0x3F) << 10) | (connId[1] << 2) | (connId[2] >> 6);
    11f7:	bb 00 00 00 1e       	mov    $0x1e000000,%ebx
    11fc:	14 0e                	adc    $0xe,%al
    11fe:	28 01                	sub    %al,(%rcx)
    1200:	eb 10                	jmp    1212 <balancer_ingress+0x1212>
    1202:	00 00                	add    %al,(%rax)
    1204:	1e                   	(bad)
    1205:	c4                   	(bad)
    1206:	0e                   	(bad)
    1207:	28 01                	sub    %al,(%rcx)
    1209:	eb 10                	jmp    121b <balancer_ingress+0x121b>
    120b:	00 00                	add    %al,(%rax)
    120d:	00 00                	add    %al,(%rax)
    120f:	00 00                	add    %al,(%rax)
    1211:	0b 16                	or     (%rsi),%edx
    dst_lru->atime = cur_time;
    1213:	12 00                	adc    (%rax),%al
    1215:	00 0d e2 08 13 59    	add    %cl,0x591308e2(%rip)        # 59131afd <_license+0x5912f718>
  key = dst_lru->pos;
    121b:	0a 07                	or     (%rdi),%al
    121d:	12 01                	adc    (%rcx),%al
    121f:	00 00                	add    %al,(%rax)
  pckt->real_index = key;
    1221:	13 5a 00             	adc    0x0(%rdx),%ebx
    1224:	0a d8                	or     %al,%bl
  *real = bpf_map_lookup_elem(&reals, &key);
    1226:	12 01                	adc    (%rcx),%al
    1228:	00 00                	add    %al,(%rax)
    122a:	13 5b 01             	adc    0x1(%rbx),%ebx
    122d:	0a d9                	or     %cl,%bl
    122f:	1a 0c 00             	sbb    (%rax,%rax,1),%cl
    1232:	00 13                	add    %dl,(%rbx)
    1234:	5c                   	pop    %rsp
    1235:	02 0a                	add    (%rdx),%cl
    1237:	da 3f                	fidivrl (%rdi)
    1239:	12 00                	adc    (%rax),%al
    123b:	00 13                	add    %dl,(%rbx)
    123d:	68 04 0f 04 13       	push   $0x13040f04
    1242:	5d                   	pop    %rbp
    1243:	0a db                	or     %bl,%bl
  if (dst && pckt->flow.proto == IPPROTO_UDP &&
    1245:	4c 12 00             	rex.WR adc (%rax),%r8b
    1248:	00 13                	add    %dl,(%rbx)
    124a:	61                   	(bad)
    124b:	00 09                	add    %cl,(%rcx)
    124d:	04 13                	add    $0x13,%al
      vip_info->flags & F_UDP_FLOW_MIGRATION && !is_under_flood(&cur_time)) {
    124f:	5e                   	pop    %rsi
    1250:	0a 95 1d 0b 00 00    	or     0xb1d(%rbp),%dl
    1256:	13 5f 00             	adc    0x0(%rdi),%ebx
      bpf_map_lookup_elem(&stats, &conn_rate_key);
    1259:	0a dc                	or     %ah,%bl
    125b:	1d 0b 00 00 13       	sbb    $0x1300000b,%eax
    1260:	60                   	(bad)
    1261:	02 00                	add    (%rax),%al
    1263:	0a dd                	or     %ch,%bl
    1265:	b8 01 00 00 13       	mov    $0x13000001,%eax
  if (!conn_rate_stats) {
    126a:	62                   	(bad)
    126b:	00 0a                	add    %cl,(%rdx)
    126d:	de 75 12             	fidivs 0x12(%rbp)
    1270:	00 00                	add    %al,(%rax)
    1272:	13 66 00             	adc    0x0(%rsi),%esp
    1275:	09 04 13             	or     %eax,(%rbx,%rdx,1)
    1278:	63 0a                	movsxd (%rdx),%ecx
  *cur_time = bpf_ktime_get_ns();
    127a:	df 1d 0b 00 00 13    	fistps 0x1300000b(%rip)        # 1300128b <_license+0x12ffeea6>
  if ((*cur_time - conn_rate_stats->v2) > ONE_SEC) {
    1280:	64 00 0a             	add    %cl,%fs:(%rdx)
    1283:	e0 1d                	loopne 12a2 <balancer_ingress+0x12a2>
    1285:	0b 00                	or     (%rax),%eax
    1287:	00 13                	add    %dl,(%rbx)
    1289:	65 02 00             	add    %gs:(%rax),%al
    conn_rate_stats->v1 = 1;
    128c:	0a e1                	or     %cl,%ah
    128e:	97                   	xchg   %eax,%edi
    128f:	12 00                	adc    (%rax),%al
    1291:	00 13                	add    %dl,(%rbx)
    conn_rate_stats->v2 = *cur_time;
    1293:	67 00 00             	add    %al,(%eax)
    1296:	00 04 12             	add    %al,(%rdx,%rdx,1)
    conn_rate_stats->v1 += 1;
    1299:	01 00                	add    %eax,(%rax)
    129b:	00 05 60 00 00 00    	add    %al,0x60(%rip)        # 1301 <balancer_ingress+0x1301>
    12a1:	04 00                	add    $0x0,%al
    if (conn_rate_stats->v1 > MAX_CONN_RATE) {
    12a3:	1c e4                	sbb    $0xe4,%al
    12a5:	0e                   	(bad)
    12a6:	53                   	push   %rbx
    12a7:	01 b2 00 00 00 1d    	add    %esi,0x1d000000(%rdx)
    void* down_reals_map = bpf_map_lookup_elem(&vip_to_down_reals_map, vip);
    12ad:	a4                   	movsb  %ds:(%rsi),%es:(%rdi)
    12ae:	0e                   	(bad)
    12af:	54                   	push   %rsp
    12b0:	01 8b 09 00 00 1d    	add    %ecx,0x1d000009(%rbx)
    12b6:	a5                   	movsl  %ds:(%rsi),%es:(%rdi)
    12b7:	0e                   	(bad)
    12b8:	55                   	push   %rbp
    12b9:	01 8b 09 00 00 1d    	add    %ecx,0x1d000009(%rbx)
    12bf:	d6                   	(bad)
    12c0:	0e                   	(bad)
    12c1:	56                   	push   %rsi
    12c2:	01 fa                	add    %edi,%edx
    if (down_reals_map) {
    12c4:	00 00                	add    %al,(%rax)
    12c6:	00 1d b1 0e 57 01    	add    %bl,0x1570eb1(%rip)        # 157217d <_license+0x156fd98>
      void* down_real = real_bpf_map_lookup_elem(down_reals_map, &pckt->real_index);
    12cc:	7e 11                	jle    12df <balancer_ingress+0x12df>
    12ce:	00 00                	add    %al,(%rax)
    12d0:	1d 98 0e 58 01       	sbb    $0x1580e98,%eax
      if (down_real) {
    12d5:	12 01                	adc    (%rcx),%al
        struct lb_stats* stats_data = bpf_map_lookup_elem(&stats, &stats_key);
    12d7:	00 00                	add    %al,(%rax)
    12d9:	00 24 e5 0e 3e b2 00 	add    %ah,0xb23e0e(,%riz,8)
    12e0:	00 00                	add    %al,(%rax)
    12e2:	25 a4 0e 3f 8b       	and    $0x8b3f0ea4,%eax
    12e7:	09 00                	or     %eax,(%rax)
        if (stats_data) {
    12e9:	00 25 a5 0e 40 8b    	add    %ah,-0x74bff15b(%rip)        # ffffffff8b402194 <ch_rings+0x36ff68b7d194>
    12ef:	09 00                	or     %eax,(%rax)
          stats_data->v1 += 1;
    12f1:	00 26                	add    %ah,(%rsi)
    12f3:	e6 0e                	out    %al,$0xe
    12f5:	43 bb 00 00 00 26    	rex.XB mov $0x26000000,%r11d
    if (!dst) {
    12fb:	e7 0e                	out    %eax,$0xe
    12fd:	44 fa                	rex.R cli
    12ff:	00 00                	add    %al,(%rax)
    1301:	00 26                	add    %ah,(%rsi)
    1303:	d6                   	(bad)
    1304:	0e                   	(bad)
    1305:	45 fa                	rex.RB cli
    1307:	00 00                	add    %al,(%rax)
    1309:	00 26                	add    %ah,(%rsi)
  data_stats = bpf_map_lookup_elem(&stats, &vip_num);
    130b:	d7                   	xlat   %ds:(%rbx)
    130c:	0e                   	(bad)
    130d:	42 11 12             	rex.X adc %edx,(%rdx)
    1310:	00 00                	add    %al,(%rax)
    1312:	26 d3 0e             	es rorl %cl,(%rsi)
    1315:	41 6c                	rex.B insb (%dx),%es:(%rdi)
    1317:	0b 00                	or     (%rax),%eax
    1319:	00 00                	add    %al,(%rax)
    131b:	27                   	(bad)
    131c:	e8 0f 32 25 d3       	call   ffffffffd3254530 <ch_rings+0x36ffb09cf530>
    1321:	0f 33                	rdpmc
    1323:	8b 09                	mov    (%rcx),%ecx
    1325:	00 00                	add    %al,(%rax)
  if (!data_stats) {
    1327:	25 e7 0f 34 6f       	and    $0x6f340fe7,%eax
    132c:	0a 00                	or     (%rax),%al
    132e:	00 26                	add    %ah,(%rsi)
    1330:	e9 0f 35 79 0a       	jmp    a794844 <_license+0xa79245f>
    1335:	00 00                	add    %al,(%rax)
    1337:	1f                   	(bad)
    1338:	26 ea                	es (bad)
    133a:	0f 37                	getsec
  data_stats->v1 += 1;
    133c:	b2 00                	mov    $0x0,%dl
    133e:	00 00                	add    %al,(%rax)
  data_stats->v2 += pkt_bytes;
    1340:	00 00                	add    %al,(%rax)
    1342:	24 eb                	and    $0xeb,%al
    1344:	0e                   	(bad)
    1345:	e4 b2                	in     $0xb2,%al
  data_stats = bpf_map_lookup_elem(&reals_stats, &pckt.real_index);
    1347:	00 00                	add    %al,(%rax)
    1349:	00 25 a4 0e e5 8b    	add    %ah,-0x741af15c(%rip)        # ffffffff8be521f3 <ch_rings+0x36ff695cd1f3>
    134f:	09 00                	or     %eax,(%rax)
    1351:	00 25 a5 0e e6 8b    	add    %ah,-0x7419f15b(%rip)        # ffffffff8be621fc <ch_rings+0x36ff695dd1fc>
    1357:	09 00                	or     %eax,(%rax)
    1359:	00 25 d6 0e e7 fa    	add    %ah,-0x518f12a(%rip)        # fffffffffae72235 <ch_rings+0x36ffd85ed235>
    135f:	00 00                	add    %al,(%rax)
    1361:	00 25 b1 0e e8 7e    	add    %ah,0x7ee80eb1(%rip)        # 7ee82218 <_license+0x7ee7fe33>
    1367:	11 00                	adc    %eax,(%rax)
    1369:	00 26                	add    %ah,(%rsi)
    136b:	d7                   	xlat   %ds:(%rbx)
    136c:	0e                   	(bad)
    136d:	e9 c2 13 00 00       	jmp    2734 <_license+0x34f>
  if (!data_stats) {
    1372:	26 d4                	es (bad)
    1374:	0e                   	(bad)
    1375:	ea                   	(bad)
    1376:	7e 0a                	jle    1382 <balancer_ingress+0x1382>
    1378:	00 00                	add    %al,(%rax)
    137a:	1f                   	(bad)
  data_stats->v1 += 1;
    137b:	26 b9 0e f8 bb 00    	es mov $0xbbf80e,%ecx
  data_stats->v2 += pkt_bytes;
    1381:	00 00                	add    %al,(%rax)
  pckt.flow.port16[0] = original_sport;
    1383:	28 04 01             	sub    %al,(%rcx,%rax,1)
    1386:	0e                   	(bad)
    1387:	f9                   	stc
    1388:	81 05 00 00 26 e0 0e 	addl   $0xbbff0e,-0x1fda0000(%rip)        # ffffffffe0261392 <ch_rings+0x36ffbd9dc392>
    138f:	ff bb 00 
  if (dst->flags & F_IPV6) {
    1392:	00 00                	add    %al,(%rax)
  __u32 ip_src = create_encap_ipv4_src(pckt->flow.port16[0], pckt->flow.src);
    1394:	1f                   	(bad)
    1395:	26 c2 0e fa          	es ret $0xfa0e
    1399:	8b 09                	mov    (%rcx),%ecx
    139b:	00 00                	add    %al,(%rax)
    139d:	26 07                	es (bad)
    139f:	0e                   	(bad)
    13a0:	fa                   	cli
  if (XDP_ADJUST_HEAD_FUNC(xdp, 0 - (int)sizeof(struct iphdr))) {
    13a1:	e6 10                	out    %al,$0x10
    13a3:	00 00                	add    %al,(%rax)
    13a5:	1f                   	(bad)
    13a6:	26 c3                	es ret
    13a8:	0e                   	(bad)
    13a9:	fa                   	cli
    13aa:	bb 00 00 00 26       	mov    $0x26000000,%ebx
    13af:	14 0e                	adc    $0xe,%al
    13b1:	fa                   	cli
    13b2:	eb 10                	jmp    13c4 <balancer_ingress+0x13c4>
  data = (void*)(long)xdp->data;
    13b4:	00 00                	add    %al,(%rax)
    13b6:	26 c4                	es (bad)
  data_end = (void*)(long)xdp->data_end;
    13b8:	0e                   	(bad)
    13b9:	fa                   	cli
    13ba:	eb 10                	jmp    13cc <balancer_ingress+0x13cc>
  iph = data + sizeof(struct ethhdr);
    13bc:	00 00                	add    %al,(%rax)
    13be:	00 00                	add    %al,(%rax)
  if (new_eth + 1 > data_end || old_eth + 1 > data_end || iph + 1 > data_end) {
    13c0:	00 00                	add    %al,(%rax)
    13c2:	0b c7                	or     %edi,%eax
    13c4:	13 00                	adc    (%rax),%eax
    13c6:	00 29                	add    %ch,(%rcx)
    13c8:	03 01                	add    (%rcx),%eax
    13ca:	08 14 08             	or     %dl,(%rax,%rcx,1)
    13cd:	0a ec                	or     %ah,%ch
    13cf:	12 01                	adc    (%rcx),%al
    13d1:	00 00                	add    %al,(%rax)
    13d3:	14 0a                	adc    $0xa,%al
    13d5:	00 0a                	add    %cl,(%rdx)
    13d7:	ed                   	in     (%dx),%eax
    13d8:	12 01                	adc    (%rcx),%al
    13da:	00 00                	add    %al,(%rax)
    13dc:	14 0b                	adc    $0xb,%al
    13de:	01 0a                	add    %ecx,(%rdx)
    13e0:	ee                   	out    %al,(%dx)
    13e1:	1a 0c 00             	sbb    (%rax,%rax,1),%cl
    13e4:	00 14 0c             	add    %dl,(%rsp,%rcx,1)
    13e7:	02 0a                	add    (%rdx),%cl
    13e9:	ef                   	out    %eax,(%dx)
    13ea:	f1                   	int1
    13eb:	13 00                	adc    (%rax),%eax
    13ed:	00 14 3f             	add    %dl,(%rdi,%rdi,1)
    13f0:	04 0f                	add    $0xf,%al
    13f2:	04 14                	add    $0x14,%al
    13f4:	0f 0a                	(bad)
    13f6:	f0 2d 14 00 00 14    	lock sub $0x14000014,%eax
  memcpy(new_eth->h_dest, cval->mac, 6);
    13fc:	10 00                	adc    %al,(%rax)
    13fe:	0a f1                	or     %cl,%dh
    1400:	39 14 00             	cmp    %edx,(%rax,%rax,1)
    1403:	00 14 11             	add    %dl,(%rcx,%rdx,1)
    1406:	00 0a                	add    %cl,(%rdx)
    1408:	f2 97                	repnz xchg %eax,%edi
    140a:	12 00                	adc    (%rax),%al
  memcpy(new_eth->h_source, old_eth->h_dest, 6);
    140c:	00 14 12             	add    %dl,(%rdx,%rdx,1)
    140f:	00 0a                	add    %cl,(%rdx)
    1411:	f3 45 14 00          	repz rex.RB adc $0x0,%al
    1415:	00 14 17             	add    %dl,(%rdi,%rdx,1)
    1418:	00 0a                	add    %cl,(%rdx)
  new_eth->h_proto = BE_ETH_P_IP;
    141a:	f6 5d 14             	negb   0x14(%rbp)
    141d:	00 00                	add    %al,(%rax)
  create_v4_hdr(iph, pckt->tos, ip_src, dst->dst, pkt_bytes, IPPROTO_IPIP);
    141f:	14 28                	adc    $0x28,%al
    1421:	00 0a                	add    %cl,(%rdx)
    1423:	fc                   	cld
    1424:	9f                   	lahf
    1425:	14 00                	adc    $0x0,%al
  iph->ihl = 5;
    1427:	00 14 3d 00 00 00 04 	add    %dl,0x4000000(,%rdi,1)
  iph->tot_len = bpf_htons(pkt_bytes + sizeof(struct iphdr));
    142e:	b8 01 00 00 05       	mov    $0x5000001,%eax
    1433:	60                   	(bad)
    1434:	00 00                	add    %al,(%rax)
    1436:	00 01                	add    %al,(%rcx)
  iph->id = 0;
    1438:	00 04 1d 0b 00 00 05 	add    %al,0x500000b(,%rbx,1)
  iph->daddr = daddr;
    143f:	60                   	(bad)
    1440:	00 00                	add    %al,(%rax)
  iph->saddr = saddr;
    1442:	00 02                	add    %al,(%rdx)
    1444:	00 0d f5 04 14 14    	add    %cl,0x141404f5(%rip)        # 1414193f <_license+0x1413f55a>
  iph->ttl = DEFAULT_TTL;
    144a:	0a f4                	or     %ah,%dh
    144c:	1d 0b 00 00 14       	sbb    $0x1400000b,%eax
    1451:	15 00 0a dc 1d       	adc    $0x1ddc0a00,%eax
    1456:	0b 00                	or     (%rax),%eax
    1458:	00 14 16             	add    %dl,(%rsi,%rdx,1)
    145b:	02 00                	add    (%rax),%al
    145d:	0d fb 04 14 19       	or     $0x191404fb,%eax
    1462:	1b e1                	sbb    %ecx,%esp
    1464:	bb 00 00 00 14       	mov    $0x14000000,%ebx
      if (pckt.flow.proto == IPPROTO_TCP) {
    1469:	1b 04 05 1b 00 1b f7 	sbb    -0x8e4ffe5(,%rax,1),%eax
            bpf_map_lookup_elem(&stats, &lru_stats_key);
    1470:	bb 00 00 00 14       	mov    $0x14000000,%ebx
    1475:	1c 04                	sbb    $0x4,%al
    1477:	01 1a                	add    %ebx,(%rdx)
    1479:	00 1b                	add    %bl,(%rbx)
    147b:	f8                   	clc
    147c:	bb 00 00 00 14       	mov    $0x14000000,%ebx
        if (!lru_stats) {
    1481:	1d 04 01 19 00       	sbb    $0x190104,%eax
    1486:	1b f9                	sbb    %ecx,%edi
    1488:	bb 00 00 00 14       	mov    $0x14000000,%ebx
        if (pckt.flags & F_SYN_SET) {
    148d:	1e                   	(bad)
    148e:	04 01                	add    $0x1,%al
    1490:	18 00                	sbb    %al,(%rax)
    1492:	1b fa                	sbb    %edx,%edi
    1494:	bb 00 00 00 14       	mov    $0x14000000,%ebx
    1499:	1f                   	(bad)
  struct real_pos_lru new_dst_lru = {};
    149a:	04 18                	add    $0x18,%al
    149c:	00 00                	add    %al,(%rax)
    149e:	00 29                	add    %ch,(%rcx)
    14a0:	02 01                	add    (%rcx),%al
    14a2:	04 14                	add    $0x14,%al
    14a4:	2a 0a                	sub    (%rdx),%cl
    14a6:	88 12                	mov    %dl,(%rdx)
    14a8:	01 00                	add    %eax,(%rax)
    14aa:	00 14 2b             	add    %dl,(%rbx,%rbp,1)
      bpf_map_lookup_elem(&stats, &conn_rate_key);
    14ad:	00 1b                	add    %bl,(%rbx)
    14af:	e1 12                	loope  14c3 <balancer_ingress+0x14c3>
    14b1:	01 00                	add    %eax,(%rax)
    14b3:	00 14 2d 01 03 05 01 	add    %dl,0x1050301(,%rbp,1)
    14ba:	1b fd                	sbb    %ebp,%edi
    14bc:	12 01                	adc    (%rcx),%al
    14be:	00 00                	add    %al,(%rax)
  if (!conn_rate_stats) {
    14c0:	14 2e                	adc    $0x2e,%al
    14c2:	01 02                	add    %eax,(%rdx)
    14c4:	03 01                	add    (%rcx),%eax
    14c6:	1b fe                	sbb    %esi,%edi
    14c8:	12 01                	adc    (%rcx),%al
    14ca:	00 00                	add    %al,(%rax)
  *cur_time = bpf_ktime_get_ns();
    14cc:	14 2f                	adc    $0x2f,%al
  if ((*cur_time - conn_rate_stats->v2) > ONE_SEC) {
    14ce:	01 01                	add    %eax,(%rcx)
    14d0:	02 01                	add    (%rcx),%al
    14d2:	1b ff                	sbb    %edi,%edi
    14d4:	12 01                	adc    (%rcx),%al
    14d6:	00 00                	add    %al,(%rax)
    14d8:	14 30                	adc    $0x30,%al
    14da:	01 01                	add    %eax,(%rcx)
    14dc:	01 01                	add    %eax,(%rcx)
    conn_rate_stats->v1 = 1;
    14de:	2a 00                	sub    (%rax),%al
    14e0:	01 12                	add    %edx,(%rdx)
    14e2:	01 00                	add    %eax,(%rax)
    14e4:	00 14 31             	add    %dl,(%rcx,%rsi,1)
    conn_rate_stats->v2 = *cur_time;
    14e7:	01 01                	add    %eax,(%rcx)
    14e9:	00 01                	add    %al,(%rcx)
    14eb:	2b 01                	sub    (%rcx),%eax
    14ed:	01 1d 0b 00 00 14    	add    %ebx,0x1400000b(%rip)        # 140014fe <_license+0x13fff119>
    conn_rate_stats->v1 += 1;
    14f3:	3c 02                	cmp    $0x2,%al
    14f5:	00 2c 05 01 0c 75 b8 	add    %ch,-0x478af3ff(,%rax,1)
    if (conn_rate_stats->v1 > MAX_CONN_RATE) {
    14fc:	10 00                	adc    %al,(%rax)
    14fe:	00 25 a4 0c 76 8b    	add    %ah,-0x7489f35c(%rip)        # ffffffff8b7621a8 <ch_rings+0x36ff68edd1a8>
    1504:	09 00                	or     %eax,(%rax)
    1506:	00 25 a5 0c 77 8b    	add    %ah,-0x7488f35b(%rip)        # ffffffff8b7721b1 <ch_rings+0x36ff68eed1b1>
    if (vip_info->flags & F_HASH_DPORT_ONLY) {
    150c:	09 00                	or     %eax,(%rax)
    150e:	00 25 af 0c 78 b8    	add    %ah,-0x4787f351(%rip)        # ffffffffb87821c3 <ch_rings+0x36ff95efd1c3>
    1514:	10 00                	adc    %al,(%rax)
    1516:	00 25 b1 0c 79 7e    	add    %ah,0x7e790cb1(%rip)        # 7e7921cd <_license+0x7e78fde8>
      pckt->flow.port16[0] = pckt->flow.port16[1];
    151c:	11 00                	adc    %eax,(%rax)
    151e:	00 26                	add    %ah,(%rsi)
    1520:	c8 0c 7a b8          	enter  $0x7a0c,$0xb8
      memset(pckt->flow.srcv6, 0, 16);
    1524:	10 00                	adc    %al,(%rax)
    1526:	00 28                	add    %ch,(%rax)
    1528:	06                   	(bad)
    1529:	01 0c 7c             	add    %ecx,(%rsp,%rdi,2)
    152c:	39 15 00 00 26 d6    	cmp    %edx,-0x29da0000(%rip)        # ffffffffd6261532 <ch_rings+0x36ffb39dc532>
    1532:	0c 7b                	or     $0x7b,%al
    1534:	fa                   	cli
    1535:	00 00                	add    %al,(%rax)
    1537:	00 00                	add    %al,(%rax)
    1539:	0b 3e                	or     (%rsi),%edi
    153b:	15 00 00 29 18       	adc    $0x18290000,%eax
  b += initval;
    1540:	01 14 15 19 2b 07 01 	add    %edx,0x1072b19(,%rdx,1)
  __jhash_final(a, b, c);
    1547:	1d 0b 00 00 15       	sbb    $0x1500000b,%eax
  return (word << shift) | (word >> ((-shift) & 31));
    154c:	1a 00                	sbb    (%rax),%al
    154e:	2b 08                	sub    (%rax),%ecx
    1550:	01 1d 0b 00 00 15    	add    %ebx,0x1500000b(%rip)        # 15001561 <_license+0x14fff17c>
    1556:	1b 02                	sbb    (%rdx),%eax
    1558:	2b 09                	sub    (%rcx),%ecx
  __jhash_final(a, b, c);
    155a:	01 b8 01 00 00 15    	add    %edi,0x15000001(%rax)
  return (word << shift) | (word >> ((-shift) & 31));
    1560:	1c 04                	sbb    $0x4,%al
    1562:	2b 0a                	sub    (%rdx),%ecx
  __jhash_final(a, b, c);
    1564:	01 b8 01 00 00 15    	add    %edi,0x15000001(%rax)
  return (word << shift) | (word >> ((-shift) & 31));
    156a:	1d 08 2a 0b 01       	sbb    $0x10b2a08,%eax
  __jhash_final(a, b, c);
    156f:	9c                   	pushf
  return (word << shift) | (word >> ((-shift) & 31));
    1570:	02 00                	add    (%rax),%al
    1572:	00 15 1f 02 01 0f    	add    %dl,0xf01021f(%rip)        # f011797 <_license+0xf00f3b2>
  __jhash_final(a, b, c);
    1578:	0c 2a                	or     $0x2a,%al
  return (word << shift) | (word >> ((-shift) & 31));
    157a:	0c 01                	or     $0x1,%al
  __jhash_final(a, b, c);
    157c:	9c                   	pushf
    157d:	02 00                	add    (%rax),%al
    157f:	00 15 20 02 03 0c    	add    %dl,0xc030220(%rip)        # c0317a5 <_license+0xc02f3c0>
    1585:	0c 2a                	or     $0x2a,%al
    1587:	0d 01 9c 02 00       	or     $0x29c01,%eax
    hash = get_packet_hash(pckt, hash_16bytes) % RING_SIZE;
    158c:	00 15 21 02 04 08    	add    %dl,0x8040221(%rip)        # 80417b3 <_license+0x803f3ce>
    1592:	0c 2a                	or     $0x2a,%al
    1594:	0e                   	(bad)
    1595:	01 9c 02 00 00 15 22 	add    %ebx,0x22150000(%rdx,%rax,1)
    159c:	02 01                	add    (%rcx),%al
    159e:	07                   	(bad)
    159f:	0c 2a                	or     $0x2a,%al
    key = RING_SIZE * (vip_info->vip_num) + hash;
    15a1:	0f 01 9c 02 00 00 15 	lidt   0x23150000(%rdx,%rax,1)
    15a8:	23 
    15a9:	02 01                	add    (%rcx),%al
    15ab:	06                   	(bad)
    real_pos = bpf_map_lookup_elem(&ch_rings, &key);
    15ac:	0c 2a                	or     $0x2a,%al
    15ae:	10 01                	adc    %al,(%rcx)
    15b0:	9c                   	pushf
    15b1:	02 00                	add    (%rax),%al
    if (!real_pos) {
    15b3:	00 15 24 02 01 05    	add    %dl,0x5010224(%rip)        # 50117dd <_license+0x500f3f8>
    real_pos = bpf_map_lookup_elem(&ch_rings, &key);
    15b9:	0c 2a                	or     $0x2a,%al
    15bb:	11 01                	adc    %eax,(%rcx)
    15bd:	9c                   	pushf
    15be:	02 00                	add    (%rax),%al
    15c0:	00 15 25 02 01 04    	add    %dl,0x4010225(%rip)        # 40117eb <_license+0x400f406>
    key = *real_pos;
    15c6:	0c 2a                	or     $0x2a,%al
    15c8:	12 01                	adc    (%rcx),%al
    15ca:	9c                   	pushf
    15cb:	02 00                	add    (%rax),%al
    15cd:	00 15 26 02 01 03    	add    %dl,0x3010226(%rip)        # 30117f9 <_license+0x300f414>
  pckt->real_index = key;
    15d3:	0c 2a                	or     $0x2a,%al
  *real = bpf_map_lookup_elem(&reals, &key);
    15d5:	13 01                	adc    (%rcx),%eax
    15d7:	9c                   	pushf
    15d8:	02 00                	add    (%rax),%al
  if (!(*real)) {
    15da:	00 15 27 02 01 02    	add    %dl,0x2010227(%rip)        # 2011807 <_license+0x200f422>
      bpf_map_lookup_elem(&stats, &ch_drop_stats_key);
    15e0:	0c 2a                	or     $0x2a,%al
    15e2:	14 01                	adc    $0x1,%al
    15e4:	9c                   	pushf
    15e5:	02 00                	add    (%rax),%al
    15e7:	00 15 28 02 01 01    	add    %dl,0x1010228(%rip)        # 1011815 <_license+0x100f430>
  if (!ch_drop_stats) {
    15ed:	0c 2a                	or     $0x2a,%al
    15ef:	15 01 9c 02 00       	adc    $0x29c01,%eax
    15f4:	00 15 29 02 01 00    	add    %dl,0x10229(%rip)        # 11823 <_license+0xf43e>
    15fa:	0c 2b                	or     $0x2b,%al
      bpf_map_lookup_elem(&stats, &ch_drop_stats_key);
    15fc:	16                   	(bad)
    15fd:	01 1d 0b 00 00 15    	add    %ebx,0x1500000b(%rip)        # 1500160e <_license+0x14fff229>
    1603:	39 0e                	cmp    %ecx,(%rsi)
    1605:	0a 99 1a 0c 00 00    	or     0xc1a(%rcx),%bl
    160b:	15 3a 10 2b 17       	adc    $0x172b103a,%eax
  if (!ch_drop_stats) {
    1610:	01 1d 0b 00 00 15    	add    %ebx,0x1500000b(%rip)        # 15001621 <_license+0x14fff23c>
    1616:	3b 12                	cmp    (%rdx),%edx
    1618:	00 2c 19             	add    %ch,(%rcx,%rbx,1)
  if (lru_map && !(vip_info->flags & F_LRU_BYPASS) && !under_flood) {
    161b:	01 0c 49             	add    %ecx,(%rcx,%rcx,2)
    161e:	fa                   	cli
    161f:	00 00                	add    %al,(%rax)
    1621:	00 25 af 0c 4a b8    	add    %ah,-0x47b5f351(%rip)        # ffffffffb84a22d6 <ch_rings+0x36ff95c1d2d6>
    1627:	10 00                	adc    %al,(%rax)
    1629:	00 25 c8 0c 4b b8    	add    %ah,-0x47b4f338(%rip)        # ffffffffb84b22f7 <ch_rings+0x36ff95c2d2f7>
    162f:	10 00                	adc    %al,(%rax)
    1631:	00 26                	add    %ah,(%rsi)
    1633:	d6                   	(bad)
    1634:	0c 4c                	or     $0x4c,%al
    1636:	fa                   	cli
    1637:	00 00                	add    %al,(%rax)
    1639:	00 00                	add    %al,(%rax)
    163b:	2c 1a                	sub    $0x1a,%al
    163d:	01 0e                	add    %ecx,(%rsi)
    163f:	5e                   	pop    %rsi
    1640:	b2 00                	mov    $0x0,%dl
    1642:	00 00                	add    %al,(%rax)
    1644:	25 a4 0e 5f 8b       	and    $0x8b5f0ea4,%eax
  if (XDP_ADJUST_HEAD_FUNC(xdp, 0 - (int)sizeof(struct ipv6hdr))) {
    1649:	09 00                	or     %eax,(%rax)
    164b:	00 25 a5 0e 60 8b    	add    %ah,-0x749ff15b(%rip)        # ffffffff8b6024f6 <ch_rings+0x36ff68d7d4f6>
    1651:	09 00                	or     %eax,(%rax)
    1653:	00 26                	add    %ah,(%rsi)
    1655:	e6 0e                	out    %al,$0xe
    1657:	63 c0                	movsxd %eax,%eax
  data = (void*)(long)xdp->data;
    1659:	01 00                	add    %eax,(%rax)
    165b:	00 26                	add    %ah,(%rsi)
  data_end = (void*)(long)xdp->data_end;
    165d:	d6                   	(bad)
    165e:	0e                   	(bad)
    165f:	64 fa                	fs cli
  ip6h = data + sizeof(struct ethhdr);
    1661:	00 00                	add    %al,(%rax)
    1663:	00 26                	add    %ah,(%rsi)
  if (new_eth + 1 > data_end || old_eth + 1 > data_end || ip6h + 1 > data_end) {
    1665:	d4                   	(bad)
    1666:	0e                   	(bad)
    1667:	61                   	(bad)
    1668:	7e 0a                	jle    1674 <balancer_ingress+0x1674>
    166a:	00 00                	add    %al,(%rax)
    166c:	26 d7                	xlat   %ds:(%rbx)
    166e:	0e                   	(bad)
    166f:	62 c2                	(bad)
    1671:	13 00                	adc    (%rax),%eax
    1673:	00 00                	add    %al,(%rax)
    1675:	2c 1b                	sub    $0x1b,%al
    1677:	01 00                	add    %eax,(%rax)
    1679:	cb                   	lret
    167a:	b2 00                	mov    $0x0,%dl
    167c:	00 00                	add    %al,(%rax)
    167e:	25 b1 00 cb 7e       	and    $0x7ecb00b1,%eax
    1683:	11 00                	adc    %eax,(%rax)
    1685:	00 25 af 00 cb b8    	add    %ah,-0x4734ff51(%rip)        # ffffffffb8cb173a <ch_rings+0x36ff9642c73a>
    168b:	10 00                	adc    %al,(%rax)
    168d:	00 25 c1 00 cb f9    	add    %ah,-0x634ff3f(%rip)        # fffffffff9cb1754 <ch_rings+0x36ffd742c754>
  memcpy(new_eth->h_dest, cval->mac, 6);
    1693:	16                   	(bad)
    1694:	00 00                	add    %al,(%rax)
    1696:	28 1c 01             	sub    %bl,(%rcx,%rax,1)
    1699:	00 cc                	add    %cl,%ah
    169b:	93                   	xchg   %eax,%ebx
    169c:	01 00                	add    %eax,(%rax)
    169e:	00 28                	add    %ch,(%rax)
    16a0:	1d 01 00 d5 b6       	sbb    $0xb6d50001,%eax
  memcpy(new_eth->h_source, old_eth->h_dest, 6);
    16a5:	00 00                	add    %al,(%rax)
    16a7:	00 26                	add    %ah,(%rsi)
    16a9:	ba 00 cd 81 05       	mov    $0x581cd00,%edx
    16ae:	00 00                	add    %al,(%rax)
  new_eth->h_proto = BE_ETH_P_IPV6;
    16b0:	1f                   	(bad)
    16b1:	26 c2 00 d5          	es ret $0xd500
    16b5:	8b 09                	mov    (%rcx),%ecx
    16b7:	00 00                	add    %al,(%rax)
    16b9:	26 07                	es (bad)
  saddr[3] = src ^ port;
    16bb:	00 d5                	add    %dl,%ch
    16bd:	e6 10                	out    %al,$0x10
  create_v6_hdr(ip6h, pckt->tos, saddr, dst->dstv6, payload_len, proto);
    16bf:	00 00                	add    %al,(%rax)
    16c1:	00 1f                	add    %bl,(%rdi)
  memset(ip6h->flow_lbl, 0, sizeof(ip6h->flow_lbl));
    16c3:	26 b9 00 d9 bb 00    	es mov $0xbbd900,%ecx
  ip6h->priority = (tc & 0xF0) >> 4;
    16c9:	00 00                	add    %al,(%rax)
    16cb:	1f                   	(bad)
    16cc:	26 c2 00 da          	es ret $0xda00
    16d0:	8b 09                	mov    (%rcx),%ecx
    16d2:	00 00                	add    %al,(%rax)
  ip6h->flow_lbl[0] = (tc & 0x0F) << 4;
    16d4:	26 07                	es (bad)
    16d6:	00 da                	add    %bl,%dl
    16d8:	e6 10                	out    %al,$0x10
  ip6h->nexthdr = proto;
    16da:	00 00                	add    %al,(%rax)
    16dc:	1f                   	(bad)
    16dd:	26 c3                	es ret
  ip6h->payload_len = bpf_htons(payload_len);
    16df:	00 da                	add    %bl,%dl
    16e1:	bb 00 00 00 26       	mov    $0x26000000,%ebx
  memcpy(ip6h->saddr.s6_addr32, saddr, 16);
    16e6:	14 00                	adc    $0x0,%al
    16e8:	da eb                	(bad)
    16ea:	10 00                	adc    %al,(%rax)
    16ec:	00 26                	add    %ah,(%rsi)
    16ee:	c4                   	(bad)
    16ef:	00 da                	add    %bl,%dl
    16f1:	eb 10                	jmp    1703 <balancer_ingress+0x1703>
    16f3:	00 00                	add    %al,(%rax)
    16f5:	00 00                	add    %al,(%rax)
    16f7:	00 00                	add    %al,(%rax)
    16f9:	0b b8 10 00 00 2c    	or     0x2c000010(%rax),%edi
        (connId[1] << 24) | (connId[2] << 16) | (connId[3] << 8) | (connId[4]);
    16ff:	1e                   	(bad)
    1700:	01 10                	add    %edx,(%rax)
    1702:	55                   	push   %rbp
    1703:	b2 00                	mov    $0x0,%dl
    1705:	00 00                	add    %al,(%rax)
    1707:	25 a4 10 55 8b       	and    $0x8b5510a4,%eax
    170c:	09 00                	or     %eax,(%rax)
    170e:	00 25 a5 10 55 8b    	add    %ah,-0x74aaef5b(%rip)        # ffffffff8b5527b9 <ch_rings+0x36ff68ccd7b9>
    1714:	09 00                	or     %eax,(%rax)
    1716:	00 2d 1f 01 10 55    	add    %ch,0x5510011f(%rip)        # 5510183b <_license+0x550ff456>
    171c:	b2 00                	mov    $0x0,%dl
    171e:	00 00                	add    %al,(%rax)
    result.server_id = (connId[1] << 16) | (connId[2] << 8) | (connId[3]);
    1720:	25 af 10 55 b8       	and    $0xb85510af,%eax
    1725:	10 00                	adc    %al,(%rax)
    1727:	00 26                	add    %ah,(%rsi)
    1729:	d4                   	(bad)
    172a:	10 57 7e             	adc    %dl,0x7e(%rdi)
    172d:	0a 00                	or     (%rax),%al
    172f:	00 26                	add    %ah,(%rsi)
    1731:	d3 10                	rcll   %cl,(%rax)
    1733:	56                   	push   %rsi
    1734:	6c                   	insb   (%dx),%es:(%rdi)
    1735:	0b 00                	or     (%rax),%eax
    1737:	00 1f                	add    %bl,(%rdi)
    1739:	26 e7 10             	es out %eax,$0x10
    173c:	67 bb 00 00 00 00    	addr32 mov $0x0,%ebx
      if (qpr.server_id > 0) {
    1742:	00 2e                	add    %ch,(%rsi)
    1744:	20 01                	and    %al,(%rcx)
  if (cid_version == QUIC_CONNID_VERSION_V1) {
    1746:	00 2d 01 b2 00 00    	add    %ch,0xb201(%rip)        # c94d <_license+0xa568>
    174c:	00 1d a4 00 2e 01    	add    %bl,0x12e00a4(%rip)        # 12e17f6 <_license+0x12df411>
    1752:	45 18 00             	sbb    %r8b,(%r8)
    1755:	00 1d a5 00 2f 01    	add    %bl,0x12f00a5(%rip)        # 12f1800 <_license+0x12ef41b>
    175b:	45 18 00             	sbb    %r8b,(%r8)
    175e:	00 1d a3 00 30 01    	add    %bl,0x13000a3(%rip)        # 1301807 <_license+0x12ff422>
    1764:	4e 10 00             	rex.WRX adc %r8b,(%rax)
    1767:	00 1d af 00 31 01    	add    %bl,0x13100af(%rip)        # 131181c <_license+0x130f437>
    if (pckt->flow.proto == IPPROTO_UDP) {
    176d:	f9                   	stc
    176e:	16                   	(bad)
    176f:	00 00                	add    %al,(%rax)
      new_dst_lru.atime = cur_time;
    1771:	1d 98 00 32 01       	sbb    $0x1320098,%eax
    new_dst_lru.pos = key;
    1776:	69 09 00 00 1d c1    	imul   $0xc11d0000,(%rcx),%ecx
    177c:	00 33                	add    %dh,(%rbx)
    177e:	01 b8 10 00 00 1e    	add    %edi,0x1e000010(%rax)
    1784:	b7 00                	mov    $0x0,%bh
    1786:	34 01                	xor    $0x1,%al
    1788:	b2 00                	mov    $0x0,%dl
    178a:	00 00                	add    %al,(%rax)
    178c:	1e                   	(bad)
    178d:	b9 00 55 01 bb       	mov    $0xbb015500,%ecx
    bpf_map_update_elem(lru_map, &pckt->flow, &new_dst_lru, BPF_ANY);
    1792:	00 00                	add    %al,(%rax)
      if (update_vip_lru_miss_stats(&vip, &pckt, vip_info, is_ipv6) >= 0) {
    1794:	00 1e                	add    %bl,(%rsi)
    1796:	ba 00 56 01 81       	mov    $0x81015600,%edx
    179b:	05 00 00 1f 2f       	add    $0x2f1f0000,%eax
    17a0:	1f                   	(bad)
    17a1:	01 00                	add    %eax,(%rax)
    17a3:	4b 01 b2 00 00 00 00 	rex.WXB add %rsi,0x0(%r10)
  bool port_match = lru_miss_stat_vip->port == vip->port;
    17aa:	1f                   	(bad)
    17ab:	2f                   	(bad)
    17ac:	1f                   	(bad)
    17ad:	01 00                	add    %eax,(%rax)
    17af:	37                   	(bad)
    17b0:	01 b2 00 00 00 00    	add    %esi,0x0(%rdx)
  bool proto_match = lru_miss_stat_vip->proto = vip->proto;
    17b6:	1f                   	(bad)
    17b7:	2f                   	(bad)
    17b8:	1f                   	(bad)
    17b9:	01 00                	add    %eax,(%rax)
    17bb:	41 01 b2 00 00 00 00 	add    %esi,0x0(%r10)
    17c2:	1f                   	(bad)
  bool vip_match = address_match && port_match && proto_match;
    17c3:	1e                   	(bad)
    17c4:	c2 00 56             	ret    $0x5600
    17c7:	01 8b 09 00 00 1e    	add    %ecx,0x1e000009(%rbx)
    17cd:	07                   	(bad)
    __u32* lru_miss_stat = bpf_map_lookup_elem(&lru_miss_stats, &lru_stats_key);
    17ce:	00 56 01             	add    %dl,0x1(%rsi)
    17d1:	e6 10                	out    %al,$0x10
    17d3:	00 00                	add    %al,(%rax)
    17d5:	1f                   	(bad)
    17d6:	1e                   	(bad)
    17d7:	c3                   	ret
    17d8:	00 56 01             	add    %dl,0x1(%rsi)
    17db:	bb 00 00 00 1e       	mov    $0x1e000000,%ebx
    17e0:	14 00                	adc    $0x0,%al
    17e2:	56                   	push   %rsi
    17e3:	01 eb                	add    %ebp,%ebx
    17e5:	10 00                	adc    %al,(%rax)
    17e7:	00 1e                	add    %bl,(%rsi)
    17e9:	c4                   	(bad)
    17ea:	00 56 01             	add    %dl,0x1(%rsi)
    17ed:	eb 10                	jmp    17ff <balancer_ingress+0x17ff>
    17ef:	00 00                	add    %al,(%rax)
    17f1:	00 00                	add    %al,(%rax)
    17f3:	1f                   	(bad)
    17f4:	2f                   	(bad)
    17f5:	21 01                	and    %eax,(%rcx)
    17f7:	00 68 01             	add    %ch,0x1(%rax)
    if (!lru_miss_stat) {
    17fa:	bb 00 00 00 2f       	mov    $0x2f000000,%ebx
    17ff:	22 01                	and    (%rcx),%al
    1801:	00 69 01             	add    %ch,0x1(%rcx)
    *lru_miss_stat += 1;
    1804:	81 05 00 00 2f 23 01 	addl   $0x1670001,0x232f0000(%rip)        # 232f180e <_license+0x232ef429>
    180b:	00 67 01 
    180e:	b8 10 00 00 1f       	mov    $0x1f000010,%eax
    1813:	1e                   	(bad)
    1814:	c2 00 6a             	ret    $0x6a00
    1817:	01 8b 09 00 00 1e    	add    %ecx,0x1e000009(%rbx)
    181d:	07                   	(bad)
      data_stats->v2 += 1;
    181e:	00 6a 01             	add    %ch,0x1(%rdx)
    1821:	e6 10                	out    %al,$0x10
    1823:	00 00                	add    %al,(%rax)
    1825:	1f                   	(bad)
    1826:	1e                   	(bad)
    1827:	c3                   	ret
    if (long_header->conn_id_lens < QUIC_MIN_CONNID_LEN) {
    1828:	00 6a 01             	add    %ch,0x1(%rdx)
    182b:	bb 00 00 00 1e       	mov    $0x1e000000,%ebx
    1830:	14 00                	adc    $0x0,%al
    1832:	6a 01                	push   $0x1
    1834:	eb 10                	jmp    1846 <balancer_ingress+0x1846>
    1836:	00 00                	add    %al,(%rax)
    1838:	1e                   	(bad)
  if (!connId) {
    1839:	c4                   	(bad)
    183a:	00 6a 01             	add    %ch,0x1(%rdx)
    183d:	eb 10                	jmp    184f <balancer_ingress+0x184f>
    183f:	00 00                	add    %al,(%rax)
    1841:	00 00                	add    %al,(%rax)
    1843:	00 00                	add    %al,(%rax)
    1845:	0b 8b 09 00 00 2c    	or     0x2c000009(%rbx),%ecx
    184b:	24 01                	and    $0x1,%al
    184d:	11 7d b8             	adc    %edi,-0x48(%rbp)
    1850:	10 00                	adc    %al,(%rax)
    1852:	00 25 a3 11 7d 4e    	add    %ah,0x4e7d11a3(%rip)        # 4e7d29fb <_license+0x4e7d0616>
    1858:	10 00                	adc    %al,(%rax)
    185a:	00 25 a4 11 7d 45    	add    %ah,0x457d11a4(%rip)        # 457d2a04 <_license+0x457d061f>
        __u32* real_pos = bpf_map_lookup_elem(&server_id_map, &key);
    1860:	18 00                	sbb    %al,(%rax)
    1862:	00 25 a5 11 7d 45    	add    %ah,0x457d11a5(%rip)        # 457d2a0d <_license+0x457d0628>
    1868:	18 00                	sbb    %al,(%rax)
    186a:	00 2d 25 01 11 7d    	add    %ch,0x7d110125(%rip)        # 7d111995 <_license+0x7d10f5b0>
    1870:	b8 10 00 00 28       	mov    $0x28000010,%eax
          key = *real_pos;
    1875:	26 01 11             	es add %edx,(%rcx)
    1878:	7f 87                	jg     1801 <balancer_ingress+0x1801>
    187a:	18 00                	sbb    %al,(%rax)
          if (key == 0) {
    187c:	00 28                	add    %ch,(%rax)
            pckt.real_index = key;
    187e:	2b 01                	sub    (%rcx),%eax
    1880:	11 7e 87             	adc    %edi,-0x79(%rsi)
    1883:	18 00                	sbb    %al,(%rax)
            dst = bpf_map_lookup_elem(&reals, &key);
    1885:	00 00                	add    %al,(%rax)
    1887:	0b 8c 18 00 00 29 2a 	or     0x2a290000(%rax,%rbx,1),%ecx
    188e:	01 0e                	add    %ecx,(%rsi)
    1890:	16                   	(bad)
    1891:	ad                   	lods   %ds:(%rsi),%eax
    1892:	2b 27                	sub    (%rdi),%esp
    1894:	01 b1 18 00 00 16    	add    %esi,0x16000018(%rcx)
    189a:	ae                   	scas   %es:(%rdi),%al
    189b:	00 2b                	add    %ch,(%rbx)
    189d:	28 01                	sub    %al,(%rcx)
    189f:	b1 18                	mov    $0x18,%cl
    18a1:	00 00                	add    %al,(%rax)
    18a3:	16                   	(bad)
            if (!dst) {
    18a4:	af                   	scas   %es:(%rdi),%eax
    18a5:	06                   	(bad)
    18a6:	2b 29                	sub    (%rcx),%ebp
    18a8:	01 1d 0b 00 00 16    	add    %ebx,0x1600000b(%rip)        # 160018b9 <_license+0x15fff4d4>
    18ae:	b0 0c                	mov    $0xc,%al
    18b0:	00 04 1a             	add    %al,(%rdx,%rbx,1)
    18b3:	01 00                	add    %eax,(%rax)
    18b5:	00 05 60 00 00 00    	add    %al,0x60(%rip)        # 191b <balancer_ingress+0x191b>
    18bb:	06                   	(bad)
    18bc:	00 2c 2c             	add    %ch,(%rsp,%rbp,1)
  struct real_pos_lru* dst_lru = real_bpf_map_lookup_elem(lru_map, &pckt->flow);
    18bf:	01 0c 5b             	add    %ecx,(%rbx,%rbx,2)
  if (dst_lru) {
    18c2:	b8 10 00 00 25       	mov    $0x25000010,%eax
    18c7:	a4                   	movsb  %ds:(%rsi),%es:(%rdi)
    18c8:	0c 5c                	or     $0x5c,%al
    if (dst_lru->pos == pckt->real_index) {
    18ca:	8b 09                	mov    (%rcx),%ecx
    18cc:	00 00                	add    %al,(%rax)
    18ce:	25 a5 0c 5d 8b       	and    $0x8b5d0ca5,%eax
    18d3:	09 00                	or     %eax,(%rax)
              quic_packets_stats->dst_match_in_lru += 1;
    18d5:	00 25 af 0c 5e b8    	add    %ah,-0x47a1f351(%rip)        # ffffffffb85e258a <ch_rings+0x36ff95d5d58a>
    18db:	10 00                	adc    %al,(%rax)
    18dd:	00 25 b1 0c 5f 7e    	add    %ah,0x7e5f0cb1(%rip)        # 7e5f2594 <_license+0x7e5f01af>
    18e3:	11 00                	adc    %eax,(%rax)
    18e5:	00 26                	add    %ah,(%rsi)
    18e7:	c8 0c 60 b8          	enter  $0x600c,$0xb8
    18eb:	10 00                	adc    %al,(%rax)
    18ed:	00 28                	add    %ch,(%rax)
    18ef:	2d 01 0c 62 00       	sub    $0x620c01,%eax
    18f4:	19 00                	sbb    %eax,(%rax)
  original_sport = pckt.flow.port16[0];
    18f6:	00 26                	add    %ah,(%rsi)
    18f8:	d6                   	(bad)
    18f9:	0c 61                	or     $0x61,%al
    18fb:	fa                   	cli
    18fc:	00 00                	add    %al,(%rax)
    if (!dst && !(pckt.flags & F_SYN_SET) &&
    18fe:	00 00                	add    %al,(%rax)
    1900:	0b 05 19 00 00 29    	or     0x29000019(%rip),%eax        # 2900191f <_license+0x28fff53a>
        !(vip_info->flags & F_LRU_BYPASS)) {
    1906:	2f                   	(bad)
    1907:	01 08                	add    %ecx,(%rax)
    if (!dst && !(pckt.flags & F_SYN_SET) &&
    1909:	17                   	(bad)
    190a:	17                   	(bad)
    190b:	2b 07                	sub    (%rdi),%eax
    190d:	01 1d 0b 00 00 17    	add    %ebx,0x1700000b(%rip)        # 1700191e <_license+0x16fff539>
    1913:	18 00                	sbb    %al,(%rax)
    1915:	2b 08                	sub    (%rax),%ecx
    1917:	01 1d 0b 00 00 17    	add    %ebx,0x1700000b(%rip)        # 17001928 <_license+0x16fff543>
    191d:	19 02                	sbb    %eax,(%rdx)
    191f:	2b 2e                	sub    (%rsi),%ebp
  dst_lru = real_bpf_map_lookup_elem(lru_map, &pckt->flow);
    1921:	01 1d 0b 00 00 17    	add    %ebx,0x1700000b(%rip)        # 17001932 <_license+0x16fff54d>
  if (!dst_lru) {
    1927:	1a 04 0a             	sbb    (%rdx,%rcx,1),%al
    192a:	99                   	cltd
  if (!isGlobalLru && pckt->flow.proto == IPPROTO_UDP) {
    192b:	1a 0c 00             	sbb    (%rax,%rax,1),%cl
    192e:	00 17                	add    %dl,(%rdi)
    1930:	1b 06                	sbb    (%rsi),%eax
    1932:	00 2c 30             	add    %ch,(%rax,%rsi,1)
    1935:	01 11                	add    %edx,(%rcx)
    1937:	92                   	xchg   %eax,%edx
    1938:	b8 10 00 00 25       	mov    $0x25000010,%eax
    if (cur_time - dst_lru->atime > LRU_UDP_TIMEOUT) {
    193d:	a3 11 92 4e 10 00 00 	movabs %eax,0xa4250000104e9211
    1944:	25 a4 
    1946:	11 92 45 18 00 00    	adc    %edx,0x1845(%rdx)
    194c:	25 a5 11 92 45       	and    $0x459211a5,%eax
    1951:	18 00                	sbb    %al,(%rax)
    1953:	00 28                	add    %ch,(%rax)
    1955:	26 01 11             	es add %edx,(%rcx)
    1958:	94                   	xchg   %eax,%esp
    1959:	87 18                	xchg   %ebx,(%rax)
    dst_lru->atime = cur_time;
    195b:	00 00                	add    %al,(%rax)
    195d:	28 2b                	sub    %ch,(%rbx)
  key = dst_lru->pos;
    195f:	01 11                	add    %edx,(%rcx)
    1961:	93                   	xchg   %eax,%ebx
    1962:	87 18                	xchg   %ebx,(%rax)
    1964:	00 00                	add    %al,(%rax)
    1966:	00 2e                	add    %ch,(%rsi)
    1968:	31 01                	xor    %eax,(%rcx)
    196a:	0c 53                	or     $0x53,%al
  pckt->real_index = key;
    196c:	01 f0                	add    %esi,%eax
    196e:	10 00                	adc    %al,(%rax)
  *real = bpf_map_lookup_elem(&reals, &key);
    1970:	00 1d a4 0c 54 01    	add    %bl,0x1540ca4(%rip)        # 154261a <_license+0x1540235>
    1976:	8b 09                	mov    (%rcx),%ecx
    1978:	00 00                	add    %al,(%rax)
    197a:	1d a5 0c 55 01       	sbb    $0x1550ca5,%eax
    197f:	8b 09                	mov    (%rcx),%ecx
    1981:	00 00                	add    %al,(%rax)
    1983:	1d af 0c 56 01       	sbb    $0x1560caf,%eax
    1988:	b8 10 00 00 1d       	mov    $0x1d000010,%eax
    198d:	b1 0c                	mov    $0xc,%cl
  if (dst && pckt->flow.proto == IPPROTO_UDP &&
    198f:	57                   	push   %rdi
    1990:	01 7e 11             	add    %edi,0x11(%rsi)
    1993:	00 00                	add    %al,(%rax)
    1995:	2f                   	(bad)
    1996:	32 01                	xor    (%rcx),%al
    1998:	0c 58                	or     $0x58,%al
      vip_info->flags & F_UDP_FLOW_MIGRATION && !is_under_flood(&cur_time)) {
    199a:	01 f0                	add    %esi,%eax
    199c:	10 00                	adc    %al,(%rax)
    199e:	00 2f                	add    %ch,(%rdi)
    19a0:	33 01                	xor    (%rcx),%eax
    19a2:	0c 67                	or     $0x67,%al
      bpf_map_lookup_elem(&stats, &conn_rate_key);
    19a4:	01 69 09             	add    %ebp,0x9(%rcx)
    19a7:	00 00                	add    %al,(%rax)
    19a9:	2f                   	(bad)
    19aa:	34 01                	xor    $0x1,%al
    19ac:	0c 68                	or     $0x68,%al
    19ae:	01 69 09             	add    %ebp,0x9(%rcx)
    19b1:	00 00                	add    %al,(%rax)
    19b3:	2f                   	(bad)
    19b4:	35 01 0c 69 01       	xor    $0x1690c01,%eax
  if (!conn_rate_stats) {
    19b9:	69 09 00 00 2f 36    	imul   $0x362f0000,(%rcx),%ecx
    19bf:	01 0c 8c             	add    %ecx,(%rsp,%rcx,4)
    19c2:	01 12                	add    %edx,(%rdx)
    19c4:	01 00                	add    %eax,(%rax)
    19c6:	00 1e                	add    %bl,(%rsi)
    19c8:	c8 0c 5f 01          	enter  $0x5f0c,$0x1
  *cur_time = bpf_ktime_get_ns();
    19cc:	b8 10 00 00 1e       	mov    $0x1e000010,%eax
  if ((*cur_time - conn_rate_stats->v2) > ONE_SEC) {
    19d1:	d6                   	(bad)
    19d2:	0c 60                	or     $0x60,%al
    19d4:	01 fa                	add    %edi,%edx
    19d6:	00 00                	add    %al,(%rax)
    19d8:	00 1f                	add    %bl,(%rdi)
    19da:	2f                   	(bad)
    19db:	37                   	(bad)
    19dc:	01 0c 7b             	add    %ecx,(%rbx,%rdi,2)
    conn_rate_stats->v1 = 1;
    19df:	01 32                	add    %esi,(%rdx)
    19e1:	0c 00                	or     $0x0,%al
    19e3:	00 00                	add    %al,(%rax)
    conn_rate_stats->v2 = *cur_time;
    19e5:	00 2e                	add    %ch,(%rsi)
    19e7:	38 01                	cmp    %al,(%rcx)
    19e9:	0e                   	(bad)
    19ea:	44 01 b8 10 00 00 1d 	add    %r15d,0x1d000010(%rax)
    conn_rate_stats->v1 += 1;
    19f1:	a4                   	movsb  %ds:(%rsi),%es:(%rdi)
    19f2:	0e                   	(bad)
    19f3:	44 01 8b 09 00 00 1d 	add    %r9d,0x1d000009(%rbx)
    if (conn_rate_stats->v1 > MAX_CONN_RATE) {
    19fa:	a5                   	movsl  %ds:(%rsi),%es:(%rdi)
    19fb:	0e                   	(bad)
    19fc:	44 01 8b 09 00 00 1d 	add    %r9d,0x1d000009(%rbx)
    1a03:	af                   	scas   %es:(%rdi),%eax
    1a04:	0e                   	(bad)
    void* down_reals_map = bpf_map_lookup_elem(&vip_to_down_reals_map, vip);
    1a05:	44 01 b8 10 00 00 1e 	add    %r15d,0x1e000010(%rax)
    1a0c:	d6                   	(bad)
    1a0d:	0e                   	(bad)
    1a0e:	45 01 fa             	add    %r15d,%r10d
    1a11:	00 00                	add    %al,(%rax)
    1a13:	00 1f                	add    %bl,(%rdi)
    1a15:	1e                   	(bad)
    1a16:	d7                   	xlat   %ds:(%rbx)
    1a17:	0e                   	(bad)
    1a18:	47 01 c2             	rex.RXB add %r8d,%r10d
    1a1b:	13 00                	adc    (%rax),%eax
    1a1d:	00 00                	add    %al,(%rax)
    1a1f:	1f                   	(bad)
    1a20:	1e                   	(bad)
    1a21:	d7                   	xlat   %ds:(%rbx)
    1a22:	0e                   	(bad)
    if (down_reals_map) {
    1a23:	4c 01 11             	add    %r10,(%rcx)
    1a26:	12 00                	adc    (%rax),%al
      void* down_real = real_bpf_map_lookup_elem(down_reals_map, &pckt->real_index);
    1a28:	00 00                	add    %al,(%rax)
    1a2a:	00 30                	add    %dh,(%rax)
    1a2c:	39 01                	cmp    %eax,(%rcx)
    1a2e:	00 b0 2d 3a 01 00    	add    %dh,0x13a2d(%rax)
    1a34:	b1 99                	mov    $0x99,%cl
    1a36:	1a 00                	sbb    (%rax),%al
      if (down_real) {
    1a38:	00 25 b1 00 b2 7e    	add    %ah,0x7eb200b1(%rip)        # 7eb21aef <_license+0x7eb1f70a>
        struct lb_stats* stats_data = bpf_map_lookup_elem(&stats, &stats_key);
    1a3e:	11 00                	adc    %eax,(%rax)
    1a40:	00 25 bc 00 b3 8b    	add    %ah,-0x744cff44(%rip)        # ffffffff8bb31b02 <ch_rings+0x36ff692acb02>
    1a46:	09 00                	or     %eax,(%rax)
    1a48:	00 2d 3b 01 00 b4    	add    %ch,-0x4bfffec5(%rip)        # ffffffffb4001b89 <ch_rings+0x36ff9177cb89>
        if (stats_data) {
    1a4e:	b8 10 00 00 28       	mov    $0x28000010,%eax
    1a53:	3c 01                	cmp    $0x1,%al
    1a55:	00 b5 90 03 00 00    	add    %dh,0x390(%rbp)
          stats_data->v1 += 1;
    1a5b:	28 3d 01 00 b6 fa    	sub    %bh,-0x549ffff(%rip)        # fffffffffab61a62 <ch_rings+0x36ffd82dca62>
    if (!dst) {
    1a61:	00 00                	add    %al,(%rax)
    1a63:	00 26                	add    %ah,(%rsi)
    1a65:	09 00                	or     %eax,(%rax)
    1a67:	b7 bb                	mov    $0xbb,%bh
  data_stats = bpf_map_lookup_elem(&stats, &vip_num);
    1a69:	00 00                	add    %al,(%rax)
    1a6b:	00 1f                	add    %bl,(%rdi)
    1a6d:	26 c2 00 c5          	es ret $0xc500
    1a71:	8b 09                	mov    (%rcx),%ecx
    1a73:	00 00                	add    %al,(%rax)
    1a75:	26 07                	es (bad)
    1a77:	00 c5                	add    %al,%ch
    1a79:	e6 10                	out    %al,$0x10
    1a7b:	00 00                	add    %al,(%rax)
    1a7d:	1f                   	(bad)
    1a7e:	26 c3                	es ret
    1a80:	00 c5                	add    %al,%ch
    1a82:	bb 00 00 00 26       	mov    $0x26000000,%ebx
  if (!data_stats) {
    1a87:	14 00                	adc    $0x0,%al
    1a89:	c5 eb 10             	(bad)
    1a8c:	00 00                	add    %al,(%rax)
    1a8e:	26 c4                	es (bad)
    1a90:	00 c5                	add    %al,%ch
    1a92:	eb 10                	jmp    1aa4 <balancer_ingress+0x1aa4>
    1a94:	00 00                	add    %al,(%rax)
    1a96:	00 00                	add    %al,(%rax)
  data_stats->v1 += 1;
    1a98:	00 0b                	add    %cl,(%rbx)
    1a9a:	ee                   	out    %al,(%dx)
    1a9b:	04 00                	add    $0x0,%al
    1a9d:	00 31                	add    %dh,(%rcx)
  data_stats->v2 += pkt_bytes;
    1a9f:	3e 01 00             	ds add %eax,(%rax)
    1aa2:	7e 02                	jle    1aa6 <balancer_ingress+0x1aa6>
    1aa4:	1d 25 00 7e 02       	sbb    $0x27e0025,%eax
  data_stats = bpf_map_lookup_elem(&reals_stats, &pckt.real_index);
    1aa9:	bb 00 00 00 32       	mov    $0x32000000,%ebx
    1aae:	3f                   	(bad)
    1aaf:	01 00                	add    %eax,(%rax)
    1ab1:	7e 02                	jle    1ab5 <balancer_ingress+0x1ab5>
    1ab3:	b8 10 00 00 32       	mov    $0x32000010,%eax
    1ab8:	40 01 00             	rex add %eax,(%rax)
    1abb:	7e 02                	jle    1abf <balancer_ingress+0x1abf>
    1abd:	b8 10 00 00 2f       	mov    $0x2f000010,%eax
    1ac2:	41 01 00             	add    %eax,(%r8)
    1ac5:	7f 02                	jg     1ac9 <balancer_ingress+0x1ac9>
    1ac7:	81 05 00 00 1f 1e c2 	addl   $0x28000c2,0x1e1f0000(%rip)        # 1e1f1ad1 <_license+0x1e1ef6ec>
    1ace:	00 80 02 
  if (!data_stats) {
    1ad1:	8b 09                	mov    (%rcx),%ecx
    1ad3:	00 00                	add    %al,(%rax)
    1ad5:	1e                   	(bad)
    1ad6:	07                   	(bad)
    1ad7:	00 80 02 e6 10 00    	add    %al,0x10e602(%rax)
  data_stats->v1 += 1;
    1add:	00 1f                	add    %bl,(%rdi)
  data_stats->v2 += pkt_bytes;
    1adf:	1e                   	(bad)
    1ae0:	14 00                	adc    $0x0,%al
    1ae2:	80 02 eb             	addb   $0xeb,(%rdx)
    1ae5:	10 00                	adc    %al,(%rax)
  pckt.flow.port16[0] = original_sport;
    1ae7:	00 1e                	add    %bl,(%rsi)
    1ae9:	c4                   	(bad)
    1aea:	00 80 02 eb 10 00    	add    %al,0x10eb02(%rax)
  if (dst->flags & F_IPV6) {
    1af0:	00 1e                	add    %bl,(%rsi)
    1af2:	c3                   	ret
    1af3:	00 80 02 bb 00 00    	add    %al,0xbb02(%rax)
  __u32 ip_src = create_encap_ipv4_src(pckt->flow.port16[0], pckt->flow.src);
    1af9:	00 00                	add    %al,(%rax)
    1afb:	00 00                	add    %al,(%rax)
    1afd:	2e 42 01 00          	cs rex.X add %eax,(%rax)
    1b01:	8c 02                	mov    %es,(%rdx)
  if (XDP_ADJUST_HEAD_FUNC(xdp, 0 - (int)sizeof(struct iphdr))) {
    1b03:	b2 00                	mov    $0x0,%dl
    1b05:	00 00                	add    %al,(%rax)
    1b07:	1d 2a 00 8d 02       	sbb    $0x28d002a,%eax
    1b0c:	99                   	cltd
    1b0d:	1a 00                	sbb    (%rax),%al
    1b0f:	00 1d b1 00 8e 02    	add    %bl,0x28e00b1(%rip)        # 28e1bc6 <_license+0x28df7e1>
  data = (void*)(long)xdp->data;
    1b15:	7e 11                	jle    1b28 <balancer_ingress+0x1b28>
    1b17:	00 00                	add    %al,(%rax)
  data_end = (void*)(long)xdp->data_end;
    1b19:	1d b8 00 8f 02       	sbb    $0x28f00b8,%eax
  iph = data + sizeof(struct ethhdr);
    1b1e:	a8 02                	test   $0x2,%al
  if (new_eth + 1 > data_end || old_eth + 1 > data_end || iph + 1 > data_end) {
    1b20:	00 00                	add    %al,(%rax)
    1b22:	1d 1d 00 90 02       	sbb    $0x290001d,%eax
    1b27:	60                   	(bad)
    1b28:	02 00                	add    (%rax),%al
    1b2a:	00 2f                	add    %ch,(%rdi)
    1b2c:	3d 01 00 91 02       	cmp    $0x2910001,%eax
    1b31:	fa                   	cli
    1b32:	00 00                	add    %al,(%rax)
    1b34:	00 1f                	add    %bl,(%rdi)
    1b36:	2f                   	(bad)
    1b37:	43 01 00             	rex.XB add %eax,(%r8)
    1b3a:	95                   	xchg   %eax,%ebp
    1b3b:	02 8b 09 00 00 1f    	add    0x1f000009(%rbx),%cl
    1b41:	1e                   	(bad)
    1b42:	c2 00 95             	ret    $0x9500
    1b45:	02 8b 09 00 00 1e    	add    0x1e000009(%rbx),%cl
    1b4b:	07                   	(bad)
    1b4c:	00 95 02 e6 10 00    	add    %dl,0x10e602(%rbp)
    1b52:	00 00                	add    %al,(%rax)
    1b54:	1f                   	(bad)
    1b55:	2f                   	(bad)
    1b56:	44 01 00             	add    %r8d,(%rax)
  memcpy(new_eth->h_dest, cval->mac, 6);
    1b59:	97                   	xchg   %eax,%edi
    1b5a:	02 8b 09 00 00 1f    	add    0x1f000009(%rbx),%cl
    1b60:	1e                   	(bad)
    1b61:	b9 00 9c 02 bb       	mov    $0xbb029c00,%ecx
    1b66:	00 00                	add    %al,(%rax)
    1b68:	00 2f                	add    %ch,(%rdi)
    1b6a:	45 01 00             	add    %r8d,(%r8)
  memcpy(new_eth->h_source, old_eth->h_dest, 6);
    1b6d:	9d                   	popf
    1b6e:	02 81 05 00 00 1f    	add    0x1f000005(%rcx),%al
    1b74:	1e                   	(bad)
    1b75:	c2 00 9d             	ret    $0x9d00
    1b78:	02 8b 09 00 00 1e    	add    0x1e000009(%rbx),%cl
  new_eth->h_proto = BE_ETH_P_IP;
    1b7e:	07                   	(bad)
  create_v4_hdr(iph, pckt->tos, ip_src, dst->dst, pkt_bytes, IPPROTO_IPIP);
    1b7f:	00 9d 02 e6 10 00    	add    %bl,0x10e602(%rbp)
    1b85:	00 1f                	add    %bl,(%rdi)
  iph->ihl = 5;
    1b87:	1e                   	(bad)
    1b88:	c3                   	ret
    1b89:	00 9d 02 bb 00 00    	add    %bl,0xbb02(%rbp)
  iph->tot_len = bpf_htons(pkt_bytes + sizeof(struct iphdr));
    1b8f:	00 1e                	add    %bl,(%rsi)
    1b91:	14 00                	adc    $0x0,%al
    1b93:	9d                   	popf
    1b94:	02 eb                	add    %bl,%ch
    1b96:	10 00                	adc    %al,(%rax)
    1b98:	00 1e                	add    %bl,(%rsi)
    1b9a:	c4                   	(bad)
  iph->id = 0;
    1b9b:	00 9d 02 eb 10 00    	add    %bl,0x10eb02(%rbp)
    1ba1:	00 00                	add    %al,(%rax)
  iph->daddr = daddr;
    1ba3:	00 00                	add    %al,(%rax)
  iph->saddr = saddr;
    1ba5:	00 00                	add    %al,(%rax)
    1ba7:	00 2c 46             	add    %ch,(%rsi,%rax,2)
  iph->ttl = DEFAULT_TTL;
    1baa:	01 00                	add    %eax,(%rax)
    1bac:	26 b8 10 00 00 2d    	es mov $0x2d000010,%eax
    1bb2:	3d 01 00 27 6f       	cmp    $0x6f270001,%eax
    1bb7:	0a 00                	or     (%rax),%al
    1bb9:	00 28                	add    %ch,(%rax)
    1bbb:	47 01 00             	rex.RXB add %r8d,(%r8)
    1bbe:	28 bb 00 00 00 28    	sub    %bh,0x28000000(%rbx)
    1bc4:	48 01 00             	add    %rax,(%rax)
    1bc7:	29 81 05 00 00 1f    	sub    %eax,0x1f000005(%rcx)
    1bcd:	26 c2 00 2a          	es ret $0x2a00
    1bd1:	8b 09                	mov    (%rcx),%ecx
    1bd3:	00 00                	add    %al,(%rax)
    1bd5:	26 07                	es (bad)
    1bd7:	00 2a                	add    %ch,(%rdx)
    1bd9:	e6 10                	out    %al,$0x10
    1bdb:	00 00                	add    %al,(%rax)
    1bdd:	1f                   	(bad)
    1bde:	26 c3                	es ret
    1be0:	00 2a                	add    %ch,(%rdx)
    1be2:	bb 00 00 00 26       	mov    $0x26000000,%ebx
    1be7:	14 00                	adc    $0x0,%al
    1be9:	2a eb                	sub    %bl,%ch
    1beb:	10 00                	adc    %al,(%rax)
    1bed:	00 26                	add    %ah,(%rsi)
    1bef:	c4                   	(bad)
    1bf0:	00 2a                	add    %ch,(%rdx)
    1bf2:	eb 10                	jmp    1c04 <balancer_ingress+0x1c04>
    1bf4:	00 00                	add    %al,(%rax)
    1bf6:	00 00                	add    %al,(%rax)
    1bf8:	00 2c 49             	add    %ch,(%rcx,%rcx,2)
    1bfb:	01 11                	add    %edx,(%rcx)
    1bfd:	58                   	pop    %rax
    1bfe:	b8 10 00 00 25       	mov    $0x25000010,%eax
    1c03:	a3 11 59 4e 10 00 00 	movabs %eax,0xbf250000104e5911
    1c0a:	25 bf 
    1c0c:	11 5a c7             	adc    %ebx,-0x39(%rdx)
    1c0f:	00 00                	add    %al,(%rax)
    1c11:	00 25 b1 11 5b 7e    	add    %ah,0x7e5b11b1(%rip)        # 7e5b2dc8 <_license+0x7e5b09e3>
    1c17:	11 00                	adc    %eax,(%rax)
    1c19:	00 25 2a 11 5c ee    	add    %ah,-0x11a3eed6(%rip)        # ffffffffee5c2d49 <ch_rings+0x36ffcbd3dd49>
    1c1f:	04 00                	add    $0x0,%al
    1c21:	00 25 bd 11 5d bb    	add    %ah,-0x44a2ee43(%rip)        # ffffffffbb5d2de4 <ch_rings+0x36ff98d4dde4>
    1c27:	00 00                	add    %al,(%rax)
    1c29:	00 26                	add    %ah,(%rsi)
    1c2b:	d3 11                	rcll   %cl,(%rcx)
    1c2d:	60                   	(bad)
    1c2e:	6c                   	insb   (%dx),%es:(%rdi)
    1c2f:	0b 00                	or     (%rax),%eax
    1c31:	00 28                	add    %ch,(%rax)
    1c33:	4a 01 11             	rex.WX add %rdx,(%rcx)
    1c36:	63 bb 00 00 00 26    	movsxd 0x26000000(%rbx),%edi
    1c3c:	e7 11                	out    %eax,$0x11
    1c3e:	64 fa                	fs cli
    1c40:	00 00                	add    %al,(%rax)
    1c42:	00 26                	add    %ah,(%rsi)
      if (pckt.flow.proto == IPPROTO_TCP) {
    1c44:	a4                   	movsb  %ds:(%rsi),%es:(%rdi)
    1c45:	11 5e 8b             	adc    %ebx,-0x75(%rsi)
    1c48:	09 00                	or     %eax,(%rax)
            bpf_map_lookup_elem(&stats, &lru_stats_key);
    1c4a:	00 26                	add    %ah,(%rsi)
    1c4c:	a5                   	movsl  %ds:(%rsi),%es:(%rdi)
    1c4d:	11 5f 8b             	adc    %ebx,-0x75(%rdi)
    1c50:	09 00                	or     %eax,(%rax)
    1c52:	00 28                	add    %ch,(%rax)
    1c54:	2b 01                	sub    (%rcx),%eax
    1c56:	11 61 87             	adc    %esp,-0x79(%rcx)
    1c59:	18 00                	sbb    %al,(%rax)
        if (!lru_stats) {
    1c5b:	00 28                	add    %ch,(%rax)
    1c5d:	26 01 11             	es add %edx,(%rcx)
    1c60:	62                   	(bad)
    1c61:	87 18                	xchg   %ebx,(%rax)
    1c63:	00 00                	add    %al,(%rax)
        if (pckt.flags & F_SYN_SET) {
    1c65:	00 30                	add    %dh,(%rax)
    1c67:	4b 01 12             	rex.WXB add %rdx,(%r10)
    1c6a:	31 25 d3 12 32 6c    	xor    %esp,0x6c3212d3(%rip)        # 6c322f43 <_license+0x6c320b5e>
    1c70:	0b 00                	or     (%rax),%eax
    1c72:	00 25 93 12 33 12    	add    %ah,0x12331293(%rip)        # 12332f0b <_license+0x12330b26>
    1c78:	01 00                	add    %eax,(%rax)
  struct real_pos_lru new_dst_lru = {};
    1c7a:	00 25 89 12 34 bb    	add    %ah,-0x44cbed77(%rip)        # ffffffffbb342f09 <ch_rings+0x36ff98abdf09>
    1c80:	00 00                	add    %al,(%rax)
    1c82:	00 25 8f 12 35 bb    	add    %ah,-0x44caed71(%rip)        # ffffffffbb352f17 <ch_rings+0x36ff98acdf17>
    1c88:	00 00                	add    %al,(%rax)
    1c8a:	00 25 bd 12 36 9c    	add    %ah,-0x63c9ed43(%rip)        # ffffffff9c362f4d <ch_rings+0x36ff79addf4d>
      bpf_map_lookup_elem(&stats, &conn_rate_key);
    1c90:	02 00                	add    (%rax),%al
    1c92:	00 25 22 12 37 12    	add    %ah,0x12371222(%rip)        # 12372eba <_license+0x12370ad5>
    1c98:	01 00                	add    %eax,(%rax)
    1c9a:	00 26                	add    %ah,(%rsi)
    1c9c:	e7 12                	out    %eax,$0x12
    1c9e:	38 fa                	cmp    %bh,%dl
  if (!conn_rate_stats) {
    1ca0:	00 00                	add    %al,(%rax)
    1ca2:	00 00                	add    %al,(%rax)
    1ca4:	2c 4c                	sub    $0x4c,%al
    1ca6:	01 00                	add    %eax,(%rax)
    1ca8:	57                   	push   %rdi
    1ca9:	b8 10 00 00 2d       	mov    $0x2d000010,%eax
  *cur_time = bpf_ktime_get_ns();
    1cae:	3a 01                	cmp    (%rcx),%al
  if ((*cur_time - conn_rate_stats->v2) > ONE_SEC) {
    1cb0:	00 58 99             	add    %bl,-0x67(%rax)
    1cb3:	1a 00                	sbb    (%rax),%al
    1cb5:	00 25 b1 00 59 7e    	add    %ah,0x7e5900b1(%rip)        # 7e591d6c <_license+0x7e58f987>
    1cbb:	11 00                	adc    %eax,(%rax)
    1cbd:	00 25 b8 00 5a a8    	add    %ah,-0x57a5ff48(%rip)        # ffffffffa85a1d7b <ch_rings+0x36ff85d1cd7b>
    conn_rate_stats->v1 = 1;
    1cc3:	02 00                	add    (%rax),%al
    1cc5:	00 25 af 00 5b b8    	add    %ah,-0x47a4ff51(%rip)        # ffffffffb85b1d7a <ch_rings+0x36ff95d2cd7a>
    conn_rate_stats->v2 = *cur_time;
    1ccb:	10 00                	adc    %al,(%rax)
    1ccd:	00 25 bc 00 5c 8b    	add    %ah,-0x74a3ff44(%rip)        # ffffffff8b5c1d8f <ch_rings+0x36ff68d3cd8f>
    conn_rate_stats->v1 += 1;
    1cd3:	09 00                	or     %eax,(%rax)
    1cd5:	00 28                	add    %ch,(%rax)
    1cd7:	4d 01 00             	add    %r8,(%r8)
    1cda:	5e                   	pop    %rsi
    if (conn_rate_stats->v1 > MAX_CONN_RATE) {
    1cdb:	95                   	xchg   %eax,%ebp
    1cdc:	03 00                	add    (%rax),%eax
    1cde:	00 28                	add    %ch,(%rax)
    1ce0:	4e 01 00             	rex.WRX add %r8,(%rax)
    1ce3:	5f                   	pop    %rdi
    1ce4:	b8 10 00 00 28       	mov    $0x28000010,%eax
    1ce9:	4f 01 00             	rex.WRXB add %r8,(%r8)
    if (vip_info->flags & F_HASH_DPORT_ONLY) {
    1cec:	60                   	(bad)
    1ced:	b8 10 00 00 28       	mov    $0x28000010,%eax
    1cf2:	3d 01 00 62 fa       	cmp    $0xfa620001,%eax
    b += *(u32*)(k + 4);
    1cf7:	00 00                	add    %al,(%rax)
    1cf9:	00 28                	add    %ch,(%rax)
    c += *(u32*)(k + 8);
    1cfb:	50                   	push   %rax
    1cfc:	01 00                	add    %eax,(%rax)
      a += (u32)k[3] << 24;
    1cfe:	63 bb 00 00 00 26    	movsxd 0x26000000(%rbx),%edi
      a += (u32)k[2] << 16;
    1d04:	09 00                	or     %eax,(%rax)
    1d06:	64 bb 00 00 00 26    	fs mov $0x26000000,%ebx
      a += (u32)k[1] << 8;
    1d0c:	d0 00                	rolb   (%rax)
      a += k[0];
    1d0e:	61                   	(bad)
    1d0f:	b6 00                	mov    $0x0,%dh
    1d11:	00 00                	add    %al,(%rax)
    1d13:	1f                   	(bad)
    1d14:	28 51 01             	sub    %dl,0x1(%rcx)
      pckt->flow.port16[0] = pckt->flow.port16[1];
    1d17:	00 86 b8 10 00 00    	add    %al,0x10b8(%rsi)
    1d1d:	1f                   	(bad)
    1d1e:	26 c2 00 92          	es ret $0x9200
      memset(pckt->flow.srcv6, 0, 16);
    1d22:	8b 09                	mov    (%rcx),%ecx
    1d24:	00 00                	add    %al,(%rax)
    1d26:	26 07                	es (bad)
    1d28:	00 92 e6 10 00 00    	add    %dl,0x10e6(%rdx)
    1d2e:	1f                   	(bad)
    1d2f:	26 c3                	es ret
    1d31:	00 92 bb 00 00 00    	add    %dl,0xbb(%rdx)
    1d37:	26 14 00             	es adc $0x0,%al
    1d3a:	92                   	xchg   %eax,%edx
    1d3b:	eb 10                	jmp    1d4d <balancer_ingress+0x1d4d>
    1d3d:	00 00                	add    %al,(%rax)
    1d3f:	26 c4                	es (bad)
    1d41:	00 92 eb 10 00 00    	add    %dl,0x10eb(%rdx)
    c += *(u32*)(k + 8);
    1d47:	00 00                	add    %al,(%rax)
    1d49:	00 1f                	add    %bl,(%rdi)
    __jhash_mix(a, b, c);
    1d4b:	26 c2 00 9f          	es ret $0x9f00
    1d4f:	8b 09                	mov    (%rcx),%ecx
    b += *(u32*)(k + 4);
    1d51:	00 00                	add    %al,(%rax)
    1d53:	26 07                	es (bad)
    1d55:	00 9f e6 10 00 00    	add    %bl,0x10e6(%rdi)
    __jhash_mix(a, b, c);
    1d5b:	1f                   	(bad)
    1d5c:	26 c3                	es ret
    1d5e:	00 9f bb 00 00 00    	add    %bl,0xbb(%rdi)
  return (word << shift) | (word >> ((-shift) & 31));
    1d64:	26 14 00             	es adc $0x0,%al
    1d67:	9f                   	lahf
    __jhash_mix(a, b, c);
    1d68:	eb 10                	jmp    1d7a <balancer_ingress+0x1d7a>
    1d6a:	00 00                	add    %al,(%rax)
  return (word << shift) | (word >> ((-shift) & 31));
    1d6c:	26 c4                	es (bad)
    1d6e:	00 9f eb 10 00 00    	add    %bl,0x10eb(%rdi)
    __jhash_mix(a, b, c);
    1d74:	00 00                	add    %al,(%rax)
    1d76:	00 2c 52             	add    %ch,(%rdx,%rdx,2)
  return (word << shift) | (word >> ((-shift) & 31));
    1d79:	01 0d 66 8f 0c 00    	add    %ecx,0xc8f66(%rip)        # cace5 <_license+0xc8900>
    __jhash_mix(a, b, c);
    1d7f:	00 2d 53 01 0d 66    	add    %ch,0x660d0153(%rip)        # 660d1ed8 <_license+0x660cfaf3>
  return (word << shift) | (word >> ((-shift) & 31));
    1d85:	8f                   	(bad)
    1d86:	0c 00                	or     $0x0,%al
    1d88:	00 2d 54 01 0d 66    	add    %ch,0x660d0154(%rip)        # 660d1ee2 <_license+0x660cfafd>
    __jhash_mix(a, b, c);
    1d8e:	8f                   	(bad)
  return (word << shift) | (word >> ((-shift) & 31));
    1d8f:	0c 00                	or     $0x0,%al
    1d91:	00 2d 55 01 0d 66    	add    %ch,0x660d0155(%rip)        # 660d1eec <_license+0x660cfb07>
    __jhash_mix(a, b, c);
    1d97:	8f                   	(bad)
      a += (u32)k[3] << 24;
    1d98:	0c 00                	or     $0x0,%al
    1d9a:	00 2d 56 01 0d 66    	add    %ch,0x660d0156(%rip)        # 660d1ef6 <_license+0x660cfb11>
      a += (u32)k[2] << 16;
    1da0:	8f                   	(bad)
    1da1:	0c 00                	or     $0x0,%al
    1da3:	00 00                	add    %al,(%rax)
    1da5:	2c 57                	sub    $0x57,%al
      a += (u32)k[3] << 24;
    1da7:	01 0d 6e 8f 0c 00    	add    %ecx,0xc8f6e(%rip)        # cad1b <_license+0xc8936>
      a += (u32)k[1] << 8;
    1dad:	00 2d 53 01 0d 6e    	add    %ch,0x6e0d0153(%rip)        # 6e0d1f06 <_license+0x6e0cfb21>
      a += k[0];
    1db3:	8f                   	(bad)
    1db4:	0c 00                	or     $0x0,%al
      a += (u32)k[1] << 8;
    1db6:	00 2d 54 01 0d 6e    	add    %ch,0x6e0d0154(%rip)        # 6e0d1f10 <_license+0x6e0cfb2b>
      __jhash_final(a, b, c);
    1dbc:	8f                   	(bad)
    1dbd:	0c 00                	or     $0x0,%al
  return (word << shift) | (word >> ((-shift) & 31));
    1dbf:	00 2d 56 01 0d 6e    	add    %ch,0x6e0d0156(%rip)        # 6e0d1f1b <_license+0x6e0cfb36>
      __jhash_final(a, b, c);
    1dc5:	8f                   	(bad)
    1dc6:	0c 00                	or     $0x0,%al
  return (word << shift) | (word >> ((-shift) & 31));
    1dc8:	00 00                	add    %al,(%rax)
    1dca:	2c 58                	sub    $0x58,%al
      __jhash_final(a, b, c);
    1dcc:	01 00                	add    %eax,(%rax)
    1dce:	19 bb 00 00 00 25    	sbb    %edi,0x25000000(%rbx)
  return (word << shift) | (word >> ((-shift) & 31));
    1dd4:	b1 00                	mov    $0x0,%cl
      __jhash_final(a, b, c);
    1dd6:	1a 7e 11             	sbb    0x11(%rsi),%bh
  return (word << shift) | (word >> ((-shift) & 31));
    1dd9:	00 00                	add    %al,(%rax)
    1ddb:	2d 51 01 00 1b       	sub    $0x1b000151,%eax
      __jhash_final(a, b, c);
    1de0:	b8 10 00 00 00       	mov    $0x10,%eax
  return (word << shift) | (word >> ((-shift) & 31));
    1de5:	2c 59                	sub    $0x59,%al
      __jhash_final(a, b, c);
    1de7:	01 0d 07 bb 00 00    	add    %ecx,0xbb07(%rip)        # d8f4 <_license+0xb50f>
  return (word << shift) | (word >> ((-shift) & 31));
    1ded:	00 2d 5a 01 0d 07    	add    %ch,0x70d015a(%rip)        # 70d1f4d <_license+0x70cfb68>
    1df3:	bb 00 00 00 2d       	mov    $0x2d000000,%ebx
  a += initval;
    1df8:	5b                   	pop    %rbx
    1df9:	01 0d 07 c3 00 00    	add    %ecx,0xc307(%rip)        # e106 <_license+0xbd21>
  b += initval;
    1dff:	00 00                	add    %al,(%rax)
  a += initval;
    1e01:	33 5c 01 00          	xor    0x0(%rcx,%rax,1),%ebx
    1e05:	42 28 5d 01          	rex.X sub %bl,0x1(%rbp)
  __jhash_final(a, b, c);
    1e09:	00 43 bb             	add    %al,-0x45(%rbx)
    1e0c:	00 00                	add    %al,(%rax)
  return (word << shift) | (word >> ((-shift) & 31));
    1e0e:	00 28                	add    %ch,(%rax)
    1e10:	5e                   	pop    %rsi
    1e11:	01 00                	add    %eax,(%rax)
  __jhash_final(a, b, c);
    1e13:	44 81 05 00 00 1f 26 	rex.R addl $0x8b4500c2,0x261f0000(%rip)        # 261f1e1e <_license+0x261efa39>
    1e1a:	c2 00 45 8b 
    1e1e:	09 00                	or     %eax,(%rax)
  return (word << shift) | (word >> ((-shift) & 31));
    1e20:	00 26                	add    %ah,(%rsi)
    1e22:	07                   	(bad)
    1e23:	00 45 e6             	add    %al,-0x1a(%rbp)
  __jhash_final(a, b, c);
    1e26:	10 00                	adc    %al,(%rax)
    1e28:	00 1f                	add    %bl,(%rdi)
  return (word << shift) | (word >> ((-shift) & 31));
    1e2a:	26 c3                	es ret
    1e2c:	00 45 bb             	add    %al,-0x45(%rbp)
  __jhash_final(a, b, c);
    1e2f:	00 00                	add    %al,(%rax)
    1e31:	00 26                	add    %ah,(%rsi)
  return (word << shift) | (word >> ((-shift) & 31));
    1e33:	14 00                	adc    $0x0,%al
    1e35:	45 eb 10             	rex.RB jmp 1e48 <balancer_ingress+0x1e48>
  __jhash_final(a, b, c);
    1e38:	00 00                	add    %al,(%rax)
    1e3a:	26 c4                	es (bad)
  return (word << shift) | (word >> ((-shift) & 31));
    1e3c:	00 45 eb             	add    %al,-0x15(%rbp)
  __jhash_final(a, b, c);
    1e3f:	10 00                	adc    %al,(%rax)
    1e41:	00 00                	add    %al,(%rax)
  return (word << shift) | (word >> ((-shift) & 31));
    1e43:	00 00                	add    %al,(%rax)
  __jhash_final(a, b, c);
    1e45:	33 5f 01             	xor    0x1(%rdi),%ebx
    1e48:	00 4d 28             	add    %cl,0x28(%rbp)
    1e4b:	5d                   	pop    %rbp
    hash = get_packet_hash(pckt, hash_16bytes) % RING_SIZE;
    1e4c:	01 00                	add    %eax,(%rax)
    1e4e:	4e bb 00 00 00 28 5e 	rex.WRX movabs $0x4f00015e28000000,%rbx
    1e55:	01 00 4f 
    1e58:	81 05 00 00 1f 26 c2 	addl   $0x8b5000c2,0x261f0000(%rip)        # 261f1e62 <_license+0x261efa7d>
    1e5f:	00 50 8b 
    key = RING_SIZE * (vip_info->vip_num) + hash;
    1e62:	09 00                	or     %eax,(%rax)
    1e64:	00 26                	add    %ah,(%rsi)
    1e66:	07                   	(bad)
    1e67:	00 50 e6             	add    %dl,-0x1a(%rax)
    real_pos = bpf_map_lookup_elem(&ch_rings, &key);
    1e6a:	10 00                	adc    %al,(%rax)
    1e6c:	00 1f                	add    %bl,(%rdi)
    1e6e:	26 c3                	es ret
    if (!real_pos) {
    1e70:	00 50 bb             	add    %dl,-0x45(%rax)
    real_pos = bpf_map_lookup_elem(&ch_rings, &key);
    1e73:	00 00                	add    %al,(%rax)
    1e75:	00 26                	add    %ah,(%rsi)
    1e77:	14 00                	adc    $0x0,%al
    1e79:	50                   	push   %rax
    1e7a:	eb 10                	jmp    1e8c <balancer_ingress+0x1e8c>
    1e7c:	00 00                	add    %al,(%rax)
    key = *real_pos;
    1e7e:	26 c4                	es (bad)
    1e80:	00 50 eb             	add    %dl,-0x15(%rax)
    1e83:	10 00                	adc    %al,(%rax)
    1e85:	00 00                	add    %al,(%rax)
    1e87:	00 00                	add    %al,(%rax)
    if (key == 0) {
    1e89:	2c 60                	sub    $0x60,%al
  pckt->real_index = key;
    1e8b:	01 11                	add    %edx,(%rcx)
    1e8d:	2a b8 10 00 00 25    	sub    0x25000010(%rax),%bh
  *real = bpf_map_lookup_elem(&reals, &key);
    1e93:	a3 11 2b 4e 10 00 00 	movabs %eax,0xbf250000104e2b11
    1e9a:	25 bf 
      bpf_map_lookup_elem(&stats, &ch_drop_stats_key);
    1e9c:	11 2c c7             	adc    %ebp,(%rdi,%rax,8)
    1e9f:	00 00                	add    %al,(%rax)
    1ea1:	00 25 af 11 2d b8    	add    %ah,-0x47d2ee51(%rip)        # ffffffffb82d3056 <ch_rings+0x36ff95a4e056>
  if (!ch_drop_stats) {
    1ea7:	10 00                	adc    %al,(%rax)
    1ea9:	00 25 b1 11 2e 7e    	add    %ah,0x7e2e11b1(%rip)        # 7e2e3060 <_license+0x7e2e0c7b>
      bpf_map_lookup_elem(&stats, &ch_drop_stats_key);
    1eaf:	11 00                	adc    %eax,(%rax)
    1eb1:	00 25 2a 11 2f ee    	add    %ah,-0x11d0eed6(%rip)        # ffffffffee2f2fe1 <ch_rings+0x36ffcba6dfe1>
    1eb7:	04 00                	add    $0x0,%al
    1eb9:	00 25 bd 11 30 bb    	add    %ah,-0x44cfee43(%rip)        # ffffffffbb30307c <ch_rings+0x36ff98a7e07c>
  if (!ch_drop_stats) {
    1ebf:	00 00                	add    %al,(%rax)
    1ec1:	00 26                	add    %ah,(%rsi)
    1ec3:	a4                   	movsb  %ds:(%rsi),%es:(%rdi)
    1ec4:	11 31                	adc    %esi,(%rcx)
    1ec6:	8b 09                	mov    (%rcx),%ecx
    1ec8:	00 00                	add    %al,(%rax)
    1eca:	26 a5                	movsl  %ds:(%rsi),%es:(%rdi)
    1ecc:	11 32                	adc    %esi,(%rdx)
    1ece:	8b 09                	mov    (%rcx),%ecx
    1ed0:	00 00                	add    %al,(%rax)
}
    1ed2:	28 2b                	sub    %ch,(%rbx)
    1ed4:	01 11                	add    %edx,(%rcx)
    1ed6:	34 87                	xor    $0x87,%al
    1ed8:	18 00                	sbb    %al,(%rax)
    1eda:	00 26                	add    %ah,(%rsi)
    1edc:	d4                   	(bad)
    1edd:	11 33                	adc    %esi,(%rbx)
    1edf:	7e 0a                	jle    1eeb <balancer_ingress+0x1eeb>
    1ee1:	00 00                	add    %al,(%rax)
    1ee3:	28 26                	sub    %ah,(%rsi)
  if (lru_map && !(vip_info->flags & F_LRU_BYPASS) && !under_flood) {
    1ee5:	01 11                	add    %edx,(%rcx)
    1ee7:	35 87 18 00 00       	xor    $0x1887,%eax
    1eec:	26 22 11             	es and (%rcx),%dl
    1eef:	38 12                	cmp    %dl,(%rdx)
    1ef1:	01 00                	add    %eax,(%rax)
    1ef3:	00 26                	add    %ah,(%rsi)
    1ef5:	89 11                	mov    %edx,(%rcx)
    1ef7:	37                   	(bad)
    1ef8:	05 1f 00 00 26       	add    $0x2600001f,%eax
    1efd:	85 11                	test   %edx,(%rcx)
    1eff:	36 9c                	ss pushf
    1f01:	02 00                	add    (%rax),%al
    1f03:	00 00                	add    %al,(%rax)
    1f05:	04 bb                	add    $0xbb,%al
    1f07:	00 00                	add    %al,(%rax)
    1f09:	00 05 60 00 00 00    	add    %al,0x60(%rip)        # 1f6f <balancer_ingress+0x1f6f>
  if (XDP_ADJUST_HEAD_FUNC(xdp, 0 - (int)sizeof(struct ipv6hdr))) {
    1f0f:	04 00                	add    $0x0,%al
    1f11:	30 61 01             	xor    %ah,0x1(%rcx)
    1f14:	12 21                	adc    (%rcx),%ah
    1f16:	25 1f 12 21 9c       	and    $0x9c21121f,%eax
  data = (void*)(long)xdp->data;
    1f1b:	02 00                	add    (%rax),%al
    1f1d:	00 25 28 12 21 b8    	add    %ah,-0x47deedd8(%rip)        # ffffffffb821314b <ch_rings+0x36ff9598e14b>
  ip6h = data + sizeof(struct ethhdr);
    1f23:	01 00                	add    %eax,(%rax)
    1f25:	00 25 89 12 21 b6    	add    %ah,-0x49deed77(%rip)        # ffffffffb62131b4 <ch_rings+0x36ff9398e1b4>
    1f2b:	00 00                	add    %al,(%rax)
    1f2d:	00 00                	add    %al,(%rax)
    1f2f:	30 62 01             	xor    %ah,0x1(%rdx)
    1f32:	12 4c 25 d4          	adc    -0x2c(%rbp,%riz,1),%cl
  if (new_eth + 1 > data_end || old_eth + 1 > data_end || ip6h + 1 > data_end) {
    1f36:	12 4d 7e             	adc    0x7e(%rbp),%cl
    1f39:	0a 00                	or     (%rax),%al
    1f3b:	00 2d 63 01 12 4e    	add    %ch,0x4e120163(%rip)        # 4e1220a4 <_license+0x4e11fcbf>
    1f41:	12 01                	adc    (%rcx),%al
  memcpy(new_eth->h_dest, cval->mac, 6);
    1f43:	00 00                	add    %al,(%rax)
    1f45:	25 89 12 4f b6       	and    $0xb64f1289,%eax
    1f4a:	00 00                	add    %al,(%rax)
    1f4c:	00 25 8f 12 50 b6    	add    %ah,-0x49afed71(%rip)        # ffffffffb65031e1 <ch_rings+0x36ff93c7e1e1>
    1f52:	00 00                	add    %al,(%rax)
    1f54:	00 25 85 12 51 9c    	add    %ah,-0x63aeed7b(%rip)        # ffffffff9c5131df <ch_rings+0x36ff79c8e1df>
  memcpy(new_eth->h_source, old_eth->h_dest, 6);
    1f5a:	02 00                	add    (%rax),%al
    1f5c:	00 25 22 12 52 12    	add    %ah,0x12521222(%rip)        # 12523184 <_license+0x12520d9f>
    1f62:	01 00                	add    %eax,(%rax)
  new_eth->h_proto = BE_ETH_P_IPV6;
    1f64:	00 00                	add    %al,(%rax)
    1f66:	31 64 01 00          	xor    %esp,0x0(%rcx,%rax,1)
    1f6a:	35 02 1d ca 00       	xor    $0xca1d02,%eax
  saddr[3] = src ^ port;
    1f6f:	36 02 a4 06 00 00 1d 	ss add -0x32e30000(%rsi,%rax,1),%ah
    1f76:	cd 
  create_v6_hdr(ip6h, pckt->tos, saddr, dst->dstv6, payload_len, proto);
    1f77:	00 37                	add    %dh,(%rdi)
    1f79:	02 12                	add    (%rdx),%dl
  memset(ip6h->flow_lbl, 0, sizeof(ip6h->flow_lbl));
    1f7b:	01 00                	add    %eax,(%rax)
    1f7d:	00 00                	add    %al,(%rax)
    1f7f:	2e 65 01 00          	cs add %eax,%gs:(%rax)
  ip6h->priority = (tc & 0xF0) >> 4;
    1f83:	43 02 b2 00 00 00 1d 	rex.XB add 0x1d000000(%r10),%sil
    1f8a:	1d 00 44 02 60       	sbb    $0x60024400,%eax
  ip6h->flow_lbl[0] = (tc & 0x0F) << 4;
    1f8f:	02 00                	add    (%rax),%al
    1f91:	00 1d b1 00 45 02    	add    %bl,0x24500b1(%rip)        # 2452048 <_license+0x244fc63>
  ip6h->nexthdr = proto;
    1f97:	7e 11                	jle    1faa <balancer_ingress+0x1faa>
  ip6h->payload_len = bpf_htons(payload_len);
    1f99:	00 00                	add    %al,(%rax)
    1f9b:	1d b8 00 46 02       	sbb    $0x24600b8,%eax
    1fa0:	a8 02                	test   $0x2,%al
  memcpy(ip6h->saddr.s6_addr32, saddr, 16);
    1fa2:	00 00                	add    %al,(%rax)
    1fa4:	1d af 00 47 02       	sbb    $0x24700af,%eax
    1fa9:	b8 10 00 00 2f       	mov    $0x2f000010,%eax
    1fae:	66 01 00             	add    %ax,(%rax)
    1fb1:	4a 02 60 02          	rex.WX add 0x2(%rax),%spl
    1fb5:	00 00                	add    %al,(%rax)
    1fb7:	2f                   	(bad)
    1fb8:	67 01 00             	add    %eax,(%eax)
    1fbb:	49 02 bb 00 00 00 2f 	rex.WB add 0x2f000000(%r11),%dil
    1fc2:	68 01 00 4f 02       	push   $0x24f0001
    1fc7:	b8 10 00 00 2f       	mov    $0x2f000010,%eax
    if (pckt->flow.proto == IPPROTO_UDP) {
    1fcc:	69 01 00 55 02 b8    	imul   $0xb8025500,(%rcx),%eax
      new_dst_lru.atime = cur_time;
    1fd2:	10 00                	adc    %al,(%rax)
    new_dst_lru.pos = key;
    1fd4:	00 2f                	add    %ch,(%rdi)
    1fd6:	6a 01                	push   $0x1
    1fd8:	00 56 02             	add    %dl,0x2(%rsi)
    1fdb:	b8 10 00 00 2f       	mov    $0x2f000010,%eax
    1fe0:	6b 01 00             	imul   $0x0,(%rcx),%eax
    1fe3:	57                   	push   %rdi
    1fe4:	02 b8 10 00 00 1f    	add    0x1f000010(%rax),%bh
    1fea:	1e                   	(bad)
    1feb:	c6 00 59             	movb   $0x59,(%rax)
    bpf_map_update_elem(lru_map, &pckt->flow, &new_dst_lru, BPF_ANY);
    1fee:	02 bb 00 00 00 2f    	add    0x2f000000(%rbx),%bh
      if (update_vip_lru_miss_stats(&vip, &pckt, vip_info, is_ipv6) >= 0) {
    1ff4:	6c                   	insb   (%dx),%es:(%rdi)
    1ff5:	01 00                	add    %eax,(%rax)
    1ff7:	5a                   	pop    %rdx
    1ff8:	02 b6 00 00 00 1f    	add    0x1f000000(%rsi),%dh
    1ffe:	1e                   	(bad)
    1fff:	c2 00 5a             	ret    $0x5a00
                        (lru_miss_stat_vip->vipv6[0] == vip->vipv6[0] &&
    2002:	02 8b 09 00 00 1e    	add    0x1e000009(%rbx),%cl
    2008:	07                   	(bad)
    2009:	00 5a 02             	add    %bl,0x2(%rdx)
    200c:	e6 10                	out    %al,$0x10
                         lru_miss_stat_vip->vipv6[1] == vip->vipv6[1] &&
    200e:	00 00                	add    %al,(%rax)
    2010:	1f                   	(bad)
    2011:	1e                   	(bad)
    2012:	c3                   	ret
    2013:	00 5a 02             	add    %bl,0x2(%rdx)
    2016:	bb 00 00 00 1e       	mov    $0x1e000000,%ebx
                         lru_miss_stat_vip->vipv6[2] == vip->vipv6[2] &&
    201b:	14 00                	adc    $0x0,%al
    201d:	5a                   	pop    %rdx
    201e:	02 eb                	add    %bl,%ch
    2020:	10 00                	adc    %al,(%rax)
    2022:	00 1e                	add    %bl,(%rsi)
    2024:	c4                   	(bad)
    2025:	00 5a 02             	add    %bl,0x2(%rdx)
    2028:	eb 10                	jmp    203a <balancer_ingress+0x203a>
    202a:	00 00                	add    %al,(%rax)
    202c:	00 00                	add    %al,(%rax)
    202e:	00 1f                	add    %bl,(%rdi)
    2030:	1e                   	(bad)
    2031:	c2 00 4b             	ret    $0x4b00
  bool port_match = lru_miss_stat_vip->port == vip->port;
    2034:	02 8b 09 00 00 1e    	add    0x1e000009(%rbx),%cl
    203a:	07                   	(bad)
    203b:	00 4b 02             	add    %cl,0x2(%rbx)
    203e:	e6 10                	out    %al,$0x10
  bool proto_match = lru_miss_stat_vip->proto = vip->proto;
    2040:	00 00                	add    %al,(%rax)
    2042:	1f                   	(bad)
    2043:	1e                   	(bad)
    2044:	c3                   	ret
    2045:	00 4b 02             	add    %cl,0x2(%rbx)
    2048:	bb 00 00 00 1e       	mov    $0x1e000000,%ebx
  bool vip_match = address_match && port_match && proto_match;
    204d:	14 00                	adc    $0x0,%al
    204f:	4b 02 eb             	rex.WXB add %r11b,%bpl
    2052:	10 00                	adc    %al,(%rax)
    2054:	00 1e                	add    %bl,(%rsi)
    __u32* lru_miss_stat = bpf_map_lookup_elem(&lru_miss_stats, &lru_stats_key);
    2056:	c4                   	(bad)
    2057:	00 4b 02             	add    %cl,0x2(%rbx)
    205a:	eb 10                	jmp    206c <balancer_ingress+0x206c>
    205c:	00 00                	add    %al,(%rax)
    205e:	00 00                	add    %al,(%rax)
    2060:	00 2e                	add    %ch,(%rsi)
    2062:	6d                   	insl   (%dx),%es:(%rdi)
    2063:	01 00                	add    %eax,(%rax)
    2065:	67 02 b2 00 00 00 1d 	add    0x1d000000(%edx),%dh
    206c:	b1 00                	mov    $0x0,%cl
    206e:	68 02 7e 11 00       	push   $0x117e02
    2073:	00 1d bc 00 69 02    	add    %bl,0x26900bc(%rip)        # 2692135 <_license+0x268fd50>
    2079:	8b 09                	mov    (%rcx),%ecx
    207b:	00 00                	add    %al,(%rax)
    207d:	2f                   	(bad)
    if (!lru_miss_stat) {
    207e:	4d 01 00             	add    %r8,(%r8)
    2081:	77 02                	ja     2085 <balancer_ingress+0x2085>
    2083:	95                   	xchg   %eax,%ebp
    2084:	03 00                	add    (%rax),%eax
    2086:	00 2f                	add    %ch,(%rdi)
    *lru_miss_stat += 1;
    2088:	3c 01                	cmp    $0x1,%al
    208a:	00 6a 02             	add    %ch,0x2(%rdx)
    208d:	90                   	nop
    208e:	03 00                	add    (%rax),%eax
    2090:	00 2f                	add    %ch,(%rdi)
    2092:	3d 01 00 73 02       	cmp    $0x2730001,%eax
    2097:	fa                   	cli
    2098:	00 00                	add    %al,(%rax)
    209a:	00 00                	add    %al,(%rax)
    209c:	2c 6e                	sub    $0x6e,%al
    209e:	01 0d 37 8f 0c 00    	add    %ecx,0xc8f37(%rip)        # cafdb <_license+0xc8bf6>
    20a4:	00 25 09 0d 37 e4    	add    %ah,-0x1bc8f2f7(%rip)        # ffffffffe4372db3 <ch_rings+0x36ffc1aeddb3>
    20aa:	20 00                	and    %al,(%rax)
    20ac:	00 2d 6f 01 0d 37    	add    %ch,0x370d016f(%rip)        # 370d2221 <_license+0x370cfe3c>
      data_stats->v2 += 1;
    20b2:	8f                   	(bad)
    20b3:	0c 00                	or     $0x0,%al
    20b5:	00 2d 56 01 0d 37    	add    %ch,0x370d0156(%rip)        # 370d2211 <_license+0x370cfe2c>
  data_stats = bpf_map_lookup_elem(&stats, &vip_num);
    20bb:	8f                   	(bad)
    20bc:	0c 00                	or     $0x0,%al
    20be:	00 28                	add    %ch,(%rax)
    20c0:	55                   	push   %rbp
    20c1:	01 0d 38 8f 0c 00    	add    %ecx,0xc8f38(%rip)        # cafff <_license+0xc8c1a>
    20c7:	00 28                	add    %ch,(%rax)
    20c9:	53                   	push   %rbx
    20ca:	01 0d 38 8f 0c 00    	add    %ecx,0xc8f38(%rip)        # cb008 <_license+0xc8c23>
        (connId[1] << 24) | (connId[2] << 16) | (connId[3] << 8) | (connId[4]);
    20d0:	00 28                	add    %ch,(%rax)
    20d2:	54                   	push   %rsp
    20d3:	01 0d 38 8f 0c 00    	add    %ecx,0xc8f38(%rip)        # cb011 <_license+0xc8c2c>
    20d9:	00 28                	add    %ch,(%rax)
    20db:	70 01                	jo     20de <balancer_ingress+0x20de>
    20dd:	0d 39 ea 20 00       	or     $0x20ea39,%eax
    20e2:	00 00                	add    %al,(%rax)
    20e4:	0b e9                	or     %ecx,%ebp
    20e6:	20 00                	and    %al,(%rax)
    20e8:	00 34 0b             	add    %dh,(%rbx,%rcx,1)
    20eb:	ef                   	out    %eax,(%dx)
    20ec:	20 00                	and    %al,(%rax)
    20ee:	00 23                	add    %ah,(%rbx)
    20f0:	1a 01                	sbb    (%rcx),%al
    result.server_id = (connId[1] << 16) | (connId[2] << 8) | (connId[3]);
    20f2:	00 00                	add    %al,(%rax)
    20f4:	35 14 e5 23 00       	xor    $0x23e514,%eax
    20f9:	00 01                	add    %al,(%rcx)
    20fb:	57                   	push   %rdi
    20fc:	76 01                	jbe    20ff <balancer_ingress+0x20ff>
    20fe:	00 31                	add    %dh,(%rcx)
    2100:	04 b2                	add    $0xb2,%al
    2102:	00 00                	add    %al,(%rax)
    2104:	00 36                	add    %dh,(%rsi)
    2106:	00 77 01             	add    %dh,0x1(%rdi)
    2109:	00 31                	add    %dh,(%rcx)
    210b:	04 4e                	add    $0x4e,%al
    210d:	10 00                	adc    %al,(%rax)
      if (qpr.server_id > 0) {
    210f:	00 37                	add    %dh,(%rdi)
    2111:	01 a4 00 32 04 8b 09 	add    %esp,0x98b0432(%rax,%rax,1)
  if (cid_version == QUIC_CONNID_VERSION_V1) {
    2118:	00 00                	add    %al,(%rax)
    211a:	37                   	(bad)
    211b:	02 a5 00 33 04 8b    	add    -0x74fbcd00(%rbp),%ah
    2121:	09 00                	or     %eax,(%rax)
    2123:	00 38                	add    %bh,(%rax)
    2125:	03 78 01             	add    0x1(%rax),%edi
    2128:	00 34 04             	add    %dh,(%rsp,%rax,1)
    212b:	87 18                	xchg   %ebx,(%rax)
              quic_packets_stats->cid_unknown_real_dropped += 1;
    212d:	00 00                	add    %al,(%rax)
    212f:	37                   	(bad)
    2130:	04 ae                	add    $0xae,%al
    2132:	00 36                	add    %dh,(%rsi)
    2134:	04 bb                	add    $0xbb,%al
    2136:	00 00                	add    %al,(%rax)
      bpf_map_lookup_elem(&stats, &conn_rate_key);
    2138:	00 38                	add    %bh,(%rax)
    213a:	05 79 01 00 35       	add    $0x35000179,%eax
    213f:	04 bb                	add    $0xbb,%al
    2141:	00 00                	add    %al,(%rax)
    2143:	00 39                	add    %bh,(%rcx)
    2145:	97                   	xchg   %eax,%edi
    2146:	0c 00                	or     $0x0,%al
  if (!conn_rate_stats) {
    2148:	00 00                	add    %al,(%rax)
    214a:	00 41 04             	add    %al,0x4(%rcx)
    214d:	0c 3a                	or     $0x3a,%al
    214f:	06                   	(bad)
    2150:	a0 0c 00 00 3a 07 a9 	movabs 0xca9073a00000c,%al
    2157:	0c 00 
  *cur_time = bpf_ktime_get_ns();
    2159:	00 3a                	add    %bh,(%rdx)
  if ((*cur_time - conn_rate_stats->v2) > ONE_SEC) {
    215b:	08 b2 0c 00 00 3b    	or     %dh,0x3b00000c(%rdx)
    2161:	02 91 10 bb 0c 00    	add    0xcbb10(%rcx),%dl
    2167:	00 3b                	add    %bh,(%rbx)
    2169:	03 91 d8 00 c4 0c    	add    0xcc400d8(%rcx),%edx
    conn_rate_stats->v1 = 1;
    216f:	00 00                	add    %al,(%rax)
    2171:	3c 09                	cmp    $0x9,%al
    2173:	cd 0c                	int    $0xc
    conn_rate_stats->v2 = *cur_time;
    2175:	00 00                	add    %al,(%rax)
    2177:	3c 0a                	cmp    $0xa,%al
    2179:	d6                   	(bad)
    217a:	0c 00                	or     $0x0,%al
    217c:	00 3c 0b             	add    %bh,(%rbx,%rcx,1)
    217f:	df 0c 00             	fisttps (%rax,%rax,1)
    2182:	00 3c 0c             	add    %bh,(%rsp,%rcx,1)
    2185:	e8 0c 00 00 3c       	call   3c002196 <_license+0x3bfffdb1>
    218a:	0d f1 0c 00 00       	or     $0xcf1,%eax
    218f:	3c 42                	cmp    $0x42,%al
    2191:	fa                   	cli
    2192:	0c 00                	or     $0x0,%al
    2194:	00 3c 43             	add    %bh,(%rbx,%rax,2)
    2197:	03 0d 00 00 3c a8    	add    -0x57c40000(%rip),%ecx        # ffffffffa83c219d <ch_rings+0x36ff85b3d19d>
        __u32* real_pos = bpf_map_lookup_elem(&server_id_map, &key);
    219d:	01 0c 0d 00 00 3c a9 	add    %ecx,-0x56c40000(,%rcx,1)
    21a4:	01 15 0d 00 00 3c    	add    %edx,0x3c00000d(%rip)        # 3c0021b7 <_license+0x3bfffdd2>
    21aa:	ab                   	stos   %eax,%es:(%rdi)
          key = *real_pos;
    21ab:	01 1e                	add    %ebx,(%rsi)
    21ad:	0d 00 00 3c ad       	or     $0xad3c0000,%eax
    21b2:	01 27                	add    %esp,(%rdi)
    21b4:	0d 00 00 3c b5       	or     $0xb53c0000,%eax
            pckt.real_index = key;
    21b9:	01 30                	add    %esi,(%rax)
    21bb:	0d 00 00 3c e7       	or     $0xe73c0000,%eax
            dst = bpf_map_lookup_elem(&reals, &key);
    21c0:	01 39                	add    %edi,(%rcx)
    21c2:	0d 00 00 3c 8a       	or     $0x8a3c0000,%eax
    21c7:	03 42 0d             	add    0xd(%rdx),%eax
    21ca:	00 00                	add    %al,(%rax)
    21cc:	39 11                	cmp    %edx,(%rcx)
    21ce:	11 00                	adc    %eax,(%rax)
    21d0:	00 01                	add    %al,(%rcx)
    21d2:	00 ba 02 0c 3a 0e    	add    %bh,0xe3a0c02(%rdx)
    21d8:	1a 11                	sbb    (%rcx),%dl
    21da:	00 00                	add    %al,(%rax)
    21dc:	3a 0f                	cmp    (%rdi),%cl
            if (!dst) {
    21de:	2c 11                	sub    $0x11,%al
    21e0:	00 00                	add    %al,(%rax)
    21e2:	3a 10                	cmp    (%rax),%dl
    21e4:	47 11 00             	rex.RXB adc %r8d,(%r8)
    21e7:	00 3a                	add    %bh,(%rdx)
    21e9:	11 50 11             	adc    %edx,0x11(%rax)
    21ec:	00 00                	add    %al,(%rax)
    21ee:	3a 12                	cmp    (%rdx),%dl
    21f0:	59                   	pop    %rcx
    21f1:	11 00                	adc    %eax,(%rax)
    21f3:	00 3c 13             	add    %bh,(%rbx,%rdx,1)
    21f6:	62 11                	(bad)
  struct real_pos_lru* dst_lru = real_bpf_map_lookup_elem(lru_map, &pckt->flow);
    21f8:	00 00                	add    %al,(%rax)
  if (dst_lru) {
    21fa:	00 39                	add    %bh,(%rcx)
    21fc:	a3 12 00 00 02 00 bf 	movabs %eax,0xc02bf0002000012
    2203:	02 0c 
    if (dst_lru->pos == pckt->real_index) {
    2205:	3a 44 ac 12          	cmp    0x12(%rsp,%rbp,4),%al
    2209:	00 00                	add    %al,(%rax)
    220b:	3a 45 b5             	cmp    -0x4b(%rbp),%al
    220e:	12 00                	adc    (%rax),%al
    2210:	00 3a                	add    %bh,(%rdx)
    2212:	46 be 12 00 00 3a    	rex.RX mov $0x3a000012,%esi
    2218:	47 c7                	rex.RXB (bad)
    221a:	12 00                	adc    (%rax),%al
    221c:	00 3a                	add    %bh,(%rdx)
    221e:	48 d0 12             	rex.W rclb (%rdx)
    2221:	00 00                	add    %al,(%rax)
    2223:	39 83 11 00 00 03    	cmp    %eax,0x3000011(%rbx)
    2229:	0e                   	(bad)
    222a:	5c                   	pop    %rsp
    222b:	01 0c 3a             	add    %ecx,(%rdx,%rdi,1)
    222e:	14 8c                	adc    $0x8c,%al
    2230:	11 00                	adc    %eax,(%rax)
    2232:	00 3a                	add    %bh,(%rdx)
    2234:	15 95 11 00 00       	adc    $0x1195,%eax
              quic_packets_stats->dst_mismatch_in_lru += 1;
    2239:	3a 16                	cmp    (%rsi),%dl
    223b:	9e                   	sahf
      bpf_map_lookup_elem(&server_id_stats, &vip_num);
    223c:	11 00                	adc    %eax,(%rax)
    223e:	00 3a                	add    %bh,(%rdx)
    2240:	17                   	(bad)
    2241:	a7                   	cmpsl  %es:(%rdi),%ds:(%rsi)
    2242:	11 00                	adc    %eax,(%rax)
    2244:	00 3c 18             	add    %bh,(%rax,%rbx,1)
    2247:	b0 11                	mov    $0x11,%al
    2249:	00 00                	add    %al,(%rax)
    224b:	3c 84                	cmp    $0x84,%al
    224d:	01 b9 11 00 00 3d    	add    %edi,0x3d000011(%rcx)
    2253:	da 12                	ficoml (%rdx)
    2255:	00 00                	add    %al,(%rax)
    2257:	15 51 00 00 00       	adc    $0x51,%eax
    225c:	0e                   	(bad)
    225d:	1f                   	(bad)
    225e:	01 0c 3e             	add    %ecx,(%rsi,%rdi,1)
    2261:	01 53 e2             	add    %edx,-0x1e(%rbx)
    2264:	12 00                	adc    (%rax),%al
    2266:	00 3e                	add    %bh,(%rsi)
  if (!per_vip_stats) {
    2268:	01 5f ea             	add    %ebx,-0x16(%rdi)
    226b:	12 00                	adc    (%rax),%al
    per_vip_stats->v2 += 1;
    226d:	00 3c 19             	add    %bh,(%rcx,%rbx,1)
    2270:	f2 12 00             	repnz adc (%rax),%al
    2273:	00 3f                	add    %bh,(%rdi)
    2275:	00 fa                	add    %bh,%dl
              quic_packets_stats->cid_unknown_real_dropped += 1;
    2277:	12 00                	adc    (%rax),%al
    2279:	00 3f                	add    %bh,(%rdi)
    227b:	22 02                	and    (%rdx),%al
    227d:	13 00                	adc    (%rax),%eax
    227f:	00 3b                	add    %bh,(%rbx)
    conn_rate_stats->v1 += 1;
    2281:	01 5e 0a             	add    %ebx,0xa(%rsi)
    2284:	13 00                	adc    (%rax),%eax
    2286:	00 40 1b             	add    %al,0x1b(%rax)
    2289:	13 00                	adc    (%rax),%eax
    if (conn_rate_stats->v1 > MAX_CONN_RATE) {
    228b:	00 16                	add    %dl,(%rsi)
    228d:	38 00                	cmp    %al,(%rax)
    228f:	00 00                	add    %al,(%rax)
    2291:	0e                   	(bad)
    2292:	59                   	pop    %rcx
  struct real_pos_lru new_dst_lru = {};
    2293:	03 3c 1b             	add    (%rbx,%rbx,1),%edi
    2296:	2f                   	(bad)
    2297:	13 00                	adc    (%rax),%eax
    2299:	00 41 16             	add    %al,0x16(%rcx)
    229c:	38 00                	cmp    %al,(%rax)
    229e:	00 00                	add    %al,(%rax)
    22a0:	3c 1a                	cmp    $0x1a,%al
    22a2:	38 13                	cmp    %dl,(%rbx)
    22a4:	00 00                	add    %al,(%rax)
  new_dst_lru.pos = pckt->real_index;
    22a6:	00 00                	add    %al,(%rax)
    22a8:	00 41 17             	add    %al,0x17(%rcx)
    22ab:	28 00                	sub    %al,(%rax)
    22ad:	00 00                	add    %al,(%rax)
    22af:	3f                   	(bad)
    22b0:	8d 04 c3             	lea    (%rbx,%rax,8),%eax
    22b3:	11 00                	adc    %eax,(%rax)
    22b5:	00 3c 83             	add    %bh,(%rbx,%rax,4)
    22b8:	01 cc                	add    %ecx,%esp
    22ba:	11 00                	adc    %eax,(%rax)
    22bc:	00 41 17             	add    %al,0x17(%rcx)
    22bf:	10 00                	adc    %al,(%rax)
    22c1:	00 00                	add    %al,(%rax)
  bpf_map_update_elem(lru_map, &pckt->flow, &new_dst_lru, BPF_ANY);
    22c3:	3c 82                	cmp    $0x82,%al
    22c5:	01 df                	add    %ebx,%edi
              quic_packets_stats->dst_not_found_in_lru += 1;
    22c7:	11 00                	adc    %eax,(%rax)
    22c9:	00 42 06             	add    %al,0x6(%rdx)
    22cc:	e8 11 00 00 41       	call   410022e2 <_license+0x40fffefd>
    22d1:	17                   	(bad)
            quic_packets_stats->cid_routed += 1;
    22d2:	10 00                	adc    %al,(%rax)
    22d4:	00 00                	add    %al,(%rax)
    22d6:	3f                   	(bad)
  original_sport = pckt.flow.port16[0];
    22d7:	8d 04 f2             	lea    (%rdx,%rsi,8),%eax
    22da:	11 00                	adc    %eax,(%rax)
    22dc:	00 3f                	add    %bh,(%rdi)
    22de:	80 08 fb             	orb    $0xfb,(%rax)
    22e1:	11 00                	adc    %eax,(%rax)
    22e3:	00 3f                	add    %bh,(%rdi)
  data_stats = bpf_map_lookup_elem(&stats, &vip_num);
    22e5:	08 04 12             	or     %al,(%rdx,%rdx,1)
    22e8:	00 00                	add    %al,(%rax)
    22ea:	00 00                	add    %al,(%rax)
    22ec:	00 00                	add    %al,(%rax)
    22ee:	39 42 13             	cmp    %eax,0x13(%rdx)
    22f1:	00 00                	add    %al,(%rax)
    22f3:	04 0e                	add    $0xe,%al
      bpf_map_lookup_elem(&stats, &conn_rate_key);
    22f5:	5a                   	pop    %rdx
    22f6:	01 0c 3a             	add    %ecx,(%rdx,%rdi,1)
    22f9:	49                   	rex.WB
    22fa:	4a 13 00             	rex.WX adc (%rax),%rax
    22fd:	00 3a                	add    %bh,(%rdx)
    22ff:	4a 52                	rex.WX push %rdx
    2301:	13 00                	adc    (%rax),%eax
    2303:	00 3a                	add    %bh,(%rdx)
    2305:	4b 5a                	rex.WXB pop %r10
  if (!conn_rate_stats) {
    2307:	13 00                	adc    (%rax),%eax
    2309:	00 3a                	add    %bh,(%rdx)
    230b:	4c 62 13             	rex.WR (bad)
    230e:	00 00                	add    %al,(%rax)
    2310:	3c 4d                	cmp    $0x4d,%al
    2312:	6a 13                	push   $0x13
    2314:	00 00                	add    %al,(%rax)
  *cur_time = bpf_ktime_get_ns();
    2316:	3c 98                	cmp    $0x98,%al
  if ((*cur_time - conn_rate_stats->v2) > ONE_SEC) {
    2318:	01 72 13             	add    %esi,0x13(%rdx)
    231b:	00 00                	add    %al,(%rax)
    231d:	40 3b 16             	rex cmp (%rsi),%edx
    2320:	00 00                	add    %al,(%rax)
    2322:	18 17                	sbb    %dl,(%rdi)
    2324:	00 00                	add    %al,(%rax)
    2326:	00 0e                	add    %cl,(%rsi)
    conn_rate_stats->v1 = 1;
    2328:	f0 0c 3e             	lock or $0x3e,%al
    232b:	01 53 44             	add    %edx,0x44(%rbx)
    232e:	16                   	(bad)
    conn_rate_stats->v2 = *cur_time;
    232f:	00 00                	add    %al,(%rax)
    2331:	3e 01 5f 4c          	ds add %ebx,0x4c(%rdi)
      dst_lru->pos = pckt->real_index;
    2335:	16                   	(bad)
    2336:	00 00                	add    %al,(%rax)
    2338:	3b 03                	cmp    (%rbx),%eax
    233a:	91                   	xchg   %eax,%ecx
              quic_packets_stats->dst_mismatch_in_lru += 1;
    233b:	c0 00 54             	rolb   $0x54,(%rax)
    233e:	16                   	(bad)
    233f:	00 00                	add    %al,(%rax)
      bpf_map_lookup_elem(&server_id_stats, &vip_num);
    2341:	3f                   	(bad)
    2342:	00 5c 16 00          	add    %bl,0x0(%rsi,%rdx,1)
    2346:	00 00                	add    %al,(%rax)
    2348:	41 19 2f             	sbb    %ebp,(%r15)
    234b:	00 00                	add    %al,(%rax)
    234d:	00 3f                	add    %bh,(%rdi)
    234f:	8c 04 7b             	mov    %es,(%rbx,%rdi,2)
    2352:	13 00                	adc    (%rax),%eax
    2354:	00 3c 96             	add    %bh,(%rsi,%rdx,4)
    2357:	01 83 13 00 00 3c    	add    %eax,0x3c000013(%rbx)
    235d:	97                   	xchg   %eax,%edi
    235e:	01 8c 13 00 00 41 19 	add    %ecx,0x19410000(%rbx,%rdx,1)
    2365:	10 00                	adc    %al,(%rax)
    2367:	00 00                	add    %al,(%rax)
    2369:	3c 95                	cmp    $0x95,%al
    236b:	01 95 13 00 00 42    	add    %edx,0x42000013(%rbp)
    2371:	06                   	(bad)
    2372:	9d                   	popf
    2373:	13 00                	adc    (%rax),%eax
  if (!per_vip_stats) {
    2375:	00 41 19             	add    %al,0x19(%rcx)
    2378:	10 00                	adc    %al,(%rax)
    per_vip_stats->v2 += 1;
    237a:	00 00                	add    %al,(%rax)
    237c:	3f                   	(bad)
    237d:	8c 04 a6             	mov    %es,(%rsi,%riz,4)
    conn_rate_stats->v1 += 1;
    2380:	13 00                	adc    (%rax),%eax
    2382:	00 3f                	add    %bh,(%rdi)
    2384:	80 08 ae             	orb    $0xae,(%rax)
    2387:	13 00                	adc    (%rax),%eax
    if (conn_rate_stats->v1 > MAX_CONN_RATE) {
    2389:	00 3f                	add    %bh,(%rdi)
    238b:	08 b6 13 00 00 00    	or     %dh,0x13(%rsi)
  struct real_pos_lru new_dst_lru = {};
    2391:	00 00                	add    %al,(%rax)
    2393:	00 00                	add    %al,(%rax)
    2395:	3d f6 14 00 00       	cmp    $0x14f6,%eax
    239a:	1a 2a                	sbb    (%rdx),%ch
    239c:	00 00                	add    %al,(%rax)
    239e:	00 00                	add    %al,(%rax)
    23a0:	f3 02 0a             	repz add (%rdx),%cl
  new_dst_lru.pos = pckt->real_index;
    23a3:	3e 01 53 ff          	ds add %edx,-0x1(%rbx)
    23a7:	14 00                	adc    $0x0,%al
    23a9:	00 3e                	add    %bh,(%rsi)
    23ab:	01 5f 07             	add    %ebx,0x7(%rdi)
    23ae:	15 00 00 3e 02       	adc    $0x23e0000,%eax
    23b3:	30 9f 0f 15 00 00    	xor    %bl,0x150f(%rdi)
    23b9:	3e 03 91 10 9f 17 15 	ds add 0x15179f10(%rcx),%edx
    23c0:	00 00                	add    %al,(%rax)
  bpf_map_update_elem(lru_map, &pckt->flow, &new_dst_lru, BPF_ANY);
    23c2:	3b 11                	cmp    (%rcx),%edx
    23c4:	72 00                	jb     23c6 <balancer_ingress+0x23c6>
    23c6:	10 ff                	adc    %bh,%bh
    23c8:	01 1a                	add    %ebx,(%rdx)
              quic_packets_stats->dst_not_found_in_lru += 1;
    23ca:	a8 ba                	test   $0xba,%al
    23cc:	80 80 00 a8 bf 80 80 	addb   $0x80,-0x7f405800(%rax)
    23d3:	00 9f 1f 15 00 00    	add    %bl,0x151f(%rdi)
            quic_packets_stats->cid_routed += 1;
    23d9:	3c 4e                	cmp    $0x4e,%al
  original_sport = pckt.flow.port16[0];
    23db:	27                   	(bad)
    23dc:	15 00 00 40 19       	adc    $0x19400000,%eax
    23e1:	16                   	(bad)
    23e2:	00 00                	add    %al,(%rax)
    23e4:	1b 02                	sbb    (%rdx),%eax
    23e6:	00 00                	add    %al,(%rax)
    23e8:	00 0c 7b             	add    %cl,(%rbx,%rdi,2)
    23eb:	0f 3e                	(bad)
    23ed:	02 30                	add    (%rax),%dh
    23ef:	9f                   	lahf
    23f0:	22 16                	and    (%rsi),%dl
    23f2:	00 00                	add    %al,(%rax)
    23f4:	3e 11 72 00          	ds adc %esi,0x0(%rdx)
    23f8:	10 ff                	adc    %bh,%bh
    23fa:	01 1a                	add    %ebx,(%rdx)
    23fc:	a8 ba                	test   $0xba,%al
    23fe:	80 80 00 a8 bf 80 80 	addb   $0x80,-0x7f405800(%rax)
    2405:	00 9f 2a 16 00 00    	add    %bl,0x162a(%rdi)
    240b:	00 00                	add    %al,(%rax)
    240d:	3d bd 18 00 00       	cmp    $0x18bd,%eax
    2412:	1c 17                	sbb    $0x17,%al
    2414:	00 00                	add    %al,(%rax)
    2416:	00 00                	add    %al,(%rax)
    2418:	f7 02 0a 3e 01 53    	testl  $0x53013e0a,(%rdx)
    241e:	c6                   	(bad)
    241f:	18 00                	sbb    %al,(%rax)
    2421:	00 3e                	add    %bh,(%rsi)
    2423:	01 5f ce             	add    %ebx,-0x32(%rdi)
    2426:	18 00                	sbb    %al,(%rax)
    2428:	00 3e                	add    %bh,(%rsi)
    242a:	02 30                	add    (%rax),%dh
    242c:	9f                   	lahf
    242d:	d6                   	(bad)
    242e:	18 00                	sbb    %al,(%rax)
    2430:	00 3e                	add    %bh,(%rsi)
    2432:	03 91 10 9f de 18    	add    0x18de9f10(%rcx),%edx
    2438:	00 00                	add    %al,(%rax)
    243a:	3b 11                	cmp    (%rcx),%edx
    243c:	72 00                	jb     243e <_license+0x59>
    243e:	10 ff                	adc    %bh,%bh
    2440:	01 1a                	add    %ebx,(%rdx)
    2442:	a8 ba                	test   $0xba,%al
    2444:	80 80 00 a8 bf 80 80 	addb   $0x80,-0x7f405800(%rax)
    244b:	00 9f e6 18 00 00    	add    %bl,0x18e6(%rdi)
    2451:	3c a6                	cmp    $0xa6,%al
    2453:	01 ee                	add    %ebp,%esi
    2455:	18 00                	sbb    %al,(%rax)
    2457:	00 40 19             	add    %al,0x19(%rax)
    245a:	16                   	(bad)
    245b:	00 00                	add    %al,(%rax)
    245d:	1d 02 00 00 00       	sbb    $0x2,%eax
    2462:	0c 61                	or     $0x61,%al
    2464:	0f 3e                	(bad)
    2466:	02 30                	add    (%rax),%dh
    2468:	9f                   	lahf
    2469:	22 16                	and    (%rsi),%dl
    246b:	00 00                	add    %al,(%rax)
    246d:	3e 11 72 00          	ds adc %esi,0x0(%rdx)
    2471:	10 ff                	adc    %bh,%bh
    2473:	01 1a                	add    %ebx,(%rdx)
    2475:	a8 ba                	test   $0xba,%al
    2477:	80 80 00 a8 bf 80 80 	addb   $0x80,-0x7f405800(%rax)
    247e:	00 9f 2a 16 00 00    	add    %bl,0x162a(%rdi)
    2484:	00 00                	add    %al,(%rax)
    2486:	43 05 3c 86 01 72    	rex.XB add $0x7201863c,%eax
    248c:	0d 00 00 39 75       	or     $0x75390000,%eax
    2491:	16                   	(bad)
    2492:	00 00                	add    %al,(%rax)
    2494:	06                   	(bad)
    2495:	00 e1                	add    %ah,%cl
    2497:	02 0e                	add    (%rsi),%cl
    2499:	3a 87 01 7e 16 00    	cmp    0x167e01(%rdi),%al
    249f:	00 3a                	add    %bh,(%rdx)
    24a1:	88 01                	mov    %al,(%rcx)
    24a3:	86 16                	xchg   %dl,(%rsi)
    24a5:	00 00                	add    %al,(%rax)
    24a7:	3b 03                	cmp    (%rbx),%eax
    24a9:	91                   	xchg   %eax,%ecx
    24aa:	c0 00 96             	rolb   $0x96,(%rax)
    24ad:	16                   	(bad)
    24ae:	00 00                	add    %al,(%rax)
    24b0:	3c 8a                	cmp    $0x8a,%al
    24b2:	01 9f 16 00 00 3c    	add    %ebx,0x3c000016(%rdi)
    24b8:	8c 01                	mov    %es,(%rcx)
    24ba:	a8 16                	test   $0x16,%al
    24bc:	00 00                	add    %al,(%rax)
    24be:	41 1e                	rex.B (bad)
    24c0:	1b 00                	sbb    (%rax),%eax
    24c2:	00 00                	add    %al,(%rax)
    24c4:	3c 89                	cmp    $0x89,%al
    24c6:	01 b1 16 00 00 42    	add    %esi,0x42000016(%rcx)
    24cc:	01 b9 16 00 00 00    	add    %edi,0x16(%rcx)
    24d2:	41 1f                	rex.B (bad)
    24d4:	1d 00 00 00 3f       	sbb    $0x3f000000,%eax
    24d9:	86 04 c3             	xchg   %al,(%rbx,%rax,8)
    24dc:	16                   	(bad)
    24dd:	00 00                	add    %al,(%rax)
    24df:	41 1f                	rex.B (bad)
    24e1:	10 00                	adc    %al,(%rax)
    24e3:	00 00                	add    %al,(%rax)
    24e5:	3c 8b                	cmp    $0x8b,%al
    24e7:	01 cc                	add    %ecx,%esp
    24e9:	16                   	(bad)
    24ea:	00 00                	add    %al,(%rax)
    24ec:	42 06                	rex.X (bad)
    24ee:	d4                   	(bad)
    24ef:	16                   	(bad)
    24f0:	00 00                	add    %al,(%rax)
    24f2:	41 1f                	rex.B (bad)
    24f4:	10 00                	adc    %al,(%rax)
    24f6:	00 00                	add    %al,(%rax)
    24f8:	3f                   	(bad)
    24f9:	86 04 dd 16 00 00 3f 	xchg   %al,0x3f000016(,%rbx,8)
    2500:	80 08 e5             	orb    $0xe5,(%rax)
    2503:	16                   	(bad)
    2504:	00 00                	add    %al,(%rax)
    2506:	3f                   	(bad)
    2507:	08 ed                	or     %ch,%ch
    2509:	16                   	(bad)
    250a:	00 00                	add    %al,(%rax)
    250c:	00 00                	add    %al,(%rax)
    250e:	00 00                	add    %al,(%rax)
    2510:	39 43 17             	cmp    %eax,0x17(%rbx)
    2513:	00 00                	add    %al,(%rax)
    2515:	07                   	(bad)
    2516:	00 e5                	add    %ah,%ch
    2518:	02 0c 3e             	add    (%rsi,%rdi,1),%cl
    251b:	01 5d 5f             	add    %ebx,0x5f(%rbp)
    251e:	17                   	(bad)
    251f:	00 00                	add    %al,(%rax)
    2521:	3c 8e                	cmp    $0x8e,%al
    2523:	01 83 17 00 00 3c    	add    %eax,0x3c000017(%rbx)
    2529:	90                   	nop
    252a:	01 8c 17 00 00 3c 92 	add    %ecx,-0x6dc40000(%rdi,%rdx,1)
    2531:	01 95 17 00 00 41    	add    %edx,0x41000017(%rbp)
    2537:	20 73 00             	and    %dh,0x0(%rbx)
    253a:	00 00                	add    %al,(%rax)
    253c:	42 22 b7 17 00 00 3d 	rex.X and 0x3d000017(%rdi),%sil
    2543:	fe                   	(bad)
    2544:	16                   	(bad)
    2545:	00 00                	add    %al,(%rax)
    2547:	20 3a                	and    %bh,(%rdx)
    2549:	00 00                	add    %al,(%rax)
    254b:	00 00                	add    %al,(%rax)
    254d:	45 01 10             	add    %r10d,(%r8)
    2550:	3e 01 53 07          	ds add %edx,0x7(%rbx)
    2554:	17                   	(bad)
    2555:	00 00                	add    %al,(%rax)
    2557:	3e 01 5f 0f          	ds add %ebx,0xf(%rdi)
    255b:	17                   	(bad)
    255c:	00 00                	add    %al,(%rax)
    255e:	44 22 17             	and    (%rdi),%r10b
    2561:	17                   	(bad)
    2562:	00 00                	add    %al,(%rax)
    2564:	3e 02 30             	ds add (%rax),%dh
    2567:	9f                   	lahf
    2568:	20 17                	and    %dl,(%rdi)
    256a:	00 00                	add    %al,(%rax)
    256c:	41 20 3a             	and    %dil,(%r10)
    256f:	00 00                	add    %al,(%rax)
    2571:	00 3c 8d 01 39 17 00 	add    %bh,0x173901(,%rcx,4)
    2578:	00 00                	add    %al,(%rax)
    257a:	00 3d 33 19 00 00    	add    %bh,0x1933(%rip)        # 3eb3 <_license+0x1ace>
    2580:	21 39                	and    %edi,(%rcx)
    2582:	00 00                	add    %al,(%rax)
    2584:	00 00                	add    %al,(%rax)
    2586:	46 01 0c 3e          	add    %r9d,(%rsi,%r15,1)
    258a:	01 5d 3c             	add    %ebx,0x3c(%rbp)
    258d:	19 00                	sbb    %eax,(%rax)
    258f:	00 3b                	add    %bh,(%rbx)
    2591:	01 53 54             	add    %edx,0x54(%rbx)
    2594:	19 00                	sbb    %eax,(%rax)
    2596:	00 3c 8f             	add    %bh,(%rdi,%rcx,4)
    2599:	01 5d 19             	add    %ebx,0x19(%rbp)
    259c:	00 00                	add    %al,(%rax)
    259e:	00 00                	add    %al,(%rax)
    25a0:	41 22 10             	and    (%r8),%dl
    25a3:	00 00                	add    %al,(%rax)
    25a5:	00 3c 91             	add    %bh,(%rcx,%rdx,4)
    25a8:	01 c3                	add    %eax,%ebx
    25aa:	17                   	(bad)
    25ab:	00 00                	add    %al,(%rax)
    25ad:	42 06                	rex.X (bad)
    25af:	cc                   	int3
    25b0:	17                   	(bad)
    25b1:	00 00                	add    %al,(%rax)
    25b3:	41 22 10             	and    (%r8),%dl
    25b6:	00 00                	add    %al,(%rax)
    25b8:	00 3f                	add    %bh,(%rdi)
    25ba:	8a 04 d6             	mov    (%rsi,%rdx,8),%al
    25bd:	17                   	(bad)
    25be:	00 00                	add    %al,(%rax)
    25c0:	3f                   	(bad)
    25c1:	80 08 df             	orb    $0xdf,(%rax)
    25c4:	17                   	(bad)
    25c5:	00 00                	add    %al,(%rax)
    25c7:	3f                   	(bad)
    25c8:	08 e8                	or     %ch,%al
    25ca:	17                   	(bad)
    25cb:	00 00                	add    %al,(%rax)
    25cd:	00 00                	add    %al,(%rax)
    25cf:	41 23 15 00 00 00 3f 	and    0x3f000000(%rip),%edx        # 3f0025d6 <_license+0x3f0001f1>
    25d6:	8e 04 f4             	mov    (%rsp,%rsi,8),%es
    25d9:	17                   	(bad)
    25da:	00 00                	add    %al,(%rax)
    25dc:	3c 94                	cmp    $0x94,%al
    25de:	01 fe                	add    %edi,%esi
    25e0:	17                   	(bad)
    25e1:	00 00                	add    %al,(%rax)
    25e3:	41 23 10             	and    (%r8),%edx
    25e6:	00 00                	add    %al,(%rax)
    25e8:	00 3c 93             	add    %bh,(%rbx,%rdx,4)
    25eb:	01 13                	add    %edx,(%rbx)
    25ed:	18 00                	sbb    %al,(%rax)
    25ef:	00 42 06             	add    %al,0x6(%rdx)
    25f2:	1c 18                	sbb    $0x18,%al
    25f4:	00 00                	add    %al,(%rax)
    25f6:	41 23 10             	and    (%r8),%edx
    25f9:	00 00                	add    %al,(%rax)
    25fb:	00 3f                	add    %bh,(%rdi)
    25fd:	8e 04 26             	mov    (%rsi,%riz,1),%es
    2600:	18 00                	sbb    %al,(%rax)
    2602:	00 3f                	add    %bh,(%rdi)
    2604:	80 08 2f             	orb    $0x2f,(%rax)
    2607:	18 00                	sbb    %al,(%rax)
    2609:	00 3f                	add    %bh,(%rdi)
    260b:	08 38                	or     %bh,(%rax)
    260d:	18 00                	sbb    %al,(%rax)
    260f:	00 00                	add    %al,(%rax)
    2611:	00 00                	add    %al,(%rax)
    2613:	00 00                	add    %al,(%rax)
    2615:	41 24 37             	rex.B and $0x37,%al
    2618:	01 00                	add    %eax,(%rax)
    261a:	00 3c 99             	add    %bh,(%rcx,%rbx,4)
    261d:	01 67 0d             	add    %esp,0xd(%rdi)
    2620:	00 00                	add    %al,(%rax)
    2622:	39 75 16             	cmp    %esi,0x16(%rbp)
    2625:	00 00                	add    %al,(%rax)
    2627:	08 00                	or     %al,(%rax)
    2629:	e9 02 0e 3a 9a       	jmp    ffffffff9a3a3430 <ch_rings+0x36ff77b1e430>
    262e:	01 7e 16             	add    %edi,0x16(%rsi)
    2631:	00 00                	add    %al,(%rax)
    2633:	3a 9b 01 86 16 00    	cmp    0x168601(%rbx),%bl
    2639:	00 3b                	add    %bh,(%rbx)
    263b:	03 91 c0 00 96 16    	add    0x169600c0(%rcx),%edx
    2641:	00 00                	add    %al,(%rax)
    2643:	3c 9d                	cmp    $0x9d,%al
    2645:	01 9f 16 00 00 3c    	add    %ebx,0x3c000016(%rdi)
    264b:	9f                   	lahf
    264c:	01 a8 16 00 00 41    	add    %ebp,0x41000016(%rax)
    2652:	25 1b 00 00 00       	and    $0x1b,%eax
    2657:	3c 9c                	cmp    $0x9c,%al
    2659:	01 b1 16 00 00 42    	add    %esi,0x42000016(%rcx)
    265f:	01 b9 16 00 00 00    	add    %edi,0x16(%rcx)
    2665:	41                   	rex.B
    2666:	26 1d 00 00 00 3f    	es sbb $0x3f000000,%eax
    266c:	86 04 c3             	xchg   %al,(%rbx,%rax,8)
    266f:	16                   	(bad)
    2670:	00 00                	add    %al,(%rax)
    2672:	41                   	rex.B
    2673:	26 10 00             	es adc %al,(%rax)
    2676:	00 00                	add    %al,(%rax)
    2678:	3c 9e                	cmp    $0x9e,%al
    267a:	01 cc                	add    %ecx,%esp
    267c:	16                   	(bad)
    267d:	00 00                	add    %al,(%rax)
    267f:	42 06                	rex.X (bad)
    2681:	d4                   	(bad)
    2682:	16                   	(bad)
    2683:	00 00                	add    %al,(%rax)
    2685:	41                   	rex.B
    2686:	26 10 00             	es adc %al,(%rax)
    2689:	00 00                	add    %al,(%rax)
    268b:	3f                   	(bad)
    268c:	86 04 dd 16 00 00 3f 	xchg   %al,0x3f000016(,%rbx,8)
    2693:	80 08 e5             	orb    $0xe5,(%rax)
    2696:	16                   	(bad)
    2697:	00 00                	add    %al,(%rax)
    2699:	3f                   	(bad)
    269a:	08 ed                	or     %ch,%ch
    269c:	16                   	(bad)
    269d:	00 00                	add    %al,(%rax)
    269f:	00 00                	add    %al,(%rax)
    26a1:	00 00                	add    %al,(%rax)
    26a3:	39 43 17             	cmp    %eax,0x17(%rbx)
    26a6:	00 00                	add    %al,(%rax)
    26a8:	09 00                	or     %eax,(%rax)
    26aa:	ed                   	in     (%dx),%eax
    26ab:	02 0c 3e             	add    (%rsi,%rdi,1),%cl
    26ae:	01 5d 5f             	add    %ebx,0x5f(%rbp)
    26b1:	17                   	(bad)
    26b2:	00 00                	add    %al,(%rax)
    26b4:	3c a0                	cmp    $0xa0,%al
    26b6:	01 83 17 00 00 3c    	add    %eax,0x3c000017(%rbx)
    26bc:	a1 01 8c 17 00 00 3c 	movabs 0x1a33c0000178c01,%eax
    26c3:	a3 01 
    26c5:	95                   	xchg   %eax,%ebp
    26c6:	17                   	(bad)
    26c7:	00 00                	add    %al,(%rax)
    26c9:	41 27                	rex.B (bad)
    26cb:	73 00                	jae    26cd <_license+0x2e8>
    26cd:	00 00                	add    %al,(%rax)
    26cf:	42                   	rex.X
    26d0:	36 9f                	ss lahf
    26d2:	17                   	(bad)
    26d3:	00 00                	add    %al,(%rax)
    26d5:	3d fe 16 00 00       	cmp    $0x16fe,%eax
    26da:	28 27                	sub    %ah,(%rdi)
    26dc:	00 00                	add    %al,(%rax)
    26de:	00 00                	add    %al,(%rax)
    26e0:	4f 01 0e             	rex.WRXB add %r9,(%r14)
    26e3:	3e 01 53 07          	ds add %edx,0x7(%rbx)
    26e7:	17                   	(bad)
    26e8:	00 00                	add    %al,(%rax)
    26ea:	3e 01 5f 0f          	ds add %ebx,0xf(%rdi)
    26ee:	17                   	(bad)
    26ef:	00 00                	add    %al,(%rax)
    26f1:	44                   	rex.R
    26f2:	36 17                	ss (bad)
    26f4:	17                   	(bad)
    26f5:	00 00                	add    %al,(%rax)
    26f7:	3e 02 31             	ds add (%rcx),%dh
    26fa:	9f                   	lahf
    26fb:	20 17                	and    %dl,(%rdi)
    26fd:	00 00                	add    %al,(%rax)
    26ff:	45 28 17             	sub    %r10b,(%r15)
    2702:	00 00                	add    %al,(%rax)
    2704:	00 3d 4a 18 00 00    	add    %bh,0x184a(%rip)        # 3f54 <_license+0x1b6f>
    270a:	29 3a                	sub    %edi,(%rdx)
    270c:	00 00                	add    %al,(%rax)
    270e:	00 00                	add    %al,(%rax)
    2710:	50                   	push   %rax
    2711:	01 0a                	add    %ecx,(%rdx)
    2713:	3e 01 5d 53          	ds add %ebx,0x53(%rbp)
    2717:	18 00                	sbb    %al,(%rax)
    2719:	00 3e                	add    %bh,(%rsi)
    271b:	02 30                	add    (%rax),%dh
    271d:	9f                   	lahf
    271e:	6b 18 00             	imul   $0x0,(%rax),%ebx
    2721:	00 3b                	add    %bh,(%rbx)
    2723:	01 53 74             	add    %edx,0x74(%rbx)
    2726:	18 00                	sbb    %al,(%rax)
    2728:	00 3b                	add    %bh,(%rbx)
    272a:	03 73 28             	add    0x28(%rbx),%esi
    272d:	9f                   	lahf
    272e:	7d 18                	jge    2748 <_license+0x363>
    2730:	00 00                	add    %al,(%rax)
    2732:	00 00                	add    %al,(%rax)
    2734:	41 2a 10             	sub    (%r8),%dl
    2737:	00 00                	add    %al,(%rax)
    2739:	00 3c a2             	add    %bh,(%rdx,%riz,4)
    273c:	01 c3                	add    %eax,%ebx
    273e:	17                   	(bad)
    273f:	00 00                	add    %al,(%rax)
    2741:	42 06                	rex.X (bad)
    2743:	cc                   	int3
    2744:	17                   	(bad)
    2745:	00 00                	add    %al,(%rax)
    2747:	41 2a 10             	sub    (%r8),%dl
    274a:	00 00                	add    %al,(%rax)
    274c:	00 3f                	add    %bh,(%rdi)
    274e:	8a 04 d6             	mov    (%rsi,%rdx,8),%al
    2751:	17                   	(bad)
    2752:	00 00                	add    %al,(%rax)
    2754:	3f                   	(bad)
    2755:	80 08 df             	orb    $0xdf,(%rax)
    2758:	17                   	(bad)
    2759:	00 00                	add    %al,(%rax)
    275b:	3f                   	(bad)
    275c:	08 e8                	or     %ch,%al
    275e:	17                   	(bad)
    275f:	00 00                	add    %al,(%rax)
    2761:	00 00                	add    %al,(%rax)
    2763:	41 2b 1e             	sub    (%r14),%ebx
    2766:	00 00                	add    %al,(%rax)
    2768:	00 3f                	add    %bh,(%rdi)
    276a:	8e 04 f4             	mov    (%rsp,%rsi,8),%es
    276d:	17                   	(bad)
    276e:	00 00                	add    %al,(%rax)
    2770:	3c a5                	cmp    $0xa5,%al
    2772:	01 fe                	add    %edi,%esi
    2774:	17                   	(bad)
    2775:	00 00                	add    %al,(%rax)
    2777:	41 2b 10             	sub    (%r8),%edx
    277a:	00 00                	add    %al,(%rax)
    277c:	00 3c a4             	add    %bh,(%rsp,%riz,4)
    277f:	01 13                	add    %edx,(%rbx)
    2781:	18 00                	sbb    %al,(%rax)
    2783:	00 42 06             	add    %al,0x6(%rdx)
    2786:	1c 18                	sbb    $0x18,%al
    2788:	00 00                	add    %al,(%rax)
    278a:	41 2b 10             	sub    (%r8),%edx
    278d:	00 00                	add    %al,(%rax)
    278f:	00 3f                	add    %bh,(%rdi)
    2791:	8e 04 26             	mov    (%rsi,%riz,1),%es
    2794:	18 00                	sbb    %al,(%rax)
    2796:	00 3f                	add    %bh,(%rdi)
    2798:	80 08 2f             	orb    $0x2f,(%rax)
    279b:	18 00                	sbb    %al,(%rax)
    279d:	00 3f                	add    %bh,(%rdi)
    279f:	08 38                	or     %bh,(%rax)
    27a1:	18 00                	sbb    %al,(%rax)
    27a3:	00 00                	add    %al,(%rax)
    27a5:	00 00                	add    %al,(%rax)
    27a7:	00 00                	add    %al,(%rax)
    27a9:	41 2c 1c             	rex.B sub $0x1c,%al
    27ac:	00 00                	add    %al,(%rax)
    27ae:	00 3c a7             	add    %bh,(%rdi,%riz,4)
    27b1:	01 7d 0d             	add    %edi,0xd(%rbp)
    27b4:	00 00                	add    %al,(%rax)
    27b6:	42 01 86 0d 00 00 00 	rex.X add %eax,0xd(%rsi)
    27bd:	41 2d 12 00 00 00    	rex.B sub $0x12,%eax
    27c3:	3c c0                	cmp    $0xc0,%al
    27c5:	01 91 0d 00 00 42    	add    %edx,0x4200000d(%rcx)
    27cb:	01 9a 0d 00 00 00    	add    %ebx,0xd(%rdx)
    27d1:	41                   	rex.B
    27d2:	2e 11 00             	cs adc %eax,(%rax)
    27d5:	00 00                	add    %al,(%rax)
    27d7:	3c aa                	cmp    $0xaa,%al
    27d9:	01 a5 0d 00 00 42    	add    %esp,0x4200000d(%rbp)
    27df:	06                   	(bad)
    27e0:	ae                   	scas   %es:(%rdi),%al
    27e1:	0d 00 00 41 2e       	or     $0x2e410000,%eax
    27e6:	11 00                	adc    %eax,(%rax)
    27e8:	00 00                	add    %al,(%rax)
    27ea:	3f                   	(bad)
    27eb:	80 04 b8 0d          	addb   $0xd,(%rax,%rdi,4)
    27ef:	00 00                	add    %al,(%rax)
    27f1:	3f                   	(bad)
    27f2:	80 08 c1             	orb    $0xc1,(%rax)
    27f5:	0d 00 00 3f 08       	or     $0x83f0000,%eax
    27fa:	ca 0d 00             	lret   $0xd
    27fd:	00 00                	add    %al,(%rax)
    27ff:	00 41 2f             	add    %al,0x2f(%rcx)
    2802:	0c 00                	or     $0x0,%al
    2804:	00 00                	add    %al,(%rax)
    2806:	3c ac                	cmp    $0xac,%al
    2808:	01 d6                	add    %edx,%esi
    280a:	0d 00 00 00 43       	or     $0x43000000,%eax
    280f:	0a 3c af             	or     (%rdi,%rbp,4),%bh
    2812:	01 e1                	add    %esp,%ecx
    2814:	0d 00 00 3c b0       	or     $0xb03c0000,%eax
    2819:	01 ea                	add    %ebp,%edx
    281b:	0d 00 00 43 0b       	or     $0xb430000,%eax
    2820:	3c ae                	cmp    $0xae,%al
    2822:	01 f4                	add    %esi,%esp
    2824:	0d 00 00 3c b1       	or     $0xb13c0000,%eax
    2829:	01 fd                	add    %edi,%ebp
    282b:	0d 00 00 3c b2       	or     $0xb23c0000,%eax
    2830:	01 06                	add    %eax,(%rsi)
    2832:	0e                   	(bad)
    2833:	00 00                	add    %al,(%rax)
    2835:	00 00                	add    %al,(%rax)
    2837:	41 30 32             	xor    %sil,(%r10)
    283a:	00 00                	add    %al,(%rax)
    283c:	00 3f                	add    %bh,(%rdi)
    283e:	83 04 12 0e          	addl   $0xe,(%rdx,%rdx,1)
    2842:	00 00                	add    %al,(%rax)
    2844:	3c b4                	cmp    $0xb4,%al
    2846:	01 1b                	add    %ebx,(%rbx)
    2848:	0e                   	(bad)
    2849:	00 00                	add    %al,(%rax)
    284b:	41 30 11             	xor    %dl,(%r9)
    284e:	00 00                	add    %al,(%rax)
    2850:	00 3c b3             	add    %bh,(%rbx,%rsi,4)
    2853:	01 25 0e 00 00 42    	add    %esp,0x4200000e(%rip)        # 42002867 <_license+0x42000482>
    2859:	06                   	(bad)
    285a:	2e 0e                	cs (bad)
    285c:	00 00                	add    %al,(%rax)
    285e:	41 30 11             	xor    %dl,(%r9)
    2861:	00 00                	add    %al,(%rax)
    2863:	00 3f                	add    %bh,(%rdi)
    2865:	83 04 38 0e          	addl   $0xe,(%rax,%rdi,1)
    2869:	00 00                	add    %al,(%rax)
    286b:	3f                   	(bad)
    286c:	80 08 41             	orb    $0x41,(%rax)
    286f:	0e                   	(bad)
    2870:	00 00                	add    %al,(%rax)
    2872:	3f                   	(bad)
    2873:	08 4a 0e             	or     %cl,0xe(%rdx)
    2876:	00 00                	add    %al,(%rax)
    2878:	00 00                	add    %al,(%rax)
    287a:	00 43 0c             	add    %al,0xc(%rbx)
    287d:	3c c3                	cmp    $0xc3,%al
    287f:	01 61 0e             	add    %esp,0xe(%rcx)
    2882:	00 00                	add    %al,(%rax)
    2884:	3c c5                	cmp    $0xc5,%al
    2886:	01 6a 0e             	add    %ebp,0xe(%rdx)
    2889:	00 00                	add    %al,(%rax)
    288b:	3c f4                	cmp    $0xf4,%al
    288d:	02 73 0e             	add    0xe(%rbx),%dh
    2890:	00 00                	add    %al,(%rax)
    2892:	41 31 14 00          	xor    %edx,(%r8,%rax,1)
    2896:	00 00                	add    %al,(%rax)
    2898:	3c c4                	cmp    $0xc4,%al
    289a:	01 7d 0e             	add    %edi,0xe(%rbp)
    289d:	00 00                	add    %al,(%rax)
    289f:	42 06                	rex.X (bad)
    28a1:	86 0e                	xchg   %cl,(%rsi)
    28a3:	00 00                	add    %al,(%rax)
    28a5:	41 31 14 00          	xor    %edx,(%r8,%rax,1)
    28a9:	00 00                	add    %al,(%rax)
    28ab:	3f                   	(bad)
    28ac:	00 90 0e 00 00 3f    	add    %dl,0x3f00000e(%rax)
    28b2:	01 99 0e 00 00 3f    	add    %ebx,0x3f00000e(%rcx)
    28b8:	08 a2 0e 00 00 00    	or     %ah,0xe(%rdx)
    28be:	00 39                	add    %bh,(%rcx)
    28c0:	67 19 00             	sbb    %eax,(%eax)
    28c3:	00 0d 00 6f 03 26    	add    %cl,0x26036f00(%rip)        # 260397c9 <_license+0x260373e4>
    28c9:	3a c6                	cmp    %dh,%al
    28cb:	01 71 19             	add    %esi,0x19(%rcx)
    28ce:	00 00                	add    %al,(%rax)
    28d0:	3a c7                	cmp    %bh,%al
    28d2:	01 7a 19             	add    %edi,0x19(%rdx)
    28d5:	00 00                	add    %al,(%rax)
    28d7:	3a c8                	cmp    %al,%cl
    28d9:	01 83 19 00 00 3c    	add    %eax,0x3c000019(%rbx)
    28df:	c9                   	leave
    28e0:	01 95 19 00 00 3c    	add    %edx,0x3c000019(%rbp)
    28e6:	d3 01                	roll   %cl,(%rcx)
    28e8:	9f                   	lahf
    28e9:	19 00                	sbb    %eax,(%rax)
    28eb:	00 3c d4             	add    %bh,(%rsp,%rdx,8)
    28ee:	01 a9 19 00 00 3c    	add    %ebp,0x3c000019(%rcx)
    28f4:	d5                   	(bad)
    28f5:	01 b3 19 00 00 3c    	add    %esi,0x3c000019(%rbx)
    28fb:	d6                   	(bad)
    28fc:	01 bd 19 00 00 43    	add    %edi,0x43000019(%rbp)
    2902:	0e                   	(bad)
    2903:	3c 9e                	cmp    $0x9e,%al
    2905:	02 da                	add    %dl,%bl
    2907:	19 00                	sbb    %eax,(%rax)
    2909:	00 00                	add    %al,(%rax)
    290b:	00 3d 9e 1a 00 00    	add    %bh,0x1a9e(%rip)        # 43af <_license+0x1fca>
    2911:	32 4b 00             	xor    0x0(%rbx),%cl
    2914:	00 00                	add    %al,(%rax)
    2916:	00 a1 03 09 3e 02    	add    %ah,0x23e0903(%rcx)
    291c:	31 9f ad 1a 00 00    	xor    %ebx,0x1aad(%rdi)
    2922:	3e 02 30             	ds add (%rax),%dh
    2925:	9f                   	lahf
    2926:	b7 1a                	mov    $0x1a,%bh
    2928:	00 00                	add    %al,(%rax)
    292a:	3c d8                	cmp    $0xd8,%al
    292c:	01 c1                	add    %eax,%ecx
    292e:	1a 00                	sbb    (%rax),%al
    2930:	00 41 32             	add    %al,0x32(%rcx)
    2933:	3d 00 00 00 3c       	cmp    $0x3c000000,%eax
    2938:	d7                   	xlat   %ds:(%rbx)
    2939:	01 cc                	add    %ecx,%esp
    293b:	1a 00                	sbb    (%rax),%al
    293d:	00 42 06             	add    %al,0x6(%rdx)
    2940:	d5                   	(bad)
    2941:	1a 00                	sbb    (%rax),%al
    2943:	00 41 32             	add    %al,0x32(%rcx)
    2946:	3d 00 00 00 3f       	cmp    $0x3f000000,%eax
    294b:	80 04 df 1a          	addb   $0x1a,(%rdi,%rbx,8)
    294f:	00 00                	add    %al,(%rax)
    2951:	3f                   	(bad)
    2952:	08 e8                	or     %ch,%al
    2954:	1a 00                	sbb    (%rax),%al
    2956:	00 00                	add    %al,(%rax)
    2958:	00 00                	add    %al,(%rax)
    295a:	43 0f 3c             	rex.XB (bad)
    295d:	fa                   	cli
    295e:	02 ae 0e 00 00 39    	add    0x3900000e(%rsi),%ch
    2964:	66 1f                	data16 (bad)
    2966:	00 00                	add    %al,(%rax)
    2968:	10 00                	adc    %al,(%rax)
    296a:	73 03                	jae    296f <_license+0x58a>
    296c:	09 3a                	or     %edi,(%rdx)
    296e:	f5                   	cmc
    296f:	02 6c 1f 00          	add    0x0(%rdi,%rbx,1),%ch
    2973:	00 3a                	add    %bh,(%rdx)
    2975:	f6 02 75             	testb  $0x75,(%rdx)
    2978:	1f                   	(bad)
    2979:	00 00                	add    %al,(%rax)
    297b:	00 41 33             	add    %al,0x33(%rcx)
    297e:	05 00 00 00 3c       	add    $0x3c000000,%eax
    2983:	fb                   	sti
    2984:	02 c1                	add    %cl,%al
    2986:	0e                   	(bad)
    2987:	00 00                	add    %al,(%rax)
    2989:	42 02 ca             	rex.X add %dl,%cl
    298c:	0e                   	(bad)
    298d:	00 00                	add    %al,(%rax)
    298f:	41 33 05 00 00 00 3b 	xor    0x3b000000(%rip),%eax        # 3b002996 <_license+0x3b0005b1>
    2996:	01 50 d4             	add    %edx,-0x2c(%rax)
    2999:	0e                   	(bad)
    299a:	00 00                	add    %al,(%rax)
    299c:	3f                   	(bad)
    299d:	fe                   	(bad)
    299e:	ff                   	(bad)
    299f:	ff 07                	incl   (%rdi)
    29a1:	dd 0e                	fisttpll (%rsi)
    29a3:	00 00                	add    %al,(%rax)
    29a5:	3f                   	(bad)
    29a6:	08 e6                	or     %ah,%dh
    29a8:	0e                   	(bad)
    29a9:	00 00                	add    %al,(%rax)
    29ab:	00 00                	add    %al,(%rax)
    29ad:	43 11 3c 81          	adc    %edi,(%r9,%r8,4)
    29b1:	03 f2                	add    %edx,%esi
    29b3:	0e                   	(bad)
    29b4:	00 00                	add    %al,(%rax)
    29b6:	41 34 20             	rex.B xor $0x20,%al
    29b9:	00 00                	add    %al,(%rax)
    29bb:	00 3c fc             	add    %bh,(%rsp,%rdi,8)
    29be:	02 fc                	add    %ah,%bh
    29c0:	0e                   	(bad)
    29c1:	00 00                	add    %al,(%rax)
    29c3:	42 02 05 0f 00 00 41 	rex.X add 0x4100000f(%rip),%al        # 410029d9 <_license+0x410005f4>
    29ca:	34 20                	xor    $0x20,%al
    29cc:	00 00                	add    %al,(%rax)
    29ce:	00 3c fd 02 0f 0f 00 	add    %bh,0xf0f02(,%rdi,8)
    29d5:	00 3f                	add    %bh,(%rdi)
    29d7:	80 20 18             	andb   $0x18,(%rax)
    29da:	0f 00 00             	sldt   (%rax)
    29dd:	3f                   	(bad)
    29de:	18 21                	sbb    %ah,(%rcx)
    29e0:	0f 00 00             	sldt   (%rax)
    29e3:	00 00                	add    %al,(%rax)
    29e5:	39 61 20             	cmp    %esp,0x20(%rcx)
    29e8:	00 00                	add    %al,(%rax)
    29ea:	12 00                	adc    (%rax),%al
    29ec:	89 03                	mov    %eax,(%rbx)
    29ee:	17                   	(bad)
    29ef:	3a fe                	cmp    %dh,%bh
    29f1:	02 6b 20             	add    0x20(%rbx),%ch
    29f4:	00 00                	add    %al,(%rax)
    29f6:	3a ff                	cmp    %bh,%bh
    29f8:	02 74 20 00          	add    0x0(%rax,%riz,1),%dh
    29fc:	00 3b                	add    %bh,(%rbx)
    29fe:	03 91 c0 00 7d 20    	add    0x207d00c0(%rcx),%edx
    2a04:	00 00                	add    %al,(%rax)
    2a06:	3c 80                	cmp    $0x80,%al
    2a08:	03 87 20 00 00 39    	add    0x39000020(%rdi),%eax
    2a0e:	a8 1b                	test   $0x1b,%al
    2a10:	00 00                	add    %al,(%rax)
    2a12:	13 00                	adc    (%rax),%eax
    2a14:	74 02                	je     2a18 <_license+0x633>
    2a16:	07                   	(bad)
    2a17:	3c 85                	cmp    $0x85,%al
    2a19:	03 ba 1b 00 00 3c    	add    0x3c00001b(%rdx),%edi
    2a1f:	87 03                	xchg   %eax,(%rbx)
    2a21:	c3                   	ret
    2a22:	1b 00                	sbb    (%rax),%eax
    2a24:	00 41 35             	add    %al,0x35(%rcx)
    2a27:	11 00                	adc    %eax,(%rax)
    2a29:	00 00                	add    %al,(%rax)
    2a2b:	3c 86                	cmp    $0x86,%al
    2a2d:	03 cd                	add    %ebp,%ecx
    2a2f:	1b 00                	sbb    (%rax),%eax
    2a31:	00 42 06             	add    %al,0x6(%rdx)
    2a34:	d5                   	(bad)
    2a35:	1b 00                	sbb    (%rax),%eax
    2a37:	00 41 35             	add    %al,0x35(%rcx)
    2a3a:	11 00                	adc    %eax,(%rax)
    2a3c:	00 00                	add    %al,(%rax)
    2a3e:	3f                   	(bad)
    2a3f:	82                   	(bad)
    2a40:	04 de                	add    $0xde,%al
    2a42:	1b 00                	sbb    (%rax),%eax
    2a44:	00 3f                	add    %bh,(%rdi)
    2a46:	80 08 e6             	orb    $0xe6,(%rax)
    2a49:	1b 00                	sbb    (%rax),%eax
    2a4b:	00 3f                	add    %bh,(%rdi)
    2a4d:	08 ee                	or     %ch,%dh
    2a4f:	1b 00                	sbb    (%rax),%eax
    2a51:	00 00                	add    %al,(%rax)
    2a53:	00 00                	add    %al,(%rax)
    2a55:	00 3d 9e 1a 00 00    	add    %bh,0x1a9e(%rip)        # 44f9 <_license+0x2114>
    2a5b:	36 3f                	ss (bad)
    2a5d:	00 00                	add    %al,(%rax)
    2a5f:	00 00                	add    %al,(%rax)
    2a61:	8e 03                	mov    (%rbx),%es
    2a63:	0f 3e                	(bad)
    2a65:	02 30                	add    (%rax),%dh
    2a67:	9f                   	lahf
    2a68:	ad                   	lods   %ds:(%rsi),%eax
    2a69:	1a 00                	sbb    (%rax),%al
    2a6b:	00 3e                	add    %bh,(%rsi)
    2a6d:	02 31                	add    (%rcx),%dh
    2a6f:	9f                   	lahf
    2a70:	b7 1a                	mov    $0x1a,%bh
    2a72:	00 00                	add    %al,(%rax)
    2a74:	3c 89                	cmp    $0x89,%al
    2a76:	03 c1                	add    %ecx,%eax
    2a78:	1a 00                	sbb    (%rax),%al
    2a7a:	00 41 36             	add    %al,0x36(%rcx)
    2a7d:	34 00                	xor    $0x0,%al
    2a7f:	00 00                	add    %al,(%rax)
    2a81:	3c 88                	cmp    $0x88,%al
    2a83:	03 cc                	add    %esp,%ecx
    2a85:	1a 00                	sbb    (%rax),%al
    2a87:	00 42 06             	add    %al,0x6(%rdx)
    2a8a:	d5                   	(bad)
    2a8b:	1a 00                	sbb    (%rax),%al
    2a8d:	00 41 36             	add    %al,0x36(%rcx)
    2a90:	34 00                	xor    $0x0,%al
    2a92:	00 00                	add    %al,(%rax)
    2a94:	3f                   	(bad)
    2a95:	80 04 df 1a          	addb   $0x1a,(%rdi,%rbx,8)
    2a99:	00 00                	add    %al,(%rax)
    2a9b:	3f                   	(bad)
    2a9c:	08 e8                	or     %ch,%al
    2a9e:	1a 00                	sbb    (%rax),%al
    2aa0:	00 00                	add    %al,(%rax)
    2aa2:	00 00                	add    %al,(%rax)
    2aa4:	00 00                	add    %al,(%rax)
    2aa6:	00 41 37             	add    %al,0x37(%rcx)
    2aa9:	39 00                	cmp    %eax,(%rax)
    2aab:	00 00                	add    %al,(%rax)
    2aad:	3f                   	(bad)
    2aae:	8b 04 30             	mov    (%rax,%rsi,1),%eax
    2ab1:	0f 00 00             	sldt   (%rax)
    2ab4:	3c cb                	cmp    $0xcb,%al
    2ab6:	01 39                	add    %edi,(%rcx)
    2ab8:	0f 00 00             	sldt   (%rax)
    2abb:	41 37                	rex.B (bad)
    2abd:	15 00 00 00 3c       	adc    $0x3c000000,%eax
    2ac2:	ca 01 43             	lret   $0x4301
    2ac5:	0f 00 00             	sldt   (%rax)
    2ac8:	42 06                	rex.X (bad)
    2aca:	4c 0f 00 00          	rex.WR sldt (%rax)
    2ace:	41 37                	rex.B (bad)
    2ad0:	15 00 00 00 3f       	adc    $0x3f000000,%eax
    2ad5:	8b 04 56             	mov    (%rsi,%rdx,2),%eax
    2ad8:	0f 00 00             	sldt   (%rax)
    2adb:	3f                   	(bad)
    2adc:	80 08 5f             	orb    $0x5f,(%rax)
    2adf:	0f 00 00             	sldt   (%rax)
    2ae2:	3f                   	(bad)
    2ae3:	08 68 0f             	or     %ch,0xf(%rax)
    2ae6:	00 00                	add    %al,(%rax)
    2ae8:	00 00                	add    %al,(%rax)
    2aea:	3d e6 19 00 00       	cmp    $0x19e6,%eax
    2aef:	38 0c 00             	cmp    %cl,(%rax,%rax,1)
    2af2:	00 00                	add    %al,(%rax)
    2af4:	00 65 03             	add    %ah,0x3(%rbp)
    2af7:	0b 3e                	or     (%rsi),%edi
    2af9:	01 53 f0             	add    %edx,-0x10(%rbx)
    2afc:	19 00                	sbb    %eax,(%rax)
    2afe:	00 3e                	add    %bh,(%rsi)
    2b00:	02 30                	add    (%rax),%dh
    2b02:	9f                   	lahf
    2b03:	02 1a                	add    (%rdx),%bl
    2b05:	00 00                	add    %al,(%rax)
    2b07:	3f                   	(bad)
    2b08:	0e                   	(bad)
    2b09:	0b 1a                	or     (%rdx),%ebx
    2b0b:	00 00                	add    %al,(%rax)
    2b0d:	41 38 0c 00          	cmp    %cl,(%r8,%rax,1)
    2b11:	00 00                	add    %al,(%rax)
    2b13:	3b 03                	cmp    (%rbx),%eax
    2b15:	73 22                	jae    2b39 <_license+0x754>
    2b17:	9f                   	lahf
    2b18:	20 1a                	and    %bl,(%rdx)
    2b1a:	00 00                	add    %al,(%rax)
    2b1c:	00 00                	add    %al,(%rax)
    2b1e:	00 39                	add    %bh,(%rcx)
    2b20:	2b 1a                	sub    (%rdx),%ebx
    2b22:	00 00                	add    %al,(%rax)
    2b24:	14 00                	adc    $0x0,%al
    2b26:	d7                   	xlat   %ds:(%rbx)
    2b27:	03 07                	add    (%rdi),%eax
    2b29:	3a cc                	cmp    %ah,%cl
    2b2b:	01 39                	add    %edi,(%rcx)
    2b2d:	1a 00                	sbb    (%rax),%al
    2b2f:	00 3a                	add    %bh,(%rdx)
    2b31:	cd 01                	int    $0x1
    2b33:	41 1a 00             	sbb    (%r8),%al
    2b36:	00 3a                	add    %bh,(%rdx)
    2b38:	ce                   	(bad)
    2b39:	01 49 1a             	add    %ecx,0x1a(%rcx)
    2b3c:	00 00                	add    %al,(%rax)
    2b3e:	3c cf                	cmp    $0xcf,%al
    2b40:	01 52 1a             	add    %edx,0x1a(%rdx)
    2b43:	00 00                	add    %al,(%rax)
    2b45:	3c d0                	cmp    $0xd0,%al
    2b47:	01 5b 1a             	add    %ebx,0x1a(%rbx)
    2b4a:	00 00                	add    %al,(%rax)
    2b4c:	3c db                	cmp    $0xdb,%al
    2b4e:	01 64 1a 00          	add    %esp,0x0(%rdx,%rbx,1)
    2b52:	00 41 39             	add    %al,0x39(%rcx)
    2b55:	1a 00                	sbb    (%rax),%al
    2b57:	00 00                	add    %al,(%rax)
    2b59:	3c dd                	cmp    $0xdd,%al
    2b5b:	01 6d 1a             	add    %ebp,0x1a(%rbp)
    2b5e:	00 00                	add    %al,(%rax)
    2b60:	42 02 75 1a          	rex.X add 0x1a(%rbp),%sil
    2b64:	00 00                	add    %al,(%rax)
    2b66:	41 39 1a             	cmp    %ebx,(%r10)
    2b69:	00 00                	add    %al,(%rax)
    2b6b:	00 3c dc             	add    %bh,(%rsp,%rbx,8)
    2b6e:	01 7e 1a             	add    %edi,0x1a(%rsi)
    2b71:	00 00                	add    %al,(%rax)
    2b73:	3f                   	(bad)
    2b74:	80 20 86             	andb   $0x86,(%rax)
    2b77:	1a 00                	sbb    (%rax),%al
    2b79:	00 3f                	add    %bh,(%rdi)
    2b7b:	18 8e 1a 00 00 00    	sbb    %cl,0x1a(%rsi)
    2b81:	00 00                	add    %al,(%rax)
    2b83:	3d fd 1a 00 00       	cmp    $0x1afd,%eax
    2b88:	3a b6 00 00 00 00    	cmp    0x0(%rsi),%dh
    2b8e:	e4 03                	in     $0x3,%al
    2b90:	05 3e 03 91 10       	add    $0x1091033e,%eax
    2b95:	9f                   	lahf
    2b96:	10 1b                	adc    %bl,(%rbx)
    2b98:	00 00                	add    %al,(%rax)
    2b9a:	3a de                	cmp    %dh,%bl
    2b9c:	01 19                	add    %ebx,(%rcx)
    2b9e:	1b 00                	sbb    (%rax),%eax
    2ba0:	00 3e                	add    %bh,(%rsi)
    2ba2:	04 91                	add    $0x91,%al
    2ba4:	d8 00                	fadds  (%rax)
    2ba6:	9f                   	lahf
    2ba7:	22 1b                	and    (%rbx),%bl
    2ba9:	00 00                	add    %al,(%rax)
    2bab:	3d a8 1b 00 00       	cmp    $0x1ba8,%eax
    2bb0:	3b 52 00             	cmp    0x0(%rdx),%edx
    2bb3:	00 00                	add    %al,(%rax)
    2bb5:	00 93 02 32 3f 82    	add    %dl,-0x7dc0cdfe(%rbx)
    2bbb:	04 ba                	add    $0xba,%al
    2bbd:	1b 00                	sbb    (%rax),%eax
    2bbf:	00 3c e0             	add    %bh,(%rax,%riz,8)
    2bc2:	01 c3                	add    %eax,%ebx
    2bc4:	1b 00                	sbb    (%rax),%eax
    2bc6:	00 41 3b             	add    %al,0x3b(%rcx)
    2bc9:	11 00                	adc    %eax,(%rax)
    2bcb:	00 00                	add    %al,(%rax)
    2bcd:	3c df                	cmp    $0xdf,%al
    2bcf:	01 cd                	add    %ecx,%ebp
    2bd1:	1b 00                	sbb    (%rax),%eax
    2bd3:	00 42 06             	add    %al,0x6(%rdx)
    2bd6:	d5                   	(bad)
    2bd7:	1b 00                	sbb    (%rax),%eax
    2bd9:	00 41 3b             	add    %al,0x3b(%rcx)
    2bdc:	11 00                	adc    %eax,(%rax)
    2bde:	00 00                	add    %al,(%rax)
    2be0:	3f                   	(bad)
    2be1:	82                   	(bad)
    2be2:	04 de                	add    $0xde,%al
    2be4:	1b 00                	sbb    (%rax),%eax
    2be6:	00 3f                	add    %bh,(%rdi)
    2be8:	80 08 e6             	orb    $0xe6,(%rax)
    2beb:	1b 00                	sbb    (%rax),%eax
    2bed:	00 3f                	add    %bh,(%rdi)
    2bef:	08 ee                	or     %ch,%dh
    2bf1:	1b 00                	sbb    (%rax),%eax
    2bf3:	00 00                	add    %al,(%rax)
    2bf5:	00 00                	add    %al,(%rax)
    2bf7:	41 3c 4f             	rex.B cmp $0x4f,%al
    2bfa:	00 00                	add    %al,(%rax)
    2bfc:	00 3c e2             	add    %bh,(%rdx,%riz,8)
    2bff:	01 36                	add    %esi,(%rsi)
    2c01:	1b 00                	sbb    (%rax),%eax
    2c03:	00 41 3c             	add    %al,0x3c(%rcx)
    2c06:	18 00                	sbb    %al,(%rax)
    2c08:	00 00                	add    %al,(%rax)
    2c0a:	3c e1                	cmp    $0xe1,%al
    2c0c:	01 41 1b             	add    %eax,0x1b(%rcx)
    2c0f:	00 00                	add    %al,(%rax)
    2c11:	42 0d 4a 1b 00 00    	rex.X or $0x1b4a,%eax
    2c17:	00 41 3d             	add    %al,0x3d(%rcx)
    2c1a:	32 00                	xor    (%rax),%al
    2c1c:	00 00                	add    %al,(%rax)
    2c1e:	3c e3                	cmp    $0xe3,%al
    2c20:	01 55 1b             	add    %edx,0x1b(%rbp)
    2c23:	00 00                	add    %al,(%rax)
    2c25:	41                   	rex.B
    2c26:	3e 23 00             	ds and (%rax),%eax
    2c29:	00 00                	add    %al,(%rax)
    2c2b:	3f                   	(bad)
    2c2c:	8f 04 60             	pop    (%rax,%riz,2)
    2c2f:	1b 00                	sbb    (%rax),%eax
    2c31:	00 3c e5 01 69 1b 00 	add    %bh,0x1b6901(,%riz,8)
    2c38:	00 41 3e             	add    %al,0x3e(%rcx)
    2c3b:	11 00                	adc    %eax,(%rax)
    2c3d:	00 00                	add    %al,(%rax)
    2c3f:	3c e4                	cmp    $0xe4,%al
    2c41:	01 74 1b 00          	add    %esi,0x0(%rbx,%rbx,1)
    2c45:	00 42 06             	add    %al,0x6(%rdx)
    2c48:	7d 1b                	jge    2c65 <_license+0x880>
    2c4a:	00 00                	add    %al,(%rax)
    2c4c:	41                   	rex.B
    2c4d:	3e 11 00             	ds adc %eax,(%rax)
    2c50:	00 00                	add    %al,(%rax)
    2c52:	3f                   	(bad)
    2c53:	8f 04 87             	pop    (%rdi,%rax,4)
    2c56:	1b 00                	sbb    (%rax),%eax
    2c58:	00 3f                	add    %bh,(%rdi)
    2c5a:	80 08 90             	orb    $0x90,(%rax)
    2c5d:	1b 00                	sbb    (%rax),%eax
    2c5f:	00 3f                	add    %bh,(%rdi)
    2c61:	08 99 1b 00 00 00    	or     %bl,0x1b(%rcx)
    2c67:	00 00                	add    %al,(%rax)
    2c69:	00 00                	add    %al,(%rax)
    2c6b:	00 41 3f             	add    %al,0x3f(%rcx)
    2c6e:	2b 00                	sub    (%rax),%eax
    2c70:	00 00                	add    %al,(%rax)
    2c72:	3f                   	(bad)
    2c73:	81 04 76 0f 00 00 3c 	addl   $0x3c00000f,(%rsi,%rsi,2)
    2c7a:	f9                   	stc
    2c7b:	01 7f 0f             	add    %edi,0xf(%rdi)
    2c7e:	00 00                	add    %al,(%rax)
    2c80:	41 3f                	rex.B (bad)
    2c82:	11 00                	adc    %eax,(%rax)
    2c84:	00 00                	add    %al,(%rax)
    2c86:	3c f8                	cmp    $0xf8,%al
    2c88:	01 89 0f 00 00 42    	add    %ecx,0x4200000f(%rcx)
    2c8e:	06                   	(bad)
    2c8f:	92                   	xchg   %eax,%edx
    2c90:	0f 00 00             	sldt   (%rax)
    2c93:	41 3f                	rex.B (bad)
    2c95:	11 00                	adc    %eax,(%rax)
    2c97:	00 00                	add    %al,(%rax)
    2c99:	3f                   	(bad)
    2c9a:	81 04 9c 0f 00 00 3f 	addl   $0x3f00000f,(%rsp,%rbx,4)
    2ca1:	80 08 a5             	orb    $0xa5,(%rax)
    2ca4:	0f 00 00             	sldt   (%rax)
    2ca7:	3f                   	(bad)
    2ca8:	08 ae 0f 00 00 00    	or     %ch,0xf(%rsi)
    2cae:	00 00                	add    %al,(%rax)
    2cb0:	39 a4 1c 00 00 15 00 	cmp    %esp,0x150000(%rsp,%rbx,1)
    2cb7:	fa                   	cli
    2cb8:	03 0c 3a             	add    (%rdx,%rdi,1),%ecx
    2cbb:	fa                   	cli
    2cbc:	01 b6 1c 00 00 3a    	add    %esi,0x3a00001c(%rsi)
    2cc2:	fb                   	sti
    2cc3:	01 be 1c 00 00 3a    	add    %edi,0x3a00001c(%rsi)
    2cc9:	fc                   	cld
    2cca:	01 c6                	add    %eax,%esi
    2ccc:	1c 00                	sbb    $0x0,%al
    2cce:	00 3a                	add    %bh,(%rdx)
    2cd0:	fd                   	std
    2cd1:	01 ce                	add    %ecx,%esi
    2cd3:	1c 00                	sbb    $0x0,%al
    2cd5:	00 3b                	add    %bh,(%rbx)
    2cd7:	03 91 c0 00 d6 1c    	add    0x1cd600c0(%rcx),%edx
    2cdd:	00 00                	add    %al,(%rax)
    2cdf:	3c fe                	cmp    $0xfe,%al
    2ce1:	01 df                	add    %ebx,%edi
    2ce3:	1c 00                	sbb    $0x0,%al
    2ce5:	00 3c ff             	add    %bh,(%rdi,%rdi,8)
    2ce8:	01 e8                	add    %ebp,%eax
    2cea:	1c 00                	sbb    $0x0,%al
    2cec:	00 3c 80             	add    %bh,(%rax,%rax,4)
    2cef:	02 f1                	add    %cl,%dh
    2cf1:	1c 00                	sbb    $0x0,%al
    2cf3:	00 3c 87             	add    %bh,(%rdi,%rax,4)
    2cf6:	02 fa                	add    %dl,%bh
    2cf8:	1c 00                	sbb    $0x0,%al
    2cfa:	00 3c 88             	add    %bh,(%rax,%rcx,4)
    2cfd:	02 03                	add    (%rbx),%al
    2cff:	1d 00 00 40 a8       	sbb    $0xa8400000,%eax
    2d04:	1b 00                	sbb    (%rax),%eax
    2d06:	00 40 56             	add    %al,0x56(%rax)
    2d09:	00 00                	add    %al,(%rax)
    2d0b:	00 00                	add    %al,(%rax)
    2d0d:	66 11 3f             	adc    %di,(%rdi)
    2d10:	82                   	(bad)
    2d11:	04 ba                	add    $0xba,%al
    2d13:	1b 00                	sbb    (%rax),%eax
    2d15:	00 3c 82             	add    %bh,(%rdx,%rax,4)
    2d18:	02 c3                	add    %bl,%al
    2d1a:	1b 00                	sbb    (%rax),%eax
    2d1c:	00 41 40             	add    %al,0x40(%rcx)
    2d1f:	14 00                	adc    $0x0,%al
    2d21:	00 00                	add    %al,(%rax)
    2d23:	3c 81                	cmp    $0x81,%al
    2d25:	02 cd                	add    %ch,%cl
    2d27:	1b 00                	sbb    (%rax),%eax
    2d29:	00 42 06             	add    %al,0x6(%rdx)
    2d2c:	d5                   	(bad)
    2d2d:	1b 00                	sbb    (%rax),%eax
    2d2f:	00 41 40             	add    %al,0x40(%rcx)
    2d32:	14 00                	adc    $0x0,%al
    2d34:	00 00                	add    %al,(%rax)
    2d36:	3f                   	(bad)
    2d37:	82                   	(bad)
    2d38:	04 de                	add    $0xde,%al
    2d3a:	1b 00                	sbb    (%rax),%eax
    2d3c:	00 3f                	add    %bh,(%rdi)
    2d3e:	80 08 e6             	orb    $0xe6,(%rax)
    2d41:	1b 00                	sbb    (%rax),%eax
    2d43:	00 3f                	add    %bh,(%rdi)
    2d45:	08 ee                	or     %ch,%dh
    2d47:	1b 00                	sbb    (%rax),%eax
    2d49:	00 00                	add    %al,(%rax)
    2d4b:	00 00                	add    %al,(%rax)
    2d4d:	43 16                	rex.XB (bad)
    2d4f:	3c 83                	cmp    $0x83,%al
    2d51:	02 14 1d 00 00 40 ca 	add    -0x35c00000(,%rbx,1),%dl
    2d58:	1d 00 00 41 4a       	sbb    $0x4a410000,%eax
    2d5d:	00 00                	add    %al,(%rax)
    2d5f:	00 00                	add    %al,(%rax)
    2d61:	8f                   	(bad)
    2d62:	0c 3e                	or     $0x3e,%al
    2d64:	03 91 10 9f d3 1d    	add    0x1dd39f10(%rcx),%edx
    2d6a:	00 00                	add    %al,(%rax)
    2d6c:	3e 02 30             	ds add (%rax),%dh
    2d6f:	9f                   	lahf
    2d70:	db 1d 00 00 40 a5    	fistpl -0x5ac00000(%rip)        # ffffffffa5402d76 <ch_rings+0x36ff82b7dd76>
    2d76:	1d 00 00 41 4a       	sbb    $0x4a410000,%eax
    2d7b:	00 00                	add    %al,(%rax)
    2d7d:	00 00                	add    %al,(%rax)
    2d7f:	22 0c 46             	and    (%rsi,%rax,2),%cl
    2d82:	80 84 80 10 c0 1d 00 	addb   $0x0,0x1dc010(%rax,%rax,4)
    2d89:	00 
    2d8a:	40 77 1d             	rex ja 2daa <_license+0x9c5>
    2d8d:	00 00                	add    %al,(%rax)
    2d8f:	41                   	rex.B
    2d90:	4a 00 00             	rex.WX add %al,(%rax)
    2d93:	00 0d 6f 0a 3a 86    	add    %cl,-0x79c5f591(%rip)        # ffffffff863a3808 <ch_rings+0x36ff63b1e808>
    2d99:	02 80 1d 00 00 3a    	add    0x3a00001d(%rax),%al
    2d9f:	84 02                	test   %al,(%rdx)
    2da1:	89 1d 00 00 3a 85    	mov    %ebx,-0x7ac60000(%rip)        # ffffffff853a2da7 <ch_rings+0x36ff62b1dda7>
    2da7:	02 92 1d 00 00 46    	add    0x4600001d(%rdx),%dl
    2dad:	f7 81 b7 85 fe ff ff 	testl  $0x1ffffff,-0x17a49(%rcx)
    2db4:	ff ff 01 
    2db7:	9b                   	fwait
    2db8:	1d 00 00 40 e5       	sbb    $0xe5400000,%eax
    2dbd:	1d 00 00 42 05       	sbb    $0x5420000,%eax
    2dc2:	00 00                	add    %al,(%rax)
    2dc4:	00 0d 6a 03 3e 01    	add    %cl,0x13e036a(%rip)        # 13e3134 <_license+0x13e0d4f>
    2dca:	54                   	push   %rsp
    2dcb:	ee                   	out    %al,(%dx)
    2dcc:	1d 00 00 46 0e       	sbb    $0xe460000,%eax
    2dd1:	f7 1d 00 00 00 40    	negl   0x40000000(%rip)        # 40002dd7 <_license+0x400009f2>
    2dd7:	e5 1d                	in     $0x1d,%eax
    2dd9:	00 00                	add    %al,(%rax)
    2ddb:	43 05 00 00 00 0d    	rex.XB add $0xd000000,%eax
    2de1:	6a 03                	push   $0x3
    2de3:	3e 01 52 ee          	ds add %edx,-0x12(%rdx)
    2de7:	1d 00 00 46 0b       	sbb    $0xb460000,%eax
    2dec:	f7 1d 00 00 00 40    	negl   0x40000000(%rip)        # 40002df2 <_license+0x40000a0d>
    2df2:	e5 1d                	in     $0x1d,%eax
    2df4:	00 00                	add    %al,(%rax)
    2df6:	44 05 00 00 00 0d    	rex.R add $0xd000000,%eax
    2dfc:	6a 03                	push   $0x3
    2dfe:	3e 01 51 ee          	ds add %edx,-0x12(%rcx)
    2e02:	1d 00 00 46 19       	sbb    $0x19460000,%eax
    2e07:	f7 1d 00 00 00 40    	negl   0x40000000(%rip)        # 40002e0d <_license+0x40000a28>
    2e0d:	e5 1d                	in     $0x1d,%eax
    2e0f:	00 00                	add    %al,(%rax)
    2e11:	45 05 00 00 00 0d    	rex.RB add $0xd000000,%eax
    2e17:	6a 03                	push   $0x3
    2e19:	3e 01 54 ee 1d       	ds add %edx,0x1d(%rsi,%rbp,8)
    2e1e:	00 00                	add    %al,(%rax)
    2e20:	46 10 f7             	rex.RX adc %r14b,%dil
    2e23:	1d 00 00 00 40       	sbb    $0x40000000,%eax
    2e28:	e5 1d                	in     $0x1d,%eax
    2e2a:	00 00                	add    %al,(%rax)
    2e2c:	46 05 00 00 00 0d    	rex.RX add $0xd000000,%eax
    2e32:	6a 03                	push   $0x3
    2e34:	3e 01 52 ee          	ds add %edx,-0x12(%rdx)
    2e38:	1d 00 00 46 04       	sbb    $0x4460000,%eax
    2e3d:	f7 1d 00 00 00 40    	negl   0x40000000(%rip)        # 40002e43 <_license+0x40000a5e>
    2e43:	e5 1d                	in     $0x1d,%eax
    2e45:	00 00                	add    %al,(%rax)
    2e47:	47 03 00             	rex.RXB add (%r8),%r8d
    2e4a:	00 00                	add    %al,(%rax)
    2e4c:	0d 6a 03 3e 01       	or     $0x13e036a,%eax
    2e51:	51                   	push   %rcx
    2e52:	ee                   	out    %al,(%dx)
    2e53:	1d 00 00 46 0e       	sbb    $0xe460000,%eax
    2e58:	f7 1d 00 00 00 40    	negl   0x40000000(%rip)        # 40002e5e <_license+0x40000a79>
    2e5e:	e5 1d                	in     $0x1d,%eax
    2e60:	00 00                	add    %al,(%rax)
    2e62:	48 03 00             	add    (%rax),%rax
    2e65:	00 00                	add    %al,(%rax)
    2e67:	0d 6a 03 3e 01       	or     $0x13e036a,%eax
    2e6c:	54                   	push   %rsp
    2e6d:	ee                   	out    %al,(%dx)
    2e6e:	1d 00 00 46 18       	sbb    $0x18460000,%eax
    2e73:	f7 1d 00 00 00 00    	negl   0x0(%rip)        # 2e79 <_license+0xa94>
    2e79:	00 00                	add    %al,(%rax)
    2e7b:	43 17                	rex.XB (bad)
    2e7d:	3c 89                	cmp    $0x89,%al
    2e7f:	02 1e                	add    (%rsi),%bl
    2e81:	1d 00 00 42 02       	sbb    $0x2420000,%eax
    2e86:	26 1d 00 00 43 18    	es sbb $0x18430000,%eax
    2e8c:	3b 01                	cmp    (%rcx),%eax
    2e8e:	51                   	push   %rcx
    2e8f:	2f                   	(bad)
    2e90:	1d 00 00 3f 80       	sbb    $0x803f0000,%eax
    2e95:	84 80 10 37 1d 00    	test   %al,0x1d3710(%rax)
    2e9b:	00 3f                	add    %bh,(%rdi)
    2e9d:	08 3f                	or     %bh,(%rdi)
    2e9f:	1d 00 00 00 00       	sbb    $0x0,%eax
    2ea4:	40                   	rex
    2ea5:	45 1e                	rex.RB (bad)
    2ea7:	00 00                	add    %al,(%rax)
    2ea9:	49 1f                	rex.WB (bad)
    2eab:	00 00                	add    %al,(%rax)
    2ead:	00 00                	add    %al,(%rax)
    2eaf:	9a                   	(bad)
    2eb0:	07                   	(bad)
    2eb1:	3f                   	(bad)
    2eb2:	89 04 4a             	mov    %eax,(%rdx,%rcx,2)
    2eb5:	1e                   	(bad)
    2eb6:	00 00                	add    %al,(%rax)
    2eb8:	3c 8e                	cmp    $0x8e,%al
    2eba:	02 53 1e             	add    0x1e(%rbx),%dl
    2ebd:	00 00                	add    %al,(%rax)
    2ebf:	41                   	rex.B
    2ec0:	49 11 00             	adc    %rax,(%r8)
    2ec3:	00 00                	add    %al,(%rax)
    2ec5:	3c 8d                	cmp    $0x8d,%al
    2ec7:	02 5d 1e             	add    0x1e(%rbp),%bl
    2eca:	00 00                	add    %al,(%rax)
    2ecc:	42 06                	rex.X (bad)
    2ece:	65 1e                	gs (bad)
    2ed0:	00 00                	add    %al,(%rax)
    2ed2:	41                   	rex.B
    2ed3:	49 11 00             	adc    %rax,(%r8)
    2ed6:	00 00                	add    %al,(%rax)
    2ed8:	3f                   	(bad)
    2ed9:	89 04 6e             	mov    %eax,(%rsi,%rbp,2)
    2edc:	1e                   	(bad)
    2edd:	00 00                	add    %al,(%rax)
    2edf:	3f                   	(bad)
    2ee0:	80 08 76             	orb    $0x76,(%rax)
    2ee3:	1e                   	(bad)
    2ee4:	00 00                	add    %al,(%rax)
    2ee6:	3f                   	(bad)
    2ee7:	08 7e 1e             	or     %bh,0x1e(%rsi)
    2eea:	00 00                	add    %al,(%rax)
    2eec:	00 00                	add    %al,(%rax)
    2eee:	00 00                	add    %al,(%rax)
    2ef0:	41                   	rex.B
    2ef1:	4a 06                	rex.WX (bad)
    2ef3:	00 00                	add    %al,(%rax)
    2ef5:	00 3c 8a             	add    %bh,(%rdx,%rcx,4)
    2ef8:	02 4b 1d             	add    0x1d(%rbx),%cl
    2efb:	00 00                	add    %al,(%rax)
    2efd:	42 02 53 1d          	rex.X add 0x1d(%rbx),%dl
    2f01:	00 00                	add    %al,(%rax)
    2f03:	41                   	rex.B
    2f04:	4a 06                	rex.WX (bad)
    2f06:	00 00                	add    %al,(%rax)
    2f08:	00 3b                	add    %bh,(%rbx)
    2f0a:	01 53 5c             	add    %edx,0x5c(%rbx)
    2f0d:	1d 00 00 3f 80       	sbb    $0x803f0000,%eax
    2f12:	20 64 1d 00          	and    %ah,0x0(%rbp,%rbx,1)
    2f16:	00 3f                	add    %bh,(%rdi)
    2f18:	18 6c 1d 00          	sbb    %ch,0x0(%rbp,%rbx,1)
    2f1c:	00 00                	add    %al,(%rax)
    2f1e:	00 40 01             	add    %al,0x1(%rax)
    2f21:	1e                   	(bad)
    2f22:	00 00                	add    %al,(%rax)
    2f24:	4b 1f                	rex.WXB (bad)
    2f26:	00 00                	add    %al,(%rax)
    2f28:	00 00                	add    %al,(%rax)
    2f2a:	a3 05 3f 89 04 06 1e 	movabs %eax,0x1e0604893f05
    2f31:	00 00 
    2f33:	3c 8c                	cmp    $0x8c,%al
    2f35:	02 0f                	add    (%rdi),%cl
    2f37:	1e                   	(bad)
    2f38:	00 00                	add    %al,(%rax)
    2f3a:	41                   	rex.B
    2f3b:	4b 11 00             	rex.WXB adc %rax,(%r8)
    2f3e:	00 00                	add    %al,(%rax)
    2f40:	3c 8b                	cmp    $0x8b,%al
    2f42:	02 19                	add    (%rcx),%bl
    2f44:	1e                   	(bad)
    2f45:	00 00                	add    %al,(%rax)
    2f47:	42 06                	rex.X (bad)
    2f49:	21 1e                	and    %ebx,(%rsi)
    2f4b:	00 00                	add    %al,(%rax)
    2f4d:	41                   	rex.B
    2f4e:	4b 11 00             	rex.WXB adc %rax,(%r8)
    2f51:	00 00                	add    %al,(%rax)
    2f53:	3f                   	(bad)
    2f54:	89 04 2a             	mov    %eax,(%rdx,%rbp,1)
    2f57:	1e                   	(bad)
    2f58:	00 00                	add    %al,(%rax)
    2f5a:	3f                   	(bad)
    2f5b:	80 08 32             	orb    $0x32,(%rax)
    2f5e:	1e                   	(bad)
    2f5f:	00 00                	add    %al,(%rax)
    2f61:	3f                   	(bad)
    2f62:	08 3a                	or     %bh,(%rdx)
    2f64:	1e                   	(bad)
    2f65:	00 00                	add    %al,(%rax)
    2f67:	00 00                	add    %al,(%rax)
    2f69:	00 00                	add    %al,(%rax)
    2f6b:	3d 7f 1f 00 00       	cmp    $0x1f7f,%eax
    2f70:	4c 62                	rex.WR (bad)
    2f72:	00 00                	add    %al,(%rax)
    2f74:	00 00                	add    %al,(%rax)
    2f76:	ff 03                	incl   (%rbx)
    2f78:	0b 3e                	or     (%rsi),%edi
    2f7a:	04 91                	add    $0x91,%al
    2f7c:	d8 00                	fadds  (%rax)
    2f7e:	9f                   	lahf
    2f7f:	89 1f                	mov    %ebx,(%rdi)
    2f81:	00 00                	add    %al,(%rax)
    2f83:	3e 02 30             	ds add (%rax),%dh
    2f86:	9f                   	lahf
    2f87:	a4                   	movsb  %ds:(%rsi),%es:(%rdi)
    2f88:	1f                   	(bad)
    2f89:	00 00                	add    %al,(%rax)
    2f8b:	3b 04 75 80 02 9f ad 	cmp    -0x5260fd80(,%rsi,2),%eax
    2f92:	1f                   	(bad)
    2f93:	00 00                	add    %al,(%rax)
    2f95:	3f                   	(bad)
    2f96:	00 b7 1f 00 00 41    	add    %dh,0x4100001f(%rdi)
    2f9c:	4d 37                	rex.WRB (bad)
    2f9e:	00 00                	add    %al,(%rax)
    2fa0:	00 3b                	add    %bh,(%rbx)
    2fa2:	01 58 ea             	add    %ebx,-0x16(%rax)
    2fa5:	1f                   	(bad)
    2fa6:	00 00                	add    %al,(%rax)
    2fa8:	3c 9d                	cmp    $0x9d,%al
    2faa:	02 f3                	add    %bl,%dh
    2fac:	1f                   	(bad)
    2fad:	00 00                	add    %al,(%rax)
    2faf:	41                   	rex.B
    2fb0:	4d 2b 00             	sub    (%r8),%r8
    2fb3:	00 00                	add    %al,(%rax)
    2fb5:	3c 9c                	cmp    $0x9c,%al
    2fb7:	02 fe                	add    %dh,%bh
    2fb9:	1f                   	(bad)
    2fba:	00 00                	add    %al,(%rax)
    2fbc:	42 06                	rex.X (bad)
    2fbe:	07                   	(bad)
    2fbf:	20 00                	and    %al,(%rax)
    2fc1:	00 41 4d             	add    %al,0x4d(%rcx)
    2fc4:	2b 00                	sub    (%rax),%eax
    2fc6:	00 00                	add    %al,(%rax)
    2fc8:	3b 01                	cmp    (%rcx),%eax
    2fca:	58                   	pop    %rax
    2fcb:	11 20                	adc    %esp,(%rax)
    2fcd:	00 00                	add    %al,(%rax)
    2fcf:	3f                   	(bad)
    2fd0:	80 20 1a             	andb   $0x1a,(%rax)
    2fd3:	20 00                	and    %al,(%rax)
    2fd5:	00 3f                	add    %bh,(%rdi)
    2fd7:	08 23                	or     %ah,(%rbx)
    2fd9:	20 00                	and    %al,(%rax)
    2fdb:	00 00                	add    %al,(%rax)
    2fdd:	00 00                	add    %al,(%rax)
    2fdf:	00 41 4e             	add    %al,0x4e(%rcx)
    2fe2:	1c 00                	sbb    $0x0,%al
    2fe4:	00 00                	add    %al,(%rax)
    2fe6:	3c e6                	cmp    $0xe6,%al
    2fe8:	01 bb 0f 00 00 42    	add    %edi,0x4200000f(%rbx)
    2fee:	06                   	(bad)
    2fef:	c4                   	(bad)
    2ff0:	0f 00 00             	sldt   (%rax)
    2ff3:	41                   	rex.B
    2ff4:	4e 1c 00             	rex.WRX sbb $0x0,%al
    2ff7:	00 00                	add    %al,(%rax)
    2ff9:	3f                   	(bad)
    2ffa:	80 08 ce             	orb    $0xce,(%rax)
    2ffd:	0f 00 00             	sldt   (%rax)
    3000:	3f                   	(bad)
    3001:	08 d7                	or     %dl,%bh
    3003:	0f 00 00             	sldt   (%rax)
    3006:	00 00                	add    %al,(%rax)
    3008:	41                   	rex.B
    3009:	4f 2c 00             	rex.WRXB sub $0x0,%al
    300c:	00 00                	add    %al,(%rax)
    300e:	3c e8                	cmp    $0xe8,%al
    3010:	01 ec                	add    %ebp,%esp
    3012:	0f 00 00             	sldt   (%rax)
    3015:	42 06                	rex.X (bad)
    3017:	f5                   	cmc
    3018:	0f 00 00             	sldt   (%rax)
    301b:	41                   	rex.B
    301c:	4f 2c 00             	rex.WRXB sub $0x0,%al
    301f:	00 00                	add    %al,(%rax)
    3021:	3c e9                	cmp    $0xe9,%al
    3023:	01 ff                	add    %edi,%edi
    3025:	0f 00 00             	sldt   (%rax)
    3028:	3c ea                	cmp    $0xea,%al
    302a:	01 08                	add    %ecx,(%rax)
    302c:	10 00                	adc    %al,(%rax)
    302e:	00 00                	add    %al,(%rax)
    3030:	00 3d f9 1b 00 00    	add    %bh,0x1bf9(%rip)        # 4c2f <_license+0x284a>
    3036:	50                   	push   %rax
    3037:	d4                   	(bad)
    3038:	00 00                	add    %al,(%rax)
    303a:	00 00                	add    %al,(%rax)
    303c:	28 04 0a             	sub    %al,(%rdx,%rcx,1)
    303f:	3e 01 5d 02          	ds add %ebx,0x2(%rbp)
    3043:	1c 00                	sbb    $0x0,%al
    3045:	00 3e                	add    %bh,(%rsi)
    3047:	03 91 10 9f 12 1c    	add    0x1c129f10(%rcx),%edx
    304d:	00 00                	add    %al,(%rax)
    304f:	3e 01 5e 1a          	ds add %ebx,0x1a(%rsi)
    3053:	1c 00                	sbb    $0x0,%al
    3055:	00 3a                	add    %bh,(%rdx)
    3057:	eb 01                	jmp    305a <_license+0xc75>
    3059:	22 1c 00             	and    (%rax,%rax,1),%bl
    305c:	00 3c ec             	add    %bh,(%rsp,%rbp,8)
    305f:	01 32                	add    %esi,(%rdx)
    3061:	1c 00                	sbb    $0x0,%al
    3063:	00 3c ed 01 3b 1c 00 	add    %bh,0x1c3b01(,%rbp,8)
    306a:	00 3c ee             	add    %bh,(%rsi,%rbp,8)
    306d:	01 43 1c             	add    %eax,0x1c(%rbx)
    3070:	00 00                	add    %al,(%rax)
    3072:	3c ef                	cmp    $0xef,%al
    3074:	01 4b 1c             	add    %ecx,0x1c(%rbx)
    3077:	00 00                	add    %al,(%rax)
    3079:	3c f0                	cmp    $0xf0,%al
    307b:	01 53 1c             	add    %edx,0x1c(%rbx)
    307e:	00 00                	add    %al,(%rax)
    3080:	3c f1                	cmp    $0xf1,%al
    3082:	01 2a                	add    %ebp,(%rdx)
    3084:	1c 00                	sbb    $0x0,%al
    3086:	00 3c f2             	add    %bh,(%rdx,%rsi,8)
    3089:	01 5c 1c 00          	add    %ebx,0x0(%rsp,%rbx,1)
    308d:	00 40 66             	add    %al,0x66(%rax)
    3090:	1c 00                	sbb    $0x0,%al
    3092:	00 51 42             	add    %dl,0x42(%rcx)
    3095:	00 00                	add    %al,(%rax)
    3097:	00 11                	add    %dl,(%rcx)
    3099:	75 03                	jne    309e <_license+0xcb9>
    309b:	3a f5                	cmp    %ch,%dh
    309d:	01 73 1c             	add    %esi,0x1c(%rbx)
    30a0:	00 00                	add    %al,(%rax)
    30a2:	3a f3                	cmp    %bl,%dh
    30a4:	01 7b 1c             	add    %edi,0x1c(%rbx)
    30a7:	00 00                	add    %al,(%rax)
    30a9:	3e 01 52 83          	ds add %edx,-0x7d(%rdx)
    30ad:	1c 00                	sbb    $0x0,%al
    30af:	00 3a                	add    %bh,(%rdx)
    30b1:	f4                   	hlt
    30b2:	01 8b 1c 00 00 46    	add    %ecx,0x4600001c(%rbx)
    30b8:	04 93                	add    $0x93,%al
    30ba:	1c 00                	sbb    $0x0,%al
    30bc:	00 3f                	add    %bh,(%rdi)
    30be:	00 9b 1c 00 00 40    	add    %bl,0x4000001c(%rbx)
    30c4:	1b 13                	sbb    (%rbx),%edx
    30c6:	00 00                	add    %al,(%rax)
    30c8:	52                   	push   %rdx
    30c9:	1d 00 00 00 12       	sbb    $0x12000000,%eax
    30ce:	48 03 3e             	add    (%rsi),%rdi
    30d1:	03 70 0e             	add    0xe(%rax),%esi
    30d4:	9f                   	lahf
    30d5:	1f                   	(bad)
    30d6:	13 00                	adc    (%rax),%eax
    30d8:	00 3c f7             	add    %bh,(%rdi,%rsi,8)
    30db:	01 2f                	add    %ebp,(%rdi)
    30dd:	13 00                	adc    (%rax),%eax
    30df:	00 41 52             	add    %al,0x52(%rcx)
    30e2:	1d 00 00 00 3c       	sbb    $0x3c000000,%eax
    30e7:	f6 01 38             	testb  $0x38,(%rcx)
    30ea:	13 00                	adc    (%rax),%eax
    30ec:	00 00                	add    %al,(%rax)
    30ee:	00 00                	add    %al,(%rax)
    30f0:	00 3d 89 1e 00 00    	add    %bh,0x1e89(%rip)        # 4f7f <_license+0x2b9a>
    30f6:	53                   	push   %rbx
    30f7:	b4 00                	mov    $0x0,%ah
    30f9:	00 00                	add    %al,(%rax)
    30fb:	00 24 04             	add    %ah,(%rsp,%rax,1)
    30fe:	0a 3e                	or     (%rsi),%bh
    3100:	01 5d 92             	add    %ebx,-0x6e(%rbp)
    3103:	1e                   	(bad)
    3104:	00 00                	add    %al,(%rax)
    3106:	3e 02 30             	ds add (%rax),%dh
    3109:	9f                   	lahf
    310a:	a2 1e 00 00 3e 03 91 	movabs %al,0x9f1091033e00001e
    3111:	10 9f 
    3113:	aa                   	stos   %al,%es:(%rdi)
    3114:	1e                   	(bad)
    3115:	00 00                	add    %al,(%rax)
    3117:	3e 01 5e b2          	ds add %ebx,-0x4e(%rsi)
    311b:	1e                   	(bad)
    311c:	00 00                	add    %al,(%rax)
    311e:	3a 8f 02 ba 1e 00    	cmp    0x1eba02(%rdi),%cl
    3124:	00 3c 90             	add    %bh,(%rax,%rdx,4)
    3127:	02 c2                	add    %dl,%al
    3129:	1e                   	(bad)
    312a:	00 00                	add    %al,(%rax)
    312c:	3c 91                	cmp    $0x91,%al
    312e:	02 ca                	add    %dl,%cl
    3130:	1e                   	(bad)
    3131:	00 00                	add    %al,(%rax)
    3133:	3c 92                	cmp    $0x92,%al
    3135:	02 d2                	add    %dl,%dl
    3137:	1e                   	(bad)
    3138:	00 00                	add    %al,(%rax)
    313a:	3c 93                	cmp    $0x93,%al
    313c:	02 db                	add    %bl,%bl
    313e:	1e                   	(bad)
    313f:	00 00                	add    %al,(%rax)
    3141:	3c 94                	cmp    $0x94,%al
    3143:	02 e3                	add    %bl,%ah
    3145:	1e                   	(bad)
    3146:	00 00                	add    %al,(%rax)
    3148:	3c 95                	cmp    $0x95,%al
    314a:	02 ec                	add    %ah,%ch
    314c:	1e                   	(bad)
    314d:	00 00                	add    %al,(%rax)
    314f:	3c 96                	cmp    $0x96,%al
    3151:	02 f4                	add    %ah,%dh
    3153:	1e                   	(bad)
    3154:	00 00                	add    %al,(%rax)
    3156:	3c 97                	cmp    $0x97,%al
    3158:	02 fc                	add    %ah,%bh
    315a:	1e                   	(bad)
    315b:	00 00                	add    %al,(%rax)
    315d:	47 11 1f             	rex.RXB adc %r11d,(%r15)
    3160:	00 00                	add    %al,(%rax)
    3162:	54                   	push   %rsp
    3163:	04 00                	add    $0x0,%al
    3165:	00 00                	add    %al,(%rax)
    3167:	11 4f 05             	adc    %ecx,0x5(%rdi)
    316a:	40 2f                	rex (bad)
    316c:	1f                   	(bad)
    316d:	00 00                	add    %al,(%rax)
    316f:	55                   	push   %rbp
    3170:	38 00                	cmp    %al,(%rax)
    3172:	00 00                	add    %al,(%rax)
    3174:	11 53 03             	adc    %edx,0x3(%rbx)
    3177:	3a 98 02 3c 1f 00    	cmp    0x1f3c02(%rax),%bl
    317d:	00 3e                	add    %bh,(%rsi)
    317f:	01 5e 4d             	add    %ebx,0x4d(%rsi)
    3182:	1f                   	(bad)
    3183:	00 00                	add    %al,(%rax)
    3185:	46 04 5d             	rex.RX add $0x5d,%al
    3188:	1f                   	(bad)
    3189:	00 00                	add    %al,(%rax)
    318b:	00 00                	add    %al,(%rax)
    318d:	00 39                	add    %bh,(%rcx)
    318f:	97                   	xchg   %eax,%edi
    3190:	0c 00                	or     $0x0,%al
    3192:	00 19                	add    %bl,(%rcx)
    3194:	00 43 04             	add    %al,0x4(%rbx)
    3197:	0c 3a                	or     $0x3a,%al
    3199:	1c a0                	sbb    $0xa0,%al
    319b:	0c 00                	or     $0x0,%al
    319d:	00 3a                	add    %bh,(%rdx)
    319f:	1d a9 0c 00 00       	sbb    $0xca9,%eax
    31a4:	3a 1e                	cmp    (%rsi),%bl
    31a6:	b2 0c                	mov    $0xc,%dl
    31a8:	00 00                	add    %al,(%rax)
    31aa:	3b 02                	cmp    (%rdx),%eax
    31ac:	91                   	xchg   %eax,%ecx
    31ad:	10 bb 0c 00 00 3b    	adc    %bh,0x3b00000c(%rbx)
    31b3:	03 91 d8 00 c4 0c    	add    0xcc400d8(%rcx),%edx
    31b9:	00 00                	add    %al,(%rax)
    31bb:	3c 1f                	cmp    $0x1f,%al
    31bd:	cd 0c                	int    $0xc
    31bf:	00 00                	add    %al,(%rax)
    31c1:	3c 20                	cmp    $0x20,%al
    31c3:	d6                   	(bad)
    31c4:	0c 00                	or     $0x0,%al
    31c6:	00 3c 21             	add    %bh,(%rcx,%riz,1)
    31c9:	df 0c 00             	fisttps (%rax,%rax,1)
    31cc:	00 3c 22             	add    %bh,(%rdx,%riz,1)
    31cf:	e8 0c 00 00 3c       	call   3c0031e0 <_license+0x3c000dfb>
    31d4:	23 f1                	and    %ecx,%esi
    31d6:	0c 00                	or     $0x0,%al
    31d8:	00 3c 2f             	add    %bh,(%rdi,%rbp,1)
    31db:	fa                   	cli
    31dc:	0c 00                	or     $0x0,%al
    31de:	00 3c 30             	add    %bh,(%rax,%rsi,1)
    31e1:	03 0d 00 00 3c 74    	add    0x743c0000(%rip),%ecx        # 743c31e7 <_license+0x743c0e02>
    31e7:	0c 0d                	or     $0xd,%al
    31e9:	00 00                	add    %al,(%rax)
    31eb:	3c 75                	cmp    $0x75,%al
    31ed:	15 0d 00 00 3c       	adc    $0x3c00000d,%eax
    31f2:	77 1e                	ja     3212 <_license+0xe2d>
    31f4:	0d 00 00 3c 79       	or     $0x793c0000,%eax
    31f9:	27                   	(bad)
    31fa:	0d 00 00 3c 81       	or     $0x813c0000,%eax
    31ff:	01 30                	add    %esi,(%rax)
    3201:	0d 00 00 3c 84       	or     $0x843c0000,%eax
    3206:	03 42 0d             	add    0xd(%rdx),%eax
    3209:	00 00                	add    %al,(%rax)
    320b:	39 11                	cmp    %edx,(%rcx)
    320d:	11 00                	adc    %eax,(%rax)
    320f:	00 1a                	add    %bl,(%rdx)
    3211:	00 ba 02 0c 3a 24    	add    %bh,0x243a0c02(%rdx)
    3217:	1a 11                	sbb    (%rcx),%dl
    3219:	00 00                	add    %al,(%rax)
    321b:	3a 25 2c 11 00 00    	cmp    0x112c(%rip),%ah        # 434d <_license+0x1f68>
    3221:	3a 26                	cmp    (%rsi),%ah
    3223:	47 11 00             	rex.RXB adc %r8d,(%r8)
    3226:	00 3a                	add    %bh,(%rdx)
    3228:	27                   	(bad)
    3229:	50                   	push   %rax
    322a:	11 00                	adc    %eax,(%rax)
    322c:	00 3a                	add    %bh,(%rdx)
    322e:	28 59 11             	sub    %bl,0x11(%rcx)
    3231:	00 00                	add    %al,(%rax)
    3233:	3c 29                	cmp    $0x29,%al
    3235:	6b 11 00             	imul   $0x0,(%rcx),%edx
    3238:	00 3c 2a             	add    %bh,(%rdx,%rbp,1)
    323b:	74 11                	je     324e <_license+0xe69>
    323d:	00 00                	add    %al,(%rax)
    323f:	00 39                	add    %bh,(%rcx)
    3241:	a3 12 00 00 1b 00 bf 	movabs %eax,0xc02bf001b000012
    3248:	02 0c 
    324a:	3a 31                	cmp    (%rcx),%dh
    324c:	ac                   	lods   %ds:(%rsi),%al
    324d:	12 00                	adc    (%rax),%al
    324f:	00 3a                	add    %bh,(%rdx)
    3251:	32 b5 12 00 00 3a    	xor    0x3a000012(%rbp),%dh
    3257:	33 be 12 00 00 3a    	xor    0x3a000012(%rsi),%edi
    325d:	34 c7                	xor    $0xc7,%al
    325f:	12 00                	adc    (%rax),%al
    3261:	00 3a                	add    %bh,(%rdx)
    3263:	35 d0 12 00 00       	xor    $0x12d0,%eax
    3268:	39 42 13             	cmp    %eax,0x13(%rdx)
    326b:	00 00                	add    %al,(%rax)
    326d:	1c 0e                	sbb    $0xe,%al
    326f:	5a                   	pop    %rdx
    3270:	01 0c 3a             	add    %ecx,(%rdx,%rdi,1)
    3273:	2b 4a 13             	sub    0x13(%rdx),%ecx
    3276:	00 00                	add    %al,(%rax)
    3278:	3a 2c 52             	cmp    (%rdx,%rdx,2),%ch
    327b:	13 00                	adc    (%rax),%eax
    327d:	00 3a                	add    %bh,(%rdx)
    327f:	52                   	push   %rdx
    3280:	5a                   	pop    %rdx
    3281:	13 00                	adc    (%rax),%eax
    3283:	00 3a                	add    %bh,(%rdx)
    3285:	2d 62 13 00 00       	sub    $0x1362,%eax
    328a:	3c 2e                	cmp    $0x2e,%al
    328c:	6a 13                	push   $0x13
    328e:	00 00                	add    %al,(%rax)
    3290:	3c 53                	cmp    $0x53,%al
    3292:	72 13                	jb     32a7 <_license+0xec2>
    3294:	00 00                	add    %al,(%rax)
    3296:	41 56                	push   %r14
    3298:	2f                   	(bad)
    3299:	00 00                	add    %al,(%rax)
    329b:	00 3f                	add    %bh,(%rdi)
    329d:	8c 04 7b             	mov    %es,(%rbx,%rdi,2)
    32a0:	13 00                	adc    (%rax),%eax
    32a2:	00 3c 50             	add    %bh,(%rax,%rdx,2)
    32a5:	83 13 00             	adcl   $0x0,(%rbx)
    32a8:	00 3c 51             	add    %bh,(%rcx,%rdx,2)
    32ab:	8c 13                	mov    %ss,(%rbx)
    32ad:	00 00                	add    %al,(%rax)
    32af:	41 56                	push   %r14
    32b1:	10 00                	adc    %al,(%rax)
    32b3:	00 00                	add    %al,(%rax)
    32b5:	3c 4f                	cmp    $0x4f,%al
    32b7:	95                   	xchg   %eax,%ebp
    32b8:	13 00                	adc    (%rax),%eax
    32ba:	00 42 06             	add    %al,0x6(%rdx)
    32bd:	9d                   	popf
    32be:	13 00                	adc    (%rax),%eax
    32c0:	00 41 56             	add    %al,0x56(%rcx)
    32c3:	10 00                	adc    %al,(%rax)
    32c5:	00 00                	add    %al,(%rax)
    32c7:	3f                   	(bad)
    32c8:	8c 04 a6             	mov    %es,(%rsi,%riz,4)
    32cb:	13 00                	adc    (%rax),%eax
    32cd:	00 3f                	add    %bh,(%rdi)
    32cf:	80 08 ae             	orb    $0xae,(%rax)
    32d2:	13 00                	adc    (%rax),%eax
    32d4:	00 3f                	add    %bh,(%rdi)
    32d6:	08 b6 13 00 00 00    	or     %dh,0x13(%rsi)
    32dc:	00 00                	add    %al,(%rax)
    32de:	00 39                	add    %bh,(%rcx)
    32e0:	83 11 00             	adcl   $0x0,(%rcx)
    32e3:	00 1d 0e 5c 01 0c    	add    %bl,0xc015c0e(%rip)        # c018ef7 <_license+0xc016b12>
    32e9:	3a 36                	cmp    (%rsi),%dh
    32eb:	8c 11                	mov    %ss,(%rcx)
    32ed:	00 00                	add    %al,(%rax)
    32ef:	3a 37                	cmp    (%rdi),%dh
    32f1:	95                   	xchg   %eax,%ebp
    32f2:	11 00                	adc    %eax,(%rax)
    32f4:	00 3a                	add    %bh,(%rdx)
    32f6:	38 9e 11 00 00 3a    	cmp    %bl,0x3a000011(%rsi)
    32fc:	39 a7 11 00 00 3c    	cmp    %esp,0x3c000011(%rdi)
    3302:	3a b0 11 00 00 3c    	cmp    0x3c000011(%rax),%dh
    3308:	72 b9                	jb     32c3 <_license+0xede>
    330a:	11 00                	adc    %eax,(%rax)
    330c:	00 3d da 12 00 00    	add    %bh,0x12da(%rip)        # 45ec <_license+0x2207>
    3312:	57                   	push   %rdi
    3313:	67 00 00             	add    %al,(%eax)
    3316:	00 0e                	add    %cl,(%rsi)
    3318:	1f                   	(bad)
    3319:	01 0c 3e             	add    %ecx,(%rsi,%rdi,1)
    331c:	01 53 e2             	add    %edx,-0x1e(%rbx)
    331f:	12 00                	adc    (%rax),%al
    3321:	00 3e                	add    %bh,(%rsi)
    3323:	01 5f ea             	add    %ebx,-0x16(%rdi)
    3326:	12 00                	adc    (%rax),%al
    3328:	00 3c 3b             	add    %bh,(%rbx,%rdi,1)
    332b:	f2 12 00             	repnz adc (%rax),%al
    332e:	00 3f                	add    %bh,(%rdi)
    3330:	00 fa                	add    %bh,%dl
    3332:	12 00                	adc    (%rax),%al
    3334:	00 3c 3c             	add    %bh,(%rsp,%rdi,1)
    3337:	02 13                	add    (%rbx),%dl
    3339:	00 00                	add    %al,(%rax)
    333b:	3c 3d                	cmp    $0x3d,%al
    333d:	0a 13                	or     (%rbx),%dl
    333f:	00 00                	add    %al,(%rax)
    3341:	40 1b 13             	rex sbb (%rbx),%edx
    3344:	00 00                	add    %al,(%rax)
    3346:	58                   	pop    %rax
    3347:	3c 00                	cmp    $0x0,%al
    3349:	00 00                	add    %al,(%rax)
    334b:	0e                   	(bad)
    334c:	59                   	pop    %rcx
    334d:	03 3c 3f             	add    (%rdi,%rdi,1),%edi
    3350:	2f                   	(bad)
    3351:	13 00                	adc    (%rax),%eax
    3353:	00 41 58             	add    %al,0x58(%rcx)
    3356:	3c 00                	cmp    $0x0,%al
    3358:	00 00                	add    %al,(%rax)
    335a:	3c 3e                	cmp    $0x3e,%al
    335c:	38 13                	cmp    %dl,(%rbx)
    335e:	00 00                	add    %al,(%rax)
    3360:	00 00                	add    %al,(%rax)
    3362:	00 41 59             	add    %al,0x59(%rcx)
    3365:	28 00                	sub    %al,(%rax)
    3367:	00 00                	add    %al,(%rax)
    3369:	3f                   	(bad)
    336a:	8d 04 c3             	lea    (%rbx,%rax,8),%eax
    336d:	11 00                	adc    %eax,(%rax)
    336f:	00 3c 71             	add    %bh,(%rcx,%rsi,2)
    3372:	cc                   	int3
    3373:	11 00                	adc    %eax,(%rax)
    3375:	00 41 59             	add    %al,0x59(%rcx)
    3378:	10 00                	adc    %al,(%rax)
    337a:	00 00                	add    %al,(%rax)
    337c:	3c 70                	cmp    $0x70,%al
    337e:	df 11                	fists  (%rcx)
    3380:	00 00                	add    %al,(%rax)
    3382:	42 06                	rex.X (bad)
    3384:	e8 11 00 00 41       	call   4100339a <_license+0x41000fb5>
    3389:	59                   	pop    %rcx
    338a:	10 00                	adc    %al,(%rax)
    338c:	00 00                	add    %al,(%rax)
    338e:	3f                   	(bad)
    338f:	8d 04 f2             	lea    (%rdx,%rsi,8),%eax
    3392:	11 00                	adc    %eax,(%rax)
    3394:	00 3f                	add    %bh,(%rdi)
    3396:	80 08 fb             	orb    $0xfb,(%rax)
    3399:	11 00                	adc    %eax,(%rax)
    339b:	00 3f                	add    %bh,(%rdi)
    339d:	08 04 12             	or     %al,(%rdx,%rdx,1)
    33a0:	00 00                	add    %al,(%rax)
    33a2:	00 00                	add    %al,(%rax)
    33a4:	00 00                	add    %al,(%rax)
    33a6:	00 3d f6 14 00 00    	add    %bh,0x14f6(%rip)        # 48a2 <_license+0x24bd>
    33ac:	5a                   	pop    %rdx
    33ad:	2a 00                	sub    (%rax),%al
    33af:	00 00                	add    %al,(%rax)
    33b1:	00 f3                	add    %dh,%bl
    33b3:	02 0a                	add    (%rdx),%cl
    33b5:	3e 01 53 ff          	ds add %edx,-0x1(%rbx)
    33b9:	14 00                	adc    $0x0,%al
    33bb:	00 3e                	add    %bh,(%rsi)
    33bd:	01 5f 07             	add    %ebx,0x7(%rdi)
    33c0:	15 00 00 3e 02       	adc    $0x23e0000,%eax
    33c5:	31 9f 0f 15 00 00    	xor    %ebx,0x150f(%rdi)
    33cb:	3e 03 91 10 9f 17 15 	ds add 0x15179f10(%rcx),%edx
    33d2:	00 00                	add    %al,(%rax)
    33d4:	3b 11                	cmp    (%rcx),%edx
    33d6:	72 00                	jb     33d8 <_license+0xff3>
    33d8:	10 ff                	adc    %bh,%bh
    33da:	01 1a                	add    %ebx,(%rdx)
    33dc:	a8 ba                	test   $0xba,%al
    33de:	80 80 00 a8 bf 80 80 	addb   $0x80,-0x7f405800(%rax)
    33e5:	00 9f 1f 15 00 00    	add    %bl,0x151f(%rdi)
    33eb:	3c 41                	cmp    $0x41,%al
    33ed:	27                   	(bad)
    33ee:	15 00 00 40 19       	adc    $0x19400000,%eax
    33f3:	16                   	(bad)
    33f4:	00 00                	add    %al,(%rax)
    33f6:	5b                   	pop    %rbx
    33f7:	02 00                	add    (%rax),%al
    33f9:	00 00                	add    %al,(%rax)
    33fb:	0c 7b                	or     $0x7b,%al
    33fd:	0f 3e                	(bad)
    33ff:	02 31                	add    (%rcx),%dh
    3401:	9f                   	lahf
    3402:	22 16                	and    (%rsi),%dl
    3404:	00 00                	add    %al,(%rax)
    3406:	3e 11 72 00          	ds adc %esi,0x0(%rdx)
    340a:	10 ff                	adc    %bh,%bh
    340c:	01 1a                	add    %ebx,(%rdx)
    340e:	a8 ba                	test   $0xba,%al
    3410:	80 80 00 a8 bf 80 80 	addb   $0x80,-0x7f405800(%rax)
    3417:	00 9f 2a 16 00 00    	add    %bl,0x162a(%rdi)
    341d:	00 00                	add    %al,(%rax)
    341f:	3d bd 18 00 00       	cmp    $0x18bd,%eax
    3424:	5c                   	pop    %rsp
    3425:	17                   	(bad)
    3426:	00 00                	add    %al,(%rax)
    3428:	00 00                	add    %al,(%rax)
    342a:	f7 02 0a 3e 01 53    	testl  $0x53013e0a,(%rdx)
    3430:	c6                   	(bad)
    3431:	18 00                	sbb    %al,(%rax)
    3433:	00 3e                	add    %bh,(%rsi)
    3435:	01 5f ce             	add    %ebx,-0x32(%rdi)
    3438:	18 00                	sbb    %al,(%rax)
    343a:	00 3e                	add    %bh,(%rsi)
    343c:	02 31                	add    (%rcx),%dh
    343e:	9f                   	lahf
    343f:	d6                   	(bad)
    3440:	18 00                	sbb    %al,(%rax)
    3442:	00 3e                	add    %bh,(%rsi)
    3444:	03 91 10 9f de 18    	add    0x18de9f10(%rcx),%edx
    344a:	00 00                	add    %al,(%rax)
    344c:	3b 11                	cmp    (%rcx),%edx
    344e:	72 00                	jb     3450 <_license+0x106b>
    3450:	10 ff                	adc    %bh,%bh
    3452:	01 1a                	add    %ebx,(%rdx)
    3454:	a8 ba                	test   $0xba,%al
    3456:	80 80 00 a8 bf 80 80 	addb   $0x80,-0x7f405800(%rax)
    345d:	00 9f e6 18 00 00    	add    %bl,0x18e6(%rdi)
    3463:	3c 6f                	cmp    $0x6f,%al
    3465:	ee                   	out    %al,(%dx)
    3466:	18 00                	sbb    %al,(%rax)
    3468:	00 40 19             	add    %al,0x19(%rax)
    346b:	16                   	(bad)
    346c:	00 00                	add    %al,(%rax)
    346e:	5d                   	pop    %rbp
    346f:	02 00                	add    (%rax),%al
    3471:	00 00                	add    %al,(%rax)
    3473:	0c 61                	or     $0x61,%al
    3475:	0f 3e                	(bad)
    3477:	02 31                	add    (%rcx),%dh
    3479:	9f                   	lahf
    347a:	22 16                	and    (%rsi),%dl
    347c:	00 00                	add    %al,(%rax)
    347e:	3e 11 72 00          	ds adc %esi,0x0(%rdx)
    3482:	10 ff                	adc    %bh,%bh
    3484:	01 1a                	add    %ebx,(%rdx)
    3486:	a8 ba                	test   $0xba,%al
    3488:	80 80 00 a8 bf 80 80 	addb   $0x80,-0x7f405800(%rax)
    348f:	00 9f 2a 16 00 00    	add    %bl,0x162a(%rdi)
    3495:	00 00                	add    %al,(%rax)
    3497:	41 5e                	pop    %r14
    3499:	1b 01                	sbb    (%rcx),%eax
    349b:	00 00                	add    %al,(%rax)
    349d:	3c 54                	cmp    $0x54,%al
    349f:	67 0d 00 00 39 75    	addr32 or $0x75390000,%eax
    34a5:	16                   	(bad)
    34a6:	00 00                	add    %al,(%rax)
    34a8:	1e                   	(bad)
    34a9:	00 e9                	add    %ch,%cl
    34ab:	02 0e                	add    (%rsi),%cl
    34ad:	3a 55 7e             	cmp    0x7e(%rbp),%dl
    34b0:	16                   	(bad)
    34b1:	00 00                	add    %al,(%rax)
    34b3:	3a 56 86             	cmp    -0x7a(%rsi),%dl
    34b6:	16                   	(bad)
    34b7:	00 00                	add    %al,(%rax)
    34b9:	3b 03                	cmp    (%rbx),%eax
    34bb:	91                   	xchg   %eax,%ecx
    34bc:	c0 00 96             	rolb   $0x96,(%rax)
    34bf:	16                   	(bad)
    34c0:	00 00                	add    %al,(%rax)
    34c2:	3c 58                	cmp    $0x58,%al
    34c4:	9f                   	lahf
    34c5:	16                   	(bad)
    34c6:	00 00                	add    %al,(%rax)
    34c8:	3c 5a                	cmp    $0x5a,%al
    34ca:	a8 16                	test   $0x16,%al
    34cc:	00 00                	add    %al,(%rax)
    34ce:	41 5f                	pop    %r15
    34d0:	1b 00                	sbb    (%rax),%eax
    34d2:	00 00                	add    %al,(%rax)
    34d4:	3c 57                	cmp    $0x57,%al
    34d6:	b1 16                	mov    $0x16,%cl
    34d8:	00 00                	add    %al,(%rax)
    34da:	42 01 b9 16 00 00 00 	rex.X add %edi,0x16(%rcx)
    34e1:	41 60                	rex.B (bad)
    34e3:	1d 00 00 00 3f       	sbb    $0x3f000000,%eax
    34e8:	86 04 c3             	xchg   %al,(%rbx,%rax,8)
    34eb:	16                   	(bad)
    34ec:	00 00                	add    %al,(%rax)
    34ee:	41 60                	rex.B (bad)
    34f0:	10 00                	adc    %al,(%rax)
    34f2:	00 00                	add    %al,(%rax)
    34f4:	3c 59                	cmp    $0x59,%al
    34f6:	cc                   	int3
    34f7:	16                   	(bad)
    34f8:	00 00                	add    %al,(%rax)
    34fa:	42 06                	rex.X (bad)
    34fc:	d4                   	(bad)
    34fd:	16                   	(bad)
    34fe:	00 00                	add    %al,(%rax)
    3500:	41 60                	rex.B (bad)
    3502:	10 00                	adc    %al,(%rax)
    3504:	00 00                	add    %al,(%rax)
    3506:	3f                   	(bad)
    3507:	86 04 dd 16 00 00 3f 	xchg   %al,0x3f000016(,%rbx,8)
    350e:	80 08 e5             	orb    $0xe5,(%rax)
    3511:	16                   	(bad)
    3512:	00 00                	add    %al,(%rax)
    3514:	3f                   	(bad)
    3515:	08 ed                	or     %ch,%ch
    3517:	16                   	(bad)
    3518:	00 00                	add    %al,(%rax)
    351a:	00 00                	add    %al,(%rax)
    351c:	00 00                	add    %al,(%rax)
    351e:	39 43 17             	cmp    %eax,0x17(%rbx)
    3521:	00 00                	add    %al,(%rax)
    3523:	1f                   	(bad)
    3524:	00 ed                	add    %ch,%ch
    3526:	02 0c 3e             	add    (%rsi,%rdi,1),%cl
    3529:	01 5d 5f             	add    %ebx,0x5f(%rbp)
    352c:	17                   	(bad)
    352d:	00 00                	add    %al,(%rax)
    352f:	3c 5b                	cmp    $0x5b,%al
    3531:	83 17 00             	adcl   $0x0,(%rdi)
    3534:	00 3c 5c             	add    %bh,(%rsp,%rbx,2)
    3537:	8c 17                	mov    %ss,(%rdi)
    3539:	00 00                	add    %al,(%rax)
    353b:	3c 5e                	cmp    $0x5e,%al
    353d:	95                   	xchg   %eax,%ebp
    353e:	17                   	(bad)
    353f:	00 00                	add    %al,(%rax)
    3541:	41 61                	rex.B (bad)
    3543:	61                   	(bad)
    3544:	00 00                	add    %al,(%rax)
    3546:	00 42 36             	add    %al,0x36(%rdx)
    3549:	9f                   	lahf
    354a:	17                   	(bad)
    354b:	00 00                	add    %al,(%rax)
    354d:	3d fe 16 00 00       	cmp    $0x16fe,%eax
    3552:	61                   	(bad)
    3553:	27                   	(bad)
    3554:	00 00                	add    %al,(%rax)
    3556:	00 00                	add    %al,(%rax)
    3558:	4f 01 0e             	rex.WRXB add %r9,(%r14)
    355b:	3e 01 53 07          	ds add %edx,0x7(%rbx)
    355f:	17                   	(bad)
    3560:	00 00                	add    %al,(%rax)
    3562:	3e 01 5f 0f          	ds add %ebx,0xf(%rdi)
    3566:	17                   	(bad)
    3567:	00 00                	add    %al,(%rax)
    3569:	44                   	rex.R
    356a:	36 17                	ss (bad)
    356c:	17                   	(bad)
    356d:	00 00                	add    %al,(%rax)
    356f:	3e 02 31             	ds add (%rcx),%dh
    3572:	9f                   	lahf
    3573:	20 17                	and    %dl,(%rdi)
    3575:	00 00                	add    %al,(%rax)
    3577:	00 3d 4a 18 00 00    	add    %bh,0x184a(%rip)        # 4dc7 <_license+0x29e2>
    357d:	62                   	(bad)
    357e:	3a 00                	cmp    (%rax),%al
    3580:	00 00                	add    %al,(%rax)
    3582:	00 50 01             	add    %dl,0x1(%rax)
    3585:	0a 3e                	or     (%rsi),%bh
    3587:	01 5d 53             	add    %ebx,0x53(%rbp)
    358a:	18 00                	sbb    %al,(%rax)
    358c:	00 3e                	add    %bh,(%rsi)
    358e:	02 30                	add    (%rax),%dh
    3590:	9f                   	lahf
    3591:	6b 18 00             	imul   $0x0,(%rax),%ebx
    3594:	00 3b                	add    %bh,(%rbx)
    3596:	01 53 74             	add    %edx,0x74(%rbx)
    3599:	18 00                	sbb    %al,(%rax)
    359b:	00 3b                	add    %bh,(%rbx)
    359d:	03 73 28             	add    0x28(%rbx),%esi
    35a0:	9f                   	lahf
    35a1:	7d 18                	jge    35bb <_license+0x11d6>
    35a3:	00 00                	add    %al,(%rax)
    35a5:	00 00                	add    %al,(%rax)
    35a7:	41 63 10             	movsxd (%r8),%edx
    35aa:	00 00                	add    %al,(%rax)
    35ac:	00 3c 5d c3 17 00 00 	add    %bh,0x17c3(,%rbx,2)
    35b3:	42 06                	rex.X (bad)
    35b5:	cc                   	int3
    35b6:	17                   	(bad)
    35b7:	00 00                	add    %al,(%rax)
    35b9:	41 63 10             	movsxd (%r8),%edx
    35bc:	00 00                	add    %al,(%rax)
    35be:	00 3f                	add    %bh,(%rdi)
    35c0:	8a 04 d6             	mov    (%rsi,%rdx,8),%al
    35c3:	17                   	(bad)
    35c4:	00 00                	add    %al,(%rax)
    35c6:	3f                   	(bad)
    35c7:	80 08 df             	orb    $0xdf,(%rax)
    35ca:	17                   	(bad)
    35cb:	00 00                	add    %al,(%rax)
    35cd:	3f                   	(bad)
    35ce:	08 e8                	or     %ch,%al
    35d0:	17                   	(bad)
    35d1:	00 00                	add    %al,(%rax)
    35d3:	00 00                	add    %al,(%rax)
    35d5:	41                   	rex.B
    35d6:	64 19 00             	sbb    %eax,%fs:(%rax)
    35d9:	00 00                	add    %al,(%rax)
    35db:	3f                   	(bad)
    35dc:	8e 04 f4             	mov    (%rsp,%rsi,8),%es
    35df:	17                   	(bad)
    35e0:	00 00                	add    %al,(%rax)
    35e2:	3c 60                	cmp    $0x60,%al
    35e4:	fe                   	(bad)
    35e5:	17                   	(bad)
    35e6:	00 00                	add    %al,(%rax)
    35e8:	41                   	rex.B
    35e9:	64 10 00             	adc    %al,%fs:(%rax)
    35ec:	00 00                	add    %al,(%rax)
    35ee:	3c 5f                	cmp    $0x5f,%al
    35f0:	13 18                	adc    (%rax),%ebx
    35f2:	00 00                	add    %al,(%rax)
    35f4:	42 06                	rex.X (bad)
    35f6:	1c 18                	sbb    $0x18,%al
    35f8:	00 00                	add    %al,(%rax)
    35fa:	41                   	rex.B
    35fb:	64 10 00             	adc    %al,%fs:(%rax)
    35fe:	00 00                	add    %al,(%rax)
    3600:	3f                   	(bad)
    3601:	8e 04 26             	mov    (%rsi,%riz,1),%es
    3604:	18 00                	sbb    %al,(%rax)
    3606:	00 3f                	add    %bh,(%rdi)
    3608:	80 08 2f             	orb    $0x2f,(%rax)
    360b:	18 00                	sbb    %al,(%rax)
    360d:	00 3f                	add    %bh,(%rdi)
    360f:	08 38                	or     %bh,(%rax)
    3611:	18 00                	sbb    %al,(%rax)
    3613:	00 00                	add    %al,(%rax)
    3615:	00 00                	add    %al,(%rax)
    3617:	00 00                	add    %al,(%rax)
    3619:	41                   	rex.B
    361a:	65 33 01             	xor    %gs:(%rcx),%eax
    361d:	00 00                	add    %al,(%rax)
    361f:	3c 61                	cmp    $0x61,%al
    3621:	72 0d                	jb     3630 <_license+0x124b>
    3623:	00 00                	add    %al,(%rax)
    3625:	39 75 16             	cmp    %esi,0x16(%rbp)
    3628:	00 00                	add    %al,(%rax)
    362a:	20 00                	and    %al,(%rax)
    362c:	e1 02                	loope  3630 <_license+0x124b>
    362e:	0e                   	(bad)
    362f:	3a 62 7e             	cmp    0x7e(%rdx),%ah
    3632:	16                   	(bad)
    3633:	00 00                	add    %al,(%rax)
    3635:	3a 63 86             	cmp    -0x7a(%rbx),%ah
    3638:	16                   	(bad)
    3639:	00 00                	add    %al,(%rax)
    363b:	3b 03                	cmp    (%rbx),%eax
    363d:	91                   	xchg   %eax,%ecx
    363e:	c0 00 96             	rolb   $0x96,(%rax)
    3641:	16                   	(bad)
    3642:	00 00                	add    %al,(%rax)
    3644:	3c 65                	cmp    $0x65,%al
    3646:	9f                   	lahf
    3647:	16                   	(bad)
    3648:	00 00                	add    %al,(%rax)
    364a:	3c 67                	cmp    $0x67,%al
    364c:	a8 16                	test   $0x16,%al
    364e:	00 00                	add    %al,(%rax)
    3650:	41                   	rex.B
    3651:	66 1b 00             	sbb    (%rax),%ax
    3654:	00 00                	add    %al,(%rax)
    3656:	3c 64                	cmp    $0x64,%al
    3658:	b1 16                	mov    $0x16,%cl
    365a:	00 00                	add    %al,(%rax)
    365c:	42 01 b9 16 00 00 00 	rex.X add %edi,0x16(%rcx)
    3663:	41                   	rex.B
    3664:	67 1d 00 00 00 3f    	addr32 sbb $0x3f000000,%eax
    366a:	86 04 c3             	xchg   %al,(%rbx,%rax,8)
    366d:	16                   	(bad)
    366e:	00 00                	add    %al,(%rax)
    3670:	41                   	rex.B
    3671:	67 10 00             	adc    %al,(%eax)
    3674:	00 00                	add    %al,(%rax)
    3676:	3c 66                	cmp    $0x66,%al
    3678:	cc                   	int3
    3679:	16                   	(bad)
    367a:	00 00                	add    %al,(%rax)
    367c:	42 06                	rex.X (bad)
    367e:	d4                   	(bad)
    367f:	16                   	(bad)
    3680:	00 00                	add    %al,(%rax)
    3682:	41                   	rex.B
    3683:	67 10 00             	adc    %al,(%eax)
    3686:	00 00                	add    %al,(%rax)
    3688:	3f                   	(bad)
    3689:	86 04 dd 16 00 00 3f 	xchg   %al,0x3f000016(,%rbx,8)
    3690:	80 08 e5             	orb    $0xe5,(%rax)
    3693:	16                   	(bad)
    3694:	00 00                	add    %al,(%rax)
    3696:	3f                   	(bad)
    3697:	08 ed                	or     %ch,%ch
    3699:	16                   	(bad)
    369a:	00 00                	add    %al,(%rax)
    369c:	00 00                	add    %al,(%rax)
    369e:	00 00                	add    %al,(%rax)
    36a0:	39 43 17             	cmp    %eax,0x17(%rbx)
    36a3:	00 00                	add    %al,(%rax)
    36a5:	21 00                	and    %eax,(%rax)
    36a7:	e5 02                	in     $0x2,%eax
    36a9:	0c 3e                	or     $0x3e,%al
    36ab:	01 5d 5f             	add    %ebx,0x5f(%rbp)
    36ae:	17                   	(bad)
    36af:	00 00                	add    %al,(%rax)
    36b1:	3c 69                	cmp    $0x69,%al
    36b3:	83 17 00             	adcl   $0x0,(%rdi)
    36b6:	00 3c 6a             	add    %bh,(%rdx,%rbp,2)
    36b9:	8c 17                	mov    %ss,(%rdi)
    36bb:	00 00                	add    %al,(%rax)
    36bd:	3c 6c                	cmp    $0x6c,%al
    36bf:	95                   	xchg   %eax,%ebp
    36c0:	17                   	(bad)
    36c1:	00 00                	add    %al,(%rax)
    36c3:	41 68 74 00 00 00    	rex.B push $0x74
    36c9:	42                   	rex.X
    36ca:	36 ab                	ss stos %eax,%es:(%rdi)
    36cc:	17                   	(bad)
    36cd:	00 00                	add    %al,(%rax)
    36cf:	3d fe 16 00 00       	cmp    $0x16fe,%eax
    36d4:	68 3a 00 00 00       	push   $0x3a
    36d9:	00 3b                	add    %bh,(%rbx)
    36db:	01 10                	add    %edx,(%rax)
    36dd:	3e 01 53 07          	ds add %edx,0x7(%rbx)
    36e1:	17                   	(bad)
    36e2:	00 00                	add    %al,(%rax)
    36e4:	3e 01 5f 0f          	ds add %ebx,0xf(%rdi)
    36e8:	17                   	(bad)
    36e9:	00 00                	add    %al,(%rax)
    36eb:	44                   	rex.R
    36ec:	36 17                	ss (bad)
    36ee:	17                   	(bad)
    36ef:	00 00                	add    %al,(%rax)
    36f1:	3e 02 30             	ds add (%rax),%dh
    36f4:	9f                   	lahf
    36f5:	20 17                	and    %dl,(%rdi)
    36f7:	00 00                	add    %al,(%rax)
    36f9:	41 68 3a 00 00 00    	rex.B push $0x3a
    36ff:	3c 68                	cmp    $0x68,%al
    3701:	39 17                	cmp    %edx,(%rdi)
    3703:	00 00                	add    %al,(%rax)
    3705:	00 00                	add    %al,(%rax)
    3707:	3d 4a 18 00 00       	cmp    $0x184a,%eax
    370c:	69 3a 00 00 00 00    	imul   $0x0,(%rdx),%edi
    3712:	3c 01                	cmp    $0x1,%al
    3714:	0c 3e                	or     $0x3e,%al
    3716:	01 5d 53             	add    %ebx,0x53(%rbp)
    3719:	18 00                	sbb    %al,(%rax)
    371b:	00 3e                	add    %bh,(%rsi)
    371d:	02 31                	add    (%rcx),%dh
    371f:	9f                   	lahf
    3720:	6b 18 00             	imul   $0x0,(%rax),%ebx
    3723:	00 3b                	add    %bh,(%rbx)
    3725:	01 53 74             	add    %edx,0x74(%rbx)
    3728:	18 00                	sbb    %al,(%rax)
    372a:	00 3b                	add    %bh,(%rbx)
    372c:	03 73 28             	add    0x28(%rbx),%esi
    372f:	9f                   	lahf
    3730:	7d 18                	jge    374a <_license+0x1365>
    3732:	00 00                	add    %al,(%rax)
    3734:	00 00                	add    %al,(%rax)
    3736:	41 6a 10             	rex.B push $0x10
    3739:	00 00                	add    %al,(%rax)
    373b:	00 3c 6b             	add    %bh,(%rbx,%rbp,2)
    373e:	c3                   	ret
    373f:	17                   	(bad)
    3740:	00 00                	add    %al,(%rax)
    3742:	42 06                	rex.X (bad)
    3744:	cc                   	int3
    3745:	17                   	(bad)
    3746:	00 00                	add    %al,(%rax)
    3748:	41 6a 10             	rex.B push $0x10
    374b:	00 00                	add    %al,(%rax)
    374d:	00 3f                	add    %bh,(%rdi)
    374f:	8a 04 d6             	mov    (%rsi,%rdx,8),%al
    3752:	17                   	(bad)
    3753:	00 00                	add    %al,(%rax)
    3755:	3f                   	(bad)
    3756:	80 08 df             	orb    $0xdf,(%rax)
    3759:	17                   	(bad)
    375a:	00 00                	add    %al,(%rax)
    375c:	3f                   	(bad)
    375d:	08 e8                	or     %ch,%al
    375f:	17                   	(bad)
    3760:	00 00                	add    %al,(%rax)
    3762:	00 00                	add    %al,(%rax)
    3764:	41 6b 1e 00          	imul   $0x0,(%r14),%ebx
    3768:	00 00                	add    %al,(%rax)
    376a:	3f                   	(bad)
    376b:	8e 04 f4             	mov    (%rsp,%rsi,8),%es
    376e:	17                   	(bad)
    376f:	00 00                	add    %al,(%rax)
    3771:	3c 6e                	cmp    $0x6e,%al
    3773:	fe                   	(bad)
    3774:	17                   	(bad)
    3775:	00 00                	add    %al,(%rax)
    3777:	41 6b 10 00          	imul   $0x0,(%r8),%edx
    377b:	00 00                	add    %al,(%rax)
    377d:	3c 6d                	cmp    $0x6d,%al
    377f:	13 18                	adc    (%rax),%ebx
    3781:	00 00                	add    %al,(%rax)
    3783:	42 06                	rex.X (bad)
    3785:	1c 18                	sbb    $0x18,%al
    3787:	00 00                	add    %al,(%rax)
    3789:	41 6b 10 00          	imul   $0x0,(%r8),%edx
    378d:	00 00                	add    %al,(%rax)
    378f:	3f                   	(bad)
    3790:	8e 04 26             	mov    (%rsi,%riz,1),%es
    3793:	18 00                	sbb    %al,(%rax)
    3795:	00 3f                	add    %bh,(%rdi)
    3797:	80 08 2f             	orb    $0x2f,(%rax)
    379a:	18 00                	sbb    %al,(%rax)
    379c:	00 3f                	add    %bh,(%rdi)
    379e:	08 38                	or     %bh,(%rax)
    37a0:	18 00                	sbb    %al,(%rax)
    37a2:	00 00                	add    %al,(%rax)
    37a4:	00 00                	add    %al,(%rax)
    37a6:	00 00                	add    %al,(%rax)
    37a8:	41 6c                	rex.B insb (%dx),%es:(%rdi)
    37aa:	1c 00                	sbb    $0x0,%al
    37ac:	00 00                	add    %al,(%rax)
    37ae:	3c 73                	cmp    $0x73,%al
    37b0:	7d 0d                	jge    37bf <_license+0x13da>
    37b2:	00 00                	add    %al,(%rax)
    37b4:	42 01 86 0d 00 00 00 	rex.X add %eax,0xd(%rsi)
    37bb:	41 6d                	rex.B insl (%dx),%es:(%rdi)
    37bd:	12 00                	adc    (%rax),%al
    37bf:	00 00                	add    %al,(%rax)
    37c1:	3c 85                	cmp    $0x85,%al
    37c3:	01 91 0d 00 00 42    	add    %edx,0x4200000d(%rcx)
    37c9:	01 9a 0d 00 00 00    	add    %ebx,0xd(%rdx)
    37cf:	41 6e                	rex.B outsb %ds:(%rsi),(%dx)
    37d1:	11 00                	adc    %eax,(%rax)
    37d3:	00 00                	add    %al,(%rax)
    37d5:	3c 76                	cmp    $0x76,%al
    37d7:	a5                   	movsl  %ds:(%rsi),%es:(%rdi)
    37d8:	0d 00 00 42 06       	or     $0x6420000,%eax
    37dd:	ae                   	scas   %es:(%rdi),%al
    37de:	0d 00 00 41 6e       	or     $0x6e410000,%eax
    37e3:	11 00                	adc    %eax,(%rax)
    37e5:	00 00                	add    %al,(%rax)
    37e7:	3f                   	(bad)
    37e8:	80 04 b8 0d          	addb   $0xd,(%rax,%rdi,4)
    37ec:	00 00                	add    %al,(%rax)
    37ee:	3f                   	(bad)
    37ef:	80 08 c1             	orb    $0xc1,(%rax)
    37f2:	0d 00 00 3f 08       	or     $0x83f0000,%eax
    37f7:	ca 0d 00             	lret   $0xd
    37fa:	00 00                	add    %al,(%rax)
    37fc:	00 41 6f             	add    %al,0x6f(%rcx)
    37ff:	0c 00                	or     $0x0,%al
    3801:	00 00                	add    %al,(%rax)
    3803:	3c 78                	cmp    $0x78,%al
    3805:	d6                   	(bad)
    3806:	0d 00 00 00 43       	or     $0x43000000,%eax
    380b:	22 3c 7b             	and    (%rbx,%rdi,2),%bh
    380e:	e1 0d                	loope  381d <_license+0x1438>
    3810:	00 00                	add    %al,(%rax)
    3812:	3c 7c                	cmp    $0x7c,%al
    3814:	ea                   	(bad)
    3815:	0d 00 00 43 23       	or     $0x23430000,%eax
    381a:	3c 7a                	cmp    $0x7a,%al
    381c:	f4                   	hlt
    381d:	0d 00 00 3c 7d       	or     $0x7d3c0000,%eax
    3822:	fd                   	std
    3823:	0d 00 00 3c 7e       	or     $0x7e3c0000,%eax
    3828:	06                   	(bad)
    3829:	0e                   	(bad)
    382a:	00 00                	add    %al,(%rax)
    382c:	00 00                	add    %al,(%rax)
    382e:	41 70 32             	rex.B jo 3863 <_license+0x147e>
    3831:	00 00                	add    %al,(%rax)
    3833:	00 3f                	add    %bh,(%rdi)
    3835:	83 04 12 0e          	addl   $0xe,(%rdx,%rdx,1)
    3839:	00 00                	add    %al,(%rax)
    383b:	3c 80                	cmp    $0x80,%al
    383d:	01 1b                	add    %ebx,(%rbx)
    383f:	0e                   	(bad)
    3840:	00 00                	add    %al,(%rax)
    3842:	41 70 11             	rex.B jo 3856 <_license+0x1471>
    3845:	00 00                	add    %al,(%rax)
    3847:	00 3c 7f             	add    %bh,(%rdi,%rdi,2)
    384a:	25 0e 00 00 42       	and    $0x4200000e,%eax
    384f:	06                   	(bad)
    3850:	2e 0e                	cs (bad)
    3852:	00 00                	add    %al,(%rax)
    3854:	41 70 11             	rex.B jo 3868 <_license+0x1483>
    3857:	00 00                	add    %al,(%rax)
    3859:	00 3f                	add    %bh,(%rdi)
    385b:	83 04 38 0e          	addl   $0xe,(%rax,%rdi,1)
    385f:	00 00                	add    %al,(%rax)
    3861:	3f                   	(bad)
    3862:	80 08 41             	orb    $0x41,(%rax)
    3865:	0e                   	(bad)
    3866:	00 00                	add    %al,(%rax)
    3868:	3f                   	(bad)
    3869:	08 4a 0e             	or     %cl,0xe(%rdx)
    386c:	00 00                	add    %al,(%rax)
    386e:	00 00                	add    %al,(%rax)
    3870:	00 43 24             	add    %al,0x24(%rbx)
    3873:	3c b6                	cmp    $0xb6,%al
    3875:	01 61 0e             	add    %esp,0xe(%rcx)
    3878:	00 00                	add    %al,(%rax)
    387a:	3c b8                	cmp    $0xb8,%al
    387c:	01 6a 0e             	add    %ebp,0xe(%rdx)
    387f:	00 00                	add    %al,(%rax)
    3881:	3c 99                	cmp    $0x99,%al
    3883:	02 73 0e             	add    0xe(%rbx),%dh
    3886:	00 00                	add    %al,(%rax)
    3888:	41 71 10             	rex.B jno 389b <_license+0x14b6>
    388b:	00 00                	add    %al,(%rax)
    388d:	00 3c b7             	add    %bh,(%rdi,%rsi,4)
    3890:	01 7d 0e             	add    %edi,0xe(%rbp)
    3893:	00 00                	add    %al,(%rax)
    3895:	42 06                	rex.X (bad)
    3897:	86 0e                	xchg   %cl,(%rsi)
    3899:	00 00                	add    %al,(%rax)
    389b:	41 71 10             	rex.B jno 38ae <_license+0x14c9>
    389e:	00 00                	add    %al,(%rax)
    38a0:	00 3f                	add    %bh,(%rdi)
    38a2:	00 90 0e 00 00 3f    	add    %dl,0x3f00000e(%rax)
    38a8:	01 99 0e 00 00 3f    	add    %ebx,0x3f00000e(%rcx)
    38ae:	08 a2 0e 00 00 00    	or     %ah,0xe(%rdx)
    38b4:	00 39                	add    %bh,(%rcx)
    38b6:	67 19 00             	sbb    %eax,(%eax)
    38b9:	00 25 00 6f 03 26    	add    %ah,0x26036f00(%rip)        # 2603a7bf <_license+0x260383da>
    38bf:	3a b9 01 71 19 00    	cmp    0x197101(%rcx),%bh
    38c5:	00 3a                	add    %bh,(%rdx)
    38c7:	ba 01 7a 19 00       	mov    $0x197a01,%edx
    38cc:	00 3a                	add    %bh,(%rdx)
    38ce:	bb 01 83 19 00       	mov    $0x198301,%ebx
    38d3:	00 3c bc             	add    %bh,(%rsp,%rdi,4)
    38d6:	01 95 19 00 00 3c    	add    %edx,0x3c000019(%rbp)
    38dc:	bd 01 9f 19 00       	mov    $0x199f01,%ebp
    38e1:	00 3c be             	add    %bh,(%rsi,%rdi,4)
    38e4:	01 a9 19 00 00 3c    	add    %ebp,0x3c000019(%rcx)
    38ea:	bf 01 b3 19 00       	mov    $0x19b301,%edi
    38ef:	00 3c da             	add    %bh,(%rdx,%rbx,8)
    38f2:	01 bd 19 00 00 43    	add    %edi,0x43000019(%rbp)
    38f8:	26 3c d9             	es cmp $0xd9,%al
    38fb:	01 da                	add    %ebx,%edx
    38fd:	19 00                	sbb    %eax,(%rax)
    38ff:	00 00                	add    %al,(%rax)
    3901:	00 3d 9e 1a 00 00    	add    %bh,0x1a9e(%rip)        # 53a5 <_license+0x2fc0>
    3907:	72 35                	jb     393e <_license+0x1559>
    3909:	00 00                	add    %al,(%rax)
    390b:	00 00                	add    %al,(%rax)
    390d:	a1 03 09 3e 02 31 9f 	movabs 0x1aad9f31023e0903,%eax
    3914:	ad 1a 
    3916:	00 00                	add    %al,(%rax)
    3918:	3e 02 30             	ds add (%rax),%dh
    391b:	9f                   	lahf
    391c:	b7 1a                	mov    $0x1a,%bh
    391e:	00 00                	add    %al,(%rax)
    3920:	3c d2                	cmp    $0xd2,%al
    3922:	01 c1                	add    %eax,%ecx
    3924:	1a 00                	sbb    (%rax),%al
    3926:	00 41 72             	add    %al,0x72(%rcx)
    3929:	27                   	(bad)
    392a:	00 00                	add    %al,(%rax)
    392c:	00 3c d1             	add    %bh,(%rcx,%rdx,8)
    392f:	01 cc                	add    %ecx,%esp
    3931:	1a 00                	sbb    (%rax),%al
    3933:	00 42 06             	add    %al,0x6(%rdx)
    3936:	d5                   	(bad)
    3937:	1a 00                	sbb    (%rax),%al
    3939:	00 41 72             	add    %al,0x72(%rcx)
    393c:	27                   	(bad)
    393d:	00 00                	add    %al,(%rax)
    393f:	00 3f                	add    %bh,(%rdi)
    3941:	80 04 df 1a          	addb   $0x1a,(%rdi,%rbx,8)
    3945:	00 00                	add    %al,(%rax)
    3947:	3f                   	(bad)
    3948:	08 e8                	or     %ch,%al
    394a:	1a 00                	sbb    (%rax),%al
    394c:	00 00                	add    %al,(%rax)
    394e:	00 00                	add    %al,(%rax)
    3950:	43 27                	rex.XB (bad)
    3952:	3c 9f                	cmp    $0x9f,%al
    3954:	02 ae 0e 00 00 39    	add    0x3900000e(%rsi),%ch
    395a:	66 1f                	data16 (bad)
    395c:	00 00                	add    %al,(%rax)
    395e:	28 00                	sub    %al,(%rax)
    3960:	73 03                	jae    3965 <_license+0x1580>
    3962:	09 3a                	or     %edi,(%rdx)
    3964:	9a                   	(bad)
    3965:	02 6c 1f 00          	add    0x0(%rdi,%rbx,1),%ch
    3969:	00 3a                	add    %bh,(%rdx)
    396b:	9b                   	fwait
    396c:	02 75 1f             	add    0x1f(%rbp),%dh
    396f:	00 00                	add    %al,(%rax)
    3971:	00 41 73             	add    %al,0x73(%rcx)
    3974:	05 00 00 00 3c       	add    $0x3c000000,%eax
    3979:	a0 02 c1 0e 00 00 42 	movabs 0xca024200000ec102,%al
    3980:	02 ca 
    3982:	0e                   	(bad)
    3983:	00 00                	add    %al,(%rax)
    3985:	41 73 05             	rex.B jae 398d <_license+0x15a8>
    3988:	00 00                	add    %al,(%rax)
    398a:	00 3b                	add    %bh,(%rbx)
    398c:	01 50 d4             	add    %edx,-0x2c(%rax)
    398f:	0e                   	(bad)
    3990:	00 00                	add    %al,(%rax)
    3992:	3f                   	(bad)
    3993:	fe                   	(bad)
    3994:	ff                   	(bad)
    3995:	ff 07                	incl   (%rdi)
    3997:	dd 0e                	fisttpll (%rsi)
    3999:	00 00                	add    %al,(%rax)
    399b:	3f                   	(bad)
    399c:	08 e6                	or     %ah,%dh
    399e:	0e                   	(bad)
    399f:	00 00                	add    %al,(%rax)
    39a1:	00 00                	add    %al,(%rax)
    39a3:	43 29 3c a6          	sub    %edi,(%r14,%r12,4)
    39a7:	02 f2                	add    %dl,%dh
    39a9:	0e                   	(bad)
    39aa:	00 00                	add    %al,(%rax)
    39ac:	41 74 20             	rex.B je 39cf <_license+0x15ea>
    39af:	00 00                	add    %al,(%rax)
    39b1:	00 3c a1             	add    %bh,(%rcx,%riz,4)
    39b4:	02 fc                	add    %ah,%bh
    39b6:	0e                   	(bad)
    39b7:	00 00                	add    %al,(%rax)
    39b9:	42 02 05 0f 00 00 41 	rex.X add 0x4100000f(%rip),%al        # 410039cf <_license+0x410015ea>
    39c0:	74 20                	je     39e2 <_license+0x15fd>
    39c2:	00 00                	add    %al,(%rax)
    39c4:	00 3c a2             	add    %bh,(%rdx,%riz,4)
    39c7:	02 0f                	add    (%rdi),%cl
    39c9:	0f 00 00             	sldt   (%rax)
    39cc:	3f                   	(bad)
    39cd:	80 20 18             	andb   $0x18,(%rax)
    39d0:	0f 00 00             	sldt   (%rax)
    39d3:	3f                   	(bad)
    39d4:	18 21                	sbb    %ah,(%rcx)
    39d6:	0f 00 00             	sldt   (%rax)
    39d9:	00 00                	add    %al,(%rax)
    39db:	39 61 20             	cmp    %esp,0x20(%rcx)
    39de:	00 00                	add    %al,(%rax)
    39e0:	2a 00                	sub    (%rax),%al
    39e2:	89 03                	mov    %eax,(%rbx)
    39e4:	17                   	(bad)
    39e5:	3a a3 02 6b 20 00    	cmp    0x206b02(%rbx),%ah
    39eb:	00 3a                	add    %bh,(%rdx)
    39ed:	a4                   	movsb  %ds:(%rsi),%es:(%rdi)
    39ee:	02 74 20 00          	add    0x0(%rax,%riz,1),%dh
    39f2:	00 3b                	add    %bh,(%rbx)
    39f4:	03 91 c0 00 7d 20    	add    0x207d00c0(%rcx),%edx
    39fa:	00 00                	add    %al,(%rax)
    39fc:	3c a5                	cmp    $0xa5,%al
    39fe:	02 87 20 00 00 39    	add    0x39000020(%rdi),%al
    3a04:	a8 1b                	test   $0x1b,%al
    3a06:	00 00                	add    %al,(%rax)
    3a08:	2b 00                	sub    (%rax),%eax
    3a0a:	74 02                	je     3a0e <_license+0x1629>
    3a0c:	07                   	(bad)
    3a0d:	3c f7                	cmp    $0xf7,%al
    3a0f:	02 ba 1b 00 00 3c    	add    0x3c00001b(%rdx),%bh
    3a15:	f9                   	stc
    3a16:	02 c3                	add    %bl,%al
    3a18:	1b 00                	sbb    (%rax),%eax
    3a1a:	00 41 75             	add    %al,0x75(%rcx)
    3a1d:	11 00                	adc    %eax,(%rax)
    3a1f:	00 00                	add    %al,(%rax)
    3a21:	3c f8                	cmp    $0xf8,%al
    3a23:	02 cd                	add    %ch,%cl
    3a25:	1b 00                	sbb    (%rax),%eax
    3a27:	00 42 06             	add    %al,0x6(%rdx)
    3a2a:	d5                   	(bad)
    3a2b:	1b 00                	sbb    (%rax),%eax
    3a2d:	00 41 75             	add    %al,0x75(%rcx)
    3a30:	11 00                	adc    %eax,(%rax)
    3a32:	00 00                	add    %al,(%rax)
    3a34:	3f                   	(bad)
    3a35:	82                   	(bad)
    3a36:	04 de                	add    $0xde,%al
    3a38:	1b 00                	sbb    (%rax),%eax
    3a3a:	00 3f                	add    %bh,(%rdi)
    3a3c:	80 08 e6             	orb    $0xe6,(%rax)
    3a3f:	1b 00                	sbb    (%rax),%eax
    3a41:	00 3f                	add    %bh,(%rdi)
    3a43:	08 ee                	or     %ch,%dh
    3a45:	1b 00                	sbb    (%rax),%eax
    3a47:	00 00                	add    %al,(%rax)
    3a49:	00 00                	add    %al,(%rax)
    3a4b:	00 3d 9e 1a 00 00    	add    %bh,0x1a9e(%rip)        # 54ef <_license+0x310a>
    3a51:	76 37                	jbe    3a8a <_license+0x16a5>
    3a53:	00 00                	add    %al,(%rax)
    3a55:	00 00                	add    %al,(%rax)
    3a57:	8e 03                	mov    (%rbx),%es
    3a59:	0f 3e                	(bad)
    3a5b:	02 30                	add    (%rax),%dh
    3a5d:	9f                   	lahf
    3a5e:	ad                   	lods   %ds:(%rsi),%eax
    3a5f:	1a 00                	sbb    (%rax),%al
    3a61:	00 3e                	add    %bh,(%rsi)
    3a63:	02 31                	add    (%rcx),%dh
    3a65:	9f                   	lahf
    3a66:	b7 1a                	mov    $0x1a,%bh
    3a68:	00 00                	add    %al,(%rax)
    3a6a:	3c 83                	cmp    $0x83,%al
    3a6c:	03 c1                	add    %ecx,%eax
    3a6e:	1a 00                	sbb    (%rax),%al
    3a70:	00 41 76             	add    %al,0x76(%rcx)
    3a73:	2c 00                	sub    $0x0,%al
    3a75:	00 00                	add    %al,(%rax)
    3a77:	3c 82                	cmp    $0x82,%al
    3a79:	03 cc                	add    %esp,%ecx
    3a7b:	1a 00                	sbb    (%rax),%al
    3a7d:	00 42 06             	add    %al,0x6(%rdx)
    3a80:	d5                   	(bad)
    3a81:	1a 00                	sbb    (%rax),%al
    3a83:	00 41 76             	add    %al,0x76(%rcx)
    3a86:	2c 00                	sub    $0x0,%al
    3a88:	00 00                	add    %al,(%rax)
    3a8a:	3f                   	(bad)
    3a8b:	80 04 df 1a          	addb   $0x1a,(%rdi,%rbx,8)
    3a8f:	00 00                	add    %al,(%rax)
    3a91:	3f                   	(bad)
    3a92:	08 e8                	or     %ch,%al
    3a94:	1a 00                	sbb    (%rax),%al
    3a96:	00 00                	add    %al,(%rax)
    3a98:	00 00                	add    %al,(%rax)
    3a9a:	00 00                	add    %al,(%rax)
    3a9c:	00 41 77             	add    %al,0x77(%rcx)
    3a9f:	35 00 00 00 3f       	xor    $0x3f000000,%eax
    3aa4:	8b 04 30             	mov    (%rax,%rsi,1),%eax
    3aa7:	0f 00 00             	sldt   (%rax)
    3aaa:	3c c2                	cmp    $0xc2,%al
    3aac:	01 39                	add    %edi,(%rcx)
    3aae:	0f 00 00             	sldt   (%rax)
    3ab1:	41 77 11             	rex.B ja 3ac5 <_license+0x16e0>
    3ab4:	00 00                	add    %al,(%rax)
    3ab6:	00 3c c1             	add    %bh,(%rcx,%rax,8)
    3ab9:	01 43 0f             	add    %eax,0xf(%rbx)
    3abc:	00 00                	add    %al,(%rax)
    3abe:	42 06                	rex.X (bad)
    3ac0:	4c 0f 00 00          	rex.WR sldt (%rax)
    3ac4:	41 77 11             	rex.B ja 3ad8 <_license+0x16f3>
    3ac7:	00 00                	add    %al,(%rax)
    3ac9:	00 3f                	add    %bh,(%rdi)
    3acb:	8b 04 56             	mov    (%rsi,%rdx,2),%eax
    3ace:	0f 00 00             	sldt   (%rax)
    3ad1:	3f                   	(bad)
    3ad2:	80 08 5f             	orb    $0x5f,(%rax)
    3ad5:	0f 00 00             	sldt   (%rax)
    3ad8:	3f                   	(bad)
    3ad9:	08 68 0f             	or     %ch,0xf(%rax)
    3adc:	00 00                	add    %al,(%rax)
    3ade:	00 00                	add    %al,(%rax)
    3ae0:	3d e6 19 00 00       	cmp    $0x19e6,%eax
    3ae5:	78 07                	js     3aee <_license+0x1709>
    3ae7:	00 00                	add    %al,(%rax)
    3ae9:	00 00                	add    %al,(%rax)
    3aeb:	65 03 0b             	add    %gs:(%rbx),%ecx
    3aee:	3e 01 53 f0          	ds add %edx,-0x10(%rbx)
    3af2:	19 00                	sbb    %eax,(%rax)
    3af4:	00 3e                	add    %bh,(%rsi)
    3af6:	02 31                	add    (%rcx),%dh
    3af8:	9f                   	lahf
    3af9:	02 1a                	add    (%rdx),%bl
    3afb:	00 00                	add    %al,(%rax)
    3afd:	3f                   	(bad)
    3afe:	0e                   	(bad)
    3aff:	0b 1a                	or     (%rdx),%ebx
    3b01:	00 00                	add    %al,(%rax)
    3b03:	41 78 07             	rex.B js 3b0d <_license+0x1728>
    3b06:	00 00                	add    %al,(%rax)
    3b08:	00 3b                	add    %bh,(%rbx)
    3b0a:	03 73 36             	add    0x36(%rbx),%esi
    3b0d:	9f                   	lahf
    3b0e:	15 1a 00 00 00       	adc    $0x1a,%eax
    3b13:	00 00                	add    %al,(%rax)
    3b15:	3d 2b 1a 00 00       	cmp    $0x1a2b,%eax
    3b1a:	79 68                	jns    3b84 <_license+0x179f>
    3b1c:	00 00                	add    %al,(%rax)
    3b1e:	00 00                	add    %al,(%rax)
    3b20:	d7                   	xlat   %ds:(%rbx)
    3b21:	03 07                	add    (%rdi),%eax
    3b23:	3a a7 02 39 1a 00    	cmp    0x1a3902(%rdi),%ah
    3b29:	00 3a                	add    %bh,(%rdx)
    3b2b:	a8 02                	test   $0x2,%al
    3b2d:	41 1a 00             	sbb    (%r8),%al
    3b30:	00 3a                	add    %bh,(%rdx)
    3b32:	a9 02 49 1a 00       	test   $0x1a4902,%eax
    3b37:	00 3c aa             	add    %bh,(%rdx,%rbp,4)
    3b3a:	02 52 1a             	add    0x1a(%rdx),%dl
    3b3d:	00 00                	add    %al,(%rax)
    3b3f:	3c ab                	cmp    $0xab,%al
    3b41:	02 5b 1a             	add    0x1a(%rbx),%bl
    3b44:	00 00                	add    %al,(%rax)
    3b46:	3c ac                	cmp    $0xac,%al
    3b48:	02 64 1a 00          	add    0x0(%rdx,%rbx,1),%ah
    3b4c:	00 41 7a             	add    %al,0x7a(%rcx)
    3b4f:	1a 00                	sbb    (%rax),%al
    3b51:	00 00                	add    %al,(%rax)
    3b53:	3c ae                	cmp    $0xae,%al
    3b55:	02 6d 1a             	add    0x1a(%rbp),%ch
    3b58:	00 00                	add    %al,(%rax)
    3b5a:	42 02 75 1a          	rex.X add 0x1a(%rbp),%sil
    3b5e:	00 00                	add    %al,(%rax)
    3b60:	41 7a 1a             	rex.B jp 3b7d <_license+0x1798>
    3b63:	00 00                	add    %al,(%rax)
    3b65:	00 3c ad 02 7e 1a 00 	add    %bh,0x1a7e02(,%rbp,4)
    3b6c:	00 3f                	add    %bh,(%rdi)
    3b6e:	80 20 86             	andb   $0x86,(%rax)
    3b71:	1a 00                	sbb    (%rax),%al
    3b73:	00 3f                	add    %bh,(%rdi)
    3b75:	18 8e 1a 00 00 00    	sbb    %cl,0x1a(%rsi)
    3b7b:	00 00                	add    %al,(%rax)
    3b7d:	3d fd 1a 00 00       	cmp    $0x1afd,%eax
    3b82:	7b d1                	jnp    3b55 <_license+0x1770>
    3b84:	00 00                	add    %al,(%rax)
    3b86:	00 00                	add    %al,(%rax)
    3b88:	e4 03                	in     $0x3,%al
    3b8a:	05 3e 03 91 10       	add    $0x1091033e,%eax
    3b8f:	9f                   	lahf
    3b90:	10 1b                	adc    %bl,(%rbx)
    3b92:	00 00                	add    %al,(%rax)
    3b94:	3a af 02 19 1b 00    	cmp    0x1b1902(%rdi),%ch
    3b9a:	00 3e                	add    %bh,(%rsi)
    3b9c:	04 91                	add    $0x91,%al
    3b9e:	d8 00                	fadds  (%rax)
    3ba0:	9f                   	lahf
    3ba1:	22 1b                	and    (%rbx),%bl
    3ba3:	00 00                	add    %al,(%rax)
    3ba5:	3d a8 1b 00 00       	cmp    $0x1ba8,%eax
    3baa:	7c 61                	jl     3c0d <_license+0x1828>
    3bac:	00 00                	add    %al,(%rax)
    3bae:	00 00                	add    %al,(%rax)
    3bb0:	93                   	xchg   %eax,%ebx
    3bb1:	02 32                	add    (%rdx),%dh
    3bb3:	3f                   	(bad)
    3bb4:	82                   	(bad)
    3bb5:	04 ba                	add    $0xba,%al
    3bb7:	1b 00                	sbb    (%rax),%eax
    3bb9:	00 3c b1             	add    %bh,(%rcx,%rsi,4)
    3bbc:	02 c3                	add    %bl,%al
    3bbe:	1b 00                	sbb    (%rax),%eax
    3bc0:	00 41 7c             	add    %al,0x7c(%rcx)
    3bc3:	11 00                	adc    %eax,(%rax)
    3bc5:	00 00                	add    %al,(%rax)
    3bc7:	3c b0                	cmp    $0xb0,%al
    3bc9:	02 cd                	add    %ch,%cl
    3bcb:	1b 00                	sbb    (%rax),%eax
    3bcd:	00 42 06             	add    %al,0x6(%rdx)
    3bd0:	d5                   	(bad)
    3bd1:	1b 00                	sbb    (%rax),%eax
    3bd3:	00 41 7c             	add    %al,0x7c(%rcx)
    3bd6:	11 00                	adc    %eax,(%rax)
    3bd8:	00 00                	add    %al,(%rax)
    3bda:	3f                   	(bad)
    3bdb:	82                   	(bad)
    3bdc:	04 de                	add    $0xde,%al
    3bde:	1b 00                	sbb    (%rax),%eax
    3be0:	00 3f                	add    %bh,(%rdi)
    3be2:	80 08 e6             	orb    $0xe6,(%rax)
    3be5:	1b 00                	sbb    (%rax),%eax
    3be7:	00 3f                	add    %bh,(%rdi)
    3be9:	08 ee                	or     %ch,%dh
    3beb:	1b 00                	sbb    (%rax),%eax
    3bed:	00 00                	add    %al,(%rax)
    3bef:	00 00                	add    %al,(%rax)
    3bf1:	41 7d 5b             	rex.B jge 3c4f <_license+0x186a>
    3bf4:	00 00                	add    %al,(%rax)
    3bf6:	00 3c b3             	add    %bh,(%rbx,%rsi,4)
    3bf9:	02 36                	add    (%rsi),%dh
    3bfb:	1b 00                	sbb    (%rax),%eax
    3bfd:	00 41 7d             	add    %al,0x7d(%rcx)
    3c00:	1e                   	(bad)
    3c01:	00 00                	add    %al,(%rax)
    3c03:	00 3c b2             	add    %bh,(%rdx,%rsi,4)
    3c06:	02 41 1b             	add    0x1b(%rcx),%al
    3c09:	00 00                	add    %al,(%rax)
    3c0b:	42 0d 4a 1b 00 00    	rex.X or $0x1b4a,%eax
    3c11:	00 41 7e             	add    %al,0x7e(%rcx)
    3c14:	38 00                	cmp    %al,(%rax)
    3c16:	00 00                	add    %al,(%rax)
    3c18:	3c b4                	cmp    $0xb4,%al
    3c1a:	02 55 1b             	add    0x1b(%rbp),%dl
    3c1d:	00 00                	add    %al,(%rax)
    3c1f:	41 7f 23             	rex.B jg 3c45 <_license+0x1860>
    3c22:	00 00                	add    %al,(%rax)
    3c24:	00 3f                	add    %bh,(%rdi)
    3c26:	8f 04 60             	pop    (%rax,%riz,2)
    3c29:	1b 00                	sbb    (%rax),%eax
    3c2b:	00 3c b6             	add    %bh,(%rsi,%rsi,4)
    3c2e:	02 69 1b             	add    0x1b(%rcx),%ch
    3c31:	00 00                	add    %al,(%rax)
    3c33:	41 7f 11             	rex.B jg 3c47 <_license+0x1862>
    3c36:	00 00                	add    %al,(%rax)
    3c38:	00 3c b5 02 74 1b 00 	add    %bh,0x1b7402(,%rsi,4)
    3c3f:	00 42 06             	add    %al,0x6(%rdx)
    3c42:	7d 1b                	jge    3c5f <_license+0x187a>
    3c44:	00 00                	add    %al,(%rax)
    3c46:	41 7f 11             	rex.B jg 3c5a <_license+0x1875>
    3c49:	00 00                	add    %al,(%rax)
    3c4b:	00 3f                	add    %bh,(%rdi)
    3c4d:	8f 04 87             	pop    (%rdi,%rax,4)
    3c50:	1b 00                	sbb    (%rax),%eax
    3c52:	00 3f                	add    %bh,(%rdi)
    3c54:	80 08 90             	orb    $0x90,(%rax)
    3c57:	1b 00                	sbb    (%rax),%eax
    3c59:	00 3f                	add    %bh,(%rdi)
    3c5b:	08 99 1b 00 00 00    	or     %bl,0x1b(%rcx)
    3c61:	00 00                	add    %al,(%rax)
    3c63:	00 00                	add    %al,(%rax)
    3c65:	00 41 80             	add    %al,-0x80(%rcx)
    3c68:	01 2b                	add    %ebp,(%rbx)
    3c6a:	00 00                	add    %al,(%rax)
    3c6c:	00 3f                	add    %bh,(%rdi)
    3c6e:	81 04 76 0f 00 00 3c 	addl   $0x3c00000f,(%rsi,%rsi,2)
    3c75:	c9                   	leave
    3c76:	02 7f 0f             	add    0xf(%rdi),%bh
    3c79:	00 00                	add    %al,(%rax)
    3c7b:	41 80 01 11          	addb   $0x11,(%r9)
    3c7f:	00 00                	add    %al,(%rax)
    3c81:	00 3c c8             	add    %bh,(%rax,%rcx,8)
    3c84:	02 89 0f 00 00 42    	add    0x4200000f(%rcx),%cl
    3c8a:	06                   	(bad)
    3c8b:	92                   	xchg   %eax,%edx
    3c8c:	0f 00 00             	sldt   (%rax)
    3c8f:	41 80 01 11          	addb   $0x11,(%r9)
    3c93:	00 00                	add    %al,(%rax)
    3c95:	00 3f                	add    %bh,(%rdi)
    3c97:	81 04 9c 0f 00 00 3f 	addl   $0x3f00000f,(%rsp,%rbx,4)
    3c9e:	80 08 a5             	orb    $0xa5,(%rax)
    3ca1:	0f 00 00             	sldt   (%rax)
    3ca4:	3f                   	(bad)
    3ca5:	08 ae 0f 00 00 00    	or     %ch,0xf(%rsi)
    3cab:	00 00                	add    %al,(%rax)
    3cad:	39 a4 1c 00 00 2c 00 	cmp    %esp,0x2c0000(%rsp,%rbx,1)
    3cb4:	fa                   	cli
    3cb5:	03 0c 3a             	add    (%rdx,%rdi,1),%ecx
    3cb8:	ca 02 b6             	lret   $0xb602
    3cbb:	1c 00                	sbb    $0x0,%al
    3cbd:	00 3a                	add    %bh,(%rdx)
    3cbf:	cb                   	lret
    3cc0:	02 c6                	add    %dh,%al
    3cc2:	1c 00                	sbb    $0x0,%al
    3cc4:	00 3a                	add    %bh,(%rdx)
    3cc6:	cc                   	int3
    3cc7:	02 ce                	add    %dh,%cl
    3cc9:	1c 00                	sbb    $0x0,%al
    3ccb:	00 3b                	add    %bh,(%rbx)
    3ccd:	03 91 c0 00 d6 1c    	add    0x1cd600c0(%rcx),%edx
    3cd3:	00 00                	add    %al,(%rax)
    3cd5:	3c cd                	cmp    $0xcd,%al
    3cd7:	02 df                	add    %bh,%bl
    3cd9:	1c 00                	sbb    $0x0,%al
    3cdb:	00 3c ce             	add    %bh,(%rsi,%rcx,8)
    3cde:	02 e8                	add    %al,%ch
    3ce0:	1c 00                	sbb    $0x0,%al
    3ce2:	00 3c cf             	add    %bh,(%rdi,%rcx,8)
    3ce5:	02 f1                	add    %cl,%dh
    3ce7:	1c 00                	sbb    $0x0,%al
    3ce9:	00 3c dd 02 fa 1c 00 	add    %bh,0x1cfa02(,%rbx,8)
    3cf0:	00 3c de             	add    %bh,(%rsi,%rbx,8)
    3cf3:	02 03                	add    (%rbx),%al
    3cf5:	1d 00 00 40 a8       	sbb    $0xa8400000,%eax
    3cfa:	1b 00                	sbb    (%rax),%eax
    3cfc:	00 81 01 59 00 00    	add    %al,0x5901(%rcx)
    3d02:	00 00                	add    %al,(%rax)
    3d04:	66 11 3f             	adc    %di,(%rdi)
    3d07:	82                   	(bad)
    3d08:	04 ba                	add    $0xba,%al
    3d0a:	1b 00                	sbb    (%rax),%eax
    3d0c:	00 3c d1             	add    %bh,(%rcx,%rdx,8)
    3d0f:	02 c3                	add    %bl,%al
    3d11:	1b 00                	sbb    (%rax),%eax
    3d13:	00 41 81             	add    %al,-0x7f(%rcx)
    3d16:	01 14 00             	add    %edx,(%rax,%rax,1)
    3d19:	00 00                	add    %al,(%rax)
    3d1b:	3c d0                	cmp    $0xd0,%al
    3d1d:	02 cd                	add    %ch,%cl
    3d1f:	1b 00                	sbb    (%rax),%eax
    3d21:	00 42 06             	add    %al,0x6(%rdx)
    3d24:	d5                   	(bad)
    3d25:	1b 00                	sbb    (%rax),%eax
    3d27:	00 41 81             	add    %al,-0x7f(%rcx)
    3d2a:	01 14 00             	add    %edx,(%rax,%rax,1)
    3d2d:	00 00                	add    %al,(%rax)
    3d2f:	3f                   	(bad)
    3d30:	82                   	(bad)
    3d31:	04 de                	add    $0xde,%al
    3d33:	1b 00                	sbb    (%rax),%eax
    3d35:	00 3f                	add    %bh,(%rdi)
    3d37:	80 08 e6             	orb    $0xe6,(%rax)
    3d3a:	1b 00                	sbb    (%rax),%eax
    3d3c:	00 3f                	add    %bh,(%rdi)
    3d3e:	08 ee                	or     %ch,%dh
    3d40:	1b 00                	sbb    (%rax),%eax
    3d42:	00 00                	add    %al,(%rax)
    3d44:	00 00                	add    %al,(%rax)
    3d46:	43 2d 3c d2 02 14    	rex.XB sub $0x1402d23c,%eax
    3d4c:	1d 00 00 48 ca       	sbb    $0xca480000,%eax
    3d51:	1d 00 00 2e 00       	sbb    $0x2e0000,%eax
    3d56:	8f                   	(bad)
    3d57:	0c 3a                	or     $0x3a,%al
    3d59:	d5                   	(bad)
    3d5a:	02 d3                	add    %bl,%dl
    3d5c:	1d 00 00 3a d6       	sbb    $0xd63a0000,%eax
    3d61:	02 db                	add    %bl,%bl
    3d63:	1d 00 00 48 9c       	sbb    $0x9c480000,%eax
    3d68:	20 00                	and    %al,(%rax)
    3d6a:	00 2f                	add    %ch,(%rdi)
    3d6c:	00 1e                	add    %bl,(%rsi)
    3d6e:	09 3a                	or     %edi,(%rdx)
    3d70:	d7                   	xlat   %ds:(%rbx)
    3d71:	02 b6 20 00 00 3c    	add    0x3c000020(%rsi),%dh
    3d77:	d3 02                	roll   %cl,(%rdx)
    3d79:	bf 20 00 00 3c       	mov    $0x3c000020,%edi
    3d7e:	d4                   	(bad)
    3d7f:	02 c8                	add    %al,%cl
    3d81:	20 00                	and    %al,(%rax)
    3d83:	00 3c d8             	add    %bh,(%rax,%rbx,8)
    3d86:	02 d1                	add    %cl,%dl
    3d88:	20 00                	and    %al,(%rax)
    3d8a:	00 3c d9             	add    %bh,(%rcx,%rbx,8)
    3d8d:	02 da                	add    %dl,%bl
    3d8f:	20 00                	and    %al,(%rax)
    3d91:	00 40 e5             	add    %al,-0x1b(%rax)
    3d94:	1d 00 00 82 01       	sbb    $0x1820000,%eax
    3d99:	03 00                	add    (%rax),%eax
    3d9b:	00 00                	add    %al,(%rax)
    3d9d:	0d 41 05 3e 01       	or     $0x13e0541,%eax
    3da2:	53                   	push   %rbx
    3da3:	ee                   	out    %al,(%dx)
    3da4:	1d 00 00 46 04       	sbb    $0x4460000,%eax
    3da9:	f7 1d 00 00 00 40    	negl   0x40000000(%rip)        # 40003daf <_license+0x400019ca>
    3daf:	e5 1d                	in     $0x1d,%eax
    3db1:	00 00                	add    %al,(%rax)
    3db3:	83 01 05             	addl   $0x5,(%rcx)
    3db6:	00 00                	add    %al,(%rax)
    3db8:	00 0d 41 05 3e 01    	add    %cl,0x13e0541(%rip)        # 13e42ff <_license+0x13e1f1a>
    3dbe:	53                   	push   %rbx
    3dbf:	ee                   	out    %al,(%dx)
    3dc0:	1d 00 00 46 06       	sbb    $0x6460000,%eax
    3dc5:	f7 1d 00 00 00 40    	negl   0x40000000(%rip)        # 40003dcb <_license+0x400019e6>
    3dcb:	e5 1d                	in     $0x1d,%eax
    3dcd:	00 00                	add    %al,(%rax)
    3dcf:	84 01                	test   %al,(%rcx)
    3dd1:	05 00 00 00 0d       	add    $0xd000000,%eax
    3dd6:	41 05 3e 01 55 ee    	rex.B add $0xee55013e,%eax
    3ddc:	1d 00 00 46 08       	sbb    $0x8460000,%eax
    3de1:	f7 1d 00 00 00 40    	negl   0x40000000(%rip)        # 40003de7 <_license+0x40001a02>
    3de7:	e5 1d                	in     $0x1d,%eax
    3de9:	00 00                	add    %al,(%rax)
    3deb:	85 01                	test   %eax,(%rcx)
    3ded:	05 00 00 00 0d       	add    $0xd000000,%eax
    3df2:	41 05 3e 01 52 ee    	rex.B add $0xee52013e,%eax
    3df8:	1d 00 00 46 10       	sbb    $0x10460000,%eax
    3dfd:	f7 1d 00 00 00 40    	negl   0x40000000(%rip)        # 40003e03 <_license+0x40001a1e>
    3e03:	e5 1d                	in     $0x1d,%eax
    3e05:	00 00                	add    %al,(%rax)
    3e07:	86 01                	xchg   %al,(%rcx)
    3e09:	05 00 00 00 0d       	add    $0xd000000,%eax
    3e0e:	41 05 3e 01 54 ee    	rex.B add $0xee54013e,%eax
    3e14:	1d 00 00 46 13       	sbb    $0x13460000,%eax
    3e19:	f7 1d 00 00 00 40    	negl   0x40000000(%rip)        # 40003e1f <_license+0x40001a3a>
    3e1f:	e5 1d                	in     $0x1d,%eax
    3e21:	00 00                	add    %al,(%rax)
    3e23:	87 01                	xchg   %eax,(%rcx)
    3e25:	07                   	(bad)
    3e26:	00 00                	add    %al,(%rax)
    3e28:	00 0d 41 05 3e 01    	add    %cl,0x13e0541(%rip)        # 13e436f <_license+0x13e1f8a>
    3e2e:	53                   	push   %rbx
    3e2f:	ee                   	out    %al,(%dx)
    3e30:	1d 00 00 46 04       	sbb    $0x4460000,%eax
    3e35:	f7 1d 00 00 00 40    	negl   0x40000000(%rip)        # 40003e3b <_license+0x40001a56>
    3e3b:	e5 1d                	in     $0x1d,%eax
    3e3d:	00 00                	add    %al,(%rax)
    3e3f:	88 01                	mov    %al,(%rcx)
    3e41:	05 00 00 00 0d       	add    $0xd000000,%eax
    3e46:	5e                   	pop    %rsi
    3e47:	07                   	(bad)
    3e48:	3e 01 53 ee          	ds add %edx,-0x12(%rbx)
    3e4c:	1d 00 00 46 0e       	sbb    $0xe460000,%eax
    3e51:	f7 1d 00 00 00 40    	negl   0x40000000(%rip)        # 40003e57 <_license+0x40001a72>
    3e57:	e5 1d                	in     $0x1d,%eax
    3e59:	00 00                	add    %al,(%rax)
    3e5b:	89 01                	mov    %eax,(%rcx)
    3e5d:	05 00 00 00 0d       	add    $0xd000000,%eax
    3e62:	5e                   	pop    %rsi
    3e63:	07                   	(bad)
    3e64:	3e 01 52 ee          	ds add %edx,-0x12(%rdx)
    3e68:	1d 00 00 46 0b       	sbb    $0xb460000,%eax
    3e6d:	f7 1d 00 00 00 40    	negl   0x40000000(%rip)        # 40003e73 <_license+0x40001a8e>
    3e73:	e5 1d                	in     $0x1d,%eax
    3e75:	00 00                	add    %al,(%rax)
    3e77:	8a 01                	mov    (%rcx),%al
    3e79:	05 00 00 00 0d       	add    $0xd000000,%eax
    3e7e:	5e                   	pop    %rsi
    3e7f:	07                   	(bad)
    3e80:	3e 01 51 ee          	ds add %edx,-0x12(%rcx)
    3e84:	1d 00 00 46 19       	sbb    $0x19460000,%eax
    3e89:	f7 1d 00 00 00 40    	negl   0x40000000(%rip)        # 40003e8f <_license+0x40001aaa>
    3e8f:	e5 1d                	in     $0x1d,%eax
    3e91:	00 00                	add    %al,(%rax)
    3e93:	8b 01                	mov    (%rcx),%eax
    3e95:	05 00 00 00 0d       	add    $0xd000000,%eax
    3e9a:	5e                   	pop    %rsi
    3e9b:	07                   	(bad)
    3e9c:	3e 01 53 ee          	ds add %edx,-0x12(%rbx)
    3ea0:	1d 00 00 46 10       	sbb    $0x10460000,%eax
    3ea5:	f7 1d 00 00 00 40    	negl   0x40000000(%rip)        # 40003eab <_license+0x40001ac6>
    3eab:	e5 1d                	in     $0x1d,%eax
    3ead:	00 00                	add    %al,(%rax)
    3eaf:	8c 01                	mov    %es,(%rcx)
    3eb1:	05 00 00 00 0d       	add    $0xd000000,%eax
    3eb6:	5e                   	pop    %rsi
    3eb7:	07                   	(bad)
    3eb8:	3e 01 52 ee          	ds add %edx,-0x12(%rdx)
    3ebc:	1d 00 00 46 04       	sbb    $0x4460000,%eax
    3ec1:	f7 1d 00 00 00 40    	negl   0x40000000(%rip)        # 40003ec7 <_license+0x40001ae2>
    3ec7:	e5 1d                	in     $0x1d,%eax
    3ec9:	00 00                	add    %al,(%rax)
    3ecb:	8d 01                	lea    (%rcx),%eax
    3ecd:	03 00                	add    (%rax),%eax
    3ecf:	00 00                	add    %al,(%rax)
    3ed1:	0d 5e 07 3e 01       	or     $0x13e075e,%eax
    3ed6:	51                   	push   %rcx
    3ed7:	ee                   	out    %al,(%dx)
    3ed8:	1d 00 00 46 0e       	sbb    $0xe460000,%eax
    3edd:	f7 1d 00 00 00 40    	negl   0x40000000(%rip)        # 40003ee3 <_license+0x40001afe>
    3ee3:	e5 1d                	in     $0x1d,%eax
    3ee5:	00 00                	add    %al,(%rax)
    3ee7:	8e 01                	mov    (%rcx),%es
    3ee9:	03 00                	add    (%rax),%eax
    3eeb:	00 00                	add    %al,(%rax)
    3eed:	0d 5e 07 3e 01       	or     $0x13e075e,%eax
    3ef2:	53                   	push   %rbx
    3ef3:	ee                   	out    %al,(%dx)
    3ef4:	1d 00 00 46 18       	sbb    $0x18460000,%eax
    3ef9:	f7 1d 00 00 00 00    	negl   0x0(%rip)        # 3eff <_license+0x1b1a>
    3eff:	40 a5                	rex movsl %ds:(%rsi),%es:(%rdi)
    3f01:	1d 00 00 8f 01       	sbb    $0x18f0000,%eax
    3f06:	57                   	push   %rdi
    3f07:	00 00                	add    %al,(%rax)
    3f09:	00 00                	add    %al,(%rax)
    3f0b:	1d 0c 46 80 84       	sbb    $0x8480460c,%eax
    3f10:	80 10 c0             	adcb   $0xc0,(%rax)
    3f13:	1d 00 00 40 77       	sbb    $0x77400000,%eax
    3f18:	1d 00 00 8f 01       	sbb    $0x18f0000,%eax
    3f1d:	57                   	push   %rdi
    3f1e:	00 00                	add    %al,(%rax)
    3f20:	00 0d 6f 0a 3a da    	add    %cl,-0x25c5f591(%rip)        # ffffffffda3a4995 <ch_rings+0x36ffb7b1f995>
    3f26:	02 80 1d 00 00 3a    	add    0x3a00001d(%rax),%al
    3f2c:	db 02                	fildl  (%rdx)
    3f2e:	89 1d 00 00 3a dc    	mov    %ebx,-0x23c60000(%rip)        # ffffffffdc3a3f34 <ch_rings+0x36ffb9b1ef34>
    3f34:	02 92 1d 00 00 46    	add    0x4600001d(%rdx),%dl
    3f3a:	f7 81 b7 85 fe ff ff 	testl  $0x1ffffff,-0x17a49(%rcx)
    3f41:	ff ff 01 
    3f44:	9b                   	fwait
    3f45:	1d 00 00 40 e5       	sbb    $0xe5400000,%eax
    3f4a:	1d 00 00 90 01       	sbb    $0x1900000,%eax
    3f4f:	05 00 00 00 0d       	add    $0xd000000,%eax
    3f54:	6a 03                	push   $0x3
    3f56:	3e 01 54 ee 1d       	ds add %edx,0x1d(%rsi,%rbp,8)
    3f5b:	00 00                	add    %al,(%rax)
    3f5d:	46 0e                	rex.RX (bad)
    3f5f:	f7 1d 00 00 00 40    	negl   0x40000000(%rip)        # 40003f65 <_license+0x40001b80>
    3f65:	e5 1d                	in     $0x1d,%eax
    3f67:	00 00                	add    %al,(%rax)
    3f69:	91                   	xchg   %eax,%ecx
    3f6a:	01 05 00 00 00 0d    	add    %eax,0xd000000(%rip)        # d003f70 <_license+0xd001b8b>
    3f70:	6a 03                	push   $0x3
    3f72:	3e 01 51 ee          	ds add %edx,-0x12(%rcx)
    3f76:	1d 00 00 46 0b       	sbb    $0xb460000,%eax
    3f7b:	f7 1d 00 00 00 40    	negl   0x40000000(%rip)        # 40003f81 <_license+0x40001b9c>
    3f81:	e5 1d                	in     $0x1d,%eax
    3f83:	00 00                	add    %al,(%rax)
    3f85:	92                   	xchg   %eax,%edx
    3f86:	01 05 00 00 00 0d    	add    %eax,0xd000000(%rip)        # d003f8c <_license+0xd001ba7>
    3f8c:	6a 03                	push   $0x3
    3f8e:	3e 01 52 ee          	ds add %edx,-0x12(%rdx)
    3f92:	1d 00 00 46 19       	sbb    $0x19460000,%eax
    3f97:	f7 1d 00 00 00 40    	negl   0x40000000(%rip)        # 40003f9d <_license+0x40001bb8>
    3f9d:	e5 1d                	in     $0x1d,%eax
    3f9f:	00 00                	add    %al,(%rax)
    3fa1:	93                   	xchg   %eax,%ebx
    3fa2:	01 05 00 00 00 0d    	add    %eax,0xd000000(%rip)        # d003fa8 <_license+0xd001bc3>
    3fa8:	6a 03                	push   $0x3
    3faa:	3e 01 54 ee 1d       	ds add %edx,0x1d(%rsi,%rbp,8)
    3faf:	00 00                	add    %al,(%rax)
    3fb1:	46 10 f7             	rex.RX adc %r14b,%dil
    3fb4:	1d 00 00 00 40       	sbb    $0x40000000,%eax
    3fb9:	e5 1d                	in     $0x1d,%eax
    3fbb:	00 00                	add    %al,(%rax)
    3fbd:	94                   	xchg   %eax,%esp
    3fbe:	01 05 00 00 00 0d    	add    %eax,0xd000000(%rip)        # d003fc4 <_license+0xd001bdf>
    3fc4:	6a 03                	push   $0x3
    3fc6:	3e 01 51 ee          	ds add %edx,-0x12(%rcx)
    3fca:	1d 00 00 46 04       	sbb    $0x4460000,%eax
    3fcf:	f7 1d 00 00 00 40    	negl   0x40000000(%rip)        # 40003fd5 <_license+0x40001bf0>
    3fd5:	e5 1d                	in     $0x1d,%eax
    3fd7:	00 00                	add    %al,(%rax)
    3fd9:	95                   	xchg   %eax,%ebp
    3fda:	01 03                	add    %eax,(%rbx)
    3fdc:	00 00                	add    %al,(%rax)
    3fde:	00 0d 6a 03 3e 01    	add    %cl,0x13e036a(%rip)        # 13e434e <_license+0x13e1f69>
    3fe4:	52                   	push   %rdx
    3fe5:	ee                   	out    %al,(%dx)
    3fe6:	1d 00 00 46 0e       	sbb    $0xe460000,%eax
    3feb:	f7 1d 00 00 00 40    	negl   0x40000000(%rip)        # 40003ff1 <_license+0x40001c0c>
    3ff1:	e5 1d                	in     $0x1d,%eax
    3ff3:	00 00                	add    %al,(%rax)
    3ff5:	96                   	xchg   %eax,%esi
    3ff6:	01 03                	add    %eax,(%rbx)
    3ff8:	00 00                	add    %al,(%rax)
    3ffa:	00 0d 6a 03 3e 01    	add    %cl,0x13e036a(%rip)        # 13e436a <_license+0x13e1f85>
    4000:	54                   	push   %rsp
    4001:	ee                   	out    %al,(%dx)
    4002:	1d 00 00 46 18       	sbb    $0x18460000,%eax
    4007:	f7 1d 00 00 00 00    	negl   0x0(%rip)        # 400d <_license+0x1c28>
    400d:	00 00                	add    %al,(%rax)
    400f:	43 30 3c e0          	xor    %dil,(%r8,%r12,8)
    4013:	02 1e                	add    (%rsi),%bl
    4015:	1d 00 00 42 02       	sbb    $0x2420000,%eax
    401a:	26 1d 00 00 43 31    	es sbb $0x31430000,%eax
    4020:	3c df                	cmp    $0xdf,%al
    4022:	02 2f                	add    (%rdi),%ch
    4024:	1d 00 00 3f 80       	sbb    $0x803f0000,%eax
    4029:	84 80 10 37 1d 00    	test   %al,0x1d3710(%rax)
    402f:	00 3f                	add    %bh,(%rdi)
    4031:	08 3f                	or     %bh,(%rdi)
    4033:	1d 00 00 00 00       	sbb    $0x0,%eax
    4038:	40                   	rex
    4039:	45 1e                	rex.RB (bad)
    403b:	00 00                	add    %al,(%rax)
    403d:	97                   	xchg   %eax,%edi
    403e:	01 16                	add    %edx,(%rsi)
    4040:	00 00                	add    %al,(%rax)
    4042:	00 00                	add    %al,(%rax)
    4044:	9a                   	(bad)
    4045:	07                   	(bad)
    4046:	3f                   	(bad)
    4047:	89 04 4a             	mov    %eax,(%rdx,%rcx,2)
    404a:	1e                   	(bad)
    404b:	00 00                	add    %al,(%rax)
    404d:	3c e5                	cmp    $0xe5,%al
    404f:	02 53 1e             	add    0x1e(%rbx),%dl
    4052:	00 00                	add    %al,(%rax)
    4054:	41 97                	xchg   %eax,%r15d
    4056:	01 11                	add    %edx,(%rcx)
    4058:	00 00                	add    %al,(%rax)
    405a:	00 3c e4             	add    %bh,(%rsp,%riz,8)
    405d:	02 5d 1e             	add    0x1e(%rbp),%bl
    4060:	00 00                	add    %al,(%rax)
    4062:	42 06                	rex.X (bad)
    4064:	65 1e                	gs (bad)
    4066:	00 00                	add    %al,(%rax)
    4068:	41 97                	xchg   %eax,%r15d
    406a:	01 11                	add    %edx,(%rcx)
    406c:	00 00                	add    %al,(%rax)
    406e:	00 3f                	add    %bh,(%rdi)
    4070:	89 04 6e             	mov    %eax,(%rsi,%rbp,2)
    4073:	1e                   	(bad)
    4074:	00 00                	add    %al,(%rax)
    4076:	3f                   	(bad)
    4077:	80 08 76             	orb    $0x76,(%rax)
    407a:	1e                   	(bad)
    407b:	00 00                	add    %al,(%rax)
    407d:	3f                   	(bad)
    407e:	08 7e 1e             	or     %bh,0x1e(%rsi)
    4081:	00 00                	add    %al,(%rax)
    4083:	00 00                	add    %al,(%rax)
    4085:	00 00                	add    %al,(%rax)
    4087:	41 98                	rex.B cwtl
    4089:	01 06                	add    %eax,(%rsi)
    408b:	00 00                	add    %al,(%rax)
    408d:	00 3c e1             	add    %bh,(%rcx,%riz,8)
    4090:	02 4b 1d             	add    0x1d(%rbx),%cl
    4093:	00 00                	add    %al,(%rax)
    4095:	42 02 53 1d          	rex.X add 0x1d(%rbx),%dl
    4099:	00 00                	add    %al,(%rax)
    409b:	41 98                	rex.B cwtl
    409d:	01 06                	add    %eax,(%rsi)
    409f:	00 00                	add    %al,(%rax)
    40a1:	00 3b                	add    %bh,(%rbx)
    40a3:	01 56 5c             	add    %edx,0x5c(%rsi)
    40a6:	1d 00 00 3f 80       	sbb    $0x803f0000,%eax
    40ab:	20 64 1d 00          	and    %ah,0x0(%rbp,%rbx,1)
    40af:	00 3f                	add    %bh,(%rdi)
    40b1:	18 6c 1d 00          	sbb    %ch,0x0(%rbp,%rbx,1)
    40b5:	00 00                	add    %al,(%rax)
    40b7:	00 40 01             	add    %al,0x1(%rax)
    40ba:	1e                   	(bad)
    40bb:	00 00                	add    %al,(%rax)
    40bd:	99                   	cltd
    40be:	01 18                	add    %ebx,(%rax)
    40c0:	00 00                	add    %al,(%rax)
    40c2:	00 00                	add    %al,(%rax)
    40c4:	a3 05 3f 89 04 06 1e 	movabs %eax,0x1e0604893f05
    40cb:	00 00 
    40cd:	3c e3                	cmp    $0xe3,%al
    40cf:	02 0f                	add    (%rdi),%cl
    40d1:	1e                   	(bad)
    40d2:	00 00                	add    %al,(%rax)
    40d4:	41 99                	rex.B cltd
    40d6:	01 11                	add    %edx,(%rcx)
    40d8:	00 00                	add    %al,(%rax)
    40da:	00 3c e2             	add    %bh,(%rdx,%riz,8)
    40dd:	02 19                	add    (%rcx),%bl
    40df:	1e                   	(bad)
    40e0:	00 00                	add    %al,(%rax)
    40e2:	42 06                	rex.X (bad)
    40e4:	21 1e                	and    %ebx,(%rsi)
    40e6:	00 00                	add    %al,(%rax)
    40e8:	41 99                	rex.B cltd
    40ea:	01 11                	add    %edx,(%rcx)
    40ec:	00 00                	add    %al,(%rax)
    40ee:	00 3f                	add    %bh,(%rdi)
    40f0:	89 04 2a             	mov    %eax,(%rdx,%rbp,1)
    40f3:	1e                   	(bad)
    40f4:	00 00                	add    %al,(%rax)
    40f6:	3f                   	(bad)
    40f7:	80 08 32             	orb    $0x32,(%rax)
    40fa:	1e                   	(bad)
    40fb:	00 00                	add    %al,(%rax)
    40fd:	3f                   	(bad)
    40fe:	08 3a                	or     %bh,(%rdx)
    4100:	1e                   	(bad)
    4101:	00 00                	add    %al,(%rax)
    4103:	00 00                	add    %al,(%rax)
    4105:	00 00                	add    %al,(%rax)
    4107:	3d 7f 1f 00 00       	cmp    $0x1f7f,%eax
    410c:	9a                   	(bad)
    410d:	01 8a 00 00 00 00    	add    %ecx,0x0(%rdx)
    4113:	ff 03                	incl   (%rbx)
    4115:	0b 3e                	or     (%rsi),%edi
    4117:	04 91                	add    $0x91,%al
    4119:	d8 00                	fadds  (%rax)
    411b:	9f                   	lahf
    411c:	89 1f                	mov    %ebx,(%rdi)
    411e:	00 00                	add    %al,(%rax)
    4120:	3e 02 31             	ds add (%rcx),%dh
    4123:	9f                   	lahf
    4124:	a4                   	movsb  %ds:(%rsi),%es:(%rdi)
    4125:	1f                   	(bad)
    4126:	00 00                	add    %al,(%rax)
    4128:	3f                   	(bad)
    4129:	00 b7 1f 00 00 41    	add    %dh,0x4100001f(%rdi)
    412f:	9b                   	fwait
    4130:	01 34 00             	add    %esi,(%rax,%rax,1)
    4133:	00 00                	add    %al,(%rax)
    4135:	3c f0                	cmp    $0xf0,%al
    4137:	02 ea                	add    %dl,%ch
    4139:	1f                   	(bad)
    413a:	00 00                	add    %al,(%rax)
    413c:	3c f3                	cmp    $0xf3,%al
    413e:	02 f3                	add    %bl,%dh
    4140:	1f                   	(bad)
    4141:	00 00                	add    %al,(%rax)
    4143:	41                   	rex.B
    4144:	9b                   	fwait
    4145:	01 28                	add    %ebp,(%rax)
    4147:	00 00                	add    %al,(%rax)
    4149:	00 3c f1             	add    %bh,(%rcx,%rsi,8)
    414c:	02 fe                	add    %dh,%bh
    414e:	1f                   	(bad)
    414f:	00 00                	add    %al,(%rax)
    4151:	42 06                	rex.X (bad)
    4153:	07                   	(bad)
    4154:	20 00                	and    %al,(%rax)
    4156:	00 41 9b             	add    %al,-0x65(%rcx)
    4159:	01 28                	add    %ebp,(%rax)
    415b:	00 00                	add    %al,(%rax)
    415d:	00 3c f2             	add    %bh,(%rdx,%rsi,8)
    4160:	02 11                	add    (%rcx),%dl
    4162:	20 00                	and    %al,(%rax)
    4164:	00 3f                	add    %bh,(%rdi)
    4166:	80 20 1a             	andb   $0x1a,(%rax)
    4169:	20 00                	and    %al,(%rax)
    416b:	00 3f                	add    %bh,(%rdi)
    416d:	08 23                	or     %ah,(%rbx)
    416f:	20 00                	and    %al,(%rax)
    4171:	00 00                	add    %al,(%rax)
    4173:	00 00                	add    %al,(%rax)
    4175:	00 43 32             	add    %al,0x32(%rbx)
    4178:	3c b7                	cmp    $0xb7,%al
    417a:	02 bb 0f 00 00 3c    	add    0x3c00000f(%rbx),%bh
    4180:	b8 02 c4 0f 00       	mov    $0xfc402,%eax
    4185:	00 43 33             	add    %al,0x33(%rbx)
    4188:	3c b9                	cmp    $0xb9,%al
    418a:	02 ce                	add    %dh,%cl
    418c:	0f 00 00             	sldt   (%rax)
    418f:	3c ba                	cmp    $0xba,%al
    4191:	02 d7                	add    %bh,%dl
    4193:	0f 00 00             	sldt   (%rax)
    4196:	00 00                	add    %al,(%rax)
    4198:	41 9c                	rex.B pushf
    419a:	01 2c 00             	add    %ebp,(%rax,%rax,1)
    419d:	00 00                	add    %al,(%rax)
    419f:	3c bb                	cmp    $0xbb,%al
    41a1:	02 ec                	add    %ah,%ch
    41a3:	0f 00 00             	sldt   (%rax)
    41a6:	42 06                	rex.X (bad)
    41a8:	f5                   	cmc
    41a9:	0f 00 00             	sldt   (%rax)
    41ac:	41 9c                	rex.B pushf
    41ae:	01 2c 00             	add    %ebp,(%rax,%rax,1)
    41b1:	00 00                	add    %al,(%rax)
    41b3:	3c bc                	cmp    $0xbc,%al
    41b5:	02 ff                	add    %bh,%bh
    41b7:	0f 00 00             	sldt   (%rax)
    41ba:	3c bd                	cmp    $0xbd,%al
    41bc:	02 08                	add    (%rax),%cl
    41be:	10 00                	adc    %al,(%rax)
    41c0:	00 00                	add    %al,(%rax)
    41c2:	00 3d f9 1b 00 00    	add    %bh,0x1bf9(%rip)        # 5dc1 <_license+0x39dc>
    41c8:	9d                   	popf
    41c9:	01 d0                	add    %edx,%eax
    41cb:	00 00                	add    %al,(%rax)
    41cd:	00 00                	add    %al,(%rax)
    41cf:	28 04 0a             	sub    %al,(%rdx,%rcx,1)
    41d2:	3e 01 5d 02          	ds add %ebx,0x2(%rbp)
    41d6:	1c 00                	sbb    $0x0,%al
    41d8:	00 3e                	add    %bh,(%rsi)
    41da:	03 91 10 9f 12 1c    	add    0x1c129f10(%rcx),%edx
    41e0:	00 00                	add    %al,(%rax)
    41e2:	3e 01 5e 1a          	ds add %ebx,0x1a(%rsi)
    41e6:	1c 00                	sbb    $0x0,%al
    41e8:	00 3c 40             	add    %bh,(%rax,%rax,2)
    41eb:	2a 1c 00             	sub    (%rax,%rax,1),%bl
    41ee:	00 3c be             	add    %bh,(%rsi,%rdi,4)
    41f1:	02 32                	add    (%rdx),%dh
    41f3:	1c 00                	sbb    $0x0,%al
    41f5:	00 3c bf             	add    %bh,(%rdi,%rdi,4)
    41f8:	02 3b                	add    (%rbx),%bh
    41fa:	1c 00                	sbb    $0x0,%al
    41fc:	00 3c c0             	add    %bh,(%rax,%rax,8)
    41ff:	02 43 1c             	add    0x1c(%rbx),%al
    4202:	00 00                	add    %al,(%rax)
    4204:	3c c1                	cmp    $0xc1,%al
    4206:	02 4b 1c             	add    0x1c(%rbx),%cl
    4209:	00 00                	add    %al,(%rax)
    420b:	3c c2                	cmp    $0xc2,%al
    420d:	02 53 1c             	add    0x1c(%rbx),%dl
    4210:	00 00                	add    %al,(%rax)
    4212:	3c c3                	cmp    $0xc3,%al
    4214:	02 5c 1c 00          	add    0x0(%rsp,%rbx,1),%bl
    4218:	00 40 66             	add    %al,0x66(%rax)
    421b:	1c 00                	sbb    $0x0,%al
    421d:	00 9e 01 40 00 00    	add    %bl,0x4001(%rsi)
    4223:	00 11                	add    %dl,(%rcx)
    4225:	75 03                	jne    422a <_license+0x1e45>
    4227:	3a c5                	cmp    %ch,%al
    4229:	02 73 1c             	add    0x1c(%rbx),%dh
    422c:	00 00                	add    %al,(%rax)
    422e:	3a c4                	cmp    %ah,%al
    4230:	02 7b 1c             	add    0x1c(%rbx),%bh
    4233:	00 00                	add    %al,(%rax)
    4235:	3e 01 52 83          	ds add %edx,-0x7d(%rdx)
    4239:	1c 00                	sbb    $0x0,%al
    423b:	00 46 04             	add    %al,0x4(%rsi)
    423e:	93                   	xchg   %eax,%ebx
    423f:	1c 00                	sbb    $0x0,%al
    4241:	00 3f                	add    %bh,(%rdi)
    4243:	00 9b 1c 00 00 40    	add    %bl,0x4000001c(%rbx)
    4249:	1b 13                	sbb    (%rbx),%edx
    424b:	00 00                	add    %al,(%rax)
    424d:	9f                   	lahf
    424e:	01 18                	add    %ebx,(%rax)
    4250:	00 00                	add    %al,(%rax)
    4252:	00 12                	add    %dl,(%rdx)
    4254:	48 03 3e             	add    (%rsi),%rdi
    4257:	03 70 0e             	add    0xe(%rax),%esi
    425a:	9f                   	lahf
    425b:	1f                   	(bad)
    425c:	13 00                	adc    (%rax),%eax
    425e:	00 3c c7             	add    %bh,(%rdi,%rax,8)
    4261:	02 2f                	add    (%rdi),%ch
    4263:	13 00                	adc    (%rax),%eax
    4265:	00 41 9f             	add    %al,-0x61(%rcx)
    4268:	01 18                	add    %ebx,(%rax)
    426a:	00 00                	add    %al,(%rax)
    426c:	00 3c c6             	add    %bh,(%rsi,%rax,8)
    426f:	02 38                	add    (%rax),%bh
    4271:	13 00                	adc    (%rax),%eax
    4273:	00 00                	add    %al,(%rax)
    4275:	00 00                	add    %al,(%rax)
    4277:	00 3d 89 1e 00 00    	add    %bh,0x1e89(%rip)        # 6106 <_license+0x3d21>
    427d:	a0 01 a8 00 00 00 00 	movabs 0x42400000000a801,%al
    4284:	24 04 
    4286:	0a 3e                	or     (%rsi),%bh
    4288:	01 5d 92             	add    %ebx,-0x6e(%rbp)
    428b:	1e                   	(bad)
    428c:	00 00                	add    %al,(%rax)
    428e:	3e 02 31             	ds add (%rcx),%dh
    4291:	9f                   	lahf
    4292:	a2 1e 00 00 3e 03 91 	movabs %al,0x9f1091033e00001e
    4299:	10 9f 
    429b:	aa                   	stos   %al,%es:(%rdi)
    429c:	1e                   	(bad)
    429d:	00 00                	add    %al,(%rax)
    429f:	3e 01 5e b2          	ds add %ebx,-0x4e(%rsi)
    42a3:	1e                   	(bad)
    42a4:	00 00                	add    %al,(%rax)
    42a6:	3c e6                	cmp    $0xe6,%al
    42a8:	02 c2                	add    %dl,%al
    42aa:	1e                   	(bad)
    42ab:	00 00                	add    %al,(%rax)
    42ad:	3c e7                	cmp    $0xe7,%al
    42af:	02 ca                	add    %dl,%cl
    42b1:	1e                   	(bad)
    42b2:	00 00                	add    %al,(%rax)
    42b4:	3c e8                	cmp    $0xe8,%al
    42b6:	02 d2                	add    %dl,%dl
    42b8:	1e                   	(bad)
    42b9:	00 00                	add    %al,(%rax)
    42bb:	3c e9                	cmp    $0xe9,%al
    42bd:	02 db                	add    %bl,%bl
    42bf:	1e                   	(bad)
    42c0:	00 00                	add    %al,(%rax)
    42c2:	3c ea                	cmp    $0xea,%al
    42c4:	02 e3                	add    %bl,%ah
    42c6:	1e                   	(bad)
    42c7:	00 00                	add    %al,(%rax)
    42c9:	3c eb                	cmp    $0xeb,%al
    42cb:	02 ec                	add    %ah,%ch
    42cd:	1e                   	(bad)
    42ce:	00 00                	add    %al,(%rax)
    42d0:	3c ec                	cmp    $0xec,%al
    42d2:	02 f4                	add    %ah,%dh
    42d4:	1e                   	(bad)
    42d5:	00 00                	add    %al,(%rax)
    42d7:	3c ed                	cmp    $0xed,%al
    42d9:	02 fc                	add    %ah,%bh
    42db:	1e                   	(bad)
    42dc:	00 00                	add    %al,(%rax)
    42de:	47 11 1f             	rex.RXB adc %r11d,(%r15)
    42e1:	00 00                	add    %al,(%rax)
    42e3:	a1 01 04 00 00 00 11 	movabs 0x54b110000000401,%eax
    42ea:	4b 05 
    42ec:	40 2f                	rex (bad)
    42ee:	1f                   	(bad)
    42ef:	00 00                	add    %al,(%rax)
    42f1:	a2 01 39 00 00 00 11 	movabs %al,0x353110000003901
    42f8:	53 03 
    42fa:	3a ef                	cmp    %bh,%ch
    42fc:	02 3c 1f             	add    (%rdi,%rbx,1),%bh
    42ff:	00 00                	add    %al,(%rax)
    4301:	3e 01 5e 4d          	ds add %ebx,0x4d(%rsi)
    4305:	1f                   	(bad)
    4306:	00 00                	add    %al,(%rax)
    4308:	3a ee                	cmp    %dh,%ch
    430a:	02 55 1f             	add    0x1f(%rbp),%dl
    430d:	00 00                	add    %al,(%rax)
    430f:	46 29 5d 1f          	rex.RX sub %r11d,0x1f(%rbp)
    4313:	00 00                	add    %al,(%rax)
    4315:	00 00                	add    %al,(%rax)
    4317:	00 49 01             	add    %cl,0x1(%rcx)
    431a:	50                   	push   %rax
    431b:	a3 01 49 01 50 a4 01 	movabs %eax,0x14901a450014901
    4322:	49 01 
    4324:	50                   	push   %rax
    4325:	a5                   	movsl  %ds:(%rsi),%es:(%rdi)
    4326:	01 49 01             	add    %ecx,0x1(%rcx)
    4329:	50                   	push   %rax
    432a:	a6                   	cmpsb  %es:(%rdi),%ds:(%rsi)
    432b:	01 49 01             	add    %ecx,0x1(%rcx)
    432e:	5c                   	pop    %rsp
    432f:	a7                   	cmpsl  %es:(%rdi),%ds:(%rsi)
    4330:	01 49 01             	add    %ecx,0x1(%rcx)
    4333:	5c                   	pop    %rsp
    4334:	a8 01                	test   $0x1,%al
    4336:	49 01 50 a9          	add    %rdx,-0x57(%r8)
    433a:	01 49 01             	add    %ecx,0x1(%rcx)
    433d:	50                   	push   %rax
    433e:	aa                   	stos   %al,%es:(%rdi)
    433f:	01 49 01             	add    %ecx,0x1(%rcx)
    4342:	52                   	push   %rdx
    4343:	ab                   	stos   %eax,%es:(%rdi)
    4344:	01 49 01             	add    %ecx,0x1(%rcx)
    4347:	50                   	push   %rax
    4348:	ac                   	lods   %ds:(%rsi),%al
    4349:	01 49 01             	add    %ecx,0x1(%rcx)
    434c:	50                   	push   %rax
    434d:	ad                   	lods   %ds:(%rsi),%eax
    434e:	01 49 01             	add    %ecx,0x1(%rcx)
    4351:	5c                   	pop    %rsp
    4352:	ae                   	scas   %es:(%rdi),%al
    4353:	01 49 01             	add    %ecx,0x1(%rcx)
    4356:	5c                   	pop    %rsp
    4357:	af                   	scas   %es:(%rdi),%eax
    4358:	01 49 01             	add    %ecx,0x1(%rcx)
    435b:	50                   	push   %rax
    435c:	b0 01                	mov    $0x1,%al
    435e:	49 01 50 b1          	add    %rdx,-0x4f(%r8)
    4362:	01 49 01             	add    %ecx,0x1(%rcx)
    4365:	50                   	push   %rax
    4366:	b2 01                	mov    $0x1,%dl
    4368:	49 01 53 b3          	add    %rdx,-0x4d(%r11)
    436c:	01 49 01             	add    %ecx,0x1(%rcx)
    436f:	53                   	push   %rbx
    4370:	b4 01                	mov    $0x1,%ah
    4372:	49 01 50 b5          	add    %rdx,-0x4b(%r8)
    4376:	01 49 01             	add    %ecx,0x1(%rcx)
    4379:	50                   	push   %rax
    437a:	b6 01                	mov    $0x1,%dh
    437c:	49 01 50 b7          	add    %rdx,-0x49(%r8)
    4380:	01 49 01             	add    %ecx,0x1(%rcx)
    4383:	50                   	push   %rax
    4384:	b8 01 49 01 50       	mov    $0x50014901,%eax
    4389:	b9 01 49 01 50       	mov    $0x50014901,%ecx
    438e:	ba 01 49 01 50       	mov    $0x50014901,%edx
    4393:	bb 01 49 01 50       	mov    $0x50014901,%ebx
    4398:	bc 01 49 01 56       	mov    $0x56014901,%esp
    439d:	bd 01 49 01 56       	mov    $0x56014901,%ebp
    43a2:	be 01 49 01 50       	mov    $0x50014901,%esi
    43a7:	bf 01 49 01 50       	mov    $0x50014901,%edi
    43ac:	c0 01 49             	rolb   $0x49,(%rcx)
    43af:	01 50 c1             	add    %edx,-0x3f(%rax)
    43b2:	01 49 01             	add    %ecx,0x1(%rcx)
    43b5:	50                   	push   %rax
    43b6:	c2 01 49             	ret    $0x4901
    43b9:	01 50 c3             	add    %edx,-0x3d(%rax)
    43bc:	01 49 01             	add    %ecx,0x1(%rcx)
    43bf:	50                   	push   %rax
    43c0:	c4 01 49 01          	(bad)
    43c4:	50                   	push   %rax
    43c5:	c5 01 49             	(bad)
    43c8:	01 50 c6             	add    %edx,-0x3a(%rax)
    43cb:	01 49 01             	add    %ecx,0x1(%rcx)
    43ce:	50                   	push   %rax
    43cf:	c7                   	.byte 0xc7
    43d0:	01 00                	add    %eax,(%rax)
	...

Disassembly of section .debug_rnglists:

0000000000000000 <.debug_rnglists>:
  void* data = (void*)(long)ctx->data;
   0:	53                   	push   %rbx
   1:	04 00                	add    $0x0,%al
   3:	00 05 00 08 00 34    	add    %al,0x34000800(%rip)        # 34000809 <_license+0x33ffe424>
   9:	00 00                	add    %al,(%rax)
   b:	00 d0                	add    %dl,%al
   d:	00 00                	add    %al,(%rax)
   f:	00 16                	add    %dl,(%rsi)
  11:	01 00                	add    %eax,(%rax)
  13:	00 26                	add    %ah,(%rsi)
  15:	01 00                	add    %eax,(%rax)
  17:	00 40 01             	add    %al,0x1(%rax)
  void* data_end = (void*)(long)ctx->data_end;
  1a:	00 00                	add    %al,(%rax)
  if (data + nh_off > data_end) {
  1c:	4b 01 00             	rex.WXB add %rax,(%r8)
  1f:	00 5b 01             	add    %bl,0x1(%rbx)
  22:	00 00                	add    %al,(%rax)
  24:	66 01 00             	add    %ax,(%rax)
  27:	00 71 01             	add    %dh,0x1(%rcx)
  2a:	00 00                	add    %al,(%rax)
  2c:	7c 01                	jl     2f <balancer_ingress+0x2f>
  2e:	00 00                	add    %al,(%rax)
  30:	87 01                	xchg   %eax,(%rcx)
  eth_proto = eth->h_proto;
  32:	00 00                	add    %al,(%rax)
  34:	92                   	xchg   %eax,%edx
  if (eth_proto == BE_ETH_P_IP) {
  35:	01 00                	add    %eax,(%rax)
  37:	00 9d 01 00 00 a8    	add    %bl,-0x57ffffff(%rbp)
  3d:	01 00                	add    %eax,(%rax)
  3f:	00 cc                	add    %cl,%ah
  41:	01 00                	add    %eax,(%rax)
  43:	00 e1                	add    %ah,%cl
  45:	01 00                	add    %eax,(%rax)
  47:	00 ec                	add    %ch,%ah
  49:	01 00                	add    %eax,(%rax)
  4b:	00 01                	add    %al,(%rcx)
  4d:	02 00                	add    (%rax),%al
  4f:	00 0c 02             	add    %cl,(%rdx,%rax,1)
  struct packet_description pckt = {};
  52:	00 00                	add    %al,(%rax)
  54:	1c 02                	sbb    $0x2,%al
  56:	00 00                	add    %al,(%rax)
  58:	2c 02                	sub    $0x2,%al
  5a:	00 00                	add    %al,(%rax)
  5c:	37                   	(bad)
  5d:	02 00                	add    (%rax),%al
  5f:	00 42 02             	add    %al,0x2(%rdx)
  62:	00 00                	add    %al,(%rax)
  64:	4d 02 00             	rex.WRB add (%r8),%r8b
  67:	00 58 02             	add    %bl,0x2(%rax)
  6a:	00 00                	add    %al,(%rax)
  6c:	63 02                	movsxd (%rdx),%eax
  6e:	00 00                	add    %al,(%rax)
  70:	6e                   	outsb  %ds:(%rsi),(%dx)
  71:	02 00                	add    (%rax),%al
  73:	00 c9                	add    %cl,%cl
  75:	02 00                	add    (%rax),%al
  77:	00 d4                	add    %dl,%ah
  79:	02 00                	add    (%rax),%al
  7b:	00 e9                	add    %ch,%cl
  7d:	02 00                	add    (%rax),%al
  7f:	00 f4                	add    %dh,%ah
  81:	02 00                	add    (%rax),%al
  83:	00 ff                	add    %bh,%bh
  85:	02 00                	add    (%rax),%al
  struct vip_definition vip = {};
  87:	00 0a                	add    %cl,(%rdx)
  89:	03 00                	add    (%rax),%eax
  8b:	00 15 03 00 00 20    	add    %dl,0x20000003(%rip)        # 20000094 <_license+0x1fffdcaf>
  91:	03 00                	add    (%rax),%eax
  93:	00 2b                	add    %ch,(%rbx)
  95:	03 00                	add    (%rax),%eax
  97:	00 36                	add    %dh,(%rsi)
  99:	03 00                	add    (%rax),%eax
  9b:	00 41 03             	add    %al,0x3(%rcx)
  9e:	00 00                	add    %al,(%rax)
    if (iph + 1 > data_end) {
  a0:	6a 03                	push   $0x3
  a2:	00 00                	add    %al,(%rax)
  a4:	7f 03                	jg     a9 <balancer_ingress+0xa9>
  a6:	00 00                	add    %al,(%rax)
  a8:	8a 03                	mov    (%rbx),%al
  aa:	00 00                	add    %al,(%rax)
  ac:	a4                   	movsb  %ds:(%rsi),%es:(%rdi)
    if (iph->ihl != 5) {
  ad:	03 00                	add    (%rax),%eax
  af:	00 af 03 00 00 c4    	add    %ch,-0x3bfffffd(%rdi)
  b5:	03 00                	add    (%rax),%eax
  b7:	00 d9                	add    %bl,%cl
    pckt->tos = iph->tos;
  b9:	03 00                	add    (%rax),%eax
  bb:	00 e4                	add    %ah,%ah
  bd:	03 00                	add    (%rax),%eax
  bf:	00 f4                	add    %dh,%ah
    *protocol = iph->protocol;
  c1:	03 00                	add    (%rax),%eax
    pckt->flow.proto = *protocol;
  c3:	00 ff                	add    %bh,%bh
  c5:	03 00                	add    (%rax),%eax
    if (iph->frag_off & PCKT_FRAGMENTED) {
  c7:	00 0a                	add    %cl,(%rdx)
  c9:	04 00                	add    $0x0,%al
  cb:	00 15 04 00 00 20    	add    %dl,0x20000004(%rip)        # 200000d5 <_license+0x1fffdcf0>
  d1:	04 00                	add    $0x0,%al
  d3:	00 2b                	add    %ch,(%rbx)
  d5:	04 00                	add    $0x0,%al
  d7:	00 3b                	add    %bh,(%rbx)
  d9:	04 00                	add    $0x0,%al
    if (*protocol == IPPROTO_ICMP) {
  db:	00 04 50             	add    %al,(%rax,%rdx,2)
  de:	df 02                	filds  (%rdx)
  e0:	04 a6                	add    $0xa6,%al
  e2:	08 c7                	or     %al,%bh
  if (icmp_hdr + 1 > data_end) {
  e4:	09 04 d5 12 c5 13 04 	or     %eax,0x413c512(,%rdx,8)
  eb:	ff 13                	call   *(%rbx)
  ed:	b1 16                	mov    $0x16,%cl
  ef:	04 e6                	add    $0xe6,%al
  if (icmp_hdr->type == ICMP_ECHO) {
  f1:	16                   	(bad)
  f2:	d5                   	(bad)
  f3:	1c 04                	sbb    $0x4,%al
  f5:	f6 1d b0 1e 04 ef    	negb   -0x10fbe150(%rip)        # ffffffffef041fab <ch_rings+0x36ffcc7bcfab>
  fb:	1e                   	(bad)
  fc:	8a 21                	mov    (%rcx),%ah
  fe:	04 ee                	add    $0xee,%al
 100:	21 b9 23 04 92 24    	and    %edi,0x24920423(%rcx)
 106:	fa                   	cli
 107:	2d 04 ea 2e c7       	sub    $0xc72eea04,%eax
 10c:	30 04 cc             	xor    %al,(%rsp,%rcx,8)
  icmp_hdr->type = ICMP_ECHOREPLY;
 10f:	41 a6                	rex.B cmpsb %es:(%rdi),%ds:(%rsi)
 111:	42 04 95             	rex.X add $0x95,%al
  icmp_hdr->checksum += 0x0008;
 114:	43 b5 44             	rex.XB mov $0x44,%r13b
  iph->ttl = DEFAULT_TTL;
 117:	04 f7                	add    $0xf7,%al
 119:	44 81 45 04 f5 45 e5 	rex.R addl $0x47e545f5,0x4(%rbp)
 120:	47 
  iph->daddr = iph->saddr;
 121:	00 04 a0             	add    %al,(%rax,%riz,4)
  iph->saddr = tmp_addr;
 124:	01 d7                	add    %edx,%edi
 126:	01 04 db             	add    %eax,(%rbx,%rbx,8)
 129:	01 e3                	add    %esp,%ebx
 12b:	01 04 a6             	add    %eax,(%rsi,%riz,4)
 12e:	08 b4 08 00 04 e3 01 	or     %dh,0x1e30400(%rax,%rcx,1)
 135:	df 02                	filds  (%rdx)
 137:	04 b4                	add    $0xb4,%al
 139:	08 fc                	or     %bh,%ah
 13b:	08 04 d5 12 c5 13 04 	or     %al,0x413c512(,%rdx,8)
 142:	e6 16                	out    %al,$0x16
 144:	a2 17 04 a7 17 d4 17 	movabs %al,0x40017d417a70417
 14b:	00 04 
 14d:	e3 01                	jrcxz  150 <balancer_ingress+0x150>
 14f:	df 02                	filds  (%rdx)
 151:	04 d5                	add    $0xd5,%al
 153:	12 c5                	adc    %ch,%al
 155:	13 00                	adc    (%rax),%eax
 157:	04 b8                	add    $0xb8,%al
 159:	08 fc                	or     %bh,%ah
 15b:	08 04 e6             	or     %al,(%rsi,%riz,8)
 15e:	16                   	(bad)
  struct packet_description pckt = {};
 15f:	a2 17 04 a7 17 d4 17 	movabs %al,0x40017d417a70417
 166:	00 04 
 168:	ff 13                	call   *(%rbx)
 16a:	df 14 04             	fists  (%rsp,%rax,1)
 16d:	e3 14                	jrcxz  183 <balancer_ingress+0x183>
 16f:	b1 16                	mov    $0x16,%cl
 171:	00 04 ff             	add    %al,(%rdi,%rdi,8)
 174:	13 df                	adc    %edi,%ebx
 176:	14 04                	adc    $0x4,%al
 178:	8a 16                	mov    (%rsi),%dl
 17a:	8d 16                	lea    (%rsi),%edx
 17c:	00 04 e3             	add    %al,(%rbx,%riz,8)
 17f:	14 8a                	adc    $0x8a,%al
 181:	16                   	(bad)
 182:	04 8d                	add    $0x8d,%al
 184:	16                   	(bad)
 185:	b1 16                	mov    $0x16,%cl
 187:	00 04 f5 17 d5 18 04 	add    %al,0x418d517(,%rsi,8)
 18e:	fc                   	cld
 18f:	19 ff                	sbb    %edi,%edi
 191:	19 00                	sbb    %eax,(%rax)
 193:	04 d5                	add    $0xd5,%al
  struct vip_definition vip = {};
 195:	18 fc                	sbb    %bh,%ah
 197:	19 04 ff             	sbb    %eax,(%rdi,%rdi,8)
 19a:	19 ac 1a 00 04 98 1c 	sbb    %ebp,0x1c980400(%rdx,%rbx,1)
 1a1:	a3 1c 04 ef 1e 88 1f 	movabs %eax,0x4001f881eef041c
 1a8:	00 04 
 1aa:	98                   	cwtl
 1ab:	1c a3                	sbb    $0xa3,%al
 1ad:	1c 04                	sbb    $0x4,%al
    if (ip6h + 1 > data_end) {
 1af:	ef                   	out    %eax,(%dx)
 1b0:	1e                   	(bad)
 1b1:	88 1f                	mov    %bl,(%rdi)
 1b3:	00 04 b0             	add    %al,(%rax,%rsi,4)
 1b6:	1f                   	(bad)
 1b7:	e7 1f                	out    %eax,$0x1f
 1b9:	04 ee                	add    $0xee,%al
 1bb:	21 b9 23 04 a8 30    	and    %edi,0x30a80423(%rcx)
    pckt->flow.proto = *protocol;
 1c1:	c7                   	(bad)
 1c2:	30 04 cc             	xor    %al,(%rsp,%rcx,8)
    pckt->tos = (ip6h->priority << 4) & 0xF0;
 1c5:	41 a6                	rex.B cmpsb %es:(%rdi),%ds:(%rsi)
 1c7:	42 04 95             	rex.X add $0x95,%al
 1ca:	43 b5 44             	rex.XB mov $0x44,%r13b
    pckt->tos = pckt->tos | ((ip6h->flow_lbl[0] >> 4) & 0x0F);
 1cd:	04 f7                	add    $0xf7,%al
 1cf:	44 81 45 04 f5 45 da 	rex.R addl $0x47da45f5,0x4(%rbp)
 1d6:	47 
 1d7:	00 04 cd 1f e7 1f 04 	add    %al,0x41fe71f(,%rcx,8)
    if (*protocol == IPPROTO_FRAGMENT) {
 1de:	ee                   	out    %al,(%dx)
 1df:	21 e5                	and    %esp,%ebp
 1e1:	22 04 a8             	and    (%rax,%rbp,4),%al
 1e4:	30 c7                	xor    %al,%bh
 1e6:	30 04 cc             	xor    %al,(%rsp,%rcx,8)
 1e9:	41 8f 42 00          	pop    0x0(%r10)
  if (icmp_hdr + 1 > data_end) {
 1ed:	04 cf                	add    $0xcf,%al
 1ef:	22 e5                	and    %ch,%ah
 1f1:	22 04 a8             	and    (%rax,%rbp,4),%al
 1f4:	30 b2 30 00 04 97    	xor    %dh,-0x68fbffd0(%rdx)
  if (icmp_hdr->icmp6_type == ICMPV6_ECHO_REQUEST) {
 1fa:	42 a6                	rex.X cmpsb %es:(%rdi),%ds:(%rsi)
 1fc:	42 04 95             	rex.X add $0x95,%al
 1ff:	43 b5 44             	rex.XB mov $0x44,%r13b
 202:	04 f7                	add    $0xf7,%al
 204:	44 81 45 04 f5 45 da 	rex.R addl $0x47da45f5,0x4(%rbp)
 20b:	47 
 20c:	00 04 97             	add    %al,(%rdi,%rdx,4)
 20f:	42 a6                	rex.X cmpsb %es:(%rdi),%ds:(%rsi)
 211:	42 04 95             	rex.X add $0x95,%al
 214:	43 9a                	rex.XB (bad)
 216:	43 00 04 b7          	add    %al,(%r15,%r14,4)
 21a:	43 9c                	rex.XB pushf
 21c:	44 04 f7             	rex.R add $0xf7,%al
 21f:	44 81 45 04 f5 45 da 	rex.R addl $0x47da45f5,0x4(%rbp)
 226:	47 
 227:	00 04 f8             	add    %al,(%rax,%rdi,8)
 22a:	43 8f 44 04 f5       	pop    -0xb(%r12,%r8,1)
 22f:	45 bb 46 04 ff 46    	rex.RB mov $0x46ff0446,%r11d
 235:	c5 47 00             	(bad)
 238:	04 f5                	add    $0xf5,%al
 23a:	45 b5 46             	rex.RB mov $0x46,%r13b
 23d:	04 ff                	add    $0xff,%al
 23f:	46 91                	rex.RX xchg %eax,%ecx
 241:	47 00 04 d2          	add    %r8b,(%r10,%r10,8)
 245:	20 8a 21 04 92 24    	and    %cl,0x24920421(%rdx)
 24b:	bf 24 00 04 9a       	mov    $0x9a040024,%edi
 250:	29 b7 2c 04 ea 2e    	sub    %esi,0x2eea042c(%rdi)
 256:	94                   	xchg   %eax,%esp
 257:	2f                   	(bad)
 258:	00 04 8a             	add    %al,(%rdx,%rcx,4)
 25b:	2a d0                	sub    %al,%dl
 25d:	2b 04 fb             	sub    (%rbx,%rdi,8),%eax
 260:	2b 9a 2c 00 04 ac    	sub    -0x53fbffd4(%rdx),%ebx
 266:	2b b2 2b 04 b8 2b    	sub    0x2bb8042b(%rdx),%esi
 26c:	c4                   	(bad)
 26d:	2b 00                	sub    (%rax),%eax
 26f:	04 ac                	add    $0xac,%al
 271:	2b b2 2b 04 b8 2b    	sub    0x2bb8042b(%rdx),%esi
 277:	c4                   	(bad)
 278:	2b 00                	sub    (%rax),%eax
 27a:	04 df                	add    $0xdf,%al
 27c:	02 9a 04 04 88 05    	add    0x5880404(%rdx),%bl
 282:	c2 06 04             	ret    $0x406
 285:	e4 07                	in     $0x7,%al
 287:	a6                   	cmpsb  %es:(%rdi),%ds:(%rsi)
      memcpy(pckt->flow.srcv6, ip6h->saddr.s6_addr32, 16);
 288:	08 04 d1             	or     %al,(%rcx,%rdx,8)
 28b:	09 f9                	or     %edi,%ecx
 28d:	0c 04                	or     $0x4,%al
 28f:	83 0d d5 12 04 c5 13 	orl    $0x13,-0x3afbed2b(%rip)        # ffffffffc504156b <ch_rings+0x36ffa27bc56b>
 296:	ff 13                	call   *(%rbx)
 298:	04 d5                	add    $0xd5,%al
      memcpy(pckt->flow.dstv6, ip6h->daddr.s6_addr32, 16);
 29a:	1c f6                	sbb    $0xf6,%al
 29c:	1d 04 ba 1e ef       	sbb    $0xef1eba04,%eax
 2a1:	1e                   	(bad)
 2a2:	04 9a                	add    $0x9a,%al
 2a4:	21 ee                	and    %ebp,%esi
 2a6:	21 04 b9             	and    %eax,(%rcx,%rdi,4)
 2a9:	23 92 24 04 fa 2d    	and    0x2dfa0424(%rdx),%edx
  if (protocol == IPPROTO_ICMPV6) {
 2af:	e0 2e                	loopne 2df <balancer_ingress+0x2df>
 2b1:	04 da                	add    $0xda,%al
 2b3:	30 c6                	xor    %al,%dh
  if (icmp_hdr + 1 > data_end) {
 2b5:	37                   	(bad)
 2b6:	04 c3                	add    $0xc3,%al
 2b8:	38 c4                	cmp    %al,%ah
 2ba:	3d 04 e5 3d b4       	cmp    $0xb43de504,%eax
 2bf:	3f                   	(bad)
 2c0:	04 c8                	add    $0xc8,%al
  if (icmp_hdr->type == ICMP_ECHO) {
 2c2:	3f                   	(bad)
 2c3:	cc                   	int3
 2c4:	41 04 ad             	rex.B add $0xad,%al
 2c7:	42 fe 42 04          	rex.X incb 0x4(%rdx)
 2cb:	b5 44                	mov    $0x44,%ch
 2cd:	f3 44 04 81          	repz rex.R add $0x81,%al
 2d1:	45 f5                	rex.RB cmc
 2d3:	45 00 04 af          	add    %r8b,(%r15,%rbp,4)
 2d7:	03 ed                	add    %ebp,%ebp
 2d9:	03 04 88             	add    (%rax,%rcx,4),%eax
  if ((data + sizeof(struct ethhdr) + sizeof(struct iphdr) +
 2dc:	05 ac 05 00 04       	add    $0x40005ac,%eax
 2e1:	ed                   	in     (%dx),%eax
 2e2:	03 9a 04 04 ac 05    	add    0x5ac0404(%rdx),%ebx
 2e8:	c2 06 04             	ret    $0x406
 2eb:	d1 09                	rorl   (%rcx)
  icmp_hdr->type = ICMP_ECHOREPLY;
 2ed:	bd 0a 04 ec 0f       	mov    $0xfec040a,%ebp
  icmp_hdr->checksum += 0x0008;
 2f2:	dc 10                	fcoml  (%rax)
 2f4:	00 04 ed 03 9a 04 04 	add    %al,0x4049a03(,%rbp,8)
  iph->daddr = iph->saddr;
 2fb:	d1 09                	rorl   (%rcx)
  tmp_addr = iph->daddr;
 2fd:	bd 0a 00 04 b4       	mov    $0xb404000a,%ebp
  iph->daddr = iph->saddr;
 302:	05 c2 06 04 ec       	add    $0xec0406c2,%eax
 307:	0f dc 10             	paddusb (%rax),%mm2
 30a:	00 04 de             	add    %al,(%rsi,%rbx,8)
 30d:	0a b9 0b 04 ce 0c    	or     0xcce040b(%rcx),%bh
 313:	d1 0c 00             	rorl   (%rax,%rax,1)
 316:	04 b9                	add    $0xb9,%al
 318:	0b ce                	or     %esi,%ecx
 31a:	0c 04                	or     $0x4,%al
 31c:	d1 0c f9             	rorl   (%rcx,%rdi,8)
 31f:	0c 00                	or     $0x0,%al
 321:	04 83                	add    $0x83,%al
 323:	0d de 0d 04 86       	or     $0x86040dde,%eax
 328:	0f 89 0f 00 04 de    	jns    ffffffffde04033d <ch_rings+0x36ffbb7bb33d>
 32e:	0d 86 0f 04 89       	or     $0x89040f86,%eax
 333:	0f b6 0f             	movzbl (%rdi),%ecx
 336:	00 04 98             	add    %al,(%rax,%rbx,4)
 339:	12 a3 12 04 d5 1c    	adc    0x1cd50412(%rbx),%ah
 33f:	ee                   	out    %al,(%dx)
 340:	1c 00                	sbb    $0x0,%al
 342:	04 98                	add    $0x98,%al
 344:	12 a3 12 04 d5 1c    	adc    0x1cd50412(%rbx),%ah
 34a:	ee                   	out    %al,(%dx)
 34b:	1c 00                	sbb    $0x0,%al
 34d:	04 9d                	add    $0x9d,%al
 34f:	1d f6 1d 04 9a       	sbb    $0x9a041df6,%eax
 354:	21 ee                	and    %ebp,%esi
 356:	21 04 b9             	and    %eax,(%rcx,%rdi,4)
 359:	23 92 24 04 fa 2d    	and    0x2dfa0424(%rdx),%edx
 35f:	e0 2e                	loopne 38f <balancer_ingress+0x38f>
 361:	04 da                	add    $0xda,%al
 363:	30 ec                	xor    %ch,%ah
 365:	31 04 ad 42 fe 42 04 	xor    %eax,0x442fe42(,%rbp,4)
 36c:	b5 44                	mov    $0x44,%ch
 36e:	f3 44 04 81          	repz rex.R add $0x81,%al
 372:	45 d7                	rex.RB xlat %ds:(%rbx)
 374:	45 00 04 b6          	add    %r8b,(%r14,%rsi,4)
 378:	1d f6 1d 04 9a       	sbb    $0x9a041df6,%eax
 37d:	21 b0 21 04 b9 23    	and    %esi,0x23b90421(%rax)
 383:	92                   	xchg   %eax,%edx
 384:	24 04                	and    $0x4,%al
 386:	fa                   	cli
 387:	2d bd 2e 00 04       	sub    $0x4002ebd,%eax
 38c:	9a                   	(bad)
 38d:	21 b0 21 04 b9 23    	and    %esi,0x23b90421(%rax)
 393:	c3                   	ret
 394:	23 00                	and    (%rax),%eax
 396:	04 c5                	add    $0xc5,%al
 398:	2e e0 2e             	loopne,pn 3c9 <balancer_ingress+0x3c9>
 39b:	04 da                	add    $0xda,%al
 39d:	30 ec                	xor    %ch,%ah
 39f:	31 04 ad 42 fe 42 04 	xor    %eax,0x442fe42(,%rbp,4)
 3a6:	b5 44                	mov    $0x44,%ch
 3a8:	f3 44 04 81          	repz rex.R add $0x81,%al
 3ac:	45 d7                	rex.RB xlat %ds:(%rbx)
 3ae:	45 00 04 c5 2e e0 2e 	add    %r8b,0x42ee02e(,%rax,8)
 3b5:	04 
 3b6:	da 30                	fidivl (%rax)
 3b8:	e0 30                	loopne 3ea <balancer_ingress+0x3ea>
 3ba:	00 04 fd 30 e1 31 04 	add    %al,0x431e130(,%rdi,8)
 3c1:	ad                   	lods   %ds:(%rsi),%eax
 3c2:	42 fe 42 04          	rex.X incb 0x4(%rdx)
 3c6:	b5 44                	mov    $0x44,%ch
 3c8:	f3 44 04 81          	repz rex.R add $0x81,%al
 3cc:	45 d7                	rex.RB xlat %ds:(%rbx)
 3ce:	45 00 04 be          	add    %r8b,(%r14,%rdi,4)
 3d2:	31 d5                	xor    %edx,%ebp
 3d4:	31 04 b7             	xor    %eax,(%rdi,%rsi,4)
 3d7:	42 fe 42 04          	rex.X incb 0x4(%rdx)
 3db:	b5 44                	mov    $0x44,%ch
 3dd:	b7 44                	mov    $0x44,%bh
 3df:	04 81                	add    $0x81,%al
 3e1:	45 c7 45 00 04 b7 42 	rex.RB movl $0xfe42b704,0x0(%r13)
 3e8:	fe 
  if (protocol == IPPROTO_IPIP) {
 3e9:	42 04 81             	rex.X add $0x81,%al
 3ec:	45 93                	rex.RB xchg %eax,%r11d
 3ee:	45 00 04 f9          	add    %r8b,(%r9,%rdi,8)
 3f2:	38 c4                	cmp    %al,%ah
 3f4:	3d 04 e5 3d fe       	cmp    $0xfe3de504,%eax
 3f9:	3d 04 c8 3f f2       	cmp    $0xf23fc804,%eax
  tcp = data + off;
 3fe:	3f                   	(bad)
 3ff:	00 04 ea             	add    %al,(%rdx,%rbp,8)
 402:	39 8a 3d 04 ae 3d    	cmp    %ecx,0x3dae043d(%rdx)
  if (tcp + 1 > data_end) {
 408:	c4                   	(bad)
 409:	3d 00 04 f2 39       	cmp    $0x39f20400,%eax
 40e:	94                   	xchg   %eax,%esp
 40f:	3a 04 c4             	cmp    (%rsp,%rax,8),%al
 412:	3a cc                	cmp    %ah,%cl
  if (tcp->syn) {
 414:	3c 00                	cmp    $0x0,%al
 416:	04 f6                	add    $0xf6,%al
 418:	39 94 3a 04 c4 3a f5 	cmp    %edx,-0xac53bfc(%rdx,%rdi,1)
    pckt->flags |= F_SYN_SET;
 41f:	3b 00                	cmp    (%rax),%eax
 421:	04 ea                	add    $0xea,%al
 423:	3c f0                	cmp    $0xf0,%al
 425:	3c 04                	cmp    $0x4,%al
      pckt->flow.src = iph->saddr;
 427:	f2 3c fe             	repnz cmp $0xfe,%al
 42a:	3c 00                	cmp    $0x0,%al
 42c:	04 ea                	add    $0xea,%al
      pckt->flow.dst = iph->daddr;
 42e:	3c f0                	cmp    $0xf0,%al
 430:	3c 04                	cmp    $0x4,%al
 432:	f2 3c fe             	repnz cmp $0xfe,%al
  if (protocol == IPPROTO_ICMPV6) {
 435:	3c 00                	cmp    $0x0,%al
 437:	04 e9                	add    $0xe9,%al
  if (icmp_hdr + 1 > data_end) {
 439:	34 86                	xor    $0x86,%al
 43b:	35 04 bb 41 cc       	xor    $0xcc41bb04,%eax
 440:	41 04 e4             	rex.B add $0xe4,%al
 443:	45 f5                	rex.RB cmc
  if (icmp_hdr->icmp6_type == ICMPV6_ECHO_REQUEST) {
 445:	45 00 04 e9          	add    %r8b,(%r9,%rbp,8)
 449:	34 86                	xor    $0x86,%al
 44b:	35 04 bb 41 cc       	xor    $0xcc41bb04,%eax
 450:	41 04 e4             	rex.B add $0xe4,%al
 453:	45 f5                	rex.RB cmc
 455:	45                   	rex.RB
	...

Disassembly of section .debug_str_offsets:

0000000000000000 <.debug_str_offsets>:
  void* data = (void*)(long)ctx->data;
   0:	ec                   	in     (%dx),%al
   1:	05 00 00 05 00       	add    $0x50000,%eax
   6:	00 00                	add    %al,(%rax)
   8:	00 00                	add    %al,(%rax)
   a:	00 00                	add    %al,(%rax)
   c:	1c 00                	sbb    $0x0,%al
   e:	00 00                	add    %al,(%rax)
  10:	3a 00                	cmp    (%rax),%al
  12:	00 00                	add    %al,(%rax)
  14:	65 00 00             	add    %al,%gs:(%rax)
  17:	00 cd                	add    %cl,%ch
  void* data_end = (void*)(long)ctx->data_end;
  19:	00 00                	add    %al,(%rax)
  1b:	00 6e 00             	add    %ch,0x0(%rsi)
  if (data + nh_off > data_end) {
  1e:	00 00                	add    %al,(%rax)
  20:	82                   	(bad)
  21:	00 00                	add    %al,(%rax)
  23:	00 1c 09             	add    %bl,(%rcx,%rcx,1)
  26:	00 00                	add    %al,(%rax)
  28:	95                   	xchg   %eax,%ebp
  29:	00 00                	add    %al,(%rax)
  2b:	00 50 0c             	add    %dl,0xc(%rax)
  2e:	00 00                	add    %al,(%rax)
  30:	8c 00                	mov    %es,(%rax)
  eth_proto = eth->h_proto;
  32:	00 00                	add    %al,(%rax)
  34:	99                   	cltd
  if (eth_proto == BE_ETH_P_IP) {
  35:	00 00                	add    %al,(%rax)
  37:	00 db                	add    %bl,%bl
  39:	00 00                	add    %al,(%rax)
  3b:	00 9f 00 00 00 b2    	add    %bl,-0x4e000000(%rdi)
  41:	00 00                	add    %al,(%rax)
  43:	00 b8 00 00 00 c0    	add    %bh,-0x40000000(%rax)
  49:	00 00                	add    %al,(%rax)
  4b:	00 c4                	add    %al,%ah
  4d:	00 00                	add    %al,(%rax)
  4f:	00 d2                	add    %dl,%dl
  struct packet_description pckt = {};
  51:	00 00                	add    %al,(%rax)
  53:	00 d7                	add    %dl,%bh
  55:	00 00                	add    %al,(%rax)
  57:	00 e1                	add    %ah,%cl
  59:	00 00                	add    %al,(%rax)
  5b:	00 ed                	add    %ch,%ch
  5d:	00 00                	add    %al,(%rax)
  5f:	00 92 0a 00 00 19    	add    %dl,0x1900000a(%rdx)
  65:	06                   	(bad)
  66:	00 00                	add    %al,(%rax)
  68:	f7 00 00 00 fe 00    	testl  $0xfe0000,(%rax)
  6e:	00 00                	add    %al,(%rax)
  70:	05 01 00 00 0d       	add    $0xd000001,%eax
  75:	01 00                	add    %eax,(%rax)
  77:	00 19                	add    %bl,(%rcx)
  79:	01 00                	add    %eax,(%rax)
  7b:	00 c7                	add    %al,%bh
  7d:	0d 00 00 21 01       	or     $0x1210000,%eax
  82:	00 00                	add    %al,(%rax)
  84:	96                   	xchg   %eax,%esi
  85:	07                   	(bad)
  struct vip_definition vip = {};
  86:	00 00                	add    %al,(%rax)
  88:	27                   	(bad)
  89:	01 00                	add    %eax,(%rax)
  8b:	00 36                	add    %dh,(%rsi)
  8d:	01 00                	add    %eax,(%rax)
  8f:	00 c1                	add    %al,%cl
  91:	0e                   	(bad)
  92:	00 00                	add    %al,(%rax)
  94:	3c 01                	cmp    $0x1,%al
  96:	00 00                	add    %al,(%rax)
  98:	f1                   	int1
  99:	00 00                	add    %al,(%rax)
  9b:	00 4b 01             	add    %cl,0x1(%rbx)
  9e:	00 00                	add    %al,(%rax)
    if (iph + 1 > data_end) {
  a0:	53                   	push   %rbx
  a1:	01 00                	add    %eax,(%rax)
  a3:	00 5c 01 00          	add    %bl,0x0(%rcx,%rax,1)
  a7:	00 69 0d             	add    %ch,0xd(%rcx)
  aa:	00 00                	add    %al,(%rax)
  ac:	6b 01 00             	imul   $0x0,(%rcx),%eax
    if (iph->ihl != 5) {
  af:	00 98 0a 00 00 71    	add    %bl,0x7100000a(%rax)
  b5:	01 00                	add    %eax,(%rax)
  b7:	00 77 01             	add    %dh,0x1(%rdi)
    pckt->tos = iph->tos;
  ba:	00 00                	add    %al,(%rax)
  bc:	7d 01                	jge    bf <balancer_ingress+0xbf>
  be:	00 00                	add    %al,(%rax)
    *protocol = iph->protocol;
  c0:	84 01                	test   %al,(%rcx)
  c2:	00 00                	add    %al,(%rax)
    pckt->flow.proto = *protocol;
  c4:	37                   	(bad)
  c5:	08 00                	or     %al,(%rax)
    if (iph->frag_off & PCKT_FRAGMENTED) {
  c7:	00 8d 01 00 00 93    	add    %cl,-0x6cffffff(%rbp)
  cd:	01 00                	add    %eax,(%rax)
  cf:	00 a0 01 00 00 ac    	add    %ah,-0x53ffffff(%rax)
  d5:	01 00                	add    %eax,(%rax)
  d7:	00 b3 01 00 00 bc    	add    %dh,-0x43ffffff(%rbx)
    if (*protocol == IPPROTO_ICMP) {
  dd:	01 00                	add    %eax,(%rax)
  df:	00 c2                	add    %al,%dl
  e1:	01 00                	add    %eax,(%rax)
  if (icmp_hdr + 1 > data_end) {
  e3:	00 d2                	add    %dl,%dl
  e5:	01 00                	add    %eax,(%rax)
  e7:	00 7d 02             	add    %bh,0x2(%rbp)
  ea:	00 00                	add    %al,(%rax)
  ec:	84 02                	test   %al,(%rdx)
  ee:	00 00                	add    %al,(%rax)
  if (icmp_hdr->type == ICMP_ECHO) {
  f0:	de 01                	fiadds (%rcx)
  f2:	00 00                	add    %al,(%rax)
  f4:	aa                   	stos   %al,%es:(%rdi)
  f5:	0d 00 00 e7 01       	or     $0x1e70000,%eax
  fa:	00 00                	add    %al,(%rax)
  fc:	b6 08                	mov    $0x8,%dh
  fe:	00 00                	add    %al,(%rax)
 100:	f6 01 00             	testb  $0x0,(%rcx)
 103:	00 05 02 00 00 0f    	add    %al,0xf000002(%rip)        # f00010b <_license+0xeffdd26>
 109:	02 00                	add    (%rax),%al
 10b:	00 1b                	add    %bl,(%rbx)
 10d:	02 00                	add    (%rax),%al
  icmp_hdr->type = ICMP_ECHOREPLY;
 10f:	00 31                	add    %dh,(%rcx)
 111:	02 00                	add    (%rax),%al
  icmp_hdr->checksum += 0x0008;
 113:	00 4e 02             	add    %cl,0x2(%rsi)
 116:	00 00                	add    %al,(%rax)
  iph->ttl = DEFAULT_TTL;
 118:	59                   	pop    %rcx
 119:	02 00                	add    (%rax),%al
  iph->daddr = iph->saddr;
 11b:	00 72 02             	add    %dh,0x2(%rdx)
  tmp_addr = iph->daddr;
 11e:	00 00                	add    %al,(%rax)
 120:	79 02                	jns    124 <balancer_ingress+0x124>
  iph->daddr = iph->saddr;
 122:	00 00                	add    %al,(%rax)
  iph->saddr = tmp_addr;
 124:	80 02 00             	addb   $0x0,(%rdx)
 127:	00 87 02 00 00 8e    	add    %al,-0x71fffffe(%rdi)
 12d:	02 00                	add    (%rax),%al
 12f:	00 9f 02 00 00 b3    	add    %bl,-0x4cfffffe(%rdi)
 135:	02 00                	add    (%rax),%al
 137:	00 c8                	add    %cl,%al
 139:	02 00                	add    (%rax),%al
 13b:	00 de                	add    %bl,%dh
 13d:	02 00                	add    (%rax),%al
 13f:	00 ee                	add    %ch,%dh
 141:	02 00                	add    (%rax),%al
 143:	00 02                	add    %al,(%rdx)
 145:	03 00                	add    (%rax),%eax
 147:	00 1d 03 00 00 2d    	add    %bl,0x2d000003(%rip)        # 2d000150 <_license+0x2cffdd6b>
 14d:	03 00                	add    (%rax),%eax
 14f:	00 3b                	add    %bh,(%rbx)
 151:	03 00                	add    (%rax),%eax
 153:	00 49 03             	add    %cl,0x3(%rcx)
 156:	00 00                	add    %al,(%rax)
 158:	54                   	push   %rsp
 159:	03 00                	add    (%rax),%eax
 15b:	00 5c 03 00          	add    %bl,0x0(%rbx,%rax,1)
  struct packet_description pckt = {};
 15f:	00 71 03             	add    %dh,0x3(%rcx)
 162:	00 00                	add    %al,(%rax)
 164:	81 03 00 00 97 03    	addl   $0x3970000,(%rbx)
 16a:	00 00                	add    %al,(%rax)
 16c:	ab                   	stos   %eax,%es:(%rdi)
 16d:	03 00                	add    (%rax),%eax
 16f:	00 c4                	add    %al,%ah
 171:	03 00                	add    (%rax),%eax
 173:	00 d5                	add    %dl,%ch
 175:	03 00                	add    (%rax),%eax
 177:	00 e9                	add    %ch,%cl
 179:	03 00                	add    (%rax),%eax
 17b:	00 f5                	add    %dh,%ch
 17d:	03 00                	add    (%rax),%eax
 17f:	00 fe                	add    %bh,%dh
 181:	03 00                	add    (%rax),%eax
 183:	00 07                	add    %al,(%rdi)
 185:	04 00                	add    $0x0,%al
 187:	00 0e                	add    %cl,(%rsi)
 189:	04 00                	add    $0x0,%al
 18b:	00 1b                	add    %bl,(%rbx)
 18d:	04 00                	add    $0x0,%al
 18f:	00 26                	add    %ah,(%rsi)
 191:	04 00                	add    $0x0,%al
 193:	00 31                	add    %dh,(%rcx)
  struct vip_definition vip = {};
 195:	04 00                	add    $0x0,%al
 197:	00 3e                	add    %bh,(%rsi)
 199:	04 00                	add    $0x0,%al
 19b:	00 4b 04             	add    %cl,0x4(%rbx)
 19e:	00 00                	add    %al,(%rax)
 1a0:	58                   	pop    %rax
 1a1:	04 00                	add    $0x0,%al
 1a3:	00 64 04 00          	add    %ah,0x0(%rsp,%rax,1)
 1a7:	00 70 04             	add    %dh,0x4(%rax)
 1aa:	00 00                	add    %al,(%rax)
 1ac:	7c 04                	jl     1b2 <balancer_ingress+0x1b2>
 1ae:	00 00                	add    %al,(%rax)
    if (ip6h + 1 > data_end) {
 1b0:	88 04 00             	mov    %al,(%rax,%rax,1)
 1b3:	00 94 04 00 00 9f 04 	add    %dl,0x49f0000(%rsp,%rax,1)
 1ba:	00 00                	add    %al,(%rax)
    *protocol = ip6h->nexthdr;
 1bc:	ac                   	lods   %ds:(%rsi),%al
 1bd:	04 00                	add    $0x0,%al
    pckt->flow.proto = *protocol;
 1bf:	00 b9 04 00 00 c6    	add    %bh,-0x39fffffc(%rcx)
    pckt->tos = (ip6h->priority << 4) & 0xF0;
 1c5:	04 00                	add    $0x0,%al
 1c7:	00 d2                	add    %dl,%dl
 1c9:	04 00                	add    $0x0,%al
 1cb:	00 de                	add    %bl,%dh
    pckt->tos = pckt->tos | ((ip6h->flow_lbl[0] >> 4) & 0x0F);
 1cd:	04 00                	add    $0x0,%al
 1cf:	00 e9                	add    %ch,%cl
 1d1:	04 00                	add    $0x0,%al
 1d3:	00 f5                	add    %dh,%ch
 1d5:	04 00                	add    $0x0,%al
 1d7:	00 04 05 00 00 12 05 	add    %al,0x5120000(,%rax,1)
    if (*protocol == IPPROTO_FRAGMENT) {
 1de:	00 00                	add    %al,(%rax)
 1e0:	1e                   	(bad)
 1e1:	05 00 00 2b 05       	add    $0x52b0000,%eax
 1e6:	00 00                	add    %al,(%rax)
 1e8:	38 05 00 00 45 05    	cmp    %al,0x5450000(%rip)        # 54501ee <_license+0x544de09>
  if (icmp_hdr + 1 > data_end) {
 1ee:	00 00                	add    %al,(%rax)
 1f0:	55                   	push   %rbp
 1f1:	05 00 00 62 05       	add    $0x5620000,%eax
 1f6:	00 00                	add    %al,(%rax)
 1f8:	73 05                	jae    1ff <balancer_ingress+0x1ff>
  if (icmp_hdr->icmp6_type == ICMPV6_ECHO_REQUEST) {
 1fa:	00 00                	add    %al,(%rax)
 1fc:	83 05 00 00 8f 05 00 	addl   $0x0,0x58f0000(%rip)        # 58f0203 <_license+0x58ede1e>
 203:	00 9b 05 00 00 a9    	add    %bl,-0x56fffffb(%rbx)
 209:	05 00 00 ad 00       	add    $0xad0000,%eax
 20e:	00 00                	add    %al,(%rax)
 210:	b5 05                	mov    $0x5,%ch
 212:	00 00                	add    %al,(%rax)
 214:	0d 08 00 00 be       	or     $0xbe000008,%eax
 219:	05 00 00 c7 05       	add    $0x5c70000,%eax
 21e:	00 00                	add    %al,(%rax)
 220:	d3 05 00 00 da 05    	roll   %cl,0x5da0000(%rip)        # 5da0226 <_license+0x5d9de41>
 226:	00 00                	add    %al,(%rax)
 228:	e2 05                	loop   22f <balancer_ingress+0x22f>
 22a:	00 00                	add    %al,(%rax)
 22c:	ec                   	in     (%dx),%al
 22d:	05 00 00 f2 05       	add    $0x5f20000,%eax
 232:	00 00                	add    %al,(%rax)
 234:	f8                   	clc
 235:	05 00 00 01 06       	add    $0x6010000,%eax
 23a:	00 00                	add    %al,(%rax)
 23c:	0b 06                	or     (%rsi),%eax
 23e:	00 00                	add    %al,(%rax)
 240:	15 06 00 00 1e       	adc    $0x1e000006,%eax
 245:	06                   	(bad)
 246:	00 00                	add    %al,(%rax)
 248:	24 06                	and    $0x6,%al
 24a:	00 00                	add    %al,(%rax)
 24c:	2a 06                	sub    (%rsi),%al
 24e:	00 00                	add    %al,(%rax)
 250:	32 06                	xor    (%rsi),%al
 252:	00 00                	add    %al,(%rax)
 254:	36 06                	ss (bad)
 256:	00 00                	add    %al,(%rax)
 258:	3a 06                	cmp    (%rsi),%al
 25a:	00 00                	add    %al,(%rax)
 25c:	84 06                	test   %al,(%rsi)
 25e:	00 00                	add    %al,(%rax)
 260:	42 06                	rex.X (bad)
 262:	00 00                	add    %al,(%rax)
 264:	bf 0a 00 00 4b       	mov    $0x4b00000a,%edi
 269:	06                   	(bad)
 26a:	00 00                	add    %al,(%rax)
 26c:	54                   	push   %rsp
 26d:	06                   	(bad)
 26e:	00 00                	add    %al,(%rax)
 270:	5a                   	pop    %rdx
 271:	06                   	(bad)
 272:	00 00                	add    %al,(%rax)
 274:	62 06                	(bad)
 276:	00 00                	add    %al,(%rax)
 278:	68 06 00 00 75       	push   $0x75000006
 27d:	06                   	(bad)
 27e:	00 00                	add    %al,(%rax)
 280:	87 06                	xchg   %eax,(%rsi)
 282:	00 00                	add    %al,(%rax)
 284:	79 06                	jns    28c <balancer_ingress+0x28c>
 286:	00 00                	add    %al,(%rax)
      memcpy(pckt->flow.srcv6, ip6h->saddr.s6_addr32, 16);
 288:	98                   	cwtl
 289:	06                   	(bad)
 28a:	00 00                	add    %al,(%rax)
 28c:	9b                   	fwait
 28d:	00 00                	add    %al,(%rax)
 28f:	00 aa 06 00 00 b9    	add    %ch,-0x46fffffa(%rdx)
 295:	06                   	(bad)
 296:	00 00                	add    %al,(%rax)
 298:	6a 0b                	push   $0xb
      memcpy(pckt->flow.dstv6, ip6h->daddr.s6_addr32, 16);
 29a:	00 00                	add    %al,(%rax)
 29c:	bd 06 00 00 c6       	mov    $0xc6000006,%ebp
 2a1:	06                   	(bad)
 2a2:	00 00                	add    %al,(%rax)
 2a4:	d0 06                	rolb   (%rsi)
 2a6:	00 00                	add    %al,(%rax)
 2a8:	e0 06                	loopne 2b0 <balancer_ingress+0x2b0>
 2aa:	00 00                	add    %al,(%rax)
  if (protocol == IPPROTO_ICMPV6) {
 2ac:	e4 06                	in     $0x6,%al
 2ae:	00 00                	add    %al,(%rax)
 2b0:	f1                   	int1
 2b1:	06                   	(bad)
 2b2:	00 00                	add    %al,(%rax)
  if (icmp_hdr + 1 > data_end) {
 2b4:	f5                   	cmc
 2b5:	06                   	(bad)
 2b6:	00 00                	add    %al,(%rax)
 2b8:	02 07                	add    (%rdi),%al
 2ba:	00 00                	add    %al,(%rax)
 2bc:	0b 07                	or     (%rdi),%eax
 2be:	00 00                	add    %al,(%rax)
 2c0:	12 07                	adc    (%rdi),%al
  if (icmp_hdr->type == ICMP_ECHO) {
 2c2:	00 00                	add    %al,(%rax)
 2c4:	19 07                	sbb    %eax,(%rdi)
 2c6:	00 00                	add    %al,(%rax)
 2c8:	21 07                	and    %eax,(%rdi)
 2ca:	00 00                	add    %al,(%rax)
 2cc:	d8 0a                	fmuls  (%rdx)
 2ce:	00 00                	add    %al,(%rax)
 2d0:	27                   	(bad)
 2d1:	07                   	(bad)
 2d2:	00 00                	add    %al,(%rax)
 2d4:	2c 07                	sub    $0x7,%al
 2d6:	00 00                	add    %al,(%rax)
 2d8:	37                   	(bad)
 2d9:	07                   	(bad)
 2da:	00 00                	add    %al,(%rax)
  if ((data + sizeof(struct ethhdr) + sizeof(struct iphdr) +
 2dc:	4a 07                	rex.WX (bad)
 2de:	00 00                	add    %al,(%rax)
 2e0:	57                   	push   %rdi
 2e1:	07                   	(bad)
 2e2:	00 00                	add    %al,(%rax)
       sizeof(struct icmphdr)) > data_end) {
 2e4:	1f                   	(bad)
 2e5:	04 00                	add    $0x0,%al
  if ((data + sizeof(struct ethhdr) + sizeof(struct iphdr) +
 2e7:	00 5e 07             	add    %bl,0x7(%rsi)
 2ea:	00 00                	add    %al,(%rax)
 2ec:	e2 0a                	loop   2f8 <balancer_ingress+0x2f8>
  icmp_hdr->type = ICMP_ECHOREPLY;
 2ee:	00 00                	add    %al,(%rax)
 2f0:	67 07                	addr32 (bad)
  icmp_hdr->checksum += 0x0008;
 2f2:	00 00                	add    %al,(%rax)
 2f4:	72 07                	jb     2fd <balancer_ingress+0x2fd>
  iph->ttl = DEFAULT_TTL;
 2f6:	00 00                	add    %al,(%rax)
 2f8:	7a 07                	jp     301 <balancer_ingress+0x301>
  iph->daddr = iph->saddr;
 2fa:	00 00                	add    %al,(%rax)
 2fc:	82                   	(bad)
  tmp_addr = iph->daddr;
 2fd:	07                   	(bad)
 2fe:	00 00                	add    %al,(%rax)
  iph->daddr = iph->saddr;
 300:	8c 07                	mov    %es,(%rdi)
 302:	00 00                	add    %al,(%rax)
  iph->saddr = tmp_addr;
 304:	9b                   	fwait
 305:	07                   	(bad)
 306:	00 00                	add    %al,(%rax)
 308:	a0 07 00 00 a8 07 00 	movabs 0xad000007a8000007,%al
 30f:	00 ad 
 311:	07                   	(bad)
 312:	00 00                	add    %al,(%rax)
 314:	b4 07                	mov    $0x7,%ah
 316:	00 00                	add    %al,(%rax)
 318:	b8 07 00 00 c2       	mov    $0xc2000007,%eax
 31d:	07                   	(bad)
 31e:	00 00                	add    %al,(%rax)
 320:	ce                   	(bad)
 321:	07                   	(bad)
 322:	00 00                	add    %al,(%rax)
 324:	dc 07                	faddl  (%rdi)
 326:	00 00                	add    %al,(%rax)
 328:	e6 07                	out    %al,$0x7
 32a:	00 00                	add    %al,(%rax)
 32c:	ee                   	out    %al,(%dx)
 32d:	07                   	(bad)
 32e:	00 00                	add    %al,(%rax)
 330:	cb                   	lret
 331:	02 00                	add    (%rax),%al
 333:	00 05 08 00 00 27    	add    %al,0x27000008(%rip)        # 27000341 <_license+0x26ffdf5c>
 339:	02 00                	add    (%rax),%al
 33b:	00 09                	add    %cl,(%rcx)
 33d:	08 00                	or     %al,(%rax)
 33f:	00 15 08 00 00 20    	add    %dl,0x20000008(%rip)        # 2000034d <_license+0x1fffdf68>
 345:	08 00                	or     %al,(%rax)
 347:	00 32                	add    %dh,(%rdx)
 349:	08 00                	or     %al,(%rax)
 34b:	00 3b                	add    %bh,(%rbx)
 34d:	08 00                	or     %al,(%rax)
 34f:	00 3f                	add    %bh,(%rdi)
 351:	08 00                	or     %al,(%rax)
 353:	00 50 08             	add    %dl,0x8(%rax)
 356:	00 00                	add    %al,(%rax)
 358:	54                   	push   %rsp
 359:	08 00                	or     %al,(%rax)
 35b:	00 59 08             	add    %bl,0x8(%rcx)
 35e:	00 00                	add    %al,(%rax)
 360:	47 06                	rex.RXB (bad)
 362:	00 00                	add    %al,(%rax)
 364:	64 08 00             	or     %al,%fs:(%rax)
 367:	00 27                	add    %ah,(%rdi)
 369:	09 00                	or     %eax,(%rax)
 36b:	00 6d 08             	add    %ch,0x8(%rbp)
 36e:	00 00                	add    %al,(%rax)
 370:	42 09 00             	rex.X or %eax,(%rax)
 373:	00 7b 09             	add    %bh,0x9(%rbx)
 376:	00 00                	add    %al,(%rax)
 378:	76 08                	jbe    382 <balancer_ingress+0x382>
 37a:	00 00                	add    %al,(%rax)
 37c:	7f 08                	jg     386 <balancer_ingress+0x386>
 37e:	00 00                	add    %al,(%rax)
 380:	87 08                	xchg   %ecx,(%rax)
 382:	00 00                	add    %al,(%rax)
 384:	8c 08                	mov    %cs,(%rax)
 386:	00 00                	add    %al,(%rax)
 388:	95                   	xchg   %eax,%ebp
 389:	08 00                	or     %al,(%rax)
 38b:	00 99 08 00 00 a2    	add    %bl,-0x5dfffff8(%rcx)
 391:	08 00                	or     %al,(%rax)
 393:	00 aa 08 00 00 bc    	add    %ch,-0x43fffff8(%rdx)
 399:	08 00                	or     %al,(%rax)
 39b:	00 cb                	add    %cl,%bl
 39d:	08 00                	or     %al,(%rax)
 39f:	00 db                	add    %bl,%bl
 3a1:	08 00                	or     %al,(%rax)
 3a3:	00 e4                	add    %ah,%ah
 3a5:	08 00                	or     %al,(%rax)
 3a7:	00 e9                	add    %ch,%cl
 3a9:	08 00                	or     %al,(%rax)
 3ab:	00 fa                	add    %bh,%dl
 3ad:	08 00                	or     %al,(%rax)
 3af:	00 07                	add    %al,(%rdi)
 3b1:	09 00                	or     %eax,(%rax)
 3b3:	00 09                	add    %cl,(%rcx)
 3b5:	09 00                	or     %eax,(%rax)
 3b7:	00 16                	add    %dl,(%rsi)
 3b9:	09 00                	or     %eax,(%rax)
 3bb:	00 21                	add    %ah,(%rcx)
 3bd:	09 00                	or     %eax,(%rax)
 3bf:	00 2c 09             	add    %ch,(%rcx,%rcx,1)
 3c2:	00 00                	add    %al,(%rax)
 3c4:	38 09                	cmp    %cl,(%rcx)
 3c6:	00 00                	add    %al,(%rax)
 3c8:	45 09 00             	or     %r8d,(%r8)
 3cb:	00 4f 09             	add    %cl,0x9(%rdi)
 3ce:	00 00                	add    %al,(%rax)
 3d0:	59                   	pop    %rcx
 3d1:	09 00                	or     %eax,(%rax)
 3d3:	00 62 09             	add    %ah,0x9(%rdx)
 3d6:	00 00                	add    %al,(%rax)
 3d8:	69 09 00 00 74 09    	imul   $0x9740000,(%rcx),%ecx
 3de:	00 00                	add    %al,(%rax)
 3e0:	80 09 00             	orb    $0x0,(%rcx)
 3e3:	00 8a 09 00 00 93    	add    %cl,-0x6cfffff7(%rdx)
  if (protocol == IPPROTO_IPIP) {
 3e9:	09 00                	or     %eax,(%rax)
 3eb:	00 9d 09 00 00 a4    	add    %bl,-0x5bfffff7(%rbp)
 3f1:	09 00                	or     %eax,(%rax)
 3f3:	00 ae 09 00 00 bd    	add    %ch,-0x42fffff7(%rsi)
 3f9:	09 00                	or     %eax,(%rax)
 3fb:	00 c5                	add    %al,%ch
  tcp = data + off;
 3fd:	09 00                	or     %eax,(%rax)
 3ff:	00 d1                	add    %dl,%cl
  if (is_ipv6) {
 401:	09 00                	or     %eax,(%rax)
  tcp = data + off;
 403:	00 dc                	add    %bl,%ah
 405:	09 00                	or     %eax,(%rax)
  if (tcp + 1 > data_end) {
 407:	00 e2                	add    %ah,%dl
 409:	09 00                	or     %eax,(%rax)
 40b:	00 ea                	add    %ch,%dl
 40d:	09 00                	or     %eax,(%rax)
 40f:	00 f6                	add    %dh,%dh
 411:	09 00                	or     %eax,(%rax)
  if (tcp->syn) {
 413:	00 03                	add    %al,(%rbx)
 415:	0a 00                	or     (%rax),%al
 417:	00 0c 0a             	add    %cl,(%rdx,%rcx,1)
 41a:	00 00                	add    %al,(%rax)
 41c:	1e                   	(bad)
    pckt->flags |= F_SYN_SET;
 41d:	0a 00                	or     (%rax),%al
 41f:	00 24 0a             	add    %ah,(%rdx,%rcx,1)
 422:	00 00                	add    %al,(%rax)
 424:	2a 0b                	sub    (%rbx),%cl
      pckt->flow.src = iph->saddr;
 426:	00 00                	add    %al,(%rax)
 428:	23 0b                	and    (%rbx),%ecx
 42a:	00 00                	add    %al,(%rax)
 42c:	2c 0a                	sub    $0xa,%al
      pckt->flow.dst = iph->daddr;
 42e:	00 00                	add    %al,(%rax)
 430:	28 0a                	sub    %cl,(%rdx)
 432:	00 00                	add    %al,(%rax)
  if (protocol == IPPROTO_ICMPV6) {
 434:	30 0a                	xor    %cl,(%rdx)
 436:	00 00                	add    %al,(%rax)
  if (icmp_hdr + 1 > data_end) {
 438:	33 0a                	xor    (%rdx),%ecx
 43a:	00 00                	add    %al,(%rax)
 43c:	38 0a                	cmp    %cl,(%rdx)
 43e:	00 00                	add    %al,(%rax)
 440:	3d 0a 00 00 58       	cmp    $0x5800000a,%eax
  if (icmp_hdr->icmp6_type == ICMPV6_ECHO_REQUEST) {
 445:	03 00                	add    (%rax),%eax
 447:	00 41 0a             	add    %al,0xa(%rcx)
 44a:	00 00                	add    %al,(%rax)
 44c:	45 0a 00             	or     (%r8),%r8b
 44f:	00 49 0a             	add    %cl,0xa(%rcx)
 452:	00 00                	add    %al,(%rax)
 454:	4d 0a 00             	rex.WRB or (%r8),%r8b
 457:	00 51 0a             	add    %dl,0xa(%rcx)
 45a:	00 00                	add    %al,(%rax)
 45c:	55                   	push   %rbp
 45d:	0a 00                	or     (%rax),%al
 45f:	00 59 0a             	add    %bl,0xa(%rcx)
 462:	00 00                	add    %al,(%rax)
 464:	60                   	(bad)
  if ((data + sizeof(struct ethhdr) + sizeof(struct ipv6hdr) +
 465:	0a 00                	or     (%rax),%al
 467:	00 68 0a             	add    %ch,0xa(%rax)
 46a:	00 00                	add    %al,(%rax)
 46c:	6f                   	outsl  %ds:(%rsi),(%dx)
 46d:	0a 00                	or     (%rax),%al
       sizeof(struct icmp6hdr)) > data_end) {
 46f:	00 7b 0a             	add    %bh,0xa(%rbx)
  if ((data + sizeof(struct ethhdr) + sizeof(struct ipv6hdr) +
 472:	00 00                	add    %al,(%rax)
 474:	8c 0a                	mov    %cs,(%rdx)
 476:	00 00                	add    %al,(%rax)
 478:	9c                   	pushf
 479:	0a 00                	or     (%rax),%al
 47b:	00 a5 0a 00 00 b5    	add    %ah,-0x4afffff6(%rbp)
 481:	0a 00                	or     (%rax),%al
 483:	00 74 0a 00          	add    %dh,0x0(%rdx,%rcx,1)
 487:	00 c3                	add    %al,%bl
 489:	0a 00                	or     (%rax),%al
 48b:	00 dd                	add    %bl,%ch
 48d:	0a 00                	or     (%rax),%al
 48f:	00 ec                	add    %ch,%ah
 491:	0a 00                	or     (%rax),%al
 493:	00 fc                	add    %bh,%ah
 495:	0a 00                	or     (%rax),%al
 497:	00 07                	add    %al,(%rdi)
 499:	0b 00                	or     (%rax),%eax
 49b:	00 10                	add    %dl,(%rax)
  tcp = data + off;
 49d:	0b 00                	or     (%rax),%eax
 49f:	00 19                	add    %bl,(%rcx)
  if (is_ipv6) {
 4a1:	0b 00                	or     (%rax),%eax
  tcp = data + off;
 4a3:	00 21                	add    %ah,(%rcx)
 4a5:	0b 00                	or     (%rax),%eax
  if (tcp + 1 > data_end) {
 4a7:	00 28                	add    %ch,(%rax)
 4a9:	0b 00                	or     (%rax),%eax
 4ab:	00 bf 0e 00 00 31    	add    %bh,0x3100000e(%rdi)
 4b1:	0b 00                	or     (%rax),%eax
 4b3:	00 38                	add    %bh,(%rax)
  if (tcp->syn) {
 4b5:	0b 00                	or     (%rax),%eax
 4b7:	00 40 0b             	add    %al,0xb(%rax)
 4ba:	00 00                	add    %al,(%rax)
 4bc:	46 0b 00             	rex.RX or (%rax),%r8d
    pckt->flags |= F_SYN_SET;
 4bf:	00 cf                	add    %cl,%bh
 4c1:	05 00 00 4a 0b       	add    $0xb4a0000,%eax
 4c6:	00 00                	add    %al,(%rax)
 4c8:	51                   	push   %rcx
 4c9:	0b 00                	or     (%rax),%eax
 4cb:	00 5a 0b             	add    %bl,0xb(%rdx)
 4ce:	00 00                	add    %al,(%rax)
 4d0:	2b 08                	sub    (%rax),%ecx
        bpf_map_lookup_elem(&stats, &stats_key);
 4d2:	00 00                	add    %al,(%rax)
 4d4:	65 0b 00             	or     %gs:(%rax),%eax
 4d7:	00 6f 0b             	add    %ch,0xb(%rdi)
 4da:	00 00                	add    %al,(%rax)
 4dc:	78 0b                	js     4e9 <balancer_ingress+0x4e9>
 4de:	00 00                	add    %al,(%rax)
 4e0:	7f 0b                	jg     4ed <balancer_ingress+0x4ed>
    if (!icmp_ptb_v6_stats) {
 4e2:	00 00                	add    %al,(%rax)
 4e4:	8c 06                	mov    %es,(%rsi)
 4e6:	00 00                	add    %al,(%rax)
 4e8:	8d 0b                	lea    (%rbx),%ecx
    icmp_ptb_v6_stats->v1 += 1;
 4ea:	00 00                	add    %al,(%rax)
 4ec:	a6                   	cmpsb  %es:(%rdi),%ds:(%rsi)
 4ed:	0b 00                	or     (%rax),%eax
    __u32 mtu = bpf_ntohl(icmp_hdr->icmp6_mtu);
 4ef:	00 32                	add    %dh,(%rdx)
 4f1:	0c 00                	or     $0x0,%al
    if (mtu < MAX_MTU_IN_PTB_TO_DROP) {
 4f3:	00 be 0b 00 00 95    	add    %bh,-0x6afffff5(%rsi)
 4f9:	0c 00                	or     $0x0,%al
      icmp_ptb_v6_stats->v2 += 1;
 4fb:	00 ca                	add    %cl,%dl
 4fd:	0b 00                	or     (%rax),%eax
 4ff:	00 d3                	add    %dl,%bl
  if (ip6h + 1 > data_end) {
 501:	0b 00                	or     (%rax),%eax
 503:	00 f0                	add    %dh,%al
 505:	0b 00                	or     (%rax),%eax
 507:	00 f8                	add    %bh,%al
 509:	0b 00                	or     (%rax),%eax
 50b:	00 06                	add    %al,(%rsi)
  pckt->flow.proto = ip6h->nexthdr;
 50d:	0c 00                	or     $0x0,%al
 50f:	00 14 0c             	add    %dl,(%rsp,%rcx,1)
 512:	00 00                	add    %al,(%rax)
  pckt->flags |= F_ICMP;
 514:	88 03                	mov    %al,(%rbx)
 516:	00 00                	add    %al,(%rax)
 518:	2d 0c 00 00 f1       	sub    $0xf100000c,%eax
  memcpy(pckt->flow.srcv6, ip6h->daddr.s6_addr32, 16);
 51d:	0a 00                	or     (%rax),%al
 51f:	00 37                	add    %dh,(%rdi)
 521:	0c 00                	or     $0x0,%al
 523:	00 46 0c             	add    %al,0xc(%rsi)
 526:	00 00                	add    %al,(%rax)
 528:	54                   	push   %rsp
 529:	0c 00                	or     $0x0,%al
  memcpy(pckt->flow.dstv6, ip6h->saddr.s6_addr32, 16);
 52b:	00 64 0c 00          	add    %ah,0x0(%rsp,%rcx,1)
 52f:	00 6d 0c             	add    %ch,0xc(%rbp)
 532:	00 00                	add    %al,(%rax)
 534:	74 0c                	je     542 <balancer_ingress+0x542>
 536:	00 00                	add    %al,(%rax)
 538:	82                   	(bad)
 539:	0c 00                	or     $0x0,%al
 53b:	00 91 0c 00 00 3a    	add    %dl,0x3a00000c(%rcx)
 541:	0c 00                	or     $0x0,%al
 543:	00 9d 0c 00 00 e5    	add    %bl,-0x1afffff4(%rbp)
 549:	0c 00                	or     $0x0,%al
 54b:	00 a7 0c 00 00 b4    	add    %ah,-0x4bfffff4(%rdi)
 551:	0c 00                	or     $0x0,%al
 553:	00 01                	add    %al,(%rcx)
 555:	0a 00                	or     (%rax),%al
 557:	00 c3                	add    %al,%bl
 559:	0c 00                	or     $0x0,%al
 55b:	00 38                	add    %bh,(%rax)
 55d:	00 00                	add    %al,(%rax)
    memcpy(dst_addr.addrv6, pckt->flow.dstv6, 16);
 55f:	00 c5                	add    %al,%ch
 561:	0c 00                	or     $0x0,%al
 563:	00 cd                	add    %cl,%ch
 565:	0c 00                	or     $0x0,%al
 567:	00 da                	add    %bl,%dl
 569:	0c 00                	or     $0x0,%al
 56b:	00 ea                	add    %ch,%dl
 56d:	0c 00                	or     $0x0,%al
 56f:	00 f0                	add    %dh,%al
 571:	0c 00                	or     $0x0,%al
  __u32* decap_dst_flags = bpf_map_lookup_elem(&decap_dst, &dst_addr);
 573:	00 f5                	add    %dh,%ch
 575:	0c 00                	or     $0x0,%al
 577:	00 fb                	add    %bh,%bl
 579:	0c 00                	or     $0x0,%al
 57b:	00 15 0d 00 00 27    	add    %dl,0x2700000d(%rip)        # 2700058e <_license+0x26ffe1a9>
 581:	0d 00 00 35 0d       	or     $0xd350000,%eax
 586:	00 00                	add    %al,(%rax)
 588:	4e 0d 00 00 57 0d    	rex.WRX or $0xd570000,%rax
  if (decap_dst_flags) {
 58e:	00 00                	add    %al,(%rax)
 590:	6d                   	insl   (%dx),%es:(%rdi)
 591:	0d 00 00 7b 0d       	or     $0xd7b0000,%eax
 596:	00 00                	add    %al,(%rax)
 598:	7e 0d                	jle    5a7 <balancer_ingress+0x5a7>
 59a:	00 00                	add    %al,(%rax)
    data_stats = bpf_map_lookup_elem(&stats, &stats_key);
 59c:	9f                   	lahf
 59d:	0d 00 00 b9 0d       	or     $0xdb90000,%eax
 5a2:	00 00                	add    %al,(%rax)
 5a4:	cb                   	lret
 5a5:	0d 00 00 de 0d       	or     $0xdde0000,%eax
 5aa:	00 00                	add    %al,(%rax)
    if (!data_stats) {
 5ac:	ec                   	in     (%dx),%al
 5ad:	0d 00 00 f7 0d       	or     $0xdf70000,%eax
 5b2:	00 00                	add    %al,(%rax)
 5b4:	03 0e                	add    (%rsi),%ecx
    data_stats->v1 += 1;
 5b6:	00 00                	add    %al,(%rax)
 5b8:	0d 0e 00 00 1b       	or     $0x1b00000e,%eax
    if ((data + offset + sizeof(struct ipv6hdr)) > data_end) {
 5bd:	0e                   	(bad)
 5be:	00 00                	add    %al,(%rax)
 5c0:	3e 0e                	ds (bad)
 5c2:	00 00                	add    %al,(%rax)
 5c4:	44 0e                	rex.R (bad)
 5c6:	00 00                	add    %al,(%rax)
 5c8:	4b 0a 00             	rex.WXB or (%r8),%al
 5cb:	00 4b 0e             	add    %cl,0xe(%rbx)
    if (!--ip6h->hop_limit) {
 5ce:	00 00                	add    %al,(%rax)
 5d0:	5d                   	pop    %rbp
 5d1:	0e                   	(bad)
 5d2:	00 00                	add    %al,(%rax)
 5d4:	6f                   	outsl  %ds:(%rsi),(%dx)
 5d5:	0e                   	(bad)
 5d6:	00 00                	add    %al,(%rax)
 5d8:	82                   	(bad)
 5d9:	0e                   	(bad)
 5da:	00 00                	add    %al,(%rax)
 5dc:	95                   	xchg   %eax,%ebp
 5dd:	0e                   	(bad)
 5de:	00 00                	add    %al,(%rax)
  memcpy(new_eth->h_source, old_eth->h_source, 6);
 5e0:	a8 0e                	test   $0xe,%al
 5e2:	00 00                	add    %al,(%rax)
 5e4:	b9 0e 00 00 1d       	mov    $0x1d00000e,%ecx
 5e9:	0b 00                	or     (%rax),%eax
 5eb:	00                   	.byte 0x0
 5ec:	bd                   	.byte 0xbd
 5ed:	0e                   	(bad)
	...

Disassembly of section .debug_str:

0000000000000000 <.debug_str>:
  void* data = (void*)(long)ctx->data;
   0:	44                   	rex.R
   1:	65 62                	gs (bad)
   3:	69 61 6e 20 63 6c 61 	imul   $0x616c6320,0x6e(%rcx),%esp
   a:	6e                   	outsb  %ds:(%rsi),(%dx)
   b:	67 20 76 65          	and    %dh,0x65(%esi)
   f:	72 73                	jb     84 <balancer_ingress+0x84>
  11:	69 6f 6e 20 31 34 2e 	imul   $0x2e343120,0x6e(%rdi),%ebp
  void* data_end = (void*)(long)ctx->data_end;
  18:	30 2e                	xor    %ch,(%rsi)
  1a:	36 00 6b 61          	ss add %ch,0x61(%rbx)
  if (data + nh_off > data_end) {
  1e:	74 72                	je     92 <balancer_ingress+0x92>
  20:	61                   	(bad)
  21:	6e                   	outsb  %ds:(%rsi),(%dx)
  22:	2f                   	(bad)
  23:	6c                   	insb   (%dx),%es:(%rdi)
  24:	69 62 2f 62 70 66 2f 	imul   $0x2f667062,0x2f(%rdx),%esp
  2b:	62 61 6c 61 6e       	(bad)
  30:	63 65 72             	movsxd 0x72(%rbp),%esp
  eth_proto = eth->h_proto;
  33:	2e 62                	cs (bad)
  if (eth_proto == BE_ETH_P_IP) {
  35:	70 66                	jo     9d <balancer_ingress+0x9d>
  37:	2e 63 00             	cs movsxd (%rax),%eax
  3a:	2f                   	(bad)
  3b:	72 6f                	jb     ac <balancer_ingress+0xac>
  3d:	6f                   	outsl  %ds:(%rsi),(%dx)
  3e:	74 2f                	je     6f <balancer_ingress+0x6f>
  40:	57                   	push   %rdi
  41:	6f                   	outsl  %ds:(%rsi),(%dx)
  42:	72 6b                	jb     af <balancer_ingress+0xaf>
  44:	73 70                	jae    b6 <balancer_ingress+0xb6>
  46:	61                   	(bad)
  47:	63 65 2f             	movsxd 0x2f(%rbp),%esp
  4a:	6b 61 74 72          	imul   $0x72,0x74(%rcx),%esp
  4e:	61                   	(bad)
  4f:	6e                   	outsb  %ds:(%rsi),(%dx)
  struct packet_description pckt = {};
  50:	2f                   	(bad)
  51:	5f                   	pop    %rdi
  52:	62 75                	(bad)
  54:	69 6c 64 2f 64 65 70 	imul   $0x73706564,0x2f(%rsp,%riz,2),%ebp
  5b:	73 
  5c:	2f                   	(bad)
  5d:	62                   	(bad)
  5e:	70 66                	jo     c6 <balancer_ingress+0xc6>
  60:	70 72                	jo     d4 <balancer_ingress+0xd4>
  62:	6f                   	outsl  %ds:(%rsi),(%dx)
  63:	67 00 5f 6c          	add    %bl,0x6c(%edi)
  67:	69 63 65 6e 73 65 00 	imul   $0x65736e,0x65(%rbx),%esp
  6e:	5f                   	pop    %rdi
  6f:	5f                   	pop    %rdi
  70:	41 52                	push   %r10
  72:	52                   	push   %rdx
  73:	41 59                	pop    %r9
  75:	5f                   	pop    %rdi
  76:	53                   	push   %rbx
  77:	49 5a                	rex.WB pop %r10
  79:	45 5f                	rex.RB pop %r15
  7b:	54                   	push   %rsp
  7c:	59                   	pop    %rcx
  7d:	50                   	push   %rax
  7e:	45 5f                	rex.RB pop %r15
  80:	5f                   	pop    %rdi
  81:	00 63 74             	add    %ah,0x74(%rbx)
  84:	6c                   	insb   (%dx),%es:(%rdi)
  85:	5f                   	pop    %rdi
  struct vip_definition vip = {};
  86:	61                   	(bad)
  87:	72 72                	jb     fb <balancer_ingress+0xfb>
  89:	61                   	(bad)
  8a:	79 00                	jns    8c <balancer_ingress+0x8c>
  8c:	75 6e                	jne    fc <balancer_ingress+0xfc>
  8e:	73 69                	jae    f9 <balancer_ingress+0xf9>
  90:	67 6e                	outsb  %ds:(%esi),(%dx)
  92:	65 64 20 69 6e       	gs and %ch,%fs:0x6e(%rcx)
  97:	74 00                	je     99 <balancer_ingress+0x99>
  99:	5f                   	pop    %rdi
  9a:	5f                   	pop    %rdi
  9b:	75 33                	jne    d0 <balancer_ingress+0xd0>
  9d:	32 00                	xor    (%rax),%al
  9f:	75 6e                	jne    10f <balancer_ingress+0x10f>
    if (iph + 1 > data_end) {
  a1:	73 69                	jae    10c <balancer_ingress+0x10c>
  a3:	67 6e                	outsb  %ds:(%esi),(%dx)
  a5:	65 64 20 6c 6f 6e    	gs and %ch,%fs:0x6e(%rdi,%rbp,2)
  ab:	67 20 6c 6f 6e       	and    %ch,0x6e(%edi,%ebp,2)
    if (iph->ihl != 5) {
  b0:	67 00 5f 5f          	add    %bl,0x5f(%edi)
  b4:	75 36                	jne    ec <balancer_ingress+0xec>
  b6:	34 00                	xor    $0x0,%al
  b8:	69 66 69 6e 64 65 78 	imul   $0x7865646e,0x69(%rsi),%esp
    pckt->tos = iph->tos;
  bf:	00 6d 61             	add    %ch,0x61(%rbp)
    *protocol = iph->protocol;
  c2:	63 00                	movsxd (%rax),%eax
    pckt->flow.proto = *protocol;
  c4:	75 6e                	jne    134 <balancer_ingress+0x134>
  c6:	73 69                	jae    131 <balancer_ingress+0x131>
    if (iph->frag_off & PCKT_FRAGMENTED) {
  c8:	67 6e                	outsb  %ds:(%esi),(%dx)
  ca:	65 64 20 63 68       	gs and %ah,%fs:0x68(%rbx)
  cf:	61                   	(bad)
  d0:	72 00                	jb     d2 <balancer_ingress+0xd2>
  d2:	5f                   	pop    %rdi
  d3:	5f                   	pop    %rdi
  d4:	75 38                	jne    10e <balancer_ingress+0x10e>
  d6:	00 63 74             	add    %ah,0x74(%rbx)
  d9:	6c                   	insb   (%dx),%es:(%rdi)
  da:	5f                   	pop    %rdi
    if (*protocol == IPPROTO_ICMP) {
  db:	76 61                	jbe    13e <balancer_ingress+0x13e>
  dd:	6c                   	insb   (%dx),%es:(%rdi)
  de:	75 65                	jne    145 <balancer_ingress+0x145>
  e0:	00 6d 61             	add    %ch,0x61(%rbp)
  if (icmp_hdr + 1 > data_end) {
  e3:	78 5f                	js     144 <balancer_ingress+0x144>
  e5:	65 6e                	outsb  %gs:(%rsi),(%dx)
  e7:	74 72                	je     15b <balancer_ingress+0x15b>
  e9:	69 65 73 00 6d 61 70 	imul   $0x70616d00,0x73(%rbp),%esp
  if (icmp_hdr->type == ICMP_ECHO) {
  f0:	5f                   	pop    %rdi
  f1:	66 6c                	data16 insb (%dx),%es:(%rdi)
  f3:	61                   	(bad)
  f4:	67 73 00             	addr32 jae f7 <balancer_ingress+0xf7>
  f7:	5f                   	pop    %rdi
  f8:	5f                   	pop    %rdi
  f9:	62 65                	(bad)
  fb:	33 32                	xor    (%rdx),%esi
  fd:	00 61 64             	add    %ah,0x64(%rcx)
 100:	64 72 76             	fs jb  179 <balancer_ingress+0x179>
 103:	36 00 61 64          	ss add %ah,0x64(%rcx)
 107:	64 72 65             	fs jb  16f <balancer_ingress+0x16f>
 10a:	73 73                	jae    17f <balancer_ingress+0x17f>
 10c:	00 73 75             	add    %dh,0x75(%rbx)
  icmp_hdr->type = ICMP_ECHOREPLY;
 10f:	62                   	(bad)
 110:	70 72                	jo     184 <balancer_ingress+0x184>
  icmp_hdr->checksum += 0x0008;
 112:	6f                   	outsl  %ds:(%rsi),(%dx)
 113:	67 72 61             	addr32 jb 177 <balancer_ingress+0x177>
 116:	6d                   	insl   (%dx),%es:(%rdi)
  iph->ttl = DEFAULT_TTL;
 117:	73 00                	jae    119 <balancer_ingress+0x119>
 119:	76 69                	jbe    184 <balancer_ingress+0x184>
  iph->daddr = iph->saddr;
 11b:	70 5f                	jo     17c <balancer_ingress+0x17c>
 11d:	6d                   	insl   (%dx),%es:(%rdi)
  tmp_addr = iph->daddr;
 11e:	61                   	(bad)
 11f:	70 00                	jo     121 <balancer_ingress+0x121>
  iph->daddr = iph->saddr;
 121:	76 69                	jbe    18c <balancer_ingress+0x18c>
 123:	70 76                	jo     19b <balancer_ingress+0x19b>
  iph->saddr = tmp_addr;
 125:	36 00 75 6e          	ss add %dh,0x6e(%rbp)
 129:	73 69                	jae    194 <balancer_ingress+0x194>
 12b:	67 6e                	outsb  %ds:(%esi),(%dx)
 12d:	65 64 20 73 68       	gs and %dh,%fs:0x68(%rbx)
 132:	6f                   	outsl  %ds:(%rsi),(%dx)
 133:	72 74                	jb     1a9 <balancer_ingress+0x1a9>
 135:	00 5f 5f             	add    %bl,0x5f(%rdi)
 138:	75 31                	jne    16b <balancer_ingress+0x16b>
 13a:	36 00 76 69          	ss add %dh,0x69(%rsi)
 13e:	70 5f                	jo     19f <balancer_ingress+0x19f>
 140:	64 65 66 69 6e 69 74 	fs imul $0x6974,%gs:0x69(%rsi),%bp
 147:	69 
 148:	6f                   	outsl  %ds:(%rsi),(%dx)
 149:	6e                   	outsb  %ds:(%rsi),(%dx)
 14a:	00 76 69             	add    %dh,0x69(%rsi)
 14d:	70 5f                	jo     1ae <balancer_ingress+0x1ae>
 14f:	6e                   	outsb  %ds:(%rsi),(%dx)
 150:	75 6d                	jne    1bf <balancer_ingress+0x1bf>
 152:	00 76 69             	add    %dh,0x69(%rsi)
 155:	70 5f                	jo     1b6 <balancer_ingress+0x1b6>
 157:	6d                   	insl   (%dx),%es:(%rdi)
 158:	65 74 61             	gs je  1bc <balancer_ingress+0x1bc>
 15b:	00 66 61             	add    %ah,0x61(%rsi)
 15e:	6c                   	insb   (%dx),%es:(%rdi)
  struct packet_description pckt = {};
 15f:	6c                   	insb   (%dx),%es:(%rdi)
 160:	62 61                	(bad)
 162:	63 6b 5f             	movsxd 0x5f(%rbx),%ebp
 165:	63 61 63             	movsxd 0x63(%rcx),%esp
 168:	68 65 00 73 72       	push   $0x72730065
 16d:	63 76 36             	movsxd 0x36(%rsi),%esi
 170:	00 64 73 74          	add    %ah,0x74(%rbx,%rsi,2)
 174:	76 36                	jbe    1ac <balancer_ingress+0x1ac>
 176:	00 70 6f             	add    %dh,0x6f(%rax)
 179:	72 74                	jb     1ef <balancer_ingress+0x1ef>
 17b:	73 00                	jae    17d <balancer_ingress+0x17d>
 17d:	70 6f                	jo     1ee <balancer_ingress+0x1ee>
 17f:	72 74                	jb     1f5 <balancer_ingress+0x1f5>
 181:	31 36                	xor    %esi,(%rsi)
 183:	00 66 6c             	add    %ah,0x6c(%rsi)
 186:	6f                   	outsl  %ds:(%rsi),(%dx)
 187:	77 5f                	ja     1e8 <balancer_ingress+0x1e8>
 189:	6b 65 79 00          	imul   $0x0,0x79(%rbp),%esp
 18d:	61                   	(bad)
 18e:	74 69                	je     1f9 <balancer_ingress+0x1f9>
 190:	6d                   	insl   (%dx),%es:(%rdi)
 191:	65 00 72 65          	add    %dh,%gs:0x65(%rdx)
  struct vip_definition vip = {};
 195:	61                   	(bad)
 196:	6c                   	insb   (%dx),%es:(%rdi)
 197:	5f                   	pop    %rdi
 198:	70 6f                	jo     209 <balancer_ingress+0x209>
 19a:	73 5f                	jae    1fb <balancer_ingress+0x1fb>
 19c:	6c                   	insb   (%dx),%es:(%rdi)
 19d:	72 75                	jb     214 <balancer_ingress+0x214>
 19f:	00 6c 72 75          	add    %ch,0x75(%rdx,%rsi,2)
 1a3:	5f                   	pop    %rdi
 1a4:	6d                   	insl   (%dx),%es:(%rdi)
 1a5:	61                   	(bad)
 1a6:	70 70                	jo     218 <balancer_ingress+0x218>
 1a8:	69 6e 67 00 76 61 6c 	imul   $0x6c617600,0x67(%rsi),%ebp
    if (ip6h + 1 > data_end) {
 1af:	75 65                	jne    216 <balancer_ingress+0x216>
 1b1:	73 00                	jae    1b3 <balancer_ingress+0x1b3>
 1b3:	63 68 5f             	movsxd 0x5f(%rax),%ebp
 1b6:	72 69                	jb     221 <balancer_ingress+0x221>
 1b8:	6e                   	outsb  %ds:(%rsi),(%dx)
 1b9:	67 73 00             	addr32 jae 1bc <balancer_ingress+0x1bc>
    *protocol = ip6h->nexthdr;
 1bc:	72 65                	jb     223 <balancer_ingress+0x223>
 1be:	61                   	(bad)
    pckt->flow.proto = *protocol;
 1bf:	6c                   	insb   (%dx),%es:(%rdi)
 1c0:	73 00                	jae    1c2 <balancer_ingress+0x1c2>
 1c2:	72 65                	jb     229 <balancer_ingress+0x229>
    pckt->tos = (ip6h->priority << 4) & 0xF0;
 1c4:	61                   	(bad)
 1c5:	6c                   	insb   (%dx),%es:(%rdi)
 1c6:	5f                   	pop    %rdi
 1c7:	64 65 66 69 6e 69 74 	fs imul $0x6974,%gs:0x69(%rsi),%bp
 1ce:	69 
    pckt->tos = pckt->tos | ((ip6h->flow_lbl[0] >> 4) & 0x0F);
 1cf:	6f                   	outsl  %ds:(%rsi),(%dx)
 1d0:	6e                   	outsb  %ds:(%rsi),(%dx)
 1d1:	00 72 65             	add    %dh,0x65(%rdx)
 1d4:	61                   	(bad)
 1d5:	6c                   	insb   (%dx),%es:(%rdi)
 1d6:	73 5f                	jae    237 <balancer_ingress+0x237>
 1d8:	73 74                	jae    24e <balancer_ingress+0x24e>
    if (*protocol == IPPROTO_FRAGMENT) {
 1da:	61                   	(bad)
 1db:	74 73                	je     250 <balancer_ingress+0x250>
 1dd:	00 6c 62 5f          	add    %ch,0x5f(%rdx,%riz,2)
 1e1:	73 74                	jae    257 <balancer_ingress+0x257>
 1e3:	61                   	(bad)
 1e4:	74 73                	je     259 <balancer_ingress+0x259>
 1e6:	00 76 69             	add    %dh,0x69(%rsi)
 1e9:	70 5f                	jo     24a <balancer_ingress+0x24a>
 1eb:	6d                   	insl   (%dx),%es:(%rdi)
 1ec:	69 73 73 5f 73 74 61 	imul   $0x6174735f,0x73(%rbx),%esi
  if (icmp_hdr + 1 > data_end) {
 1f3:	74 73                	je     268 <balancer_ingress+0x268>
 1f5:	00 71 75             	add    %dh,0x75(%rcx)
 1f8:	69 63 5f 73 74 61 74 	imul   $0x74617473,0x5f(%rbx),%esp
  if (icmp_hdr->icmp6_type == ICMPV6_ECHO_REQUEST) {
 1ff:	73 5f                	jae    260 <balancer_ingress+0x260>
 201:	6d                   	insl   (%dx),%es:(%rdi)
 202:	61                   	(bad)
 203:	70 00                	jo     205 <balancer_ingress+0x205>
 205:	63 68 5f             	movsxd 0x5f(%rax),%ebp
 208:	72 6f                	jb     279 <balancer_ingress+0x279>
 20a:	75 74                	jne    280 <balancer_ingress+0x280>
 20c:	65 64 00 63 69       	gs add %ah,%fs:0x69(%rbx)
 211:	64 5f                	fs pop %rdi
 213:	69 6e 69 74 69 61 6c 	imul   $0x6c616974,0x69(%rsi),%ebp
 21a:	00 63 69             	add    %ah,0x69(%rbx)
 21d:	64 5f                	fs pop %rdi
 21f:	69 6e 76 61 6c 69 64 	imul   $0x64696c61,0x76(%rsi),%ebp
 226:	5f                   	pop    %rdi
 227:	73 65                	jae    28e <balancer_ingress+0x28e>
 229:	72 76                	jb     2a1 <balancer_ingress+0x2a1>
 22b:	65 72 5f             	gs jb  28d <balancer_ingress+0x28d>
 22e:	69 64 00 63 69 64 5f 	imul   $0x695f6469,0x63(%rax,%rax,1),%esp
 235:	69 
 236:	6e                   	outsb  %ds:(%rsi),(%dx)
 237:	76 61                	jbe    29a <balancer_ingress+0x29a>
 239:	6c                   	insb   (%dx),%es:(%rdi)
 23a:	69 64 5f 73 65 72 76 	imul   $0x65767265,0x73(%rdi,%rbx,2),%esp
 241:	65 
 242:	72 5f                	jb     2a3 <balancer_ingress+0x2a3>
 244:	69 64 5f 73 61 6d 70 	imul   $0x6c706d61,0x73(%rdi,%rbx,2),%esp
 24b:	6c 
 24c:	65 00 63 69          	add    %ah,%gs:0x69(%rbx)
 250:	64 5f                	fs pop %rdi
 252:	72 6f                	jb     2c3 <balancer_ingress+0x2c3>
 254:	75 74                	jne    2ca <balancer_ingress+0x2ca>
 256:	65 64 00 63 69       	gs add %ah,%fs:0x69(%rbx)
 25b:	64 5f                	fs pop %rdi
 25d:	75 6e                	jne    2cd <balancer_ingress+0x2cd>
 25f:	6b 6e 6f 77          	imul   $0x77,0x6f(%rsi),%ebp
 263:	6e                   	outsb  %ds:(%rsi),(%dx)
 264:	5f                   	pop    %rdi
 265:	72 65                	jb     2cc <balancer_ingress+0x2cc>
 267:	61                   	(bad)
 268:	6c                   	insb   (%dx),%es:(%rdi)
 269:	5f                   	pop    %rdi
 26a:	64 72 6f             	fs jb  2dc <balancer_ingress+0x2dc>
 26d:	70 70                	jo     2df <balancer_ingress+0x2df>
 26f:	65 64 00 63 69       	gs add %ah,%fs:0x69(%rbx)
 274:	64 5f                	fs pop %rdi
 276:	76 30                	jbe    2a8 <balancer_ingress+0x2a8>
 278:	00 63 69             	add    %ah,0x69(%rbx)
 27b:	64 5f                	fs pop %rdi
 27d:	76 31                	jbe    2b0 <balancer_ingress+0x2b0>
 27f:	00 63 69             	add    %ah,0x69(%rbx)
 282:	64 5f                	fs pop %rdi
 284:	76 32                	jbe    2b8 <balancer_ingress+0x2b8>
 286:	00 63 69             	add    %ah,0x69(%rbx)
      memcpy(pckt->flow.srcv6, ip6h->saddr.s6_addr32, 16);
 289:	64 5f                	fs pop %rdi
 28b:	76 33                	jbe    2c0 <balancer_ingress+0x2c0>
 28d:	00 64 73 74          	add    %ah,0x74(%rbx,%rsi,2)
 291:	5f                   	pop    %rdi
 292:	6d                   	insl   (%dx),%es:(%rdi)
 293:	61                   	(bad)
 294:	74 63                	je     2f9 <balancer_ingress+0x2f9>
 296:	68 5f 69 6e 5f       	push   $0x5f6e695f
      memcpy(pckt->flow.dstv6, ip6h->daddr.s6_addr32, 16);
 29b:	6c                   	insb   (%dx),%es:(%rdi)
 29c:	72 75                	jb     313 <balancer_ingress+0x313>
 29e:	00 64 73 74          	add    %ah,0x74(%rbx,%rsi,2)
 2a2:	5f                   	pop    %rdi
 2a3:	6d                   	insl   (%dx),%es:(%rdi)
 2a4:	69 73 6d 61 74 63 68 	imul   $0x68637461,0x6d(%rbx),%esi
 2ab:	5f                   	pop    %rdi
  if (protocol == IPPROTO_ICMPV6) {
 2ac:	69 6e 5f 6c 72 75 00 	imul   $0x75726c,0x5f(%rsi),%ebp
 2b3:	64 73 74             	fs jae 32a <balancer_ingress+0x32a>
  if (icmp_hdr + 1 > data_end) {
 2b6:	5f                   	pop    %rdi
 2b7:	6e                   	outsb  %ds:(%rsi),(%dx)
 2b8:	6f                   	outsl  %ds:(%rsi),(%dx)
 2b9:	74 5f                	je     31a <balancer_ingress+0x31a>
 2bb:	66 6f                	outsw  %ds:(%rsi),(%dx)
 2bd:	75 6e                	jne    32d <balancer_ingress+0x32d>
 2bf:	64 5f                	fs pop %rdi
  if (icmp_hdr->type == ICMP_ECHO) {
 2c1:	69 6e 5f 6c 72 75 00 	imul   $0x75726c,0x5f(%rsi),%ebp
 2c8:	6c                   	insb   (%dx),%es:(%rdi)
 2c9:	62                   	(bad)
 2ca:	5f                   	pop    %rdi
 2cb:	71 75                	jno    342 <balancer_ingress+0x342>
 2cd:	69 63 5f 70 61 63 6b 	imul   $0x6b636170,0x5f(%rbx),%esp
 2d4:	65 74 73             	gs je  34a <balancer_ingress+0x34a>
 2d7:	5f                   	pop    %rdi
 2d8:	73 74                	jae    34e <balancer_ingress+0x34e>
 2da:	61                   	(bad)
  if ((data + sizeof(struct ethhdr) + sizeof(struct iphdr) +
 2db:	74 73                	je     350 <balancer_ingress+0x350>
 2dd:	00 73 74             	add    %dh,0x74(%rbx)
 2e0:	61                   	(bad)
 2e1:	62                   	(bad)
 2e2:	6c                   	insb   (%dx),%es:(%rdi)
 2e3:	65 5f                	gs pop %rdi
       sizeof(struct icmphdr)) > data_end) {
 2e5:	72 74                	jb     35b <balancer_ingress+0x35b>
  if ((data + sizeof(struct ethhdr) + sizeof(struct iphdr) +
 2e7:	5f                   	pop    %rdi
 2e8:	73 74                	jae    35e <balancer_ingress+0x35e>
 2ea:	61                   	(bad)
 2eb:	74 73                	je     360 <balancer_ingress+0x360>
  icmp_hdr->type = ICMP_ECHOREPLY;
 2ed:	00 69 6e             	add    %ch,0x6e(%rcx)
 2f0:	76 61                	jbe    353 <balancer_ingress+0x353>
  icmp_hdr->checksum += 0x0008;
 2f2:	6c                   	insb   (%dx),%es:(%rdi)
 2f3:	69 64 5f 70 61 63 6b 	imul   $0x656b6361,0x70(%rdi,%rbx,2),%esp
 2fa:	65 
  iph->daddr = iph->saddr;
 2fb:	74 5f                	je     35c <balancer_ingress+0x35c>
  tmp_addr = iph->daddr;
 2fd:	74 79                	je     378 <balancer_ingress+0x378>
 2ff:	70 65                	jo     366 <balancer_ingress+0x366>
  iph->daddr = iph->saddr;
 301:	00 6c 62 5f          	add    %ch,0x5f(%rdx,%riz,2)
  iph->saddr = tmp_addr;
 305:	73 74                	jae    37b <balancer_ingress+0x37b>
 307:	61                   	(bad)
 308:	62                   	(bad)
 309:	6c                   	insb   (%dx),%es:(%rdi)
 30a:	65 5f                	gs pop %rdi
 30c:	72 74                	jb     382 <balancer_ingress+0x382>
 30e:	5f                   	pop    %rdi
 30f:	70 61                	jo     372 <balancer_ingress+0x372>
 311:	63 6b 65             	movsxd 0x65(%rbx),%ebp
 314:	74 73                	je     389 <balancer_ingress+0x389>
 316:	5f                   	pop    %rdi
 317:	73 74                	jae    38d <balancer_ingress+0x38d>
 319:	61                   	(bad)
 31a:	74 73                	je     38f <balancer_ingress+0x38f>
 31c:	00 64 65 63          	add    %ah,0x63(%rbp,%riz,2)
 320:	61                   	(bad)
 321:	70 5f                	jo     382 <balancer_ingress+0x382>
 323:	76 69                	jbe    38e <balancer_ingress+0x38e>
 325:	70 5f                	jo     386 <balancer_ingress+0x386>
 327:	73 74                	jae    39d <balancer_ingress+0x39d>
 329:	61                   	(bad)
 32a:	74 73                	je     39f <balancer_ingress+0x39f>
 32c:	00 73 65             	add    %dh,0x65(%rbx)
 32f:	72 76                	jb     3a7 <balancer_ingress+0x3a7>
 331:	65 72 5f             	gs jb  393 <balancer_ingress+0x393>
 334:	69 64 5f 6d 61 70 00 	imul   $0x74007061,0x6d(%rdi,%rbx,2),%esp
 33b:	74 
 33c:	70 72                	jo     3b0 <balancer_ingress+0x3b0>
 33e:	5f                   	pop    %rdi
 33f:	73 74                	jae    3b5 <balancer_ingress+0x3b5>
 341:	61                   	(bad)
 342:	74 73                	je     3b7 <balancer_ingress+0x3b7>
 344:	5f                   	pop    %rdi
 345:	6d                   	insl   (%dx),%es:(%rdi)
 346:	61                   	(bad)
 347:	70 00                	jo     349 <balancer_ingress+0x349>
 349:	73 69                	jae    3b4 <balancer_ingress+0x3b4>
 34b:	64 5f                	fs pop %rdi
 34d:	72 6f                	jb     3be <balancer_ingress+0x3be>
 34f:	75 74                	jne    3c5 <balancer_ingress+0x3c5>
 351:	65 64 00 74 63 70    	gs add %dh,%fs:0x70(%rbx,%riz,2)
 357:	5f                   	pop    %rdi
 358:	73 79                	jae    3d3 <balancer_ingress+0x3d3>
 35a:	6e                   	outsb  %ds:(%rsi),(%dx)
 35b:	00 6c 62 5f          	add    %ch,0x5f(%rdx,%riz,2)
 35f:	74 70                	je     3d1 <balancer_ingress+0x3d1>
 361:	72 5f                	jb     3c2 <balancer_ingress+0x3c2>
 363:	70 61                	jo     3c6 <balancer_ingress+0x3c6>
 365:	63 6b 65             	movsxd 0x65(%rbx),%ebp
 368:	74 73                	je     3dd <balancer_ingress+0x3dd>
 36a:	5f                   	pop    %rdi
 36b:	73 74                	jae    3e1 <balancer_ingress+0x3e1>
 36d:	61                   	(bad)
 36e:	74 73                	je     3e3 <balancer_ingress+0x3e3>
 370:	00 73 65             	add    %dh,0x65(%rbx)
 373:	72 76                	jb     3eb <balancer_ingress+0x3eb>
 375:	65 72 5f             	gs jb  3d7 <balancer_ingress+0x3d7>
 378:	69 64 5f 73 74 61 74 	imul   $0x73746174,0x73(%rdi,%rbx,2),%esp
 37f:	73 
 380:	00 76 69             	add    %dh,0x69(%rsi)
 383:	70 5f                	jo     3e4 <balancer_ingress+0x3e4>
 385:	74 6f                	je     3f6 <balancer_ingress+0x3f6>
 387:	5f                   	pop    %rdi
 388:	64 6f                	outsl  %fs:(%rsi),(%dx)
 38a:	77 6e                	ja     3fa <balancer_ingress+0x3fa>
 38c:	5f                   	pop    %rdi
 38d:	72 65                	jb     3f4 <balancer_ingress+0x3f4>
 38f:	61                   	(bad)
 390:	6c                   	insb   (%dx),%es:(%rdi)
 391:	73 5f                	jae    3f2 <balancer_ingress+0x3f2>
 393:	6d                   	insl   (%dx),%es:(%rdi)
 394:	61                   	(bad)
 395:	70 00                	jo     397 <balancer_ingress+0x397>
 397:	62                   	(bad)
 398:	70 66                	jo     400 <balancer_ingress+0x400>
 39a:	5f                   	pop    %rdi
 39b:	78 64                	js     401 <balancer_ingress+0x401>
 39d:	70 5f                	jo     3fe <balancer_ingress+0x3fe>
 39f:	61                   	(bad)
 3a0:	64 6a 75             	fs push $0x75
 3a3:	73 74                	jae    419 <balancer_ingress+0x419>
 3a5:	5f                   	pop    %rdi
 3a6:	68 65 61 64 00       	push   $0x646165
 3ab:	72 65                	jb     412 <balancer_ingress+0x412>
 3ad:	61                   	(bad)
 3ae:	6c                   	insb   (%dx),%es:(%rdi)
 3af:	5f                   	pop    %rdi
 3b0:	62                   	(bad)
 3b1:	70 66                	jo     419 <balancer_ingress+0x419>
 3b3:	5f                   	pop    %rdi
 3b4:	6d                   	insl   (%dx),%es:(%rdi)
 3b5:	61                   	(bad)
 3b6:	70 5f                	jo     417 <balancer_ingress+0x417>
 3b8:	6c                   	insb   (%dx),%es:(%rdi)
 3b9:	6f                   	outsl  %ds:(%rsi),(%dx)
 3ba:	6f                   	outsl  %ds:(%rsi),(%dx)
 3bb:	6b 75 70 5f          	imul   $0x5f,0x70(%rbp),%esi
 3bf:	65 6c                	gs insb (%dx),%es:(%rdi)
 3c1:	65 6d                	gs insl (%dx),%es:(%rdi)
 3c3:	00 62 70             	add    %ah,0x70(%rdx)
 3c6:	66 5f                	pop    %di
 3c8:	6b 74 69 6d 65       	imul   $0x65,0x6d(%rcx,%rbp,2),%esi
 3cd:	5f                   	pop    %rdi
 3ce:	67 65 74 5f          	addr32 gs je 431 <balancer_ingress+0x431>
 3d2:	6e                   	outsb  %ds:(%rsi),(%dx)
 3d3:	73 00                	jae    3d5 <balancer_ingress+0x3d5>
 3d5:	62                   	(bad)
 3d6:	70 66                	jo     43e <balancer_ingress+0x43e>
 3d8:	5f                   	pop    %rdi
 3d9:	6d                   	insl   (%dx),%es:(%rdi)
 3da:	61                   	(bad)
 3db:	70 5f                	jo     43c <balancer_ingress+0x43c>
 3dd:	75 70                	jne    44f <balancer_ingress+0x44f>
 3df:	64 61                	fs (bad)
 3e1:	74 65                	je     448 <balancer_ingress+0x448>
 3e3:	5f                   	pop    %rdi
  if (protocol == IPPROTO_IPIP) {
 3e4:	65 6c                	gs insb (%dx),%es:(%rdi)
 3e6:	65 6d                	gs insl (%dx),%es:(%rdi)
 3e8:	00 58 44             	add    %bl,0x44(%rax)
 3eb:	50                   	push   %rax
 3ec:	5f                   	pop    %rdi
 3ed:	41                   	rex.B
 3ee:	42                   	rex.X
 3ef:	4f 52                	rex.WRXB push %r10
 3f1:	54                   	push   %rsp
 3f2:	45                   	rex.RB
 3f3:	44 00 58 44          	add    %r11b,0x44(%rax)
 3f7:	50                   	push   %rax
 3f8:	5f                   	pop    %rdi
 3f9:	44 52                	rex.R push %rdx
 3fb:	4f 50                	rex.WRXB push %r8
  tcp = data + off;
 3fd:	00 58 44             	add    %bl,0x44(%rax)
  if (is_ipv6) {
 400:	50                   	push   %rax
 401:	5f                   	pop    %rdi
  tcp = data + off;
 402:	50                   	push   %rax
 403:	41 53                	push   %r11
 405:	53                   	push   %rbx
  if (tcp + 1 > data_end) {
 406:	00 58 44             	add    %bl,0x44(%rax)
 409:	50                   	push   %rax
 40a:	5f                   	pop    %rdi
 40b:	54                   	push   %rsp
 40c:	58                   	pop    %rax
 40d:	00 58 44             	add    %bl,0x44(%rax)
 410:	50                   	push   %rax
 411:	5f                   	pop    %rdi
 412:	52                   	push   %rdx
  if (tcp->syn) {
 413:	45                   	rex.RB
 414:	44                   	rex.R
 415:	49 52                	rex.WB push %r10
 417:	45                   	rex.RB
 418:	43 54                	rex.XB push %r12
 41a:	00 78 64             	add    %bh,0x64(%rax)
    pckt->flags |= F_SYN_SET;
 41d:	70 5f                	jo     47e <balancer_ingress+0x47e>
 41f:	61                   	(bad)
 420:	63 74 69 6f          	movsxd 0x6f(%rcx,%rbp,2),%esi
 424:	6e                   	outsb  %ds:(%rsi),(%dx)
 425:	00 49 50             	add    %cl,0x50(%rcx)
      pckt->flow.src = iph->saddr;
 428:	50                   	push   %rax
 429:	52                   	push   %rdx
 42a:	4f 54                	rex.WRXB push %r12
 42c:	4f 5f                	rex.WRXB pop %r15
      pckt->flow.dst = iph->daddr;
 42e:	49 50                	rex.WB push %r8
 430:	00 49 50             	add    %cl,0x50(%rcx)
 433:	50                   	push   %rax
  if (protocol == IPPROTO_ICMPV6) {
 434:	52                   	push   %rdx
 435:	4f 54                	rex.WRXB push %r12
 437:	4f 5f                	rex.WRXB pop %r15
  if (icmp_hdr + 1 > data_end) {
 439:	49                   	rex.WB
 43a:	43                   	rex.XB
 43b:	4d 50                	rex.WRB push %r8
 43d:	00 49 50             	add    %cl,0x50(%rcx)
 440:	50                   	push   %rax
 441:	52                   	push   %rdx
 442:	4f 54                	rex.WRXB push %r12
 444:	4f 5f                	rex.WRXB pop %r15
  if (icmp_hdr->icmp6_type == ICMPV6_ECHO_REQUEST) {
 446:	49                   	rex.WB
 447:	47                   	rex.RXB
 448:	4d 50                	rex.WRB push %r8
 44a:	00 49 50             	add    %cl,0x50(%rcx)
 44d:	50                   	push   %rax
 44e:	52                   	push   %rdx
 44f:	4f 54                	rex.WRXB push %r12
 451:	4f 5f                	rex.WRXB pop %r15
 453:	49 50                	rex.WB push %r8
 455:	49 50                	rex.WB push %r8
 457:	00 49 50             	add    %cl,0x50(%rcx)
 45a:	50                   	push   %rax
 45b:	52                   	push   %rdx
 45c:	4f 54                	rex.WRXB push %r12
 45e:	4f 5f                	rex.WRXB pop %r15
 460:	54                   	push   %rsp
 461:	43 50                	rex.XB push %r8
 463:	00 49 50             	add    %cl,0x50(%rcx)
  if ((data + sizeof(struct ethhdr) + sizeof(struct ipv6hdr) +
 466:	50                   	push   %rax
 467:	52                   	push   %rdx
 468:	4f 54                	rex.WRXB push %r12
 46a:	4f 5f                	rex.WRXB pop %r15
 46c:	45                   	rex.RB
 46d:	47 50                	rex.RXB push %r8
       sizeof(struct icmp6hdr)) > data_end) {
 46f:	00 49 50             	add    %cl,0x50(%rcx)
  if ((data + sizeof(struct ethhdr) + sizeof(struct ipv6hdr) +
 472:	50                   	push   %rax
 473:	52                   	push   %rdx
 474:	4f 54                	rex.WRXB push %r12
 476:	4f 5f                	rex.WRXB pop %r15
 478:	50                   	push   %rax
 479:	55                   	push   %rbp
 47a:	50                   	push   %rax
 47b:	00 49 50             	add    %cl,0x50(%rcx)
 47e:	50                   	push   %rax
 47f:	52                   	push   %rdx
 480:	4f 54                	rex.WRXB push %r12
 482:	4f 5f                	rex.WRXB pop %r15
 484:	55                   	push   %rbp
 485:	44 50                	rex.R push %rax
 487:	00 49 50             	add    %cl,0x50(%rcx)
 48a:	50                   	push   %rax
 48b:	52                   	push   %rdx
 48c:	4f 54                	rex.WRXB push %r12
 48e:	4f 5f                	rex.WRXB pop %r15
 490:	49                   	rex.WB
 491:	44 50                	rex.R push %rax
 493:	00 49 50             	add    %cl,0x50(%rcx)
 496:	50                   	push   %rax
 497:	52                   	push   %rdx
 498:	4f 54                	rex.WRXB push %r12
 49a:	4f 5f                	rex.WRXB pop %r15
 49c:	54                   	push   %rsp
  tcp = data + off;
 49d:	50                   	push   %rax
 49e:	00 49 50             	add    %cl,0x50(%rcx)
  if (is_ipv6) {
 4a1:	50                   	push   %rax
 4a2:	52                   	push   %rdx
  tcp = data + off;
 4a3:	4f 54                	rex.WRXB push %r12
 4a5:	4f 5f                	rex.WRXB pop %r15
  if (tcp + 1 > data_end) {
 4a7:	44                   	rex.R
 4a8:	43                   	rex.XB
 4a9:	43 50                	rex.XB push %r8
 4ab:	00 49 50             	add    %cl,0x50(%rcx)
 4ae:	50                   	push   %rax
 4af:	52                   	push   %rdx
 4b0:	4f 54                	rex.WRXB push %r12
 4b2:	4f 5f                	rex.WRXB pop %r15
  if (tcp->syn) {
 4b4:	49 50                	rex.WB push %r8
 4b6:	56                   	push   %rsi
 4b7:	36 00 49 50          	ss add %cl,0x50(%rcx)
 4bb:	50                   	push   %rax
 4bc:	52                   	push   %rdx
 4bd:	4f 54                	rex.WRXB push %r12
    pckt->flags |= F_SYN_SET;
 4bf:	4f 5f                	rex.WRXB pop %r15
 4c1:	52                   	push   %rdx
 4c2:	53                   	push   %rbx
 4c3:	56                   	push   %rsi
 4c4:	50                   	push   %rax
 4c5:	00 49 50             	add    %cl,0x50(%rcx)
 4c8:	50                   	push   %rax
 4c9:	52                   	push   %rdx
 4ca:	4f 54                	rex.WRXB push %r12
 4cc:	4f 5f                	rex.WRXB pop %r15
 4ce:	47 52                	rex.RXB push %r10
 4d0:	45 00 49 50          	add    %r9b,0x50(%r9)
        bpf_map_lookup_elem(&stats, &stats_key);
 4d4:	50                   	push   %rax
 4d5:	52                   	push   %rdx
 4d6:	4f 54                	rex.WRXB push %r12
 4d8:	4f 5f                	rex.WRXB pop %r15
 4da:	45 53                	rex.RB push %r11
 4dc:	50                   	push   %rax
 4dd:	00 49 50             	add    %cl,0x50(%rcx)
 4e0:	50                   	push   %rax
    if (!icmp_ptb_v6_stats) {
 4e1:	52                   	push   %rdx
 4e2:	4f 54                	rex.WRXB push %r12
 4e4:	4f 5f                	rex.WRXB pop %r15
 4e6:	41                   	rex.B
 4e7:	48 00 49 50          	rex.W add %cl,0x50(%rcx)
    icmp_ptb_v6_stats->v1 += 1;
 4eb:	50                   	push   %rax
 4ec:	52                   	push   %rdx
 4ed:	4f 54                	rex.WRXB push %r12
    __u32 mtu = bpf_ntohl(icmp_hdr->icmp6_mtu);
 4ef:	4f 5f                	rex.WRXB pop %r15
 4f1:	4d 54                	rex.WRB push %r12
    if (mtu < MAX_MTU_IN_PTB_TO_DROP) {
 4f3:	50                   	push   %rax
 4f4:	00 49 50             	add    %cl,0x50(%rcx)
 4f7:	50                   	push   %rax
 4f8:	52                   	push   %rdx
 4f9:	4f 54                	rex.WRXB push %r12
      icmp_ptb_v6_stats->v2 += 1;
 4fb:	4f 5f                	rex.WRXB pop %r15
 4fd:	42                   	rex.X
 4fe:	45                   	rex.RB
 4ff:	45 54                	rex.RB push %r12
  if (ip6h + 1 > data_end) {
 501:	50                   	push   %rax
 502:	48 00 49 50          	rex.W add %cl,0x50(%rcx)
 506:	50                   	push   %rax
 507:	52                   	push   %rdx
 508:	4f 54                	rex.WRXB push %r12
 50a:	4f 5f                	rex.WRXB pop %r15
 50c:	45                   	rex.RB
  pckt->flow.proto = ip6h->nexthdr;
 50d:	4e                   	rex.WRX
 50e:	43                   	rex.XB
 50f:	41 50                	push   %r8
 511:	00 49 50             	add    %cl,0x50(%rcx)
  pckt->flags |= F_ICMP;
 514:	50                   	push   %rax
 515:	52                   	push   %rdx
 516:	4f 54                	rex.WRXB push %r12
 518:	4f 5f                	rex.WRXB pop %r15
  memcpy(pckt->flow.srcv6, ip6h->daddr.s6_addr32, 16);
 51a:	50                   	push   %rax
 51b:	49                   	rex.WB
 51c:	4d 00 49 50          	rex.WRB add %r9b,0x50(%r9)
 520:	50                   	push   %rax
 521:	52                   	push   %rdx
 522:	4f 54                	rex.WRXB push %r12
 524:	4f 5f                	rex.WRXB pop %r15
 526:	43                   	rex.XB
 527:	4f                   	rex.WRXB
 528:	4d 50                	rex.WRB push %r8
 52a:	00 49 50             	add    %cl,0x50(%rcx)
  memcpy(pckt->flow.dstv6, ip6h->saddr.s6_addr32, 16);
 52d:	50                   	push   %rax
 52e:	52                   	push   %rdx
 52f:	4f 54                	rex.WRXB push %r12
 531:	4f 5f                	rex.WRXB pop %r15
 533:	4c 32 54 50 00       	rex.WR xor 0x0(%rax,%rdx,2),%r10b
 538:	49 50                	rex.WB push %r8
 53a:	50                   	push   %rax
 53b:	52                   	push   %rdx
 53c:	4f 54                	rex.WRXB push %r12
 53e:	4f 5f                	rex.WRXB pop %r15
 540:	53                   	push   %rbx
 541:	43 54                	rex.XB push %r12
 543:	50                   	push   %rax
 544:	00 49 50             	add    %cl,0x50(%rcx)
 547:	50                   	push   %rax
 548:	52                   	push   %rdx
 549:	4f 54                	rex.WRXB push %r12
 54b:	4f 5f                	rex.WRXB pop %r15
 54d:	55                   	push   %rbp
 54e:	44 50                	rex.R push %rax
 550:	4c                   	rex.WR
 551:	49 54                	rex.WB push %r12
 553:	45 00 49 50          	add    %r9b,0x50(%r9)
 557:	50                   	push   %rax
 558:	52                   	push   %rdx
 559:	4f 54                	rex.WRXB push %r12
 55b:	4f 5f                	rex.WRXB pop %r15
 55d:	4d 50                	rex.WRB push %r8
    memcpy(dst_addr.addrv6, pckt->flow.dstv6, 16);
 55f:	4c 53                	rex.WR push %rbx
 561:	00 49 50             	add    %cl,0x50(%rcx)
 564:	50                   	push   %rax
 565:	52                   	push   %rdx
 566:	4f 54                	rex.WRXB push %r12
 568:	4f 5f                	rex.WRXB pop %r15
 56a:	45 54                	rex.RB push %r12
 56c:	48                   	rex.W
 56d:	45 52                	rex.RB push %r10
 56f:	4e                   	rex.WRX
 570:	45 54                	rex.RB push %r12
  __u32* decap_dst_flags = bpf_map_lookup_elem(&decap_dst, &dst_addr);
 572:	00 49 50             	add    %cl,0x50(%rcx)
 575:	50                   	push   %rax
 576:	52                   	push   %rdx
 577:	4f 54                	rex.WRXB push %r12
 579:	4f 5f                	rex.WRXB pop %r15
 57b:	41                   	rex.B
 57c:	47                   	rex.RXB
 57d:	47                   	rex.RXB
 57e:	46 52                	rex.RX push %rdx
 580:	41                   	rex.B
 581:	47 00 49 50          	rex.RXB add %r9b,0x50(%r9)
 585:	50                   	push   %rax
 586:	52                   	push   %rdx
 587:	4f 54                	rex.WRXB push %r12
 589:	4f 5f                	rex.WRXB pop %r15
 58b:	52                   	push   %rdx
 58c:	41 57                	push   %r15
  if (decap_dst_flags) {
 58e:	00 49 50             	add    %cl,0x50(%rcx)
 591:	50                   	push   %rax
 592:	52                   	push   %rdx
 593:	4f 54                	rex.WRXB push %r12
 595:	4f 5f                	rex.WRXB pop %r15
 597:	53                   	push   %rbx
 598:	4d                   	rex.WRB
 599:	43 00 49 50          	rex.XB add %cl,0x50(%r9)
    data_stats = bpf_map_lookup_elem(&stats, &stats_key);
 59d:	50                   	push   %rax
 59e:	52                   	push   %rdx
 59f:	4f 54                	rex.WRXB push %r12
 5a1:	4f 5f                	rex.WRXB pop %r15
 5a3:	4d 50                	rex.WRB push %r8
 5a5:	54                   	push   %rsp
 5a6:	43 50                	rex.XB push %r8
 5a8:	00 49 50             	add    %cl,0x50(%rcx)
 5ab:	50                   	push   %rax
    if (!data_stats) {
 5ac:	52                   	push   %rdx
 5ad:	4f 54                	rex.WRXB push %r12
 5af:	4f 5f                	rex.WRXB pop %r15
 5b1:	4d                   	rex.WRB
 5b2:	41 58                	pop    %r8
 5b4:	00 70 72             	add    %dh,0x72(%rax)
    data_stats->v1 += 1;
 5b7:	69 6f 72 69 74 79 00 	imul   $0x797469,0x72(%rdi),%ebp
    if ((data + offset + sizeof(struct ipv6hdr)) > data_end) {
 5be:	66 6c                	data16 insb (%dx),%es:(%rdi)
 5c0:	6f                   	outsl  %ds:(%rsi),(%dx)
 5c1:	77 5f                	ja     622 <balancer_ingress+0x622>
 5c3:	6c                   	insb   (%dx),%es:(%rdi)
 5c4:	62                   	(bad)
 5c5:	6c                   	insb   (%dx),%es:(%rdi)
 5c6:	00 70 61             	add    %dh,0x61(%rax)
 5c9:	79 6c                	jns    637 <balancer_ingress+0x637>
 5cb:	6f                   	outsl  %ds:(%rsi),(%dx)
 5cc:	61                   	(bad)
    if (!--ip6h->hop_limit) {
 5cd:	64 5f                	fs pop %rdi
 5cf:	6c                   	insb   (%dx),%es:(%rdi)
 5d0:	65 6e                	outsb  %gs:(%rsi),(%dx)
 5d2:	00 5f 5f             	add    %bl,0x5f(%rdi)
 5d5:	62 65                	(bad)
 5d7:	31 36                	xor    %esi,(%rsi)
 5d9:	00 6e 65             	add    %ch,0x65(%rsi)
 5dc:	78 74                	js     652 <balancer_ingress+0x652>
 5de:	68 64 72 00 68       	push   $0x68007264
 5e3:	6f                   	outsl  %ds:(%rsi),(%dx)
 5e4:	70 5f                	jo     645 <balancer_ingress+0x645>
 5e6:	6c                   	insb   (%dx),%es:(%rdi)
 5e7:	69 6d 69 74 00 73 61 	imul   $0x61730074,0x69(%rbp),%ebp
  memcpy(new_eth->h_dest, old_eth->h_dest, 6);
 5ee:	64 64 72 00          	fs fs jb 5f2 <balancer_ingress+0x5f2>
 5f2:	69 6e 36 5f 75 00 75 	imul   $0x7500755f,0x36(%rsi),%ebp
 5f9:	36 5f                	ss pop %rdi
 5fb:	61                   	(bad)
 5fc:	64 64 72 38          	fs fs jb 638 <balancer_ingress+0x638>
 600:	00 75 36             	add    %dh,0x36(%rbp)
 603:	5f                   	pop    %rdi
 604:	61                   	(bad)
 605:	64 64 72 31          	fs fs jb 63a <balancer_ingress+0x63a>
  if (XDP_ADJUST_HEAD_FUNC(xdp, (int)sizeof(struct ipv6hdr))) {
 609:	36 00 75 36          	ss add %dh,0x36(%rbp)
 60d:	5f                   	pop    %rdi
 60e:	61                   	(bad)
 60f:	64 64 72 33          	fs fs jb 646 <balancer_ingress+0x646>
 613:	32 00                	xor    (%rax),%al
 615:	69 6e 36 5f 61 64 64 	imul   $0x6464615f,0x36(%rsi),%ebp
 61c:	72 00                	jb     61e <balancer_ingress+0x61e>
 61e:	64 61                	fs (bad)
 620:	64 64 72 00          	fs fs jb 624 <balancer_ingress+0x624>
  struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
 624:	61                   	(bad)
 625:	64 64 72 73          	fs fs jb 69c <balancer_ingress+0x69c>
 629:	00 69 70             	add    %ch,0x70(%rcx)
 62c:	76 36                	jbe    664 <balancer_ingress+0x664>
 62e:	68 64 72 00 69       	push   $0x69007264
 633:	68 6c 00 74 6f       	push   $0x6f74006c
  if (!data_stats) {
 638:	73 00                	jae    63a <balancer_ingress+0x63a>
 63a:	74 6f                	je     6ab <balancer_ingress+0x6ab>
 63c:	74 5f                	je     69d <balancer_ingress+0x69d>
 63e:	6c                   	insb   (%dx),%es:(%rdi)
 63f:	65 6e                	outsb  %gs:(%rsi),(%dx)
 641:	00 66 72             	add    %ah,0x72(%rsi)
  if (action >= 0) {
 644:	61                   	(bad)
 645:	67 5f                	addr32 pop %rdi
 647:	6f                   	outsl  %ds:(%rsi),(%dx)
 648:	66 66 00 70 72       	data16 data16 add %dh,0x72(%rax)
 64d:	6f                   	outsl  %ds:(%rsi),(%dx)
  if (decap_dst_flags) {
 64e:	74 6f                	je     6bf <balancer_ingress+0x6bf>
 650:	63 6f 6c             	movsxd 0x6c(%rdi),%ebp
  if (action >= 0) {
 653:	00 63 68             	add    %ah,0x68(%rbx)
 656:	65 63 6b 00          	movsxd %gs:0x0(%rbx),%ebp
 65a:	5f                   	pop    %rdi
 65b:	5f                   	pop    %rdi
 65c:	73 75                	jae    6d3 <balancer_ingress+0x6d3>
 65e:	6d                   	insl   (%dx),%es:(%rdi)
 65f:	31 36                	xor    %esi,(%rsi)
        bpf_map_lookup_elem(&stats, &xpop_stats_key);
 661:	00 69 70             	add    %ch,0x70(%rcx)
 664:	68 64 72 00 63       	push   $0x63007264
 669:	6f                   	outsl  %ds:(%rsi),(%dx)
 66a:	6e                   	outsb  %ds:(%rsi),(%dx)
 66b:	6e                   	outsb  %ds:(%rsi),(%dx)
 66c:	5f                   	pop    %rdi
 66d:	69 64 5f 6c 65 6e 73 	imul   $0x736e65,0x6c(%rdi,%rbx,2),%esp
 674:	00 
    if (xpop_stats_data) {
 675:	64 73 74             	fs jae 6ec <balancer_ingress+0x6ec>
 678:	5f                   	pop    %rdi
 679:	63 6f 6e             	movsxd 0x6e(%rdi),%ebp
 67c:	6e                   	outsb  %ds:(%rsi),(%dx)
 67d:	65 63 74 69 6f       	movsxd %gs:0x6f(%rcx,%rbp,2),%esi
 682:	6e                   	outsb  %ds:(%rsi),(%dx)
    memcpy(dst_addr.addrv6, pckt->flow.dstv6, 16);
 683:	5f                   	pop    %rdi
 684:	69 64 00 71 75 69 63 	imul   $0x5f636975,0x71(%rax,%rax,1),%esp
 68b:	5f 
 68c:	6c                   	insb   (%dx),%es:(%rdi)
 68d:	6f                   	outsl  %ds:(%rsi),(%dx)
 68e:	6e                   	outsb  %ds:(%rsi),(%dx)
 68f:	67 5f                	addr32 pop %rdi
 691:	68 65 61 64 65       	push   $0x65646165
 696:	72 00                	jb     698 <balancer_ingress+0x698>
  __u32* decap_dst_flags = bpf_map_lookup_elem(&decap_dst, &dst_addr);
 698:	71 75                	jno    70f <balancer_ingress+0x70f>
 69a:	69 63 5f 73 68 6f 72 	imul   $0x726f6873,0x5f(%rbx),%esp
 6a1:	74 5f                	je     702 <balancer_ingress+0x702>
 6a3:	68 65 61 64 65       	push   $0x65646165
 6a8:	72 00                	jb     6aa <balancer_ingress+0x6aa>
 6aa:	70 72                	jo     71e <balancer_ingress+0x71e>
 6ac:	6f                   	outsl  %ds:(%rsi),(%dx)
 6ad:	63 65 73             	movsxd 0x73(%rbp),%esp
 6b0:	73 5f                	jae    711 <balancer_ingress+0x711>
  if (decap_dst_flags) {
 6b2:	70 61                	jo     715 <balancer_ingress+0x715>
 6b4:	63 6b 65             	movsxd 0x65(%rbx),%ebp
 6b7:	74 00                	je     6b9 <balancer_ingress+0x6b9>
 6b9:	78 64                	js     71f <balancer_ingress+0x71f>
 6bb:	70 00                	jo     6bd <balancer_ingress+0x6bd>
 6bd:	64 61                	fs (bad)
 6bf:	74 61                	je     722 <balancer_ingress+0x722>
    data_stats = bpf_map_lookup_elem(&stats, &stats_key);
 6c1:	5f                   	pop    %rdi
 6c2:	65 6e                	outsb  %gs:(%rsi),(%dx)
 6c4:	64 00 64 61 74       	add    %ah,%fs:0x74(%rcx,%riz,2)
 6c9:	61                   	(bad)
 6ca:	5f                   	pop    %rdi
 6cb:	6d                   	insl   (%dx),%es:(%rdi)
 6cc:	65 74 61             	gs je  730 <balancer_ingress+0x730>
 6cf:	00 64 61 74          	add    %ah,0x74(%rcx,%riz,2)
    if (!data_stats) {
 6d3:	61                   	(bad)
 6d4:	5f                   	pop    %rdi
 6d5:	68 61 72 64 5f       	push   $0x5f647261
    data_stats->v1 += 1;
 6da:	73 74                	jae    750 <balancer_ingress+0x750>
 6dc:	61                   	(bad)
 6dd:	72 74                	jb     753 <balancer_ingress+0x753>
    if ((data + offset + sizeof(struct iphdr)) > data_end) {
 6df:	00 72 78             	add    %dh,0x78(%rdx)
 6e2:	71 00                	jno    6e4 <balancer_ingress+0x6e4>
 6e4:	78 64                	js     74a <balancer_ingress+0x74a>
 6e6:	70 5f                	jo     747 <balancer_ingress+0x747>
 6e8:	72 78                	jb     762 <balancer_ingress+0x762>
 6ea:	71 5f                	jno    74b <balancer_ingress+0x74b>
 6ec:	69 6e 66 6f 00 74 78 	imul   $0x7874006f,0x66(%rsi),%ebp
    csum = iph->check + 0x0001;
 6f3:	71 00                	jno    6f5 <balancer_ingress+0x6f5>
 6f5:	78 64                	js     75b <balancer_ingress+0x75b>
 6f7:	70 5f                	jo     758 <balancer_ingress+0x758>
    iph->check = (csum & 0xffff) + (csum >> 16);
 6f9:	74 78                	je     773 <balancer_ingress+0x773>
 6fb:	71 5f                	jno    75c <balancer_ingress+0x75c>
 6fd:	69 6e 66 6f 00 66 72 	imul   $0x7266006f,0x66(%rsi),%ebp
 704:	61                   	(bad)
    if (!--iph->ttl) {
 705:	6d                   	insl   (%dx),%es:(%rdi)
 706:	65 5f                	gs pop %rdi
 708:	73 7a                	jae    784 <balancer_ingress+0x784>
 70a:	00 78 64             	add    %bh,0x64(%rax)
 70d:	70 5f                	jo     76e <balancer_ingress+0x76e>
 70f:	6d                   	insl   (%dx),%es:(%rdi)
 710:	64 00 6e 68          	add    %ch,%fs:0x68(%rsi)
 714:	5f                   	pop    %rdi
 715:	6f                   	outsl  %ds:(%rsi),(%dx)
 716:	66 66 00 69 73       	data16 data16 add %ch,0x73(%rcx)
  memcpy(new_eth->h_source, old_eth->h_source, 6);
 71b:	5f                   	pop    %rdi
 71c:	69 70 76 36 00 5f 42 	imul   $0x425f0036,0x76(%rax),%esi
 723:	6f                   	outsl  %ds:(%rsi),(%dx)
 724:	6f                   	outsl  %ds:(%rsi),(%dx)
 725:	6c                   	insb   (%dx),%es:(%rdi)
  memcpy(new_eth->h_dest, old_eth->h_dest, 6);
 726:	00 66 6c             	add    %ah,0x6c(%rsi)
 729:	6f                   	outsl  %ds:(%rsi),(%dx)
 72a:	77 00                	ja     72c <balancer_ingress+0x72c>
 72c:	72 65                	jb     793 <balancer_ingress+0x793>
 72e:	61                   	(bad)
 72f:	6c                   	insb   (%dx),%es:(%rdi)
 730:	5f                   	pop    %rdi
 731:	69 6e 64 65 78 00 70 	imul   $0x70007865,0x64(%rsi),%ebp
 738:	61                   	(bad)
 739:	63 6b 65             	movsxd 0x65(%rbx),%ebp
 73c:	74 5f                	je     79d <balancer_ingress+0x79d>
 73e:	64 65 73 63          	fs gs jae 7a5 <balancer_ingress+0x7a5>
  if (XDP_ADJUST_HEAD_FUNC(xdp, (int)sizeof(struct ipv6hdr))) {
 742:	72 69                	jb     7ad <balancer_ingress+0x7ad>
 744:	70 74                	jo     7ba <balancer_ingress+0x7ba>
 746:	69 6f 6e 00 6d 61 63 	imul   $0x63616d00,0x6e(%rdi),%ebp
 74d:	5f                   	pop    %rdi
 74e:	61                   	(bad)
 74f:	64 64 72 5f          	fs fs jb 7b2 <balancer_ingress+0x7b2>
 753:	70 6f                	jo     7c4 <balancer_ingress+0x7c4>
 755:	73 00                	jae    757 <balancer_ingress+0x757>
 757:	74 68                	je     7c1 <balancer_ingress+0x7c1>
 759:	5f                   	pop    %rdi
 75a:	6f                   	outsl  %ds:(%rsi),(%dx)
 75b:	66 66 00 76 69       	data16 data16 add %dh,0x69(%rsi)
  struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
 760:	70 5f                	jo     7c1 <balancer_ingress+0x7c1>
 762:	69 6e 66 6f 00 64 61 	imul   $0x6164006f,0x66(%rsi),%ebp
 769:	74 61                	je     7cc <balancer_ingress+0x7cc>
 76b:	5f                   	pop    %rdi
  if (!data_stats) {
 76c:	73 74                	jae    7e2 <balancer_ingress+0x7e2>
 76e:	61                   	(bad)
 76f:	74 73                	je     7e4 <balancer_ingress+0x7e4>
 771:	00 63 70             	add    %ah,0x70(%rbx)
 774:	75 5f                	jne    7d5 <balancer_ingress+0x7d5>
 776:	6e                   	outsb  %ds:(%rsi),(%dx)
 777:	75 6d                	jne    7e6 <balancer_ingress+0x7e6>
 779:	00 6c 72 75          	add    %ch,0x75(%rdx,%rsi,2)
  if (action >= 0) {
 77d:	5f                   	pop    %rdi
 77e:	6d                   	insl   (%dx),%es:(%rdi)
 77f:	61                   	(bad)
 780:	70 00                	jo     782 <balancer_ingress+0x782>
 782:	70 6b                	jo     7ef <balancer_ingress+0x7ef>
 784:	74 5f                	je     7e5 <balancer_ingress+0x7e5>
  if (decap_dst_flags) {
 786:	62                   	(bad)
 787:	79 74                	jns    7fd <balancer_ingress+0x7fd>
  if (action >= 0) {
 789:	65 73 00             	gs jae 78c <balancer_ingress+0x78c>
 78c:	6f                   	outsl  %ds:(%rsi),(%dx)
 78d:	72 69                	jb     7f8 <balancer_ingress+0x7f8>
 78f:	67 69 6e 61 6c 5f 73 	imul   $0x70735f6c,0x61(%esi),%ebp
 796:	70 
 797:	6f                   	outsl  %ds:(%rsi),(%dx)
        bpf_map_lookup_elem(&stats, &xpop_stats_key);
 798:	72 74                	jb     80e <balancer_ingress+0x80e>
 79a:	00 63 76             	add    %ah,0x76(%rbx)
 79d:	61                   	(bad)
 79e:	6c                   	insb   (%dx),%es:(%rdi)
 79f:	00 69 70             	add    %ch,0x70(%rcx)
 7a2:	68 5f 6c 65 6e       	push   $0x6e656c5f
 7a7:	00 70 61             	add    %dh,0x61(%rax)
    if (xpop_stats_data) {
 7aa:	73 73                	jae    81f <balancer_ingress+0x81f>
 7ac:	00 5f 5f             	add    %bl,0x5f(%rdi)
 7af:	65 6c                	gs insb (%dx),%es:(%rdi)
 7b1:	65 6d                	gs insl (%dx),%es:(%rdi)
 7b3:	00 69 64             	add    %ch,0x64(%rcx)
  udp = data + off;
 7b6:	78 00                	js     7b8 <balancer_ingress+0x7b8>
 7b8:	65 6c                	gs insb (%dx),%es:(%rdi)
  if (is_ipv6) {
 7ba:	65 6d                	gs insl (%dx),%es:(%rdi)
  udp = data + off;
 7bc:	5f                   	pop    %rdi
 7bd:	73 69                	jae    828 <balancer_ingress+0x828>
 7bf:	7a 65                	jp     826 <balancer_ingress+0x826>
  if (udp + 1 > data_end) {
 7c1:	00 5f 5f             	add    %bl,0x5f(%rdi)
 7c4:	70 65                	jo     82b <balancer_ingress+0x82b>
 7c6:	72 63                	jb     82b <balancer_ingress+0x82b>
 7c8:	70 75                	jo     83f <balancer_ingress+0x83f>
 7ca:	5f                   	pop    %rdi
 7cb:	69 64 00 6c 72 75 5f 	imul   $0x735f7572,0x6c(%rax,%rax,1),%esp
 7d2:	73 
 7d3:	74 61                	je     836 <balancer_ingress+0x836>
 7d5:	74 73                	je     84a <balancer_ingress+0x84a>
 7d7:	5f                   	pop    %rdi
 7d8:	6b 65 79 00          	imul   $0x0,0x79(%rbp),%esp
 7dc:	6c                   	insb   (%dx),%es:(%rdi)
 7dd:	72 75                	jb     854 <balancer_ingress+0x854>
 7df:	5f                   	pop    %rdi
 7e0:	73 74                	jae    856 <balancer_ingress+0x856>
 7e2:	61                   	(bad)
 7e3:	74 73                	je     858 <balancer_ingress+0x858>
 7e5:	00 69 73             	add    %ch,0x73(%rcx)
 7e8:	5f                   	pop    %rdi
 7e9:	69 63 6d 70 00 71 75 	imul   $0x75710070,0x6d(%rbx),%esp
  if (icmp_hdr->code == ICMP_FRAG_NEEDED) {
 7f0:	69 63 5f 70 61 63 6b 	imul   $0x6b636170,0x5f(%rbx),%esp
 7f7:	65 74 73             	gs je  86d <balancer_ingress+0x86d>
 7fa:	5f                   	pop    %rdi
 7fb:	73 74                	jae    871 <balancer_ingress+0x871>
        bpf_map_lookup_elem(&stats, &stats_key);
 7fd:	61                   	(bad)
 7fe:	74 73                	je     873 <balancer_ingress+0x873>
 800:	5f                   	pop    %rdi
 801:	6b 65 79 00          	imul   $0x0,0x79(%rbp),%esp
 805:	71 70                	jno    877 <balancer_ingress+0x877>
 807:	72 00                	jb     809 <balancer_ingress+0x809>
 809:	63 69 64             	movsxd 0x64(%rcx),%ebp
    if (!icmp_ptb_v4_stats) {
 80c:	5f                   	pop    %rdi
 80d:	76 65                	jbe    874 <balancer_ingress+0x874>
 80f:	72 73                	jb     884 <balancer_ingress+0x884>
 811:	69 6f 6e 00 69 73 5f 	imul   $0x5f736900,0x6e(%rdi),%ebp
    icmp_ptb_v4_stats->v1 += 1;
 818:	69 6e 69 74 69 61 6c 	imul   $0x6c616974,0x69(%rsi),%ebp
      icmp_ptb_v4_stats->v2 += 1;
 81f:	00 71 75             	add    %dh,0x75(%rcx)
 822:	69 63 5f 70 61 72 73 	imul   $0x73726170,0x5f(%rbx),%esp
  if (iph + 1 > data_end) {
 829:	65 5f                	gs pop %rdi
 82b:	72 65                	jb     892 <balancer_ingress+0x892>
 82d:	73 75                	jae    8a4 <balancer_ingress+0x8a4>
 82f:	6c                   	insb   (%dx),%es:(%rdi)
 830:	74 00                	je     832 <balancer_ingress+0x832>
  if (iph->ihl != 5) {
 832:	72 65                	jb     899 <balancer_ingress+0x899>
 834:	61                   	(bad)
 835:	6c                   	insb   (%dx),%es:(%rdi)
 836:	5f                   	pop    %rdi
 837:	70 6f                	jo     8a8 <balancer_ingress+0x8a8>
 839:	73 00                	jae    83b <balancer_ingress+0x83b>
 83b:	72 65                	jb     8a2 <balancer_ingress+0x8a2>
  pckt->flow.proto = iph->protocol;
 83d:	73 00                	jae    83f <balancer_ingress+0x83f>
 83f:	70 61                	jo     8a2 <balancer_ingress+0x8a2>
 841:	72 73                	jb     8b6 <balancer_ingress+0x8b6>
 843:	65 5f                	gs pop %rdi
  pckt->flags |= F_ICMP;
 845:	6c                   	insb   (%dx),%es:(%rdi)
 846:	33 5f 68             	xor    0x68(%rdi),%ebx
  pckt->flow.src = iph->daddr;
 849:	65 61                	gs (bad)
 84b:	64 65 72 73          	fs gs jb 8c2 <balancer_ingress+0x8c2>
 84f:	00 69 70             	add    %ch,0x70(%rcx)
  pckt->flow.dst = iph->saddr;
 852:	68 00 69 70 36       	push   $0x36706900
 857:	68 00 70 61 72       	push   $0x72617000
 85c:	73 65                	jae    8c3 <balancer_ingress+0x8c3>
 85e:	5f                   	pop    %rdi
 85f:	69 63 6d 70 00 69 63 	imul   $0x63690070,0x6d(%rbx),%esp
 866:	6d                   	insl   (%dx),%es:(%rdi)
 867:	70 5f                	jo     8c8 <balancer_ingress+0x8c8>
 869:	68 64 72 00 63       	push   $0x63007264
 86e:	68 65 63 6b 73       	push   $0x736b6365
    memcpy(vip.vipv6, pckt.flow.dstv6, 16);
 873:	75 6d                	jne    8e2 <balancer_ingress+0x8e2>
 875:	00 73 65             	add    %dh,0x65(%rbx)
 878:	71 75                	jno    8ef <balancer_ingress+0x8ef>
 87a:	65 6e                	outsb  %gs:(%rsi),(%dx)
 87c:	63 65 00             	movsxd 0x0(%rbp),%esp
 87f:	67 61                	addr32 (bad)
 881:	74 65                	je     8e8 <balancer_ingress+0x8e8>
 883:	77 61                	ja     8e6 <balancer_ingress+0x8e6>
  vip.port = pckt.flow.port16[1];
 885:	79 00                	jns    887 <balancer_ingress+0x887>
 887:	66 72 61             	data16 jb 8eb <balancer_ingress+0x8eb>
 88a:	67 00 5f 5f          	add    %bl,0x5f(%edi)
 88e:	75 6e                	jne    8fe <balancer_ingress+0x8fe>
  vip.proto = pckt.flow.proto;
 890:	75 73                	jne    905 <balancer_ingress+0x905>
 892:	65 64 00 6d 74       	gs add %ch,%fs:0x74(%rbp)
  vip_info = bpf_map_lookup_elem(&vip_map, &vip);
 897:	75 00                	jne    899 <balancer_ingress+0x899>
 899:	72 65                	jb     900 <balancer_ingress+0x900>
 89b:	73 65                	jae    902 <balancer_ingress+0x902>
 89d:	72 76                	jb     915 <balancer_ingress+0x915>
 89f:	65 64 00 69 63       	gs add %ch,%fs:0x63(%rcx)
 8a4:	6d                   	insl   (%dx),%es:(%rdi)
 8a5:	70 68                	jo     90f <balancer_ingress+0x90f>
 8a7:	64 72 00             	fs jb  8aa <balancer_ingress+0x8aa>
 8aa:	69 63 6d 70 5f 70 74 	imul   $0x74705f70,0x6d(%rbx),%esp
 8b1:	62                   	(bad)
 8b2:	5f                   	pop    %rdi
  if (!vip_info) {
 8b3:	76 34                	jbe    8e9 <balancer_ingress+0x8e9>
 8b5:	5f                   	pop    %rdi
 8b6:	73 74                	jae    92c <balancer_ingress+0x92c>
 8b8:	61                   	(bad)
 8b9:	74 73                	je     92e <balancer_ingress+0x92e>
 8bb:	00 68 61             	add    %ch,0x61(%rax)
  if (data_end - data > MAX_PCKT_SIZE) {
 8be:	6e                   	outsb  %ds:(%rsi),(%dx)
 8bf:	64 6c                	fs insb (%dx),%es:(%rdi)
 8c1:	65 5f                	gs pop %rdi
 8c3:	69 66 5f 69 63 6d 70 	imul   $0x706d6369,0x5f(%rsi),%esp
 8ca:	00 73 65             	add    %dh,0x65(%rbx)
 8cd:	6e                   	outsb  %ds:(%rsi),(%dx)
 8ce:	64 5f                	fs pop %rdi
 8d0:	69 63 6d 70 5f 72 65 	imul   $0x65725f70,0x6d(%rbx),%esp
 8d7:	70 6c                	jo     945 <balancer_ingress+0x945>
  data_stats = bpf_map_lookup_elem(&stats, &stats_key);
 8d9:	79 00                	jns    8db <balancer_ingress+0x8db>
 8db:	74 6d                	je     94a <balancer_ingress+0x94a>
 8dd:	70 5f                	jo     93e <balancer_ingress+0x93e>
 8df:	61                   	(bad)
 8e0:	64 64 72 00          	fs fs jb 8e4 <balancer_ingress+0x8e4>
 8e4:	63 73 75             	movsxd 0x75(%rbx),%esi
 8e7:	6d                   	insl   (%dx),%es:(%rdi)
 8e8:	00 69 70             	add    %ch,0x70(%rcx)
  if (!data_stats) {
 8eb:	76 34                	jbe    921 <balancer_ingress+0x921>
 8ed:	5f                   	pop    %rdi
 8ee:	63 73 75             	movsxd 0x75(%rbx),%esi
 8f1:	6d                   	insl   (%dx),%es:(%rdi)
  data_stats->v1 += 1;
 8f2:	5f                   	pop    %rdi
 8f3:	69 6e 6c 69 6e 65 00 	imul   $0x656e69,0x6c(%rsi),%ebp
  if ((vip_info->flags & F_HASH_NO_SRC_PORT)) {
 8fa:	6e                   	outsb  %ds:(%rsi),(%dx)
    pckt.flow.port16[0] = 0;
 8fb:	65 78 74             	gs js  972 <balancer_ingress+0x972>
 8fe:	5f                   	pop    %rdi
 8ff:	69 70 68 5f 75 31 36 	imul   $0x3631755f,0x68(%rax),%esi
  vip_num = vip_info->vip_num;
 906:	00 69 00             	add    %ch,0x0(%rcx)
 909:	70 61                	jo     96c <balancer_ingress+0x96c>
 90b:	72 73                	jb     980 <balancer_ingress+0x980>
  __u32 cpu_num = bpf_get_smp_processor_id();
 90d:	65 5f                	gs pop %rdi
 90f:	69 63 6d 70 76 36 00 	imul   $0x367670,0x6d(%rbx),%esp
 916:	69 63 6d 70 36 5f 74 	imul   $0x745f3670,0x6d(%rbx),%esp
  void* lru_map = bpf_map_lookup_elem(&lru_mapping, &cpu_num);
 91d:	79 70                	jns    98f <balancer_ingress+0x98f>
 91f:	65 00 69 63          	add    %ch,%gs:0x63(%rcx)
    struct lb_stats* lru_stats = bpf_map_lookup_elem(&stats, &lru_stats_key);
 923:	6d                   	insl   (%dx),%es:(%rdi)
 924:	70 36                	jo     95c <balancer_ingress+0x95c>
 926:	5f                   	pop    %rdi
 927:	63 6f 64             	movsxd 0x64(%rdi),%ebp
 92a:	65 00 69 63          	add    %ch,%gs:0x63(%rcx)
 92e:	6d                   	insl   (%dx),%es:(%rdi)
 92f:	70 36                	jo     967 <balancer_ingress+0x967>
 931:	5f                   	pop    %rdi
 932:	63 6b 73             	movsxd 0x73(%rbx),%ebp
    if (!lru_stats) {
 935:	75 6d                	jne    9a4 <balancer_ingress+0x9a4>
 937:	00 69 63             	add    %ch,0x63(%rcx)
 93a:	6d                   	insl   (%dx),%es:(%rdi)
 93b:	70 36                	jo     973 <balancer_ingress+0x973>
    lru_stats->v1 += 1;
 93d:	5f                   	pop    %rdi
 93e:	64 61                	fs (bad)
 940:	74 61                	je     9a3 <balancer_ingress+0x9a3>
 942:	75 6e                	jne    9b2 <balancer_ingress+0x9b2>
 944:	00 75 6e             	add    %dh,0x6e(%rbp)
 947:	5f                   	pop    %rdi
 948:	64 61                	fs (bad)
 94a:	74 61                	je     9ad <balancer_ingress+0x9ad>
 94c:	33 32                	xor    (%rdx),%esi
 94e:	00 75 6e             	add    %dh,0x6e(%rbp)
 951:	5f                   	pop    %rdi
 952:	64 61                	fs (bad)
 954:	74 61                	je     9b7 <balancer_ingress+0x9b7>
  if (icmp_hdr->code == ICMP_FRAG_NEEDED) {
 956:	31 36                	xor    %esi,(%rsi)
 958:	00 75 6e             	add    %dh,0x6e(%rbp)
 95b:	5f                   	pop    %rdi
 95c:	64 61                	fs (bad)
 95e:	74 61                	je     9c1 <balancer_ingress+0x9c1>
 960:	38 00                	cmp    %al,(%rax)
 962:	75 5f                	jne    9c3 <balancer_ingress+0x9c3>
 964:	65 63 68 6f          	movsxd %gs:0x6f(%rax),%ebp
        bpf_map_lookup_elem(&stats, &stats_key);
 968:	00 69 64             	add    %ch,0x64(%rcx)
 96b:	65 6e                	outsb  %gs:(%rsi),(%dx)
 96d:	74 69                	je     9d8 <balancer_ingress+0x9d8>
 96f:	66 69 65 72 00 69    	imul   $0x6900,0x72(%rbp),%sp
    if (!icmp_ptb_v4_stats) {
 975:	63 6d 70             	movsxd 0x70(%rbp),%ebp
 978:	76 36                	jbe    9b0 <balancer_ingress+0x9b0>
 97a:	5f                   	pop    %rdi
 97b:	65 63 68 6f          	movsxd %gs:0x6f(%rax),%ebp
    icmp_ptb_v4_stats->v1 += 1;
 97f:	00 75 5f             	add    %dh,0x5f(%rbp)
    if (mtu < MAX_MTU_IN_PTB_TO_DROP) {
 982:	6e                   	outsb  %ds:(%rsi),(%dx)
 983:	64 5f                	fs pop %rdi
 985:	61                   	(bad)
 986:	64 76 74             	fs jbe 9fd <balancer_ingress+0x9fd>
      icmp_ptb_v4_stats->v2 += 1;
 989:	00 6f 76             	add    %ch,0x76(%rdi)
 98c:	65 72 72             	gs jb  a01 <balancer_ingress+0xa01>
  if (iph + 1 > data_end) {
 98f:	69 64 65 00 73 6f 6c 	imul   $0x696c6f73,0x0(%rbp,%riz,2),%esp
 996:	69 
 997:	63 69 74             	movsxd 0x74(%rcx),%ebp
  if (iph->ihl != 5) {
 99a:	65 64 00 72 6f       	gs add %dh,%fs:0x6f(%rdx)
 99f:	75 74                	jne    a15 <balancer_ingress+0xa15>
 9a1:	65 72 00             	gs jb  9a4 <balancer_ingress+0x9a4>
 9a4:	72 65                	jb     a0b <balancer_ingress+0xa0b>
  pckt->flow.proto = iph->protocol;
 9a6:	73 65                	jae    a0d <balancer_ingress+0xa0d>
 9a8:	72 76                	jb     a20 <balancer_ingress+0xa20>
 9aa:	65 64 32 00          	gs xor %fs:(%rax),%al
  pckt->flags |= F_ICMP;
 9ae:	69 63 6d 70 76 36 5f 	imul   $0x5f367670,0x6d(%rbx),%esp
  pckt->flow.src = iph->daddr;
 9b5:	6e                   	outsb  %ds:(%rsi),(%dx)
 9b6:	64 5f                	fs pop %rdi
 9b8:	61                   	(bad)
  pckt->flow.dst = iph->saddr;
 9b9:	64 76 74             	fs jbe a30 <balancer_ingress+0xa30>
 9bc:	00 75 5f             	add    %dh,0x5f(%rbp)
 9bf:	6e                   	outsb  %ds:(%rsi),(%dx)
 9c0:	64 5f                	fs pop %rdi
 9c2:	72 61                	jb     a25 <balancer_ingress+0xa25>
 9c4:	00 72 6f             	add    %dh,0x6f(%rdx)
    vip.port = 0;
 9c7:	75 74                	jne    a3d <balancer_ingress+0xa3d>
 9c9:	65 72 5f             	gs jb  a2b <balancer_ingress+0xa2b>
    vip_info = bpf_map_lookup_elem(&vip_map, &vip);
 9cc:	70 72                	jo     a40 <balancer_ingress+0xa40>
 9ce:	65 66 00 68 6f       	data16 add %ch,%gs:0x6f(%rax)
 9d3:	6d                   	insl   (%dx),%es:(%rdi)
 9d4:	65 5f                	gs pop %rdi
 9d6:	61                   	(bad)
 9d7:	67 65 6e             	outsb  %gs:(%esi),(%dx)
 9da:	74 00                	je     9dc <balancer_ingress+0x9dc>
 9dc:	6f                   	outsl  %ds:(%rsi),(%dx)
 9dd:	74 68                	je     a47 <balancer_ingress+0xa47>
    if (!vip_info) {
 9df:	65 72 00             	gs jb  9e2 <balancer_ingress+0x9e2>
 9e2:	6d                   	insl   (%dx),%es:(%rdi)
 9e3:	61                   	(bad)
 9e4:	6e                   	outsb  %ds:(%rsi),(%dx)
 9e5:	61                   	(bad)
 9e6:	67 65 64 00 72 74    	gs add %dh,%fs:0x74(%edx)
    if (!(vip_info->flags & F_HASH_DPORT_ONLY) &&
 9ec:	5f                   	pop    %rdi
 9ed:	6c                   	insb   (%dx),%es:(%rdi)
 9ee:	69 66 65 74 69 6d 65 	imul   $0x656d6974,0x65(%rsi),%esp
      pckt.flow.port16[1] = 0;
 9f5:	00 69 63             	add    %ch,0x63(%rcx)
 9f8:	6d                   	insl   (%dx),%es:(%rdi)
 9f9:	70 76                	jo     a71 <balancer_ingress+0xa71>
 9fb:	36 5f                	ss pop %rdi
 9fd:	6e                   	outsb  %ds:(%rsi),(%dx)
 9fe:	64 5f                	fs pop %rdi
  struct address dst_addr = {};
 a00:	72 61                	jb     a63 <balancer_ingress+0xa63>
 a02:	00 69 63             	add    %ch,0x63(%rcx)
 a05:	6d                   	insl   (%dx),%es:(%rdi)
 a06:	70 36                	jo     a3e <balancer_ingress+0xa3e>
 a08:	68 64 72 00 69       	push   $0x69007264
 a0d:	63 6d 70             	movsxd 0x70(%rbp),%ebp
    dst_addr.addr = pckt->flow.dst;
 a10:	5f                   	pop    %rdi
 a11:	70 74                	jo     a87 <balancer_ingress+0xa87>
 a13:	62                   	(bad)
 a14:	5f                   	pop    %rdi
 a15:	76 36                	jbe    a4d <balancer_ingress+0xa4d>
 a17:	5f                   	pop    %rdi
  __u32* decap_dst_flags = bpf_map_lookup_elem(&decap_dst, &dst_addr);
 a18:	73 74                	jae    a8e <balancer_ingress+0xa8e>
 a1a:	61                   	(bad)
 a1b:	74 73                	je     a90 <balancer_ingress+0xa90>
 a1d:	00 70 61             	add    %dh,0x61(%rax)
 a20:	72 73                	jb     a95 <balancer_ingress+0xa95>
 a22:	65 5f                	gs pop %rdi
 a24:	74 63                	je     a89 <balancer_ingress+0xa89>
 a26:	70 00                	jo     a28 <balancer_ingress+0xa28>
 a28:	61                   	(bad)
 a29:	63 6b 5f             	movsxd 0x5f(%rbx),%ebp
 a2c:	73 65                	jae    a93 <balancer_ingress+0xa93>
 a2e:	71 00                	jno    a30 <balancer_ingress+0xa30>
 a30:	61                   	(bad)
 a31:	65 00 72 65          	add    %dh,%gs:0x65(%rdx)
  if (decap_dst_flags) {
 a35:	73 31                	jae    a68 <balancer_ingress+0xa68>
 a37:	00 64 6f 66          	add    %ah,0x66(%rdi,%rbp,2)
 a3b:	66 00 66 69          	data16 add %ah,0x69(%rsi)
 a3f:	6e                   	outsb  %ds:(%rsi),(%dx)
 a40:	00 72 73             	add    %dh,0x73(%rdx)
    data_stats = bpf_map_lookup_elem(&stats, &stats_key);
 a43:	74 00                	je     a45 <balancer_ingress+0xa45>
 a45:	70 73                	jo     aba <balancer_ingress+0xaba>
 a47:	68 00 61 63 6b       	push   $0x6b636100
 a4c:	00 75 72             	add    %dh,0x72(%rbp)
 a4f:	67 00 65 63          	add    %ah,0x63(%ebp)
    if (!data_stats) {
 a53:	65 00 63 77          	add    %ah,%gs:0x77(%rbx)
 a57:	72 00                	jb     a59 <balancer_ingress+0xa59>
 a59:	77 69                	ja     ac4 <balancer_ingress+0xac4>
    data_stats->v1 += 1;
 a5b:	6e                   	outsb  %ds:(%rsi),(%dx)
 a5c:	64 6f                	outsl  %fs:(%rsi),(%dx)
 a5e:	77 00                	ja     a60 <balancer_ingress+0xa60>
 a60:	75 72                	jne    ad4 <balancer_ingress+0xad4>
 a62:	67 5f                	addr32 pop %rdi
    if ((data + offset + sizeof(struct iphdr)) > data_end) {
 a64:	70 74                	jo     ada <balancer_ingress+0xada>
 a66:	72 00                	jb     a68 <balancer_ingress+0xa68>
 a68:	74 63                	je     acd <balancer_ingress+0xacd>
 a6a:	70 68                	jo     ad4 <balancer_ingress+0xad4>
 a6c:	64 72 00             	fs jb  a6f <balancer_ingress+0xa6f>
 a6f:	63 61 6c             	movsxd 0x6c(%rcx),%esp
 a72:	63 5f 6f             	movsxd 0x6f(%rdi),%ebx
 a75:	66 66 73 65          	data16 data16 jae ade <balancer_ingress+0xade>
    csum = iph->check + 0x0001;
 a79:	74 00                	je     a7b <balancer_ingress+0xa7b>
 a7b:	73 65                	jae    ae2 <balancer_ingress+0xae2>
 a7d:	6e                   	outsb  %ds:(%rsi),(%dx)
    iph->check = (csum & 0xffff) + (csum >> 16);
 a7e:	64 5f                	fs pop %rdi
 a80:	69 63 6d 70 36 5f 72 	imul   $0x725f3670,0x6d(%rbx),%esp
 a87:	65 70 6c             	gs jo  af6 <balancer_ingress+0xaf6>
    if (!--iph->ttl) {
 a8a:	79 00                	jns    a8c <balancer_ingress+0xa8c>
 a8c:	63 68 65             	movsxd 0x65(%rax),%ebp
 a8f:	63 6b 5f             	movsxd 0x5f(%rbx),%ebp
 a92:	64 65 63 61 70       	fs movsxd %gs:0x70(%rcx),%esp
 a97:	5f                   	pop    %rdi
 a98:	64 73 74             	fs jae b0f <balancer_ingress+0xb0f>
 a9b:	00 64 73 74          	add    %ah,0x74(%rbx,%rsi,2)
  memcpy(new_eth->h_source, old_eth->h_source, 6);
 a9f:	5f                   	pop    %rdi
 aa0:	61                   	(bad)
 aa1:	64 64 72 00          	fs fs jb aa5 <balancer_ingress+0xaa5>
 aa5:	64 65 63 61 70       	fs movsxd %gs:0x70(%rcx),%esp
 aaa:	5f                   	pop    %rdi
  memcpy(new_eth->h_dest, old_eth->h_dest, 6);
 aab:	64 73 74             	fs jae b22 <balancer_ingress+0xb22>
 aae:	5f                   	pop    %rdi
 aaf:	66 6c                	data16 insb (%dx),%es:(%rdi)
 ab1:	61                   	(bad)
 ab2:	67 73 00             	addr32 jae ab5 <balancer_ingress+0xab5>
 ab5:	64 65 63 72 65       	fs movsxd %gs:0x65(%rdx),%esi
  new_eth->h_proto = BE_ETH_P_IP;
 aba:	6d                   	insl   (%dx),%es:(%rdi)
 abb:	65 6e                	outsb  %gs:(%rsi),(%dx)
 abd:	74 5f                	je     b1e <balancer_ingress+0xb1e>
 abf:	74 74                	je     b35 <balancer_ingress+0xb35>
 ac1:	6c                   	insb   (%dx),%es:(%rdi)
 ac2:	00 70 72             	add    %dh,0x72(%rax)
  if (XDP_ADJUST_HEAD_FUNC(xdp, (int)sizeof(struct iphdr))) {
 ac5:	6f                   	outsl  %ds:(%rsi),(%dx)
 ac6:	63 65 73             	movsxd 0x73(%rbp),%esp
 ac9:	73 5f                	jae    b2a <balancer_ingress+0xb2a>
 acb:	65 6e                	outsb  %gs:(%rsi),(%dx)
 acd:	63 61 70             	movsxd 0x70(%rcx),%esp
 ad0:	65 64 5f             	gs fs pop %rdi
 ad3:	69 70 69 70 5f 70 63 	imul   $0x63705f70,0x69(%rax),%esi
 ada:	6b 74 00 78 70       	imul   $0x70,0x78(%rax,%rax,1),%esi
 adf:	6f                   	outsl  %ds:(%rsi),(%dx)
  struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
 ae0:	70 5f                	jo     b41 <balancer_ingress+0xb41>
 ae2:	73 74                	jae    b58 <balancer_ingress+0xb58>
 ae4:	61                   	(bad)
 ae5:	74 73                	je     b5a <balancer_ingress+0xb5a>
 ae7:	5f                   	pop    %rdi
 ae8:	6b 65 79 00          	imul   $0x0,0x79(%rbp),%esp
 aec:	78 70                	js     b5e <balancer_ingress+0xb5e>
 aee:	6f                   	outsl  %ds:(%rsi),(%dx)
 aef:	70 5f                	jo     b50 <balancer_ingress+0xb50>
  if (!data_stats) {
 af1:	73 74                	jae    b67 <balancer_ingress+0xb67>
 af3:	61                   	(bad)
 af4:	74 73                	je     b69 <balancer_ingress+0xb69>
 af6:	5f                   	pop    %rdi
 af7:	64 61                	fs (bad)
 af9:	74 61                	je     b5c <balancer_ingress+0xb5c>
 afb:	00 69 6e             	add    %ch,0x6e(%rcx)
  if (action >= 0) {
 afe:	6e                   	outsb  %ds:(%rsi),(%dx)
 aff:	65 72 5f             	gs jb  b61 <balancer_ingress+0xb61>
 b02:	69 70 76 36 00 64 65 	imul   $0x65640036,0x76(%rax),%esi
 b09:	63 61 70             	movsxd 0x70(%rcx),%esp
  if (decap_dst_flags) {
 b0c:	5f                   	pop    %rdi
  if (action >= 0) {
 b0d:	76 36                	jbe    b45 <balancer_ingress+0xb45>
 b0f:	00 69 6e             	add    %ch,0x6e(%rcx)
 b12:	6e                   	outsb  %ds:(%rsi),(%dx)
 b13:	65 72 5f             	gs jb  b75 <balancer_ingress+0xb75>
 b16:	76 34                	jbe    b4c <balancer_ingress+0xb4c>
 b18:	00 6f 6c             	add    %ch,0x6c(%rdi)
 b1b:	64 5f                	fs pop %rdi
        bpf_map_lookup_elem(&stats, &xpop_stats_key);
 b1d:	65 74 68             	gs je  b88 <balancer_ingress+0xb88>
 b20:	00 68 5f             	add    %ch,0x5f(%rax)
 b23:	64 65 73 74          	fs gs jae b9b <balancer_ingress+0xb9b>
 b27:	00 68 5f             	add    %ch,0x5f(%rax)
 b2a:	73 6f                	jae    b9b <balancer_ingress+0xb9b>
    if (xpop_stats_data) {
 b2c:	75 72                	jne    ba0 <balancer_ingress+0xba0>
 b2e:	63 65 00             	movsxd 0x0(%rbp),%esp
 b31:	65 74 68             	gs je  b9c <balancer_ingress+0xb9c>
 b34:	68 64 72 00 6e       	push   $0x6e007264
 b39:	65 77 5f             	gs ja  b9b <balancer_ingress+0xb9b>
 b3c:	65 74 68             	gs je  ba7 <balancer_ingress+0xba7>
 b3f:	00 70 61             	add    %dh,0x61(%rax)
 b42:	72 73                	jb     bb7 <balancer_ingress+0xbb7>
 b44:	65 5f                	gs pop %rdi
 b46:	75 64                	jne    bac <balancer_ingress+0xbac>
 b48:	70 00                	jo     b4a <balancer_ingress+0xb4a>
 b4a:	75 64                	jne    bb0 <balancer_ingress+0xbb0>
 b4c:	70 68                	jo     bb6 <balancer_ingress+0xbb6>
 b4e:	64 72 00             	fs jb  b51 <balancer_ingress+0xb51>
 b51:	64 65 63 61 70       	fs movsxd %gs:0x70(%rcx),%esp
 b56:	5f                   	pop    %rdi
 b57:	76 34                	jbe    b8d <balancer_ingress+0xb8d>
 b59:	00 70 61             	add    %dh,0x61(%rax)
 b5c:	72 73                	jb     bd1 <balancer_ingress+0xbd1>
 b5e:	65 5f                	gs pop %rdi
 b60:	71 75                	jno    bd7 <balancer_ingress+0xbd7>
 b62:	69 63 00 71 75 69 63 	imul   $0x63697571,0x0(%rbx),%esp
        bpf_map_lookup_elem(&stats, &stats_key);
 b69:	5f                   	pop    %rdi
 b6a:	64 61                	fs (bad)
 b6c:	74 61                	je     bcf <balancer_ingress+0xbcf>
 b6e:	00 70 6b             	add    %dh,0x6b(%rax)
 b71:	74 5f                	je     bd2 <balancer_ingress+0xbd2>
 b73:	74 79                	je     bee <balancer_ingress+0xbee>
 b75:	70 65                	jo     bdc <balancer_ingress+0xbdc>
    if (!icmp_ptb_v6_stats) {
 b77:	00 63 6f             	add    %ah,0x6f(%rbx)
 b7a:	6e                   	outsb  %ds:(%rsi),(%dx)
 b7b:	6e                   	outsb  %ds:(%rsi),(%dx)
 b7c:	49                   	rex.WB
 b7d:	64 00 63 6f          	add    %ah,%fs:0x6f(%rbx)
    icmp_ptb_v6_stats->v1 += 1;
 b81:	6e                   	outsb  %ds:(%rsi),(%dx)
 b82:	6e                   	outsb  %ds:(%rsi),(%dx)
    __u32 mtu = bpf_ntohl(icmp_hdr->icmp6_mtu);
 b83:	49                   	rex.WB
 b84:	64 56                	fs push %rsi
 b86:	65 72 73             	gs jb  bfc <balancer_ingress+0xbfc>
    if (mtu < MAX_MTU_IN_PTB_TO_DROP) {
 b89:	69 6f 6e 00 69 67 6e 	imul   $0x6e676900,0x6e(%rdi),%ebp
      icmp_ptb_v6_stats->v2 += 1;
 b90:	6f                   	outsl  %ds:(%rsi),(%dx)
 b91:	72 61                	jb     bf4 <balancer_ingress+0xbf4>
 b93:	62                   	(bad)
 b94:	6c                   	insb   (%dx),%es:(%rdi)
  if (ip6h + 1 > data_end) {
 b95:	65 5f                	gs pop %rdi
 b97:	71 75                	jno    c0e <balancer_ingress+0xc0e>
 b99:	69 63 5f 69 63 6d 70 	imul   $0x706d6369,0x5f(%rbx),%esp
 ba0:	5f                   	pop    %rdi
 ba1:	63 6f 64             	movsxd 0x64(%rdi),%ebp
 ba4:	65 00 63 6f          	add    %ah,%gs:0x6f(%rbx)
  pckt->flow.proto = ip6h->nexthdr;
 ba8:	6e                   	outsb  %ds:(%rsi),(%dx)
 ba9:	6e                   	outsb  %ds:(%rsi),(%dx)
 baa:	65 63 74 69 6f       	movsxd %gs:0x6f(%rcx,%rbp,2),%esi
  pckt->flags |= F_ICMP;
 baf:	6e                   	outsb  %ds:(%rsi),(%dx)
 bb0:	5f                   	pop    %rdi
 bb1:	74 61                	je     c14 <balancer_ingress+0xc14>
  memcpy(pckt->flow.srcv6, ip6h->daddr.s6_addr32, 16);
 bb3:	62                   	(bad)
 bb4:	6c                   	insb   (%dx),%es:(%rdi)
 bb5:	65 5f                	gs pop %rdi
 bb7:	6c                   	insb   (%dx),%es:(%rdi)
 bb8:	6f                   	outsl  %ds:(%rsi),(%dx)
 bb9:	6f                   	outsl  %ds:(%rsi),(%dx)
 bba:	6b 75 70 00          	imul   $0x0,0x70(%rbp),%esi
 bbe:	69 73 47 6c 6f 62 61 	imul   $0x61626f6c,0x47(%rbx),%esi
  memcpy(pckt->flow.dstv6, ip6h->saddr.s6_addr32, 16);
 bc5:	6c                   	insb   (%dx),%es:(%rdi)
 bc6:	4c 72 75             	rex.WR jb c3e <balancer_ingress+0xc3e>
 bc9:	00 63 75             	add    %ah,0x75(%rbx)
 bcc:	72 5f                	jb     c2d <balancer_ingress+0xc2d>
 bce:	74 69                	je     c39 <balancer_ingress+0xc39>
 bd0:	6d                   	insl   (%dx),%es:(%rdi)
 bd1:	65 00 69 6e          	add    %ch,%gs:0x6e(%rcx)
 bd5:	63 72 5f             	movsxd 0x5f(%rdx),%esi
 bd8:	73 65                	jae    c3f <balancer_ingress+0xc3f>
 bda:	72 76                	jb     c52 <balancer_ingress+0xc52>
 bdc:	65 72 5f             	gs jb  c3e <balancer_ingress+0xc3e>
  if (protocol == IPPROTO_IPIP) {
 bdf:	69 64 5f 72 6f 75 74 	imul   $0x6974756f,0x72(%rdi,%rbx,2),%esp
 be6:	69 
 be7:	6e                   	outsb  %ds:(%rsi),(%dx)
 be8:	67 5f                	addr32 pop %rdi
 bea:	73 74                	jae    c60 <balancer_ingress+0xc60>
 bec:	61                   	(bad)
 bed:	74 73                	je     c62 <balancer_ingress+0xc62>
 bef:	00 6e 65             	add    %ch,0x65(%rsi)
 bf2:	77 43                	ja     c37 <balancer_ingress+0xc37>
 bf4:	6f                   	outsl  %ds:(%rsi),(%dx)
  struct address dst_addr = {};
 bf5:	6e                   	outsb  %ds:(%rsi),(%dx)
 bf6:	6e                   	outsb  %ds:(%rsi),(%dx)
 bf7:	00 6d 69             	add    %ch,0x69(%rbp)
 bfa:	73 4d                	jae    c49 <balancer_ingress+0xc49>
 bfc:	61                   	(bad)
 bfd:	74 63                	je     c62 <balancer_ingress+0xc62>
 bff:	68 49 6e 4c 52       	push   $0x524c6e49
 c04:	55                   	push   %rbp
 c05:	00 70 65             	add    %dh,0x65(%rax)
    dst_addr.addr = pckt->flow.dst;
 c08:	72 5f                	jb     c69 <balancer_ingress+0xc69>
 c0a:	76 69                	jbe    c75 <balancer_ingress+0xc75>
 c0c:	70 5f                	jo     c6d <balancer_ingress+0xc6d>
  __u32* decap_dst_flags = bpf_map_lookup_elem(&decap_dst, &dst_addr);
 c0e:	73 74                	jae    c84 <balancer_ingress+0xc84>
 c10:	61                   	(bad)
 c11:	74 73                	je     c86 <balancer_ingress+0xc86>
 c13:	00 63 68             	add    %ah,0x68(%rbx)
 c16:	65 63 6b 5f          	movsxd %gs:0x5f(%rbx),%ebp
 c1a:	75 64                	jne    c80 <balancer_ingress+0xc80>
 c1c:	70 5f                	jo     c7d <balancer_ingress+0xc7d>
 c1e:	66 6c                	data16 insb (%dx),%es:(%rdi)
 c20:	6f                   	outsl  %ds:(%rsi),(%dx)
 c21:	77 5f                	ja     c82 <balancer_ingress+0xc82>
 c23:	6d                   	insl   (%dx),%es:(%rdi)
 c24:	69 67 72 61 74 69 6f 	imul   $0x6f697461,0x72(%rdi),%esp
  if (decap_dst_flags) {
 c2b:	6e                   	outsb  %ds:(%rsi),(%dx)
 c2c:	00 64 6f 77          	add    %ah,0x77(%rdi,%rbp,2)
 c30:	6e                   	outsb  %ds:(%rsi),(%dx)
 c31:	5f                   	pop    %rdi
 c32:	72 65                	jb     c99 <balancer_ingress+0xc99>
 c34:	61                   	(bad)
 c35:	6c                   	insb   (%dx),%es:(%rdi)
 c36:	00 69 73             	add    %ch,0x73(%rcx)
    data_stats = bpf_map_lookup_elem(&stats, &stats_key);
 c39:	5f                   	pop    %rdi
 c3a:	75 6e                	jne    caa <balancer_ingress+0xcaa>
 c3c:	64 65 72 5f          	fs gs jb c9f <balancer_ingress+0xc9f>
 c40:	66 6c                	data16 insb (%dx),%es:(%rdi)
 c42:	6f                   	outsl  %ds:(%rsi),(%dx)
 c43:	6f                   	outsl  %ds:(%rsi),(%dx)
 c44:	64 00 63 6f          	add    %ah,%fs:0x6f(%rbx)
    if (!data_stats) {
 c48:	6e                   	outsb  %ds:(%rsi),(%dx)
 c49:	6e                   	outsb  %ds:(%rsi),(%dx)
 c4a:	5f                   	pop    %rdi
 c4b:	72 61                	jb     cae <balancer_ingress+0xcae>
 c4d:	74 65                	je     cb4 <balancer_ingress+0xcb4>
 c4f:	5f                   	pop    %rdi
 c50:	6b 65 79 00          	imul   $0x0,0x79(%rbp),%esp
    data_stats->v1 += 1;
 c54:	63 6f 6e             	movsxd 0x6e(%rdi),%ebp
    if ((*data + offset) > *data_end) {
 c57:	6e                   	outsb  %ds:(%rsi),(%dx)
 c58:	5f                   	pop    %rdi
 c59:	72 61                	jb     cbc <balancer_ingress+0xcbc>
 c5b:	74 65                	je     cc2 <balancer_ingress+0xcc2>
 c5d:	5f                   	pop    %rdi
 c5e:	73 74                	jae    cd4 <balancer_ingress+0xcd4>
 c60:	61                   	(bad)
 c61:	74 73                	je     cd6 <balancer_ingress+0xcd6>
 c63:	00 65 6e             	add    %ah,0x6e(%rbp)
 c66:	63 61 70             	movsxd 0x70(%rcx),%esp
    if ((data + offset + sizeof(struct ipv6hdr)) > data_end) {
 c69:	5f                   	pop    %rdi
 c6a:	76 34                	jbe    ca0 <balancer_ingress+0xca0>
 c6c:	00 69 70             	add    %ch,0x70(%rcx)
 c6f:	5f                   	pop    %rdi
 c70:	73 72                	jae    ce4 <balancer_ingress+0xce4>
 c72:	63 00                	movsxd (%rax),%eax
 c74:	63 72 65             	movsxd 0x65(%rdx),%esi
 c77:	61                   	(bad)
 c78:	74 65                	je     cdf <balancer_ingress+0xcdf>
 c7a:	5f                   	pop    %rdi
    if (!--ip6h->hop_limit) {
 c7b:	76 34                	jbe    cb1 <balancer_ingress+0xcb1>
 c7d:	5f                   	pop    %rdi
 c7e:	68 64 72 00 67       	push   $0x67007264
 c83:	65 74 5f             	gs je  ce5 <balancer_ingress+0xce5>
 c86:	70 61                	jo     ce9 <balancer_ingress+0xce9>
 c88:	63 6b 65             	movsxd 0x65(%rbx),%ebp
 c8b:	74 5f                	je     cec <balancer_ingress+0xcec>
 c8d:	64 73 74             	fs jae d04 <balancer_ingress+0xd04>
  memcpy(new_eth->h_source, old_eth->h_source, 6);
 c90:	00 6e 65             	add    %ch,0x65(%rsi)
 c93:	77 5f                	ja     cf4 <balancer_ingress+0xcf4>
 c95:	64 73 74             	fs jae d0c <balancer_ingress+0xd0c>
 c98:	5f                   	pop    %rdi
 c99:	6c                   	insb   (%dx),%es:(%rdi)
 c9a:	72 75                	jb     d11 <balancer_ingress+0xd11>
  memcpy(new_eth->h_dest, old_eth->h_dest, 6);
 c9c:	00 73 72             	add    %dh,0x72(%rbx)
 c9f:	63 5f 66             	movsxd 0x66(%rdi),%ebx
 ca2:	6f                   	outsl  %ds:(%rsi),(%dx)
 ca3:	75 6e                	jne    d13 <balancer_ingress+0xd13>
 ca5:	64 00 68 61          	add    %ch,%fs:0x61(%rax)
 ca9:	73 68                	jae    d13 <balancer_ingress+0xd13>
 cab:	5f                   	pop    %rdi
 cac:	31 36                	xor    %esi,(%rsi)
 cae:	62                   	(bad)
 caf:	79 74                	jns    d25 <balancer_ingress+0xd25>
 cb1:	65 73 00             	gs jae cb4 <balancer_ingress+0xcb4>
 cb4:	5f                   	pop    %rdi
 cb5:	5f                   	pop    %rdi
  if (XDP_ADJUST_HEAD_FUNC(xdp, (int)sizeof(struct ipv6hdr))) {
 cb6:	6a 68                	push   $0x68
 cb8:	61                   	(bad)
 cb9:	73 68                	jae    d23 <balancer_ingress+0xd23>
 cbb:	5f                   	pop    %rdi
 cbc:	6e                   	outsb  %ds:(%rsi),(%dx)
 cbd:	77 6f                	ja     d2e <balancer_ingress+0xd2e>
 cbf:	72 64                	jb     d25 <balancer_ingress+0xd25>
 cc1:	73 00                	jae    cc3 <balancer_ingress+0xcc3>
 cc3:	62                   	(bad)
 cc4:	00 69 6e             	add    %ch,0x6e(%rcx)
 cc7:	69 74 76 61 6c 00 6a 	imul   $0x686a006c,0x61(%rsi,%rsi,2),%esi
 cce:	68 
 ccf:	61                   	(bad)
 cd0:	73 68                	jae    d3a <balancer_ingress+0xd3a>
  struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
 cd2:	5f                   	pop    %rdi
 cd3:	32 77 6f             	xor    0x6f(%rdi),%dh
 cd6:	72 64                	jb     d3c <balancer_ingress+0xd3c>
 cd8:	73 00                	jae    cda <balancer_ingress+0xcda>
 cda:	67 65 74 5f          	addr32 gs je d3d <balancer_ingress+0xd3d>
 cde:	70 61                	jo     d41 <balancer_ingress+0xd41>
 ce0:	63 6b 65             	movsxd 0x65(%rbx),%ebp
  if (!data_stats) {
 ce3:	74 5f                	je     d44 <balancer_ingress+0xd44>
 ce5:	68 61 73 68 00       	push   $0x687361
 cea:	72 6f                	jb     d5b <balancer_ingress+0xd5b>
 cec:	6c                   	insb   (%dx),%es:(%rdi)
 ced:	33 32                	xor    (%rdx),%esi
 cef:	00 77 6f             	add    %dh,0x6f(%rdi)
  if (action >= 0) {
 cf2:	72 64                	jb     d58 <balancer_ingress+0xd58>
 cf4:	00 73 68             	add    %dh,0x68(%rbx)
 cf7:	69 66 74 00 69 6e 63 	imul   $0x636e6900,0x74(%rsi),%esp
  if (decap_dst_flags) {
 cfe:	72 65                	jb     d65 <balancer_ingress+0xd65>
  if (action >= 0) {
 d00:	6d                   	insl   (%dx),%es:(%rdi)
 d01:	65 6e                	outsb  %gs:(%rsi),(%dx)
 d03:	74 5f                	je     d64 <balancer_ingress+0xd64>
 d05:	63 68 5f             	movsxd 0x5f(%rax),%ebp
 d08:	64 72 6f             	fs jb  d7a <balancer_ingress+0xd7a>
 d0b:	70 5f                	jo     d6c <balancer_ingress+0xd6c>
 d0d:	6e                   	outsb  %ds:(%rsi),(%dx)
        bpf_map_lookup_elem(&stats, &xpop_stats_key);
 d0e:	6f                   	outsl  %ds:(%rsi),(%dx)
 d0f:	5f                   	pop    %rdi
 d10:	72 65                	jb     d77 <balancer_ingress+0xd77>
 d12:	61                   	(bad)
 d13:	6c                   	insb   (%dx),%es:(%rdi)
 d14:	00 63 68             	add    %ah,0x68(%rbx)
 d17:	5f                   	pop    %rdi
 d18:	64 72 6f             	fs jb  d8a <balancer_ingress+0xd8a>
 d1b:	70 5f                	jo     d7c <balancer_ingress+0xd7c>
 d1d:	73 74                	jae    d93 <balancer_ingress+0xd93>
    if (xpop_stats_data) {
 d1f:	61                   	(bad)
 d20:	74 73                	je     d95 <balancer_ingress+0xd95>
 d22:	5f                   	pop    %rdi
 d23:	6b 65 79 00          	imul   $0x0,0x79(%rbp),%esp
 d27:	63 68 5f             	movsxd 0x5f(%rax),%ebp
 d2a:	64 72 6f             	fs jb  d9c <balancer_ingress+0xd9c>
  udp = data + off;
 d2d:	70 5f                	jo     d8e <balancer_ingress+0xd8e>
 d2f:	73 74                	jae    da5 <balancer_ingress+0xda5>
  if (is_ipv6) {
 d31:	61                   	(bad)
  udp = data + off;
 d32:	74 73                	je     da7 <balancer_ingress+0xda7>
 d34:	00 69 6e             	add    %ch,0x6e(%rcx)
  if (udp + 1 > data_end) {
 d37:	63 72 65             	movsxd 0x65(%rdx),%esi
 d3a:	6d                   	insl   (%dx),%es:(%rdi)
 d3b:	65 6e                	outsb  %gs:(%rsi),(%dx)
 d3d:	74 5f                	je     d9e <balancer_ingress+0xd9e>
 d3f:	63 68 5f             	movsxd 0x5f(%rax),%ebp
 d42:	64 72 6f             	fs jb  db4 <balancer_ingress+0xdb4>
 d45:	70 5f                	jo     da6 <balancer_ingress+0xda6>
 d47:	72 65                	jb     dae <balancer_ingress+0xdae>
 d49:	61                   	(bad)
 d4a:	6c                   	insb   (%dx),%es:(%rdi)
 d4b:	5f                   	pop    %rdi
 d4c:	30 00                	xor    %al,(%rax)
 d4e:	65 6e                	outsb  %gs:(%rsi),(%dx)
 d50:	63 61 70             	movsxd 0x70(%rcx),%esp
 d53:	5f                   	pop    %rdi
 d54:	76 36                	jbe    d8c <balancer_ingress+0xd8c>
 d56:	00 63 72             	add    %ah,0x72(%rbx)
 d59:	65 61                	gs (bad)
 d5b:	74 65                	je     dc2 <balancer_ingress+0xdc2>
 d5d:	5f                   	pop    %rdi
 d5e:	65 6e                	outsb  %gs:(%rsi),(%dx)
 d60:	63 61 70             	movsxd 0x70(%rcx),%esp
 d63:	5f                   	pop    %rdi
 d64:	69 70 76 36 5f 73 72 	imul   $0x72735f36,0x76(%rax),%esi
 d6b:	63 00                	movsxd (%rax),%eax
 d6d:	63 72 65             	movsxd 0x65(%rdx),%esi
 d70:	61                   	(bad)
 d71:	74 65                	je     dd8 <balancer_ingress+0xdd8>
 d73:	5f                   	pop    %rdi
    vip.vip = pckt.flow.dst;
 d74:	76 36                	jbe    dac <balancer_ingress+0xdac>
 d76:	5f                   	pop    %rdi
 d77:	68 64 72 00 74       	push   $0x74007264
  vip.port = pckt.flow.port16[1];
 d7c:	63 00                	movsxd (%rax),%eax
 d7e:	69 6e 63 72 65 6d 65 	imul   $0x656d6572,0x63(%rsi),%ebp
 d85:	6e                   	outsb  %ds:(%rsi),(%dx)
  vip.proto = pckt.flow.proto;
 d86:	74 5f                	je     de7 <balancer_ingress+0xde7>
 d88:	71 75                	jno    dff <balancer_ingress+0xdff>
 d8a:	69 63 5f 63 69 64 5f 	imul   $0x5f646963,0x5f(%rbx),%esp
  vip_info = bpf_map_lookup_elem(&vip_map, &vip);
 d91:	76 65                	jbe    df8 <balancer_ingress+0xdf8>
 d93:	72 73                	jb     e08 <balancer_ingress+0xe08>
 d95:	69 6f 6e 5f 73 74 61 	imul   $0x6174735f,0x6e(%rdi),%ebp
 d9c:	74 73                	je     e11 <balancer_ingress+0xe11>
 d9e:	00 75 70             	add    %dh,0x70(%rbp)
 da1:	64 61                	fs (bad)
 da3:	74 65                	je     e0a <balancer_ingress+0xe0a>
 da5:	5f                   	pop    %rdi
 da6:	76 69                	jbe    e11 <balancer_ingress+0xe11>
 da8:	70 5f                	jo     e09 <balancer_ingress+0xe09>
  if (!vip_info) {
 daa:	6c                   	insb   (%dx),%es:(%rdi)
 dab:	72 75                	jb     e22 <balancer_ingress+0xe22>
 dad:	5f                   	pop    %rdi
 dae:	6d                   	insl   (%dx),%es:(%rdi)
 daf:	69 73 73 5f 73 74 61 	imul   $0x6174735f,0x73(%rbx),%esi
  if (data_end - data > MAX_PCKT_SIZE) {
 db6:	74 73                	je     e2b <balancer_ingress+0xe2b>
 db8:	00 6c 72 75          	add    %ch,0x75(%rdx,%rsi,2)
 dbc:	5f                   	pop    %rdi
 dbd:	6d                   	insl   (%dx),%es:(%rdi)
 dbe:	69 73 73 5f 73 74 61 	imul   $0x6174735f,0x73(%rbx),%esi
 dc5:	74 5f                	je     e26 <balancer_ingress+0xe26>
 dc7:	76 69                	jbe    e32 <balancer_ingress+0xe32>
 dc9:	70 00                	jo     dcb <balancer_ingress+0xdcb>
 dcb:	76 69                	jbe    e36 <balancer_ingress+0xe36>
 dcd:	70 5f                	jo     e2e <balancer_ingress+0xe2e>
  data_stats = bpf_map_lookup_elem(&stats, &stats_key);
 dcf:	6d                   	insl   (%dx),%es:(%rdi)
 dd0:	69 73 73 5f 73 74 61 	imul   $0x6174735f,0x73(%rbx),%esi
 dd7:	74 73                	je     e4c <balancer_ingress+0xe4c>
 dd9:	5f                   	pop    %rdi
 dda:	6b 65 79 00          	imul   $0x0,0x79(%rbp),%esp
 dde:	61                   	(bad)
 ddf:	64 64 72 65          	fs fs jb e48 <balancer_ingress+0xe48>
  if (!data_stats) {
 de3:	73 73                	jae    e58 <balancer_ingress+0xe58>
 de5:	5f                   	pop    %rdi
 de6:	6d                   	insl   (%dx),%es:(%rdi)
 de7:	61                   	(bad)
 de8:	74 63                	je     e4d <balancer_ingress+0xe4d>
  data_stats->v1 += 1;
 dea:	68 00 70 6f 72       	push   $0x726f7000
  if ((vip_info->flags & F_HASH_NO_SRC_PORT)) {
 def:	74 5f                	je     e50 <balancer_ingress+0xe50>
 df1:	6d                   	insl   (%dx),%es:(%rdi)
 df2:	61                   	(bad)
    pckt.flow.port16[0] = 0;
 df3:	74 63                	je     e58 <balancer_ingress+0xe58>
 df5:	68 00 70 72 6f       	push   $0x6f727000
  vip_num = vip_info->vip_num;
 dfa:	74 6f                	je     e6b <balancer_ingress+0xe6b>
 dfc:	5f                   	pop    %rdi
 dfd:	6d                   	insl   (%dx),%es:(%rdi)
 dfe:	61                   	(bad)
 dff:	74 63                	je     e64 <balancer_ingress+0xe64>
 e01:	68 00 76 69 70       	push   $0x70697600
 e06:	5f                   	pop    %rdi
 e07:	6d                   	insl   (%dx),%es:(%rdi)
 e08:	61                   	(bad)
 e09:	74 63                	je     e6e <balancer_ingress+0xe6e>
 e0b:	68 00 6c 72 75       	push   $0x75726c00
  __u32 cpu_num = bpf_get_smp_processor_id();
 e10:	5f                   	pop    %rdi
 e11:	6d                   	insl   (%dx),%es:(%rdi)
 e12:	69 73 73 5f 73 74 61 	imul   $0x6174735f,0x73(%rbx),%esi
  void* lru_map = bpf_map_lookup_elem(&lru_mapping, &cpu_num);
 e19:	74 00                	je     e1b <balancer_ingress+0xe1b>
 e1b:	63 68 65             	movsxd 0x65(%rax),%ebp
 e1e:	63 6b 5f             	movsxd 0x5f(%rbx),%ebp
 e21:	61                   	(bad)
 e22:	6e                   	outsb  %ds:(%rsi),(%dx)
    struct lb_stats* lru_stats = bpf_map_lookup_elem(&stats, &lru_stats_key);
 e23:	64 5f                	fs pop %rdi
 e25:	75 70                	jne    e97 <balancer_ingress+0xe97>
 e27:	64 61                	fs (bad)
 e29:	74 65                	je     e90 <balancer_ingress+0xe90>
 e2b:	5f                   	pop    %rdi
 e2c:	72 65                	jb     e93 <balancer_ingress+0xe93>
 e2e:	61                   	(bad)
 e2f:	6c                   	insb   (%dx),%es:(%rdi)
 e30:	5f                   	pop    %rdi
 e31:	69 6e 64 65 78 5f 69 	imul   $0x695f7865,0x64(%rsi),%ebp
    if (!lru_stats) {
 e38:	6e                   	outsb  %ds:(%rsi),(%dx)
 e39:	5f                   	pop    %rdi
 e3a:	6c                   	insb   (%dx),%es:(%rdi)
 e3b:	72 75                	jb     eb2 <balancer_ingress+0xeb2>
    lru_stats->v1 += 1;
 e3d:	00 6a 68             	add    %ch,0x68(%rdx)
 e40:	61                   	(bad)
 e41:	73 68                	jae    eab <balancer_ingress+0xeab>
 e43:	00 6c 65 6e          	add    %ch,0x6e(%rbp,%riz,2)
 e47:	67 74 68             	addr32 je eb2 <balancer_ingress+0xeb2>
 e4a:	00 44 57 5f          	add    %al,0x5f(%rdi,%rdx,2)
 e4e:	41 54                	push   %r12
 e50:	45 5f                	rex.RB pop %r15
 e52:	75 6e                	jne    ec2 <balancer_ingress+0xec2>
 e54:	73 69                	jae    ebf <balancer_ingress+0xebf>
  void* lru_map = bpf_map_lookup_elem(&lru_mapping, &cpu_num);
 e56:	67 6e                	outsb  %ds:(%esi),(%dx)
 e58:	65 64 5f             	gs fs pop %rdi
 e5b:	38 00                	cmp    %al,(%rax)
 e5d:	44 57                	rex.R push %rdi
 e5f:	5f                   	pop    %rdi
 e60:	41 54                	push   %r12
 e62:	45 5f                	rex.RB pop %r15
 e64:	75 6e                	jne    ed4 <balancer_ingress+0xed4>
 e66:	73 69                	jae    ed1 <balancer_ingress+0xed1>
 e68:	67 6e                	outsb  %ds:(%esi),(%dx)
 e6a:	65 64 5f             	gs fs pop %rdi
 e6d:	31 00                	xor    %eax,(%rax)
  if (!lru_map) {
 e6f:	44 57                	rex.R push %rdi
 e71:	5f                   	pop    %rdi
 e72:	41 54                	push   %r12
 e74:	45 5f                	rex.RB pop %r15
 e76:	75 6e                	jne    ee6 <balancer_ingress+0xee6>
 e78:	73 69                	jae    ee3 <balancer_ingress+0xee3>
 e7a:	67 6e                	outsb  %ds:(%esi),(%dx)
 e7c:	65 64 5f             	gs fs pop %rdi
  if ((vip_info->flags & F_QUIC_VIP)) {
 e7f:	36 34 00             	ss xor $0x0,%al
 e82:	44 57                	rex.R push %rdi
 e84:	5f                   	pop    %rdi
 e85:	41 54                	push   %r12
 e87:	45 5f                	rex.RB pop %r15
    bool is_icmp = (pckt.flags & F_ICMP);
 e89:	75 6e                	jne    ef9 <balancer_ingress+0xef9>
 e8b:	73 69                	jae    ef6 <balancer_ingress+0xef6>
    if (is_icmp) {
 e8d:	67 6e                	outsb  %ds:(%esi),(%dx)
 e8f:	65 64 5f             	gs fs pop %rdi
 e92:	33 32                	xor    (%rdx),%esi
 e94:	00 44 57 5f          	add    %al,0x5f(%rdi,%rdx,2)
 e98:	41 54                	push   %r12
 e9a:	45 5f                	rex.RB pop %r15
 e9c:	75 6e                	jne    f0c <balancer_ingress+0xf0c>
          bpf_map_lookup_elem(&quic_stats_map, &quic_packets_stats_key);
 e9e:	73 69                	jae    f09 <balancer_ingress+0xf09>
 ea0:	67 6e                	outsb  %ds:(%esi),(%dx)
 ea2:	65 64 5f             	gs fs pop %rdi
 ea5:	31 36                	xor    %esi,(%rsi)
 ea7:	00 62 61             	add    %ah,0x61(%rdx)
 eaa:	6c                   	insb   (%dx),%es:(%rdi)
 eab:	61                   	(bad)
 eac:	6e                   	outsb  %ds:(%rsi),(%dx)
      if (!quic_packets_stats) {
 ead:	63 65 72             	movsxd 0x72(%rbp),%esp
 eb0:	5f                   	pop    %rdi
 eb1:	69 6e 67 72 65 73 73 	imul   $0x73736572,0x67(%rsi),%ebp
  if ((data + off + sizeof(struct udphdr) + sizeof(__u8)) > data_end) {
 eb8:	00 63 74             	add    %ah,0x74(%rbx)
  bool is_icmp = (pckt->flags & F_ICMP);
 ebb:	78 00                	js     ebd <balancer_ingress+0xebd>
 ebd:	65 74 68             	gs je  f28 <balancer_ingress+0xf28>
  if ((data + off + sizeof(struct udphdr) + sizeof(__u8)) > data_end) {
 ec0:	5f                   	pop    %rdi
 ec1:	70 72                	jo     f35 <balancer_ingress+0xf35>
 ec3:	6f                   	outsl  %ds:(%rsi),(%dx)
 ec4:	74 6f                	je     f35 <balancer_ingress+0xf35>
	...

Disassembly of section .debug_addr:

0000000000000000 <.debug_addr>:
  void* data = (void*)(long)ctx->data;
   0:	44 06                	rex.R (bad)
   2:	00 00                	add    %al,(%rax)
   4:	05 00 08 00 e5       	add    $0xe5000800,%eax
   9:	23 00                	and    (%rax),%eax
   b:	00 00                	add    %al,(%rax)
   d:	00 00                	add    %al,(%rax)
   f:	00 00                	add    %al,(%rax)
  11:	90                   	nop
  12:	a3 06 81 88 ff ff 00 	movabs %eax,0x6ac800ffff888106
  19:	c8 6a 
  void* data_end = (void*)(long)ctx->data_end;
  1b:	01 81 88 ff ff 00    	add    %eax,0xffff88(%rcx)
  if (data + nh_off > data_end) {
  21:	94                   	xchg   %eax,%esp
  22:	a3 06 81 88 ff ff 00 	movabs %eax,0x6ad000ffff888106
  29:	d0 6a 
  2b:	01 81 88 ff ff 00    	add    %eax,0xffff88(%rcx)
  eth_proto = eth->h_proto;
  31:	d8 6a 01             	fsubrs 0x1(%rdx)
  34:	81 88 ff ff 00 00 16 	orl    $0x88814016,0xffff(%rax)
  3b:	40 81 88 
  if (eth_proto == BE_ETH_P_IP) {
  3e:	ff                   	(bad)
  3f:	ff 00                	incl   (%rax)
  41:	50                   	push   %rax
  42:	88 22                	mov    %ah,(%rdx)
  44:	00 c9                	add    %cl,%cl
  46:	ff                   	(bad)
  47:	ff 00                	incl   (%rax)
  49:	30 6d 08             	xor    %ch,0x8(%rbp)
  4c:	00 c9                	add    %cl,%cl
  4e:	ff                   	(bad)
  4f:	ff 00                	incl   (%rax)
  struct packet_description pckt = {};
  51:	30 43 08             	xor    %al,0x8(%rbx)
  54:	00 c9                	add    %cl,%cl
  56:	ff                   	(bad)
  57:	ff 00                	incl   (%rax)
  59:	b0 57                	mov    $0x57,%al
  5b:	08 00                	or     %al,(%rax)
  5d:	c9                   	leave
  5e:	ff                   	(bad)
  5f:	ff 00                	incl   (%rax)
  61:	98                   	cwtl
  62:	a3 06 81 88 ff ff 00 	movabs %eax,0x4f0000ffff888106
  69:	00 4f 
  6b:	93                   	xchg   %eax,%ebx
  6c:	81 88 ff ff 00 88 a3 	orl    $0x888106a3,-0x77ff0001(%rax)
  73:	06 81 88 
  76:	ff                   	(bad)
  77:	ff 00                	incl   (%rax)
  79:	8c a3 06 81 88 ff    	mov    %fs,-0x777efa(%rbx)
  7f:	ff 00                	incl   (%rax)
  81:	40 1f                	rex (bad)
  83:	53                   	push   %rbx
  84:	81 88 ff ff 00 d0 6e 	orl    $0xc900086e,-0x2fff0001(%rax)
  8b:	08 00 c9 
  struct vip_definition vip = {};
  8e:	ff                   	(bad)
  8f:	ff 00                	incl   (%rax)
  91:	fc                   	cld
  92:	df 07                	filds  (%rdi)
  94:	81 88 ff ff 00 00 1f 	orl    $0x8881531f,0xffff(%rax)
  9b:	53 81 88 
  9e:	ff                   	(bad)
  9f:	ff 00                	incl   (%rax)
    if (iph + 1 > data_end) {
  a1:	f0 6a 01             	lock push $0x1
  a4:	81 88 ff ff 00 00 00 	orl    $0x0,0xffff(%rax)
  ab:	00 00 00 
    if (iph->ihl != 5) {
  ae:	00 00                	add    %al,(%rax)
  b0:	0e                   	(bad)
  b1:	01 00                	add    %eax,(%rax)
  b3:	00 00                	add    %al,(%rax)
  b5:	00 00                	add    %al,(%rax)
  b7:	00 27                	add    %ah,(%rdi)
    pckt->tos = iph->tos;
  b9:	01 00                	add    %eax,(%rax)
  bb:	00 00                	add    %al,(%rax)
  bd:	00 00                	add    %al,(%rax)
  bf:	00 65 09             	add    %ah,0x9(%rbp)
    *protocol = iph->protocol;
  c2:	00 00                	add    %al,(%rax)
    pckt->flow.proto = *protocol;
  c4:	00 00                	add    %al,(%rax)
  c6:	00 00                	add    %al,(%rax)
    if (iph->frag_off & PCKT_FRAGMENTED) {
  c8:	65 04 00             	gs add $0x0,%al
  cb:	00 00                	add    %al,(%rax)
  cd:	00 00                	add    %al,(%rax)
  cf:	00 66 0b             	add    %ah,0xb(%rsi)
  d2:	00 00                	add    %al,(%rax)
  d4:	00 00                	add    %al,(%rax)
  d6:	00 00                	add    %al,(%rax)
  d8:	9d                   	popf
  d9:	04 00                	add    $0x0,%al
    if (*protocol == IPPROTO_ICMP) {
  db:	00 00                	add    %al,(%rax)
  dd:	00 00                	add    %al,(%rax)
  df:	00 a1 04 00 00 00    	add    %ah,0x4(%rcx)
  if (icmp_hdr + 1 > data_end) {
  e5:	00 00                	add    %al,(%rax)
  e7:	00 2c 0d 00 00 00 00 	add    %ch,0x0(,%rcx,1)
  ee:	00 00                	add    %al,(%rax)
  if (icmp_hdr->type == ICMP_ECHO) {
  f0:	30 0d 00 00 00 00    	xor    %cl,0x0(%rip)        # f6 <balancer_ingress+0xf6>
  f6:	00 00                	add    %al,(%rax)
  f8:	18 0a                	sbb    %cl,(%rdx)
  fa:	00 00                	add    %al,(%rax)
  fc:	00 00                	add    %al,(%rax)
  fe:	00 00                	add    %al,(%rax)
 100:	42 0a 00             	rex.X or (%rax),%al
 103:	00 00                	add    %al,(%rax)
 105:	00 00                	add    %al,(%rax)
 107:	00 63 0a             	add    %ah,0xa(%rbx)
 10a:	00 00                	add    %al,(%rax)
 10c:	00 00                	add    %al,(%rax)
  icmp_hdr->type = ICMP_ECHOREPLY;
 10e:	00 00                	add    %al,(%rax)
 110:	9d                   	popf
 111:	0a 00                	or     (%rax),%al
  icmp_hdr->checksum += 0x0008;
 113:	00 00                	add    %al,(%rax)
 115:	00 00                	add    %al,(%rax)
  iph->ttl = DEFAULT_TTL;
 117:	00 e0                	add    %ah,%al
 119:	0a 00                	or     (%rax),%al
  iph->daddr = iph->saddr;
 11b:	00 00                	add    %al,(%rax)
 11d:	00 00                	add    %al,(%rax)
  tmp_addr = iph->daddr;
 11f:	00 1c 0b             	add    %bl,(%rbx,%rcx,1)
  iph->daddr = iph->saddr;
 122:	00 00                	add    %al,(%rax)
  iph->saddr = tmp_addr;
 124:	00 00                	add    %al,(%rax)
 126:	00 00                	add    %al,(%rax)
 128:	f5                   	cmc
 129:	0b 00                	or     (%rax),%eax
 12b:	00 00                	add    %al,(%rax)
 12d:	00 00                	add    %al,(%rax)
 12f:	00 0e                	add    %cl,(%rsi)
 131:	0c 00                	or     $0x0,%al
 133:	00 00                	add    %al,(%rax)
 135:	00 00                	add    %al,(%rax)
 137:	00 38                	add    %bh,(%rax)
 139:	0c 00                	or     $0x0,%al
 13b:	00 00                	add    %al,(%rax)
 13d:	00 00                	add    %al,(%rax)
 13f:	00 55 0c             	add    %dl,0xc(%rbp)
 142:	00 00                	add    %al,(%rax)
 144:	00 00                	add    %al,(%rax)
 146:	00 00                	add    %al,(%rax)
 148:	67 0c 00             	addr32 or $0x0,%al
 14b:	00 00                	add    %al,(%rax)
 14d:	00 00                	add    %al,(%rax)
 14f:	00 8e 0c 00 00 00    	add    %cl,0xc(%rsi)
 155:	00 00                	add    %al,(%rax)
 157:	00 d2                	add    %dl,%dl
 159:	0c 00                	or     $0x0,%al
 15b:	00 00                	add    %al,(%rax)
 15d:	00 00                	add    %al,(%rax)
  struct packet_description pckt = {};
 15f:	00 0e                	add    %cl,(%rsi)
 161:	0d 00 00 00 00       	or     $0x0,%eax
 166:	00 00                	add    %al,(%rax)
 168:	8e 0d 00 00 00 00    	mov    0x0(%rip),%cs        # 16e <balancer_ingress+0x16e>
 16e:	00 00                	add    %al,(%rax)
 170:	fd                   	std
 171:	0e                   	(bad)
 172:	00 00                	add    %al,(%rax)
 174:	00 00                	add    %al,(%rax)
 176:	00 00                	add    %al,(%rax)
 178:	cf                   	iret
 179:	0d 00 00 00 00       	or     $0x0,%eax
 17e:	00 00                	add    %al,(%rax)
 180:	0c 0e                	or     $0xe,%al
 182:	00 00                	add    %al,(%rax)
 184:	00 00                	add    %al,(%rax)
 186:	00 00                	add    %al,(%rax)
 188:	23 0e                	and    (%rsi),%ecx
 18a:	00 00                	add    %al,(%rax)
 18c:	00 00                	add    %al,(%rax)
 18e:	00 00                	add    %al,(%rax)
 190:	b0 0f                	mov    $0xf,%al
 192:	00 00                	add    %al,(%rax)
 194:	00 00                	add    %al,(%rax)
  struct vip_definition vip = {};
 196:	00 00                	add    %al,(%rax)
 198:	6e                   	outsb  %ds:(%rsi),(%dx)
 199:	11 00                	adc    %eax,(%rax)
 19b:	00 00                	add    %al,(%rax)
 19d:	00 00                	add    %al,(%rax)
 19f:	00 9a 21 00 00 00    	add    %bl,0x21(%rdx)
 1a5:	00 00                	add    %al,(%rax)
 1a7:	00 be 21 00 00 00    	add    %bh,0x21(%rsi)
 1ad:	00 00                	add    %al,(%rax)
    if (ip6h + 1 > data_end) {
 1af:	00 f5                	add    %dh,%ch
 1b1:	22 00                	and    (%rax),%al
 1b3:	00 00                	add    %al,(%rax)
 1b5:	00 00                	add    %al,(%rax)
 1b7:	00 40 23             	add    %al,0x23(%rax)
 1ba:	00 00                	add    %al,(%rax)
    *protocol = ip6h->nexthdr;
 1bc:	00 00                	add    %al,(%rax)
 1be:	00 00                	add    %al,(%rax)
    pckt->flow.proto = *protocol;
 1c0:	ee                   	out    %al,(%dx)
 1c1:	0f 00 00             	sldt   (%rax)
    pckt->tos = (ip6h->priority << 4) & 0xF0;
 1c4:	00 00                	add    %al,(%rax)
 1c6:	00 00                	add    %al,(%rax)
 1c8:	14 10                	adc    $0x10,%al
 1ca:	00 00                	add    %al,(%rax)
 1cc:	00 00                	add    %al,(%rax)
    pckt->tos = pckt->tos | ((ip6h->flow_lbl[0] >> 4) & 0x0F);
 1ce:	00 00                	add    %al,(%rax)
 1d0:	25 12 00 00 00       	and    $0x12,%eax
 1d5:	00 00                	add    %al,(%rax)
 1d7:	00 44 12 00          	add    %al,0x0(%rdx,%rdx,1)
    if (*protocol == IPPROTO_FRAGMENT) {
 1db:	00 00                	add    %al,(%rax)
 1dd:	00 00                	add    %al,(%rax)
 1df:	00 59 12             	add    %bl,0x12(%rcx)
 1e2:	00 00                	add    %al,(%rax)
 1e4:	00 00                	add    %al,(%rax)
 1e6:	00 00                	add    %al,(%rax)
 1e8:	ab                   	stos   %eax,%es:(%rdi)
 1e9:	12 00                	adc    (%rax),%al
 1eb:	00 00                	add    %al,(%rax)
  if (icmp_hdr + 1 > data_end) {
 1ed:	00 00                	add    %al,(%rax)
 1ef:	00 c8                	add    %cl,%al
 1f1:	12 00                	adc    (%rax),%al
 1f3:	00 00                	add    %al,(%rax)
 1f5:	00 00                	add    %al,(%rax)
 1f7:	00 d7                	add    %dl,%bh
 1f9:	12 00                	adc    (%rax),%al
  if (icmp_hdr->icmp6_type == ICMPV6_ECHO_REQUEST) {
 1fb:	00 00                	add    %al,(%rax)
 1fd:	00 00                	add    %al,(%rax)
 1ff:	00 6f 14             	add    %ch,0x14(%rdi)
 202:	00 00                	add    %al,(%rax)
 204:	00 00                	add    %al,(%rax)
 206:	00 00                	add    %al,(%rax)
 208:	ac                   	lods   %ds:(%rsi),%al
 209:	14 00                	adc    $0x0,%al
 20b:	00 00                	add    %al,(%rax)
 20d:	00 00                	add    %al,(%rax)
 20f:	00 40 15             	add    %al,0x15(%rax)
 212:	00 00                	add    %al,(%rax)
 214:	00 00                	add    %al,(%rax)
 216:	00 00                	add    %al,(%rax)
 218:	4c 15 00 00 00 00    	rex.WR adc $0x0,%rax
 21e:	00 00                	add    %al,(%rax)
 220:	55                   	push   %rbp
 221:	15 00 00 00 00       	adc    $0x0,%eax
 226:	00 00                	add    %al,(%rax)
 228:	5e                   	pop    %rsi
 229:	15 00 00 00 00       	adc    $0x0,%eax
 22e:	00 00                	add    %al,(%rax)
 230:	67 15 00 00 00 00    	addr32 adc $0x0,%eax
 236:	00 00                	add    %al,(%rax)
 238:	70 15                	jo     24f <balancer_ingress+0x24f>
 23a:	00 00                	add    %al,(%rax)
 23c:	00 00                	add    %al,(%rax)
 23e:	00 00                	add    %al,(%rax)
 240:	79 15                	jns    257 <balancer_ingress+0x257>
 242:	00 00                	add    %al,(%rax)
 244:	00 00                	add    %al,(%rax)
 246:	00 00                	add    %al,(%rax)
 248:	80 15 00 00 00 00 00 	adcb   $0x0,0x0(%rip)        # 24f <balancer_ingress+0x24f>
 24f:	00 fb                	add    %bh,%bl
 251:	15 00 00 00 00       	adc    $0x0,%eax
 256:	00 00                	add    %al,(%rax)
 258:	d4                   	(bad)
 259:	15 00 00 00 00       	adc    $0x0,%eax
 25e:	00 00                	add    %al,(%rax)
 260:	dc 15 00 00 00 00    	fcoml  0x0(%rip)        # 266 <balancer_ingress+0x266>
 266:	00 00                	add    %al,(%rax)
 268:	a3 17 00 00 00 00 00 	movabs %eax,0xce00000000000017
 26f:	00 ce 
 271:	17                   	(bad)
 272:	00 00                	add    %al,(%rax)
 274:	00 00                	add    %al,(%rax)
 276:	00 00                	add    %al,(%rax)
 278:	0b 13                	or     (%rbx),%edx
 27a:	00 00                	add    %al,(%rax)
 27c:	00 00                	add    %al,(%rax)
 27e:	00 00                	add    %al,(%rax)
 280:	46 13 00             	rex.RX adc (%rax),%r8d
 283:	00 00                	add    %al,(%rax)
 285:	00 00                	add    %al,(%rax)
 287:	00 94 13 00 00 00 00 	add    %dl,0x0(%rbx,%rdx,1)
      memcpy(pckt->flow.srcv6, ip6h->saddr.s6_addr32, 16);
 28e:	00 00                	add    %al,(%rax)
 290:	26 14 00             	es adc $0x0,%al
 293:	00 00                	add    %al,(%rax)
 295:	00 00                	add    %al,(%rax)
 297:	00 4b 14             	add    %cl,0x14(%rbx)
      memcpy(pckt->flow.dstv6, ip6h->daddr.s6_addr32, 16);
 29a:	00 00                	add    %al,(%rax)
 29c:	00 00                	add    %al,(%rax)
 29e:	00 00                	add    %al,(%rax)
 2a0:	46 16                	rex.RX (bad)
 2a2:	00 00                	add    %al,(%rax)
 2a4:	00 00                	add    %al,(%rax)
 2a6:	00 00                	add    %al,(%rax)
 2a8:	ba 16 00 00 00       	mov    $0x16,%edx
  if (protocol == IPPROTO_ICMPV6) {
 2ad:	00 00                	add    %al,(%rax)
 2af:	00 c2                	add    %al,%dl
 2b1:	16                   	(bad)
 2b2:	00 00                	add    %al,(%rax)
  if (icmp_hdr + 1 > data_end) {
 2b4:	00 00                	add    %al,(%rax)
 2b6:	00 00                	add    %al,(%rax)
 2b8:	d1 04 00             	roll   (%rax,%rax,1)
 2bb:	00 00                	add    %al,(%rax)
 2bd:	00 00                	add    %al,(%rax)
 2bf:	00 db                	add    %bl,%bl
  if (icmp_hdr->type == ICMP_ECHO) {
 2c1:	02 00                	add    (%rax),%al
 2c3:	00 00                	add    %al,(%rax)
 2c5:	00 00                	add    %al,(%rax)
 2c7:	00 06                	add    %al,(%rsi)
 2c9:	03 00                	add    (%rax),%eax
 2cb:	00 00                	add    %al,(%rax)
 2cd:	00 00                	add    %al,(%rax)
 2cf:	00 fc                	add    %bh,%ah
 2d1:	07                   	(bad)
 2d2:	00 00                	add    %al,(%rax)
 2d4:	00 00                	add    %al,(%rax)
 2d6:	00 00                	add    %al,(%rax)
 2d8:	fc                   	cld
 2d9:	03 00                	add    (%rax),%eax
  if ((data + sizeof(struct ethhdr) + sizeof(struct iphdr) +
 2db:	00 00                	add    %al,(%rax)
 2dd:	00 00                	add    %al,(%rax)
 2df:	00 00                	add    %al,(%rax)
 2e1:	04 00                	add    $0x0,%al
 2e3:	00 00                	add    %al,(%rax)
       sizeof(struct icmphdr)) > data_end) {
 2e5:	00 00                	add    %al,(%rax)
  if ((data + sizeof(struct ethhdr) + sizeof(struct iphdr) +
 2e7:	00 b6 07 00 00 00    	add    %dh,0x7(%rsi)
  icmp_hdr->type = ICMP_ECHOREPLY;
 2ed:	00 00                	add    %al,(%rax)
 2ef:	00 ba 07 00 00 00    	add    %bh,0x7(%rdx)
  icmp_hdr->checksum += 0x0008;
 2f5:	00 00                	add    %al,(%rax)
  iph->ttl = DEFAULT_TTL;
 2f7:	00 5e 05             	add    %bl,0x5(%rsi)
  iph->daddr = iph->saddr;
 2fa:	00 00                	add    %al,(%rax)
 2fc:	00 00                	add    %al,(%rax)
  tmp_addr = iph->daddr;
 2fe:	00 00                	add    %al,(%rax)
  iph->daddr = iph->saddr;
 300:	72 05                	jb     307 <balancer_ingress+0x307>
 302:	00 00                	add    %al,(%rax)
  iph->saddr = tmp_addr;
 304:	00 00                	add    %al,(%rax)
 306:	00 00                	add    %al,(%rax)
 308:	9c                   	pushf
 309:	05 00 00 00 00       	add    $0x0,%eax
 30e:	00 00                	add    %al,(%rax)
 310:	b9 05 00 00 00       	mov    $0x5,%ecx
 315:	00 00                	add    %al,(%rax)
 317:	00 e0                	add    %ah,%al
 319:	05 00 00 00 00       	add    $0x0,%eax
 31e:	00 00                	add    %al,(%rax)
 320:	24 06                	and    $0x6,%al
 322:	00 00                	add    %al,(%rax)
 324:	00 00                	add    %al,(%rax)
 326:	00 00                	add    %al,(%rax)
 328:	60                   	(bad)
 329:	06                   	(bad)
 32a:	00 00                	add    %al,(%rax)
 32c:	00 00                	add    %al,(%rax)
 32e:	00 00                	add    %al,(%rax)
 330:	83 06 00             	addl   $0x0,(%rsi)
 333:	00 00                	add    %al,(%rax)
 335:	00 00                	add    %al,(%rax)
 337:	00 97 06 00 00 00    	add    %dl,0x6(%rdi)
 33d:	00 00                	add    %al,(%rax)
 33f:	00 c1                	add    %al,%cl
 341:	06                   	(bad)
 342:	00 00                	add    %al,(%rax)
 344:	00 00                	add    %al,(%rax)
 346:	00 00                	add    %al,(%rax)
 348:	de 06                	fiadds (%rsi)
 34a:	00 00                	add    %al,(%rax)
 34c:	00 00                	add    %al,(%rax)
 34e:	00 00                	add    %al,(%rax)
 350:	18 07                	sbb    %al,(%rdi)
 352:	00 00                	add    %al,(%rax)
 354:	00 00                	add    %al,(%rax)
 356:	00 00                	add    %al,(%rax)
 358:	5c                   	pop    %rsp
 359:	07                   	(bad)
 35a:	00 00                	add    %al,(%rax)
 35c:	00 00                	add    %al,(%rax)
 35e:	00 00                	add    %al,(%rax)
 360:	98                   	cwtl
 361:	07                   	(bad)
 362:	00 00                	add    %al,(%rax)
 364:	00 00                	add    %al,(%rax)
 366:	00 00                	add    %al,(%rax)
 368:	97                   	xchg   %eax,%edi
 369:	08 00                	or     %al,(%rax)
 36b:	00 00                	add    %al,(%rax)
 36d:	00 00                	add    %al,(%rax)
 36f:	00 cc                	add    %cl,%ah
 371:	09 00                	or     %eax,(%rax)
 373:	00 00                	add    %al,(%rax)
 375:	00 00                	add    %al,(%rax)
 377:	00 d8                	add    %bl,%al
 379:	08 00                	or     %al,(%rax)
 37b:	00 00                	add    %al,(%rax)
 37d:	00 00                	add    %al,(%rax)
 37f:	00 0c 09             	add    %cl,(%rcx,%rcx,1)
 382:	00 00                	add    %al,(%rax)
 384:	00 00                	add    %al,(%rax)
 386:	00 00                	add    %al,(%rax)
 388:	23 09                	and    (%rcx),%ecx
 38a:	00 00                	add    %al,(%rax)
 38c:	00 00                	add    %al,(%rax)
 38e:	00 00                	add    %al,(%rax)
 390:	9d                   	popf
 391:	0e                   	(bad)
 392:	00 00                	add    %al,(%rax)
 394:	00 00                	add    %al,(%rax)
 396:	00 00                	add    %al,(%rax)
 398:	b9 10 00 00 00       	mov    $0x10,%ecx
 39d:	00 00                	add    %al,(%rax)
 39f:	00 60 18             	add    %ah,0x18(%rax)
 3a2:	00 00                	add    %al,(%rax)
 3a4:	00 00                	add    %al,(%rax)
 3a6:	00 00                	add    %al,(%rax)
 3a8:	84 18                	test   %bl,(%rax)
 3aa:	00 00                	add    %al,(%rax)
 3ac:	00 00                	add    %al,(%rax)
 3ae:	00 00                	add    %al,(%rax)
 3b0:	37                   	(bad)
 3b1:	21 00                	and    %eax,(%rax)
 3b3:	00 00                	add    %al,(%rax)
 3b5:	00 00                	add    %al,(%rax)
 3b7:	00 3c 22             	add    %bh,(%rdx,%riz,1)
 3ba:	00 00                	add    %al,(%rax)
 3bc:	00 00                	add    %al,(%rax)
 3be:	00 00                	add    %al,(%rax)
 3c0:	3a 0f                	cmp    (%rdi),%cl
 3c2:	00 00                	add    %al,(%rax)
 3c4:	00 00                	add    %al,(%rax)
 3c6:	00 00                	add    %al,(%rax)
 3c8:	59                   	pop    %rcx
 3c9:	0f 00 00             	sldt   (%rax)
 3cc:	00 00                	add    %al,(%rax)
 3ce:	00 00                	add    %al,(%rax)
 3d0:	21 19                	and    %ebx,(%rcx)
 3d2:	00 00                	add    %al,(%rax)
 3d4:	00 00                	add    %al,(%rax)
 3d6:	00 00                	add    %al,(%rax)
 3d8:	6f                   	outsl  %ds:(%rsi),(%dx)
 3d9:	19 00                	sbb    %eax,(%rax)
 3db:	00 00                	add    %al,(%rax)
 3dd:	00 00                	add    %al,(%rax)
 3df:	00 8f 19 00 00 00    	add    %cl,0x19(%rdi)
  if (protocol == IPPROTO_IPIP) {
 3e5:	00 00                	add    %al,(%rax)
 3e7:	00 a4 19 00 00 00 00 	add    %ah,0x0(%rcx,%rbx,1)
 3ee:	00 00                	add    %al,(%rax)
 3f0:	05 1a 00 00 00       	add    $0x1a,%eax
 3f5:	00 00                	add    %al,(%rax)
 3f7:	00 28                	add    %ch,(%rax)
 3f9:	1a 00                	sbb    (%rax),%al
 3fb:	00 00                	add    %al,(%rax)
  tcp = data + off;
 3fd:	00 00                	add    %al,(%rax)
 3ff:	00 3d 1a 00 00 00    	add    %bh,0x1a(%rip)        # 41f <balancer_ingress+0x41f>
 405:	00 00                	add    %al,(%rax)
  if (tcp + 1 > data_end) {
 407:	00 4a 1c             	add    %cl,0x1c(%rdx)
 40a:	00 00                	add    %al,(%rax)
 40c:	00 00                	add    %al,(%rax)
 40e:	00 00                	add    %al,(%rax)
 410:	8b 1c 00             	mov    (%rax,%rax,1),%ebx
  if (tcp->syn) {
 413:	00 00                	add    %al,(%rax)
 415:	00 00                	add    %al,(%rax)
 417:	00 4c 1d 00          	add    %cl,0x0(%rbp,%rbx,1)
 41b:	00 00                	add    %al,(%rax)
    pckt->flags |= F_SYN_SET;
 41d:	00 00                	add    %al,(%rax)
 41f:	00 63 1d             	add    %ah,0x1d(%rbx)
 422:	00 00                	add    %al,(%rax)
 424:	00 00                	add    %al,(%rax)
      pckt->flow.src = iph->saddr;
 426:	00 00                	add    %al,(%rax)
 428:	6c                   	insb   (%dx),%es:(%rdi)
 429:	1d 00 00 00 00       	sbb    $0x0,%eax
      pckt->flow.dst = iph->daddr;
 42e:	00 00                	add    %al,(%rax)
 430:	79 1d                	jns    44f <balancer_ingress+0x44f>
 432:	00 00                	add    %al,(%rax)
  if (protocol == IPPROTO_ICMPV6) {
 434:	00 00                	add    %al,(%rax)
 436:	00 00                	add    %al,(%rax)
  if (icmp_hdr + 1 > data_end) {
 438:	84 1d 00 00 00 00    	test   %bl,0x0(%rip)        # 43e <balancer_ingress+0x43e>
 43e:	00 00                	add    %al,(%rax)
 440:	8f                   	(bad)
 441:	1d 00 00 00 00       	sbb    $0x0,%eax
  if (icmp_hdr->icmp6_type == ICMPV6_ECHO_REQUEST) {
 446:	00 00                	add    %al,(%rax)
 448:	be 1d 00 00 00       	mov    $0x1d,%esi
 44d:	00 00                	add    %al,(%rax)
 44f:	00 c7                	add    %al,%bh
 451:	1d 00 00 00 00       	sbb    $0x0,%eax
 456:	00 00                	add    %al,(%rax)
 458:	d0 1d 00 00 00 00    	rcrb   0x0(%rip)        # 45e <balancer_ingress+0x45e>
 45e:	00 00                	add    %al,(%rax)
 460:	d9 1d 00 00 00 00    	fstps  0x0(%rip)        # 466 <balancer_ingress+0x466>
  if ((data + sizeof(struct ethhdr) + sizeof(struct ipv6hdr) +
 466:	00 00                	add    %al,(%rax)
 468:	e2 1d                	loop   487 <balancer_ingress+0x487>
 46a:	00 00                	add    %al,(%rax)
 46c:	00 00                	add    %al,(%rax)
       sizeof(struct icmp6hdr)) > data_end) {
 46e:	00 00                	add    %al,(%rax)
 470:	eb 1d                	jmp    48f <balancer_ingress+0x48f>
  if ((data + sizeof(struct ethhdr) + sizeof(struct ipv6hdr) +
 472:	00 00                	add    %al,(%rax)
 474:	00 00                	add    %al,(%rax)
 476:	00 00                	add    %al,(%rax)
 478:	f2 1d 00 00 00 00    	repnz sbb $0x0,%eax
 47e:	00 00                	add    %al,(%rax)
 480:	f5                   	cmc
 481:	1d 00 00 00 00       	sbb    $0x0,%eax
 486:	00 00                	add    %al,(%rax)
 488:	0e                   	(bad)
 489:	1e                   	(bad)
 48a:	00 00                	add    %al,(%rax)
 48c:	00 00                	add    %al,(%rax)
 48e:	00 00                	add    %al,(%rax)
 490:	17                   	(bad)
 491:	1e                   	(bad)
 492:	00 00                	add    %al,(%rax)
 494:	00 00                	add    %al,(%rax)
 496:	00 00                	add    %al,(%rax)
 498:	20 1e                	and    %bl,(%rsi)
 49a:	00 00                	add    %al,(%rax)
 49c:	00 00                	add    %al,(%rax)
  tcp = data + off;
 49e:	00 00                	add    %al,(%rax)
 4a0:	29 1e                	sub    %ebx,(%rsi)
  if (is_ipv6) {
 4a2:	00 00                	add    %al,(%rax)
  tcp = data + off;
 4a4:	00 00                	add    %al,(%rax)
 4a6:	00 00                	add    %al,(%rax)
  if (tcp + 1 > data_end) {
 4a8:	32 1e                	xor    (%rsi),%bl
 4aa:	00 00                	add    %al,(%rax)
 4ac:	00 00                	add    %al,(%rax)
 4ae:	00 00                	add    %al,(%rax)
 4b0:	3b 1e                	cmp    (%rsi),%ebx
 4b2:	00 00                	add    %al,(%rax)
  if (tcp->syn) {
 4b4:	00 00                	add    %al,(%rax)
 4b6:	00 00                	add    %al,(%rax)
 4b8:	42 1e                	rex.X (bad)
 4ba:	00 00                	add    %al,(%rax)
 4bc:	00 00                	add    %al,(%rax)
    pckt->flags |= F_SYN_SET;
 4be:	00 00                	add    %al,(%rax)
 4c0:	ae                   	scas   %es:(%rdi),%al
 4c1:	1e                   	(bad)
 4c2:	00 00                	add    %al,(%rax)
 4c4:	00 00                	add    %al,(%rax)
 4c6:	00 00                	add    %al,(%rax)
 4c8:	8e 1e                	mov    (%rsi),%ds
 4ca:	00 00                	add    %al,(%rax)
 4cc:	00 00                	add    %al,(%rax)
 4ce:	00 00                	add    %al,(%rax)
 4d0:	96                   	xchg   %eax,%esi
        bpf_map_lookup_elem(&stats, &stats_key);
 4d1:	1e                   	(bad)
 4d2:	00 00                	add    %al,(%rax)
 4d4:	00 00                	add    %al,(%rax)
 4d6:	00 00                	add    %al,(%rax)
 4d8:	00 20                	add    %ah,(%rax)
 4da:	00 00                	add    %al,(%rax)
 4dc:	00 00                	add    %al,(%rax)
 4de:	00 00                	add    %al,(%rax)
 4e0:	56                   	push   %rsi
    if (!icmp_ptb_v6_stats) {
 4e1:	20 00                	and    %al,(%rax)
 4e3:	00 00                	add    %al,(%rax)
 4e5:	00 00                	add    %al,(%rax)
 4e7:	00 a5 1a 00 00 00    	add    %ah,0x1a(%rbp)
    icmp_ptb_v6_stats->v1 += 1;
 4ed:	00 00                	add    %al,(%rax)
    __u32 mtu = bpf_ntohl(icmp_hdr->icmp6_mtu);
 4ef:	00 f6                	add    %dh,%dh
 4f1:	1a 00                	sbb    (%rax),%al
    if (mtu < MAX_MTU_IN_PTB_TO_DROP) {
 4f3:	00 00                	add    %al,(%rax)
 4f5:	00 00                	add    %al,(%rax)
 4f7:	00 86 1b 00 00 00    	add    %al,0x1b(%rsi)
      icmp_ptb_v6_stats->v2 += 1;
 4fd:	00 00                	add    %al,(%rax)
 4ff:	00 ae 1b 00 00 00    	add    %ch,0x1b(%rsi)
  if (ip6h + 1 > data_end) {
 505:	00 00                	add    %al,(%rax)
 507:	00 0c 1f             	add    %cl,(%rdi,%rbx,1)
 50a:	00 00                	add    %al,(%rax)
 50c:	00 00                	add    %al,(%rax)
  pckt->flow.proto = ip6h->nexthdr;
 50e:	00 00                	add    %al,(%rax)
 510:	6f                   	outsl  %ds:(%rsi),(%dx)
 511:	1f                   	(bad)
 512:	00 00                	add    %al,(%rax)
  pckt->flags |= F_ICMP;
 514:	00 00                	add    %al,(%rax)
 516:	00 00                	add    %al,(%rax)
 518:	7b 1f                	jnp    539 <balancer_ingress+0x539>
  memcpy(pckt->flow.srcv6, ip6h->daddr.s6_addr32, 16);
 51a:	00 00                	add    %al,(%rax)
 51c:	00 00                	add    %al,(%rax)
 51e:	00 00                	add    %al,(%rax)
 520:	8a 05 00 00 00 00    	mov    0x0(%rip),%al        # 526 <balancer_ingress+0x526>
 526:	00 00                	add    %al,(%rax)
 528:	12 06                	adc    (%rsi),%al
 52a:	00 00                	add    %al,(%rax)
  memcpy(pckt->flow.dstv6, ip6h->saddr.s6_addr32, 16);
 52c:	00 00                	add    %al,(%rax)
 52e:	00 00                	add    %al,(%rax)
 530:	af                   	scas   %es:(%rdi),%eax
 531:	06                   	(bad)
 532:	00 00                	add    %al,(%rax)
 534:	00 00                	add    %al,(%rax)
 536:	00 00                	add    %al,(%rax)
 538:	4a 07                	rex.WX (bad)
 53a:	00 00                	add    %al,(%rax)
 53c:	00 00                	add    %al,(%rax)
 53e:	00 00                	add    %al,(%rax)
 540:	b0 08                	mov    $0x8,%al
 542:	00 00                	add    %al,(%rax)
 544:	00 00                	add    %al,(%rax)
 546:	00 00                	add    %al,(%rax)
 548:	de 09                	fimuls (%rcx)
 54a:	00 00                	add    %al,(%rax)
 54c:	00 00                	add    %al,(%rax)
 54e:	00 00                	add    %al,(%rax)
 550:	30 0a                	xor    %cl,(%rdx)
 552:	00 00                	add    %al,(%rax)
 554:	00 00                	add    %al,(%rax)
 556:	00 00                	add    %al,(%rax)
 558:	ce                   	(bad)
 559:	0a 00                	or     (%rax),%al
 55b:	00 00                	add    %al,(%rax)
 55d:	00 00                	add    %al,(%rax)
    memcpy(dst_addr.addrv6, pckt->flow.dstv6, 16);
 55f:	00 55 0b             	add    %dl,0xb(%rbp)
 562:	00 00                	add    %al,(%rax)
 564:	00 00                	add    %al,(%rax)
 566:	00 00                	add    %al,(%rax)
 568:	26 0c 00             	es or  $0x0,%al
 56b:	00 00                	add    %al,(%rax)
 56d:	00 00                	add    %al,(%rax)
 56f:	00 c0                	add    %al,%al
 571:	0c 00                	or     $0x0,%al
  __u32* decap_dst_flags = bpf_map_lookup_elem(&decap_dst, &dst_addr);
 573:	00 00                	add    %al,(%rax)
 575:	00 00                	add    %al,(%rax)
 577:	00 a7 0d 00 00 00    	add    %ah,0xd(%rdi)
 57d:	00 00                	add    %al,(%rax)
 57f:	00 0f                	add    %cl,(%rdi)
 581:	0f 00 00             	sldt   (%rax)
 584:	00 00                	add    %al,(%rax)
 586:	00 00                	add    %al,(%rax)
 588:	54                   	push   %rsp
 589:	10 00                	adc    %al,(%rax)
 58b:	00 00                	add    %al,(%rax)
  if (decap_dst_flags) {
 58d:	00 00                	add    %al,(%rax)
 58f:	00 70 10             	add    %dh,0x10(%rax)
 592:	00 00                	add    %al,(%rax)
 594:	00 00                	add    %al,(%rax)
 596:	00 00                	add    %al,(%rax)
 598:	7c 12                	jl     5ac <balancer_ingress+0x5ac>
 59a:	00 00                	add    %al,(%rax)
    data_stats = bpf_map_lookup_elem(&stats, &stats_key);
 59c:	00 00                	add    %al,(%rax)
 59e:	00 00                	add    %al,(%rax)
 5a0:	c3                   	ret
 5a1:	12 00                	adc    (%rax),%al
 5a3:	00 00                	add    %al,(%rax)
 5a5:	00 00                	add    %al,(%rax)
 5a7:	00 d2                	add    %dl,%dl
 5a9:	12 00                	adc    (%rax),%al
 5ab:	00 00                	add    %al,(%rax)
    if (!data_stats) {
 5ad:	00 00                	add    %al,(%rax)
 5af:	00 ab 13 00 00 00    	add    %ch,0x13(%rbx)
    data_stats->v1 += 1;
 5b5:	00 00                	add    %al,(%rax)
 5b7:	00 ce                	add    %cl,%dh
    if ((data + offset + sizeof(struct ipv6hdr)) > data_end) {
 5b9:	14 00                	adc    $0x0,%al
 5bb:	00 00                	add    %al,(%rax)
 5bd:	00 00                	add    %al,(%rax)
 5bf:	00 50 16             	add    %dl,0x16(%rax)
 5c2:	00 00                	add    %al,(%rax)
 5c4:	00 00                	add    %al,(%rax)
 5c6:	00 00                	add    %al,(%rax)
 5c8:	94                   	xchg   %eax,%esp
 5c9:	17                   	(bad)
 5ca:	00 00                	add    %al,(%rax)
 5cc:	00 00                	add    %al,(%rax)
    if (!--ip6h->hop_limit) {
 5ce:	00 00                	add    %al,(%rax)
 5d0:	c0 18 00             	rcrb   $0x0,(%rax)
 5d3:	00 00                	add    %al,(%rax)
 5d5:	00 00                	add    %al,(%rax)
 5d7:	00 23                	add    %ah,(%rbx)
 5d9:	19 00                	sbb    %eax,(%rax)
 5db:	00 00                	add    %al,(%rax)
 5dd:	00 00                	add    %al,(%rax)
 5df:	00 3b                	add    %bh,(%rbx)
  memcpy(new_eth->h_source, old_eth->h_source, 6);
 5e1:	19 00                	sbb    %eax,(%rax)
 5e3:	00 00                	add    %al,(%rax)
 5e5:	00 00                	add    %al,(%rax)
 5e7:	00 cd                	add    %cl,%ch
 5e9:	19 00                	sbb    %eax,(%rax)
 5eb:	00 00                	add    %al,(%rax)
 5ed:	00 00                	add    %al,(%rax)
  memcpy(new_eth->h_dest, old_eth->h_dest, 6);
 5ef:	00 1d 1a 00 00 00    	add    %bl,0x1a(%rip)        # 60f <balancer_ingress+0x60f>
 5f5:	00 00                	add    %al,(%rax)
 5f7:	00 32                	add    %dh,(%rdx)
 5f9:	1a 00                	sbb    (%rax),%al
 5fb:	00 00                	add    %al,(%rax)
 5fd:	00 00                	add    %al,(%rax)
 5ff:	00 0c 1b             	add    %cl,(%rbx,%rbx,1)
 602:	00 00                	add    %al,(%rax)
 604:	00 00                	add    %al,(%rax)
 606:	00 00                	add    %al,(%rax)
  if (XDP_ADJUST_HEAD_FUNC(xdp, (int)sizeof(struct ipv6hdr))) {
 608:	b0 1c                	mov    $0x1c,%al
 60a:	00 00                	add    %al,(%rax)
 60c:	00 00                	add    %al,(%rax)
 60e:	00 00                	add    %al,(%rax)
 610:	16                   	(bad)
 611:	1f                   	(bad)
 612:	00 00                	add    %al,(%rax)
 614:	00 00                	add    %al,(%rax)
 616:	00 00                	add    %al,(%rax)
 618:	f2 1f                	repnz (bad)
 61a:	00 00                	add    %al,(%rax)
 61c:	00 00                	add    %al,(%rax)
 61e:	00 00                	add    %al,(%rax)
 620:	5a                   	pop    %rdx
 621:	21 00                	and    %eax,(%rax)
 623:	00 00                	add    %al,(%rax)
  struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
 625:	00 00                	add    %al,(%rax)
 627:	00 fa                	add    %bh,%dl
 629:	21 00                	and    %eax,(%rax)
 62b:	00 00                	add    %al,(%rax)
 62d:	00 00                	add    %al,(%rax)
 62f:	00 c7                	add    %al,%bh
 631:	22 00                	and    (%rax),%al
 633:	00 00                	add    %al,(%rax)
  if (!data_stats) {
 635:	00 00                	add    %al,(%rax)
 637:	00 18                	add    %bl,(%rax)
 639:	23 00                	and    (%rax),%eax
 63b:	00 00                	add    %al,(%rax)
 63d:	00 00                	add    %al,(%rax)
 63f:	00 c5                	add    %al,%ch
 641:	23 00                	and    (%rax),%eax
  if (action >= 0) {
 643:	00 00                	add    %al,(%rax)
 645:	00 00                	add    %al,(%rax)
	...

Disassembly of section .debug_line:

0000000000000000 <.debug_line>:
  void* data = (void*)(long)ctx->data;
       0:	43 18 00             	rex.XB sbb %al,(%r8)
       3:	00 05 00 08 00 2e    	add    %al,0x2e000800(%rip)        # 2e000809 <_license+0x2dffe424>
       9:	02 00                	add    (%rax),%al
       b:	00 01                	add    %al,(%rcx)
       d:	01 01                	add    %eax,(%rcx)
       f:	fb                   	sti
      10:	0e                   	(bad)
      11:	0d 00 01 01 01       	or     $0x1010100,%eax
      16:	01 00                	add    %eax,(%rax)
  void* data_end = (void*)(long)ctx->data_end;
      18:	00 00                	add    %al,(%rax)
      1a:	01 00                	add    %eax,(%rax)
  if (data + nh_off > data_end) {
      1c:	00 01                	add    %al,(%rcx)
      1e:	01 01                	add    %eax,(%rcx)
      20:	1f                   	(bad)
      21:	06                   	(bad)
      22:	00 00                	add    %al,(%rax)
      24:	00 00                	add    %al,(%rax)
      26:	2b 00                	sub    (%rax),%eax
      28:	00 00                	add    %al,(%rax)
      2a:	3c 00                	cmp    $0x0,%al
      2c:	00 00                	add    %al,(%rax)
      2e:	55                   	push   %rbp
      2f:	00 00                	add    %al,(%rax)
  eth_proto = eth->h_proto;
      31:	00 68 00             	add    %ch,0x0(%rax)
      34:	00 00                	add    %al,(%rax)
  if (eth_proto == BE_ETH_P_IP) {
      36:	97                   	xchg   %eax,%edi
      37:	00 00                	add    %al,(%rax)
      39:	00 03                	add    %al,(%rbx)
      3b:	01 1f                	add    %ebx,(%rdi)
      3d:	02 0f                	add    (%rdi),%cl
      3f:	05 1e 18 b3 00       	add    $0xb3181e,%eax
      44:	00 00                	add    %al,(%rax)
      46:	00 29                	add    %ch,(%rcx)
      48:	b8 64 55 2d 42       	mov    $0x422d5564,%eax
      4d:	48 11 96 a1 56 28 f9 	adc    %rdx,-0x6d7a95f(%rsi)
  struct packet_description pckt = {};
      54:	61                   	(bad)
      55:	78 bb                	js     12 <balancer_ingress+0x12>
      57:	d1 00                	roll   (%rax)
      59:	00 00                	add    %al,(%rax)
      5b:	01 5b e9             	add    %ebx,-0x17(%rbx)
      5e:	d1 d0                	rcl    %eax
      60:	ad                   	lods   %ds:(%rsi),%eax
      61:	34 bd                	xor    $0xbd,%al
      63:	71 a1                	jno    6 <balancer_ingress+0x6>
      65:	66 7a 92             	data16 jp fffffffffffffffa <ch_rings+0x36ffdd77affa>
      68:	98                   	cwtl
      69:	70 c0                	jo     2b <balancer_ingress+0x2b>
      6b:	11 e5                	adc    %esp,%ebp
      6d:	00 00                	add    %al,(%rax)
      6f:	00 02                	add    %al,(%rdx)
      71:	b8 10 f2 70 73       	mov    $0x7370f210,%eax
      76:	3e 10 63 19          	ds adc %ah,0x19(%rbx)
      7a:	b6 7e                	mov    $0x7e,%dh
      7c:	f5                   	cmc
      7d:	12 c6                	adc    %dh,%al
      7f:	24 6e                	and    $0x6e,%al
      81:	f0 00 00             	lock add %al,(%rax)
      84:	00 01                	add    %al,(%rcx)
  struct vip_definition vip = {};
      86:	bc 5f e5 9e a4       	mov    $0xa49ee55f,%esp
      8b:	ca 18 d4             	lret   $0xd418
      8e:	61                   	(bad)
      8f:	6a 93                	push   $0xffffffffffffff93
      91:	aa                   	stos   %al,%es:(%rdi)
      92:	35 0e 3d 0b 03       	xor    $0x30b3d0e,%eax
      97:	01 00                	add    %eax,(%rax)
      99:	00 03                	add    %al,(%rbx)
      9b:	c0 ad e1 a1 a3 09 d6 	shrb   $0xd6,0x9a3a1e1(%rbp)
    if (iph + 1 > data_end) {
      a2:	89 6c e6 08          	mov    %ebp,0x8(%rsi,%riz,8)
      a6:	0a 51 a2             	or     -0x5e(%rcx),%dl
      a9:	d1 05 0b 01 00 00    	roll   0x10b(%rip)        # 1ba <balancer_ingress+0x1ba>
    if (iph->ihl != 5) {
      af:	01 b5 26 23 e8 bc    	add    %esi,-0x4317dcda(%rbp)
      b5:	42 2f                	rex.X (bad)
      b7:	8a 08                	mov    (%rax),%cl
    pckt->tos = iph->tos;
      b9:	35 23 90 b1 84       	xor    $0x84b19023,%eax
      be:	d4                   	(bad)
      bf:	30 1b                	xor    %bl,(%rbx)
    *protocol = iph->protocol;
      c1:	01 00                	add    %eax,(%rax)
    pckt->flow.proto = *protocol;
      c3:	00 04 54             	add    %al,(%rsp,%rdx,2)
      c6:	ad                   	lods   %ds:(%rsi),%eax
    if (iph->frag_off & PCKT_FRAGMENTED) {
      c7:	61                   	(bad)
      c8:	2a 9f 53 c6 c7 8b    	sub    -0x743839ad(%rdi),%bl
      ce:	b3 99                	mov    $0x99,%bl
      d0:	a0 35 4f 52 d4 29 01 	movabs 0x129d4524f35,%al
      d7:	00 00 
      d9:	04 1a                	add    $0x1a,%al
    if (*protocol == IPPROTO_ICMP) {
      db:	44 71 1e             	rex.R jno fc <balancer_ingress+0xfc>
      de:	c9                   	leave
      df:	6a fe                	push   $0xfffffffffffffffe
      e1:	11 5d c1             	adc    %ebx,-0x3f(%rbp)
  if (icmp_hdr + 1 > data_end) {
      e4:	30 dc                	xor    %bl,%ah
      e6:	e0 25                	loopne 10d <balancer_ingress+0x10d>
      e8:	7a 60                	jp     14a <balancer_ingress+0x14a>
      ea:	2f                   	(bad)
      eb:	01 00                	add    %eax,(%rax)
      ed:	00 03                	add    %al,(%rbx)
      ef:	fc                   	cld
  if (icmp_hdr->type == ICMP_ECHO) {
      f0:	de 28                	fisubrs (%rax)
      f2:	42 9f                	rex.X lahf
      f4:	cb                   	lret
      f5:	e6 6e                	out    %al,$0x6e
      f7:	10 9e 5f e5 b9 9c    	adc    %bl,-0x63461aa1(%rsi)
      fd:	cd 45                	int    $0x45
      ff:	34 01                	xor    $0x1,%al
     101:	00 00                	add    %al,(%rax)
     103:	03 d2                	add    %edx,%edx
     105:	88 e3                	mov    %ah,%bl
     107:	08 e1                	or     %ah,%cl
     109:	42 e5 1c             	rex.X in $0x1c,%eax
     10c:	48 e7 42             	rex.W out %eax,$0x42
  icmp_hdr->type = ICMP_ECHOREPLY;
     10f:	2f                   	(bad)
     110:	4f bb aa 3f 3b 01 00 	rex.WRXB movabs $0xfc030000013b3faa,%r11
     117:	00 03 fc 
  iph->ttl = DEFAULT_TTL;
     11a:	a1 88 9f 02 74 df 06 	movabs 0x496e06df74029f88,%eax
     121:	6e 49 
  iph->daddr = iph->saddr;
     123:	cf                   	iret
  iph->saddr = tmp_addr;
     124:	4d 8d b8 01 1e 41 01 	lea    0x1411e01(%r8),%r15
     12b:	00 00                	add    %al,(%rax)
     12d:	03 5c 58 d0          	add    -0x30(%rax,%rbx,2),%ebx
     131:	77 e9                	ja     11c <balancer_ingress+0x11c>
     133:	10 b6 c2 58 85 5d    	adc    %dh,0x5d8558c2(%rsi)
     139:	ca 54 d0             	lret   $0xd054
     13c:	ec                   	in     (%dx),%al
     13d:	22 46 01             	and    0x1(%rsi),%al
     140:	00 00                	add    %al,(%rax)
     142:	01 dd                	add    %ebx,%ebp
     144:	5f                   	pop    %rdi
     145:	2d 0c a8 b9 51       	sub    $0x51b9a80c,%eax
     14a:	1e                   	(bad)
     14b:	8f a8 d1 c6          	(bad)
     14f:	4e d3 b3 ac 55 01 00 	rex.WRX shlq %cl,0x155ac(%rbx)
     156:	00 05 02 65 bf 5d    	add    %al,0x5dbf6502(%rip)        # 5dbf665e <_license+0x5dbf4279>
     15c:	da 79 6c             	fidivrl 0x6c(%rcx)
  struct packet_description pckt = {};
     15f:	c0 b0 02 70 b2 7d c7 	shlb   $0xc7,0x7db27002(%rax)
     166:	a1 8e 5d 01 00 00 01 	movabs 0x5c24010000015d8e,%eax
     16d:	24 5c 
     16f:	80 12 ea             	adcb   $0xea,(%rdx)
     172:	92                   	xchg   %eax,%edx
     173:	00 48 b4             	add    %cl,-0x4c(%rax)
     176:	e4 bf                	in     $0xbf,%al
     178:	3b 10                	cmp    (%rax),%edx
     17a:	c5 7e 15             	(bad)
     17d:	6b 01 00             	imul   $0x0,(%rcx),%eax
     180:	00 01                	add    %al,(%rcx)
     182:	f0 b1 d3             	lock mov $0xd3,%cl
     185:	dc 61 ec             	fsubl  -0x14(%rcx)
     188:	02 2c e5 2a 49 e7 c4 	add    -0x3b18b6d6(,%riz,8),%ch
     18f:	a9 2a d6 7a 01       	test   $0x17ad62a,%eax
     194:	00 00                	add    %al,(%rax)
  struct vip_definition vip = {};
     196:	01 75 b7             	add    %esi,-0x49(%rbp)
     199:	ee                   	out    %al,(%dx)
     19a:	85 ad 3d 58 f4 a4    	test   %ebp,-0x5b0ba7c3(%rbp)
     1a0:	79 2b                	jns    1cd <balancer_ingress+0x1cd>
     1a2:	e6 16                	out    %al,$0x16
     1a4:	28 46 ca             	sub    %al,-0x36(%rsi)
     1a7:	8d 01                	lea    (%rcx),%eax
     1a9:	00 00                	add    %al,(%rax)
     1ab:	01 5a 90             	add    %ebx,-0x70(%rdx)
     1ae:	58                   	pop    %rax
    if (ip6h + 1 > data_end) {
     1af:	46 07                	rex.RX (bad)
     1b1:	61                   	(bad)
     1b2:	27                   	(bad)
     1b3:	c3                   	ret
     1b4:	c1 4a e0 0e          	rorl   $0xe,-0x20(%rdx)
     1b8:	b0 62                	mov    $0x62,%al
     1ba:	0c ca                	or     $0xca,%al
    *protocol = ip6h->nexthdr;
     1bc:	9a                   	(bad)
     1bd:	01 00                	add    %eax,(%rax)
    pckt->flow.proto = *protocol;
     1bf:	00 01                	add    %al,(%rcx)
     1c1:	8a eb                	mov    %bl,%ch
    pckt->tos = (ip6h->priority << 4) & 0xF0;
     1c3:	55                   	push   %rbp
     1c4:	f9                   	stc
     1c5:	37                   	(bad)
     1c6:	57                   	push   %rdi
     1c7:	66 5e                	pop    %si
     1c9:	31 61 34             	xor    %esp,0x34(%rcx)
     1cc:	d7                   	xlat   %ds:(%rbx)
    pckt->tos = pckt->tos | ((ip6h->flow_lbl[0] >> 4) & 0x0F);
     1cd:	5b                   	pop    %rbx
     1ce:	72 4a                	jb     21a <balancer_ingress+0x21a>
     1d0:	48                   	rex.W
     1d1:	64 01 00             	add    %eax,%fs:(%rax)
     1d4:	00 03                	add    %al,(%rbx)
     1d6:	a5                   	movsl  %ds:(%rsi),%es:(%rdi)
     1d7:	05 63 28 98 dc       	add    $0xdc982863,%eax
    if (*protocol == IPPROTO_FRAGMENT) {
     1dc:	e5 46                	in     $0x46,%eax
     1de:	63 8b 33 44 62 7d    	movsxd 0x7d624433(%rbx),%ecx
     1e4:	33 4b aa             	xor    -0x56(%rbx),%ecx
     1e7:	01 00                	add    %eax,(%rax)
     1e9:	00 03                	add    %al,(%rbx)
     1eb:	c5 73 77             	(bad)
  if (icmp_hdr + 1 > data_end) {
     1ee:	4d 0b 3c 9a          	or     (%r10,%rbx,4),%r15
     1f2:	61                   	(bad)
     1f3:	b5 51                	mov    $0x51,%ch
     1f5:	0b e7                	or     %edi,%esp
     1f7:	5a                   	pop    %rdx
     1f8:	6f                   	outsl  %ds:(%rsi),(%dx)
     1f9:	f3 74 b3             	repz je 1af <balancer_ingress+0x1af>
  if (icmp_hdr->icmp6_type == ICMPV6_ECHO_REQUEST) {
     1fc:	01 00                	add    %eax,(%rax)
     1fe:	00 03                	add    %al,(%rbx)
     200:	5c                   	pop    %rsp
     201:	57                   	push   %rdi
     202:	70 df                	jo     1e3 <balancer_ingress+0x1e3>
     204:	b5 68                	mov    $0x68,%ch
     206:	97                   	xchg   %eax,%edi
     207:	d0 23                	shlb   (%rbx)
     209:	c1 9c 17 13 f3 42 24 	rcrl   $0xb9,0x2442f313(%rdi,%rdx,1)
     210:	b9 
     211:	01 00                	add    %eax,(%rax)
     213:	00 03                	add    %al,(%rbx)
     215:	16                   	(bad)
     216:	3f                   	(bad)
     217:	54                   	push   %rsp
     218:	fb                   	sti
     219:	1a f2                	sbb    %dl,%dh
     21b:	e2 1f                	loop   23c <balancer_ingress+0x23c>
     21d:	ea                   	(bad)
     21e:	41 0f 14 eb          	unpcklps %xmm11,%xmm5
     222:	18 fa                	sbb    %bh,%dl
     224:	76 c4                	jbe    1ea <balancer_ingress+0x1ea>
     226:	01 00                	add    %eax,(%rax)
     228:	00 03                	add    %al,(%rbx)
     22a:	45 bc 38 cb 16 db    	rex.RB mov $0xdb16cb38,%r12d
     230:	bc 75 84 26 5a       	mov    $0x5a268475,%esp
     235:	fc                   	cld
     236:	29 89 c9 cc 04 00    	sub    %ecx,0x4ccc9(%rcx)
     23c:	00 09                	add    %cl,(%rcx)
     23e:	02 00                	add    (%rax),%al
     240:	00 00                	add    %al,(%rax)
     242:	00 00                	add    %al,(%rax)
     244:	00 00                	add    %al,(%rax)
     246:	00 03                	add    %al,(%rbx)
     248:	b0 08                	mov    $0x8,%al
     24a:	01 05 22 0a 13 05    	add    %eax,0x5130a22(%rip)        # 5130c72 <_license+0x512e88d>
     250:	26 08 75 05          	es or  %dh,0x5(%rbp)
     254:	0c 50                	or     $0x50,%al
     256:	05 15 06 90 05       	add    $0x5900615,%eax
     25b:	07                   	(bad)
     25c:	3c 03                	cmp    $0x3,%al
     25e:	c7                   	(bad)
     25f:	77 66                	ja     2c7 <balancer_ingress+0x2c7>
     261:	05 14 06 03 be       	add    $0xbe030614,%eax
     266:	08 3c 05 07 4c 06 03 	or     %bh,0x3064c07(,%rax,1)
     26d:	c0 77 ba 03          	shlb   $0x3,-0x46(%rdi)
     271:	c0 08 58             	rorb   $0x58,(%rax)
     274:	05 1d 06 03 ed       	add    $0xed03061d,%eax
     279:	7c 9e                	jl     219 <balancer_ingress+0x219>
     27b:	05 19 02 36 13       	add    $0x13360219,%eax
     280:	04 0c                	add    $0xc,%al
     282:	05 0d 03 bc 7e       	add    $0x7ebc030d,%eax
     287:	08 90 05 11 06 4a    	or     %dl,0x4a061105(%rax)
      memcpy(pckt->flow.srcv6, ip6h->saddr.s6_addr32, 16);
     28d:	05 09 3c 05 0e       	add    $0xe053c09,%eax
     292:	06                   	(bad)
     293:	6a 05                	push   $0x5
     295:	12 06                	adc    (%rsi),%al
     297:	4a 05 09 2e 05 16    	rex.WX add $0x16052e09,%rax
      memcpy(pckt->flow.dstv6, ip6h->daddr.s6_addr32, 16);
     29d:	06                   	(bad)
     29e:	6b 05 0f 06 3c 05 16 	imul   $0x16,0x53c060f(%rip),%eax        # 53c08b4 <_license+0x53be4cf>
     2a5:	06                   	(bad)
     2a6:	4b 3d 05 0e 4e 05    	rex.WXB cmp $0x54e0e05,%rax
  if (protocol == IPPROTO_ICMPV6) {
     2ac:	17                   	(bad)
     2ad:	06                   	(bad)
     2ae:	4a 05 09 66 04 00    	rex.WX add $0x46609,%rax
  if (icmp_hdr + 1 > data_end) {
     2b4:	05 00 03 87 7c       	add    $0x7c870300,%eax
     2b9:	66 04 0c             	data16 add $0xc,%al
     2bc:	05 13 06 03 fd       	add    $0xfd030613,%eax
  if (icmp_hdr->type == ICMP_ECHO) {
     2c1:	03 4a 05             	add    0x5(%rdx),%ecx
     2c4:	09 06                	or     %eax,(%rsi)
     2c6:	2e 04 0e             	cs add $0xe,%al
     2c9:	05 10 06 03 9e       	add    $0x9e030610,%eax
     2ce:	7e 66                	jle    336 <balancer_ingress+0x336>
     2d0:	05 14 06 4a 05       	add    $0x54a0614,%eax
     2d5:	07                   	(bad)
     2d6:	3c 05                	cmp    $0x5,%al
     2d8:	11 06                	adc    %eax,(%rsi)
     2da:	69 05 07 06 3c 03 e2 	imul   $0x3907de2,0x33c0607(%rip),%eax        # 33c08eb <_license+0x33be506>
     2e1:	7d 90 03 
       sizeof(struct icmphdr)) > data_end) {
     2e4:	9e                   	sahf
     2e5:	02 58 03             	add    0x3(%rax),%bl
  if ((data + sizeof(struct ethhdr) + sizeof(struct iphdr) +
     2e8:	e2 7d                	loop   367 <balancer_ingress+0x367>
     2ea:	90                   	nop
     2eb:	05 12 06 03 cf       	add    $0xcf030612,%eax
  icmp_hdr->type = ICMP_ECHOREPLY;
     2f0:	00 4a 05             	add    %cl,0x5(%rdx)
  icmp_hdr->checksum += 0x0008;
     2f3:	16                   	(bad)
     2f4:	4e 05 0c 59 05 15    	rex.WRX add $0x1505590c,%rax
  iph->daddr = iph->saddr;
     2fa:	4c 05 13 3b 05 0e    	rex.WR add $0xe053b13,%rax
     300:	3d 3d 04 0f 03       	cmp    $0x30f043d,%eax
  iph->saddr = tmp_addr;
     305:	61                   	(bad)
     306:	3c 05                	cmp    $0x5,%al
     308:	0b 06                	or     (%rsi),%eax
     30a:	08 3c 05 0e 3c 05 0b 	or     %bh,0xb053c0e(,%rax,1)
     311:	3c 05                	cmp    $0x5,%al
     313:	0e                   	(bad)
     314:	3c 05                	cmp    $0x5,%al
     316:	0b 4a 04             	or     0x4(%rdx),%ecx
     319:	00 05 1d 06 03 f5    	add    %al,-0xafcf9e3(%rip)        # fffffffff503093c <ch_rings+0x36ffd27ab93c>
     31f:	04 08                	add    $0x8,%al
     321:	66 05 19 02          	add    $0x219,%ax
     325:	36 13 04 0c          	ss adc (%rsp,%rcx,1),%eax
     329:	05 0e 03 a3 7e       	add    $0x7ea3030e,%eax
     32e:	08 90 05 12 06 4a    	or     %dl,0x4a061205(%rax)
     334:	05 09 3c 05 17       	add    $0x17053c09,%eax
     339:	06                   	(bad)
     33a:	6b 05 16 3d 05 18 4d 	imul   $0x4d,0x18053d16(%rip),%eax        # 18054057 <_license+0x18051c72>
     341:	05 21 06 3c 05       	add    $0x53c0621,%eax
     346:	0f 3c                	(bad)
     348:	05 1f 06 4b 05       	add    $0x54b061f,%eax
     34d:	1b 06                	sbb    (%rsi),%eax
     34f:	3c 05                	cmp    $0x5,%al
     351:	0f 58 05 09 06 4e 05 	addps  0x54e0609(%rip),%xmm0        # 54e0961 <_license+0x54de57c>
     358:	00 06                	add    %al,(%rsi)
     35a:	03 a1 7c 82 05 09    	add    0x905827c(%rcx),%esp
     360:	03 df                	add    %edi,%ebx
     362:	03 4a 04             	add    0x4(%rdx),%ecx
     365:	0e                   	(bad)
     366:	05 10 06 03 8d       	add    $0x8d030610,%eax
     36b:	7e 82                	jle    2ef <balancer_ingress+0x2ef>
     36d:	05 14 06 4a 05       	add    $0x54a0614,%eax
     372:	07                   	(bad)
     373:	3c 05                	cmp    $0x5,%al
     375:	11 06                	adc    %eax,(%rsi)
     377:	69 05 07 06 3c 03 91 	imul   $0x3f27e91,0x33c0607(%rip),%eax        # 33c0988 <_license+0x33be5a3>
     37e:	7e f2 03 
     381:	ef                   	out    %eax,(%dx)
     382:	01 58 04             	add    %ebx,0x4(%rax)
     385:	00 05 00 03 91 7e    	add    %al,0x7e910300(%rip)        # 7e91068b <_license+0x7e90e2a6>
     38b:	82                   	(bad)
     38c:	04 0c                	add    $0xc,%al
     38e:	05 07 06 03 e5       	add    $0xe5030607,%eax
     393:	03 02                	add    (%rdx),%eax
     395:	6e                   	outsb  %ds:(%rsi),(%dx)
     396:	01 08                	add    %ecx,(%rax)
     398:	21 04 0e             	and    %eax,(%rsi,%rcx,1)
     39b:	03 f3                	add    %ebx,%esi
     39d:	7e 08                	jle    3a7 <balancer_ingress+0x3a7>
     39f:	20 05 10 03 42 82    	and    %al,-0x7dbdfcf0(%rip)        # ffffffff824206b5 <ch_rings+0x36ff5fb9b6b5>
     3a5:	05 14 06 4a 05       	add    $0x54a0614,%eax
     3aa:	07                   	(bad)
     3ab:	3c 05                	cmp    $0x5,%al
     3ad:	11 06                	adc    %eax,(%rsi)
     3af:	69 05 07 06 3c 03 e2 	imul   $0x3907de2,0x33c0607(%rip),%eax        # 33c09c0 <_license+0x33be5db>
     3b6:	7d 90 03 
     3b9:	9e                   	sahf
     3ba:	02 58 05             	add    0x5(%rax),%bl
     3bd:	3c 06                	cmp    $0x6,%al
     3bf:	03 a9 7e 90 05 20    	add    0x2005907e(%rcx),%ebp
     3c5:	91                   	xchg   %eax,%ecx
     3c6:	05 07 3b 05 12       	add    $0x12053b07,%eax
     3cb:	6e                   	outsb  %ds:(%rsi),(%dx)
     3cc:	05 16 4e 05 0c       	add    $0xc054e16,%eax
     3d1:	59                   	pop    %rcx
     3d2:	05 15 4c 05 13       	add    $0x13054c15,%eax
     3d7:	3b 05 0e 3d 3d 04    	cmp    0x43d3d0e(%rip),%eax        # 43d40eb <_license+0x43d1d06>
     3dd:	0f 03 61 3c          	lsl    0x3c(%rcx),%esp
     3e1:	05 0b 06 08 ba       	add    $0xba08060b,%eax
  if (protocol == IPPROTO_IPIP) {
     3e6:	05 0e 3c 05 0b       	add    $0xb053c0e,%eax
     3eb:	3c 05                	cmp    $0x5,%al
     3ed:	0e                   	(bad)
     3ee:	3c 05                	cmp    $0x5,%al
     3f0:	0b 4a 04             	or     0x4(%rdx),%ecx
     3f3:	00 05 00 03 48 08    	add    %al,0x8480300(%rip)        # 84806f9 <_license+0x847e314>
     3f9:	20 05 07 06 03 df    	and    %al,-0x20fcf9f9(%rip)        # ffffffffdf030a06 <ch_rings+0x36ffbc7aba06>
  tcp = data + off;
     3ff:	05 02 a2 01 01       	add    $0x101a202,%eax
     404:	04 0c                	add    $0xc,%al
  if (tcp + 1 > data_end) {
     406:	05 0e 03 9e 7b       	add    $0x7b9e030e,%eax
     40b:	08 74 05 07          	or     %dh,0x7(%rbp,%rax,1)
     40f:	03 50 4a             	add    0x4a(%rax),%edx
     412:	05 0e 03 30 2e       	add    $0x2e30030e,%eax
  if (tcp->syn) {
     417:	05 0b 4c 05 0f       	add    $0xf054c0b,%eax
     41c:	06                   	(bad)
    pckt->flags |= F_SYN_SET;
     41d:	4a 05 07 3c 06 6a    	rex.WX add $0x6a063c07,%rax
     423:	06                   	(bad)
     424:	4a 05 11 06 67 05    	rex.WX add $0x5670611,%rax
      pckt->flow.src = iph->saddr;
     42a:	1d 03 fc 02 90       	sbb    $0x9002fc03,%eax
      pckt->flow.dst = iph->daddr;
     42f:	05 16 06 3c 05       	add    $0x53c0616,%eax
  if (protocol == IPPROTO_ICMPV6) {
     434:	1d 06 4b 05 16       	sbb    $0x16054b06,%eax
  if (icmp_hdr + 1 > data_end) {
     439:	06                   	(bad)
     43a:	3c 04                	cmp    $0x4,%al
     43c:	0e                   	(bad)
     43d:	05 07 06 03 d8       	add    $0xd8030607,%eax
     442:	7e 4a                	jle    48e <balancer_ingress+0x48e>
     444:	05 10 03 93 7f       	add    $0x7f930310,%eax
  if (icmp_hdr->icmp6_type == ICMPV6_ECHO_REQUEST) {
     449:	4a 05 14 06 4a 05    	rex.WX add $0x54a0614,%rax
     44f:	07                   	(bad)
     450:	3c 05                	cmp    $0x5,%al
     452:	11 06                	adc    %eax,(%rsi)
     454:	69 05 07 06 3c 03 91 	imul   $0x3f27e91,0x33c0607(%rip),%eax        # 33c0a65 <_license+0x33be680>
     45b:	7e f2 03 
     45e:	ef                   	out    %eax,(%dx)
     45f:	01 58 05             	add    %ebx,0x5(%rax)
     462:	3e 06                	ds (bad)
     464:	03 f6                	add    %esi,%esi
  if ((data + sizeof(struct ethhdr) + sizeof(struct ipv6hdr) +
     466:	7e 82                	jle    3ea <balancer_ingress+0x3ea>
     468:	05 21 91 05 07       	add    $0x7059121,%eax
     46d:	3b 06                	cmp    (%rsi),%eax
       sizeof(struct icmp6hdr)) > data_end) {
     46f:	03 9b 7f ac 04 00    	add    0x4ac7f(%rbx),%ebx
  if ((data + sizeof(struct ethhdr) + sizeof(struct ipv6hdr) +
     475:	06                   	(bad)
     476:	03 df                	add    %edi,%ebx
     478:	05 90 04 0c 05       	add    $0x50c0490,%eax
     47d:	0e                   	(bad)
     47e:	03 9e 7b 08 74 05    	add    0x574087b(%rsi),%ebx
     484:	07                   	(bad)
     485:	03 50 4a             	add    0x4a(%rax),%edx
     488:	05 0e 03 30 2e       	add    $0x2e30030e,%eax
     48d:	05 0b 4c 05 0f       	add    $0xf054c0b,%eax
     492:	06                   	(bad)
     493:	4a 05 07 3c 06 6a    	rex.WX add $0x6a063c07,%rax
     499:	06                   	(bad)
     49a:	4a 05 11 06 67 06    	rex.WX add $0x6670611,%rax
  tcp = data + off;
     4a0:	03 fc                	add    %esp,%edi
  if (is_ipv6) {
     4a2:	7e 90                	jle    434 <balancer_ingress+0x434>
  tcp = data + off;
     4a4:	04 0e                	add    $0xe,%al
     4a6:	05 09 06 03 fa       	add    $0xfa030609,%eax
  if (tcp + 1 > data_end) {
     4ab:	01 9e 05 0a f3 05    	add    %ebx,0x5f30a05(%rsi)
     4b1:	09 06                	or     %eax,(%rsi)
     4b3:	3c 05                	cmp    $0x5,%al
  if (tcp->syn) {
     4b5:	1b 06                	sbb    (%rsi),%eax
     4b7:	69 05 11 4b 05 0d 59 	imul   $0x6090559,0xd054b11(%rip),%eax        # d054fd2 <_license+0xd052bed>
     4be:	05 09 06 
    pckt->flags |= F_SYN_SET;
     4c1:	66 05 1d 06          	add    $0x61d,%ax
     4c5:	2f                   	(bad)
     4c6:	05 0c 60 05 10       	add    $0x1005600c,%eax
     4cb:	06                   	(bad)
     4cc:	4a 05 07 3c 05 1c    	rex.WX add $0x1c053c07,%rax
        bpf_map_lookup_elem(&stats, &stats_key);
     4d2:	06                   	(bad)
     4d3:	69 05 14 06 3c 05 0f 	imul   $0x54b060f,0x53c0614(%rip),%eax        # 53c0af1 <_license+0x53be70c>
     4da:	06 4b 05 
     4dd:	03 59 08             	add    0x8(%rcx),%ebx
     4e0:	21 06                	and    %eax,(%rsi)
    if (!icmp_ptb_v6_stats) {
     4e2:	03 f1                	add    %ecx,%esi
     4e4:	7d 08                	jge    4ee <balancer_ingress+0x4ee>
     4e6:	20 04 00             	and    %al,(%rax,%rax,1)
     4e9:	05 07 06 03 df       	add    $0xdf030607,%eax
    __u32 mtu = bpf_ntohl(icmp_hdr->icmp6_mtu);
     4ee:	05 90 05 05 03       	add    $0x3050590,%eax
    if (mtu < MAX_MTU_IN_PTB_TO_DROP) {
     4f3:	f2 7b 08             	bnd jnp 4fe <balancer_ingress+0x4fe>
     4f6:	74 05                	je     4fd <balancer_ingress+0x4fd>
     4f8:	1c 08                	sbb    $0x8,%al
     4fa:	40 05 07 08 a0 06    	rex add $0x6a00807,%eax
  if (ip6h + 1 > data_end) {
     500:	3c 03                	cmp    $0x3,%al
     502:	a9 7e 2e 05 12       	test   $0x12052e7e,%eax
     507:	06                   	(bad)
     508:	03 da                	add    %edx,%ebx
     50a:	01 9e 05 0a f3 05    	add    %ebx,0x5f30a05(%rsi)
  pckt->flow.proto = ip6h->nexthdr;
     510:	09 06                	or     %eax,(%rsi)
     512:	3c 05                	cmp    $0x5,%al
  pckt->flags |= F_ICMP;
     514:	14 06                	adc    $0x6,%al
     516:	69 04 10 05 18 03 fc 	imul   $0xfc031805,(%rax,%rdx,1),%eax
  memcpy(pckt->flow.srcv6, ip6h->daddr.s6_addr32, 16);
     51d:	7e 4a                	jle    569 <balancer_ingress+0x569>
     51f:	05 32 06 e4 05       	add    $0x5e40632,%eax
     524:	09 3c 05 0a 06 32 05 	or     %edi,0x532060a(,%rax,1)
  memcpy(pckt->flow.dstv6, ip6h->saddr.s6_addr32, 16);
     52b:	09 06                	or     %eax,(%rsi)
     52d:	e4 04                	in     $0x4,%al
     52f:	11 05 03 06 03 24    	adc    %eax,0x24030603(%rip)        # 24030b38 <_license+0x2402e753>
     535:	4a d7                	rex.WX xlat %ds:(%rbx)
     537:	05 00 06 03 fd       	add    $0xfd030600,%eax
     53c:	7e c8                	jle    506 <balancer_ingress+0x506>
     53e:	05 07 06 03 89       	add    $0x89030607,%eax
     543:	01 c8                	add    %ecx,%eax
     545:	06                   	(bad)
     546:	ba 03 f7 7e 66       	mov    $0x667ef703,%edx
     54b:	04 00                	add    $0x0,%al
     54d:	05 21 06 03 d6       	add    $0xd6030621,%eax
     552:	02 9e 05 08 f3 05    	add    0x5f30805(%rsi),%bl
     558:	07                   	(bad)
     559:	06                   	(bad)
     55a:	3c 05                	cmp    $0x5,%al
     55c:	00 03                	add    %al,(%rbx)
    memcpy(dst_addr.addrv6, pckt->flow.dstv6, 16);
     55e:	a9 7d 66 05 0e       	test   $0xe05667d,%eax
     563:	06                   	(bad)
     564:	03 df                	add    %edi,%ebx
     566:	02 58 05             	add    0x5(%rax),%bl
     569:	07                   	(bad)
     56a:	06                   	(bad)
     56b:	82                   	(bad)
     56c:	06                   	(bad)
     56d:	03 f8                	add    %eax,%edi
     56f:	7e 4a                	jle    5bb <balancer_ingress+0x5bb>
     571:	03 88 01 3c 05 09    	add    0x9053c01(%rax),%ecx
  __u32* decap_dst_flags = bpf_map_lookup_elem(&decap_dst, &dst_addr);
     577:	03 0b                	add    (%rbx),%ecx
     579:	e4 f3                	in     $0xf3,%al
     57b:	06                   	(bad)
     57c:	3c 05                	cmp    $0x5,%al
     57e:	00 03                	add    %al,(%rbx)
     580:	95                   	xchg   %eax,%ebp
     581:	7d 66                	jge    5e9 <balancer_ingress+0x5e9>
     583:	05 05 06 03 d1       	add    $0xd1030605,%eax
     588:	01 9e 05 1c 08 40    	add    %ebx,0x40081c05(%rsi)
  if (decap_dst_flags) {
     58e:	05 07 08 a0 06       	add    $0x6a00807,%eax
     593:	3c 03                	cmp    $0x3,%al
     595:	a9 7e 2e 05 12       	test   $0x12052e7e,%eax
     59a:	06                   	(bad)
     59b:	03 da                	add    %edx,%ebx
    data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     59d:	01 9e 05 0a f3 05    	add    %ebx,0x5f30a05(%rsi)
     5a3:	09 06                	or     %eax,(%rsi)
     5a5:	3c 05                	cmp    $0x5,%al
     5a7:	14 06                	adc    $0x6,%al
     5a9:	69 04 10 05 18 03 85 	imul   $0x85031805,(%rax,%rdx,1),%eax
    if (!data_stats) {
     5b0:	7f 4a                	jg     5fc <balancer_ingress+0x5fc>
     5b2:	05 30 06 e4 05       	add    $0x5e40630,%eax
    data_stats->v1 += 1;
     5b7:	09 3c 05 11 06 33 05 	or     %edi,0x5330611(,%rax,1)
    if ((data + offset + sizeof(struct ipv6hdr)) > data_end) {
     5be:	17                   	(bad)
     5bf:	06                   	(bad)
     5c0:	4a 05 2a 06 3d 05    	rex.WX add $0x53d062a,%rax
     5c6:	22 06                	and    (%rsi),%al
     5c8:	3c 05                	cmp    $0x5,%al
     5ca:	10 58 05             	adc    %bl,0x5(%rax)
    if (!--ip6h->hop_limit) {
     5cd:	0a 06                	or     (%rsi),%al
     5cf:	4b 04 11             	rex.WXB add $0x11,%al
     5d2:	05 03 03 18 08       	add    $0x8180303,%eax
     5d7:	2e d7                	xlat   %ds:(%rbx)
     5d9:	05 00 06 03 fd       	add    $0xfd030600,%eax
     5de:	7e c8                	jle    5a8 <balancer_ingress+0x5a8>
  memcpy(new_eth->h_source, old_eth->h_source, 6);
     5e0:	05 07 06 03 89       	add    $0x89030607,%eax
     5e5:	01 c8                	add    %ecx,%eax
     5e7:	06                   	(bad)
     5e8:	ba 03 f7 7e 66       	mov    $0x667ef703,%edx
     5ed:	04 00                	add    $0x0,%al
  memcpy(new_eth->h_dest, old_eth->h_dest, 6);
     5ef:	05 21 06 03 d6       	add    $0xd6030621,%eax
     5f4:	02 9e 05 08 f3 05    	add    0x5f30805(%rsi),%bl
     5fa:	07                   	(bad)
     5fb:	06                   	(bad)
     5fc:	3c 05                	cmp    $0x5,%al
     5fe:	00 03                	add    %al,(%rbx)
     600:	a9 7d 66 05 0e       	test   $0xe05667d,%eax
     605:	06                   	(bad)
     606:	03 df                	add    %edi,%ebx
  if (XDP_ADJUST_HEAD_FUNC(xdp, (int)sizeof(struct ipv6hdr))) {
     608:	02 58 05             	add    0x5(%rax),%bl
     60b:	07                   	(bad)
     60c:	06                   	(bad)
     60d:	82                   	(bad)
     60e:	06                   	(bad)
     60f:	03 f8                	add    %eax,%edi
     611:	7e 4a                	jle    65d <balancer_ingress+0x65d>
     613:	03 88 01 3c 05 09    	add    0x9053c01(%rax),%ecx
     619:	03 0b                	add    (%rbx),%ecx
     61b:	e4 f3                	in     $0xf3,%al
     61d:	04 0c                	add    $0xc,%al
     61f:	05 0e 03 f8 7d       	add    $0x7df8030e,%eax
  struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     624:	d6                   	(bad)
     625:	05 07 03 6a 4a       	add    $0x4a6a0307,%eax
     62a:	05 0e 03 16 2e       	add    $0x2e16030e,%eax
     62f:	05 0b 4c 05 0f       	add    $0xf054c0b,%eax
  if (!data_stats) {
     634:	06                   	(bad)
     635:	4a 05 07 3c 04 00    	rex.WX add $0x43c07,%rax
     63b:	05 00 03 9b 7f       	add    $0x7f9b0300,%eax
     640:	66 04 0e             	data16 add $0xe,%al
  if (action >= 0) {
     643:	05 16 06 03 a5       	add    $0xa5030616,%eax
     648:	02 08                	add    (%rax),%cl
     64a:	d6                   	(bad)
     64b:	05 07 06 4a 03       	add    $0x34a0607,%eax
  if (decap_dst_flags) {
     650:	db 7d 2e             	fstpt  0x2e(%rbp)
  if (action >= 0) {
     653:	05 09 06 03 a8       	add    $0xa8030609,%eax
     658:	02 9e 05 0a f3 05    	add    0x5f30a05(%rsi),%bl
     65e:	09 06                	or     %eax,(%rsi)
        bpf_map_lookup_elem(&stats, &xpop_stats_key);
     660:	3c 05                	cmp    $0x5,%al
     662:	1b 06                	sbb    (%rsi),%eax
     664:	69 05 0d 4c 05 09 06 	imul   $0x1d054a06,0x9054c0d(%rip),%eax        # 905527b <_license+0x9052e96>
     66b:	4a 05 1d 
     66e:	06                   	(bad)
     66f:	2f                   	(bad)
    if (xpop_stats_data) {
     670:	05 0b 5e 05 0f       	add    $0xf055e0b,%eax
     675:	06                   	(bad)
     676:	4a 05 07 3c 05 0c    	rex.WX add $0xc053c07,%rax
     67c:	06                   	(bad)
     67d:	69 05 10 06 4a 05 07 	imul   $0x1b052e07,0x54a0610(%rip),%eax        # 54a0c97 <_license+0x549e8b2>
     684:	2e 05 1b 
    memcpy(dst_addr.addrv6, pckt->flow.dstv6, 16);
     687:	06                   	(bad)
     688:	69 05 14 06 3c 05 0f 	imul   $0x54b060f,0x53c0614(%rip),%eax        # 53c0ca6 <_license+0x53be8c1>
     68f:	06 4b 05 
     692:	19 59 05             	sbb    %ebx,0x5(%rcx)
     695:	12 06                	adc    (%rsi),%al
  __u32* decap_dst_flags = bpf_map_lookup_elem(&decap_dst, &dst_addr);
     697:	3c 05                	cmp    $0x5,%al
     699:	19 06                	sbb    %eax,(%rsi)
     69b:	4b 05 12 06 3c 04    	rex.WXB add $0x43c0612,%rax
     6a1:	00 05 00 03 c2 7d    	add    %al,0x7dc20300(%rip)        # 7dc209a7 <_license+0x7dc1e5c2>
     6a7:	90                   	nop
     6a8:	05 05 06 03 8b       	add    $0x8b030605,%eax
     6ad:	06                   	(bad)
     6ae:	08 4a 05             	or     %cl,0x5(%rdx)
     6b1:	0e                   	(bad)
  if (decap_dst_flags) {
     6b2:	08 41 05             	or     %al,0x5(%rcx)
     6b5:	0c 06                	or     $0x6,%al
     6b7:	58                   	pop    %rax
     6b8:	05 19 06 59 05       	add    $0x5590619,%eax
     6bd:	0d 06 4a 05 0e       	or     $0xe054a06,%eax
    data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     6c2:	06                   	(bad)
     6c3:	4b 05 08 08 ad 05    	rex.WXB add $0x5ad0808,%rax
     6c9:	07                   	(bad)
     6ca:	06                   	(bad)
     6cb:	3c 05                	cmp    $0x5,%al
     6cd:	10 06                	adc    %al,(%rsi)
     6cf:	03 0f                	add    (%rdi),%ecx
    if (!data_stats) {
     6d1:	66 05 17 06          	add    $0x617,%ax
     6d5:	66 05 07 66          	add    $0x6607,%ax
     6d9:	03 de                	add    %esi,%ebx
    data_stats->v1 += 1;
     6db:	79 66                	jns    743 <balancer_ingress+0x743>
     6dd:	05 10 06 03 b6       	add    $0xb6030610,%eax
    if ((data + offset + sizeof(struct iphdr)) > data_end) {
     6e2:	06                   	(bad)
     6e3:	9e                   	sahf
     6e4:	05 08 08 13 05       	add    $0x5130808,%eax
     6e9:	07                   	(bad)
     6ea:	06                   	(bad)
     6eb:	3c 05                	cmp    $0x5,%al
     6ed:	12 06                	adc    (%rsi),%al
     6ef:	6b 05 18 4c 05 07 06 	imul   $0x6,0x7054c18(%rip),%eax        # 705530e <_license+0x7052f29>
    csum = iph->check + 0x0001;
     6f6:	3c 05                	cmp    $0x5,%al
     6f8:	19 06                	sbb    %eax,(%rsi)
    iph->check = (csum & 0xffff) + (csum >> 16);
     6fa:	31 05 17 77 05 13    	xor    %eax,0x13057717(%rip)        # 13057e17 <_license+0x13055a32>
     700:	9f                   	lahf
     701:	bb 06 58 05 22       	mov    $0x22055806,%ebx
    if (!--iph->ttl) {
     706:	06                   	(bad)
     707:	6a 05                	push   $0x5
     709:	0a 08                	or     (%rax),%cl
     70b:	13 05 09 06 3c 05    	adc    0x53c0609(%rip),%eax        # 53c0d1a <_license+0x53be935>
     711:	13 06                	adc    (%rsi),%eax
     713:	6c                   	insb   (%dx),%es:(%rdi)
     714:	06                   	(bad)
     715:	03 af 79 d6 04 0e    	add    0xe04d679(%rdi),%ebp
  memcpy(new_eth->h_source, old_eth->h_source, 6);
     71b:	05 16 06 03 a5       	add    $0xa5030616,%eax
     720:	02 9e 05 07 06 4a    	add    0x4a060705(%rsi),%bl
  memcpy(new_eth->h_dest, old_eth->h_dest, 6);
     726:	03 db                	add    %ebx,%ebx
     728:	7d 2e                	jge    758 <balancer_ingress+0x758>
     72a:	05 09 06 03 a8       	add    $0xa8030609,%eax
     72f:	02 9e 05 0a f3 05    	add    0x5f30a05(%rsi),%bl
     735:	09 06                	or     %eax,(%rsi)
     737:	3c 05                	cmp    $0x5,%al
     739:	1b 06                	sbb    (%rsi),%eax
     73b:	69 05 0d 4c 05 09 06 	imul   $0x1d054a06,0x9054c0d(%rip),%eax        # 9055352 <_license+0x9052f6d>
     742:	4a 05 1d 
  if (XDP_ADJUST_HEAD_FUNC(xdp, (int)sizeof(struct ipv6hdr))) {
     745:	06                   	(bad)
     746:	2f                   	(bad)
     747:	05 0b 5e 05 0f       	add    $0xf055e0b,%eax
     74c:	06                   	(bad)
     74d:	4a 05 07 3c 05 0c    	rex.WX add $0xc053c07,%rax
     753:	06                   	(bad)
     754:	69 05 10 06 4a 05 07 	imul   $0x1b052e07,0x54a0610(%rip),%eax        # 54a0d6e <_license+0x549e989>
     75b:	2e 05 1b 
  struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     75e:	06                   	(bad)
     75f:	69 05 14 06 3c 05 0f 	imul   $0x54b060f,0x53c0614(%rip),%eax        # 53c0d7d <_license+0x53be998>
     766:	06 4b 05 
     769:	19 59 05             	sbb    %ebx,0x5(%rcx)
  if (!data_stats) {
     76c:	12 06                	adc    (%rsi),%al
     76e:	3c 05                	cmp    $0x5,%al
     770:	19 06                	sbb    %eax,(%rsi)
     772:	4b 05 12 06 3c 04    	rex.WXB add $0x43c0612,%rax
     778:	00 05 0e 06 03 d6    	add    %al,-0x29fcf9f2(%rip)        # ffffffffd6030d8c <ch_rings+0x36ffb37abd8c>
  if (action >= 0) {
     77e:	03 90 05 10 75 06    	add    0x6751005(%rax),%edx
     784:	03 eb                	add    %ebx,%ebp
  if (decap_dst_flags) {
     786:	79 9e                	jns    726 <balancer_ingress+0x726>
     788:	03 95 06 58 05 0a    	add    0xa055806(%rbp),%edx
  if (action >= 0) {
     78e:	06                   	(bad)
     78f:	3d 05 09 06 3c       	cmp    $0x3c060905,%eax
     794:	05 00 03 ea 79       	add    $0x79ea0300,%eax
        bpf_map_lookup_elem(&stats, &xpop_stats_key);
     799:	66 05 30 06          	add    $0x630,%ax
     79d:	03 9a 06 3c 05 1b    	add    0x1b053c06(%rdx),%ebx
     7a3:	94                   	xchg   %eax,%esp
     7a4:	05 12 03 ae 7b       	add    $0x7bae0312,%eax
    if (xpop_stats_data) {
     7a9:	ba 05 20 08 19       	mov    $0x19082005,%edx
     7ae:	05 13 06 4a 05       	add    $0x54a0613,%eax
     7b3:	1c 06                	sbb    $0x6,%al
     7b5:	4c 05 07 08 a0 06    	rex.WR add $0x6a00807,%rax
  if (is_ipv6) {
     7bb:	3c 03                	cmp    $0x3,%al
  udp = data + off;
     7bd:	a9 7e 2e 05 12       	test   $0x12052e7e,%eax
  if (udp + 1 > data_end) {
     7c2:	06                   	(bad)
     7c3:	03 da                	add    %edx,%ebx
     7c5:	01 9e 05 0a f3 05    	add    %ebx,0x5f30a05(%rsi)
     7cb:	09 06                	or     %eax,(%rsi)
     7cd:	3c 05                	cmp    $0x5,%al
     7cf:	14 06                	adc    $0x6,%al
     7d1:	69 05 00 06 03 a2 7e 	imul   $0x10044a7e,-0x5dfcfa00(%rip),%eax        # ffffffffa2030ddb <ch_rings+0x36ff7f7abddb>
     7d8:	4a 04 10 
     7db:	05 18 06 03 e3       	add    $0xe3030618,%eax
     7e0:	00 4a 05             	add    %cl,0x5(%rdx)
     7e3:	30 06                	xor    %al,(%rsi)
     7e5:	e4 05                	in     $0x5,%al
     7e7:	09 3c 05 11 06 33 05 	or     %edi,0x5330611(,%rax,1)
  if (icmp_hdr->code == ICMP_FRAG_NEEDED) {
     7ee:	17                   	(bad)
     7ef:	06                   	(bad)
     7f0:	4a 05 2a 06 3d 05    	rex.WX add $0x53d062a,%rax
     7f6:	22 06                	and    (%rsi),%al
     7f8:	3c 05                	cmp    $0x5,%al
     7fa:	10 58 05             	adc    %bl,0x5(%rax)
        bpf_map_lookup_elem(&stats, &stats_key);
     7fd:	0a 06                	or     (%rsi),%al
     7ff:	4b 04 11             	rex.WXB add $0x11,%al
     802:	05 03 03 2d 08       	add    $0x82d0303,%eax
     807:	2e d7                	xlat   %ds:(%rbx)
     809:	05 14 bb 05 07       	add    $0x705bb14,%eax
    if (!icmp_ptb_v4_stats) {
     80e:	c9                   	leave
     80f:	06                   	(bad)
     810:	ba 03 e6 7e 66       	mov    $0x667ee603,%edx
    icmp_ptb_v4_stats->v1 += 1;
     815:	04 00                	add    $0x0,%al
     817:	05 21 06 03 d6       	add    $0xd6030621,%eax
    if (mtu < MAX_MTU_IN_PTB_TO_DROP) {
     81c:	02 9e 05 08 f3 05    	add    0x5f30805(%rsi),%bl
      icmp_ptb_v4_stats->v2 += 1;
     822:	07                   	(bad)
     823:	06                   	(bad)
  if (iph + 1 > data_end) {
     824:	3c 05                	cmp    $0x5,%al
     826:	00 03                	add    %al,(%rbx)
     828:	a9 7d 66 05 0e       	test   $0xe05667d,%eax
     82d:	06                   	(bad)
     82e:	03 df                	add    %edi,%ebx
     830:	02 58 05             	add    0x5(%rax),%bl
  if (iph->ihl != 5) {
     833:	07                   	(bad)
     834:	06                   	(bad)
     835:	82                   	(bad)
     836:	06                   	(bad)
     837:	03 f8                	add    %eax,%edi
     839:	7e 4a                	jle    885 <balancer_ingress+0x885>
     83b:	03 88 01 3c 05 09    	add    0x9053c01(%rax),%ecx
  pckt->flow.proto = iph->protocol;
     841:	03 0b                	add    (%rbx),%ecx
     843:	e4 f3                	in     $0xf3,%al
  pckt->flags |= F_ICMP;
     845:	06                   	(bad)
     846:	3c 05                	cmp    $0x5,%al
     848:	00 03                	add    %al,(%rbx)
  pckt->flow.src = iph->daddr;
     84a:	95                   	xchg   %eax,%ebp
     84b:	7d 2e                	jge    87b <balancer_ingress+0x87b>
     84d:	04 0e                	add    $0xe,%al
     84f:	05 09 06 03 fa       	add    $0xfa030609,%eax
  pckt->flow.dst = iph->saddr;
     854:	01 02                	add    %eax,(%rdx)
     856:	35 01 05 0a f3       	xor    $0xf30a0501,%eax
     85b:	05 09 06 3c 05       	add    $0x53c0609,%eax
     860:	1b 06                	sbb    (%rsi),%eax
     862:	69 05 11 4b 05 0d 59 	imul   $0x6090559,0xd054b11(%rip),%eax        # d05537d <_license+0xd052f98>
     869:	05 09 06 
     86c:	66 05 1d 06          	add    $0x61d,%ax
     870:	2f                   	(bad)
    memcpy(vip.vipv6, pckt.flow.dstv6, 16);
     871:	05 0c 60 05 10       	add    $0x1005600c,%eax
     876:	06                   	(bad)
     877:	4a 05 07 3c 04 00    	rex.WX add $0x43c07,%rax
     87d:	05 00 03 f7 7d       	add    $0x7df70300,%eax
     882:	66 04 0e             	data16 add $0xe,%al
  vip.port = pckt.flow.port16[1];
     885:	05 1c 06 03 8c       	add    $0x8c03061c,%eax
     88a:	02 58 05             	add    0x5(%rax),%bl
     88d:	14 06                	adc    $0x6,%al
  vip.proto = pckt.flow.proto;
     88f:	3c 05                	cmp    $0x5,%al
     891:	0f 06                	clts
     893:	4b 05 03 59 08 21    	rex.WXB add $0x21085903,%rax
  vip_info = bpf_map_lookup_elem(&vip_map, &vip);
     899:	06                   	(bad)
     89a:	03 f1                	add    %ecx,%esi
     89c:	7d e4                	jge    882 <balancer_ingress+0x882>
     89e:	04 00                	add    $0x0,%al
     8a0:	05 07 06 03 df       	add    $0xdf030607,%eax
     8a5:	05 90 05 12 03       	add    $0x3120590,%eax
     8aa:	ed                   	in     (%dx),%eax
     8ab:	7b 08                	jnp    8b5 <balancer_ingress+0x8b5>
     8ad:	74 05                	je     8b4 <balancer_ingress+0x8b4>
     8af:	20 08                	and    %cl,(%rax)
     8b1:	19 05 13 06 4a 05    	sbb    %eax,0x54a0613(%rip)        # 54a0eca <_license+0x549eae5>
  if (!vip_info) {
     8b7:	1c 06                	sbb    $0x6,%al
     8b9:	4c 05 07 08 a0 06    	rex.WR add $0x6a00807,%rax
  if (data_end - data > MAX_PCKT_SIZE) {
     8bf:	3c 03                	cmp    $0x3,%al
     8c1:	a9 7e 2e 05 12       	test   $0x12052e7e,%eax
     8c6:	06                   	(bad)
     8c7:	03 da                	add    %edx,%ebx
     8c9:	01 9e 05 0a f3 05    	add    %ebx,0x5f30a05(%rsi)
     8cf:	09 06                	or     %eax,(%rsi)
     8d1:	3c 05                	cmp    $0x5,%al
     8d3:	14 06                	adc    $0x6,%al
     8d5:	69 05 10 03 ee 00 4a 	imul   $0x61a054a,0xee0310(%rip),%eax        # ee0bef <_license+0xede80a>
     8dc:	05 1a 06 
  data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     8df:	90                   	nop
     8e0:	05 09 3c 04 10       	add    $0x10043c09,%eax
     8e5:	05 18 06 03 8e       	add    $0x8e030618,%eax
  if (!data_stats) {
     8ea:	7e 66                	jle    952 <balancer_ingress+0x952>
     8ec:	05 32 06 e4 05       	add    $0x5e40632,%eax
     8f1:	09 3c 05 0a 06 32 05 	or     %edi,0x532060a(,%rax,1)
  if ((vip_info->flags & F_HASH_NO_SRC_PORT)) {
     8f8:	09 06                	or     %eax,(%rsi)
     8fa:	e4 04                	in     $0x4,%al
    pckt.flow.port16[0] = 0;
     8fc:	11 05 03 06 03 24    	adc    %eax,0x24030603(%rip)        # 24030f05 <_license+0x2402eb20>
  vip_num = vip_info->vip_num;
     902:	4a d7                	rex.WX xlat %ds:(%rbx)
     904:	05 00 06 03 fd       	add    $0xfd030600,%eax
     909:	7e c8                	jle    8d3 <balancer_ingress+0x8d3>
     90b:	05 07 06 03 89       	add    $0x89030607,%eax
  __u32 cpu_num = bpf_get_smp_processor_id();
     910:	01 c8                	add    %ecx,%eax
     912:	06                   	(bad)
     913:	ba 03 f7 7e 66       	mov    $0x667ef703,%edx
  void* lru_map = bpf_map_lookup_elem(&lru_mapping, &cpu_num);
     918:	04 00                	add    $0x0,%al
     91a:	05 21 06 03 d6       	add    $0xd6030621,%eax
     91f:	02 9e 05 08 f3 05    	add    0x5f30805(%rsi),%bl
    struct lb_stats* lru_stats = bpf_map_lookup_elem(&stats, &lru_stats_key);
     925:	07                   	(bad)
     926:	06                   	(bad)
     927:	3c 05                	cmp    $0x5,%al
     929:	00 03                	add    %al,(%rbx)
     92b:	a9 7d 66 05 0e       	test   $0xe05667d,%eax
     930:	06                   	(bad)
     931:	03 df                	add    %edi,%ebx
     933:	02 58 05             	add    0x5(%rax),%bl
    if (!lru_stats) {
     936:	07                   	(bad)
     937:	06                   	(bad)
     938:	82                   	(bad)
     939:	06                   	(bad)
     93a:	03 f8                	add    %eax,%edi
     93c:	7e 4a                	jle    988 <balancer_ingress+0x988>
    lru_stats->v1 += 1;
     93e:	03 88 01 3c 05 09    	add    0x9053c01(%rax),%ecx
     944:	03 0b                	add    (%rbx),%ecx
     946:	e4 f3                	in     $0xf3,%al
     948:	06                   	(bad)
     949:	3c 04                	cmp    $0x4,%al
     94b:	0c 05                	or     $0x5,%al
     94d:	0e                   	(bad)
     94e:	06                   	(bad)
     94f:	03 f8                	add    %eax,%edi
     951:	7d ac                	jge    8ff <balancer_ingress+0x8ff>
     953:	05 07 03 6a 4a       	add    $0x4a6a0307,%eax
  if (icmp_hdr->code == ICMP_FRAG_NEEDED) {
     958:	05 0e 03 16 2e       	add    $0x2e16030e,%eax
     95d:	05 0b 4c 05 0f       	add    $0xf054c0b,%eax
     962:	06                   	(bad)
     963:	4a 05 07 3c 04 00    	rex.WX add $0x43c07,%rax
        bpf_map_lookup_elem(&stats, &stats_key);
     969:	05 00 03 9b 7f       	add    $0x7f9b0300,%eax
     96e:	66 05 19 06          	add    $0x619,%ax
     972:	03 8d 06 02 31 01    	add    0x1310206(%rbp),%ecx
    if (!icmp_ptb_v4_stats) {
     978:	05 0d 06 4a 05       	add    $0x54a060d,%eax
     97d:	0e                   	(bad)
    icmp_ptb_v4_stats->v1 += 1;
     97e:	06                   	(bad)
     97f:	4d 05 0c 06 58 05    	rex.WRB add $0x558060c,%rax
    if (mtu < MAX_MTU_IN_PTB_TO_DROP) {
     985:	19 06                	sbb    %eax,(%rsi)
     987:	59                   	pop    %rcx
      icmp_ptb_v4_stats->v2 += 1;
     988:	05 0d 06 4a 05       	add    $0x54a060d,%eax
  if (iph + 1 > data_end) {
     98d:	0e                   	(bad)
     98e:	06                   	(bad)
     98f:	4b 05 08 08 ad 05    	rex.WXB add $0x5ad0808,%rax
     995:	07                   	(bad)
     996:	06                   	(bad)
     997:	3c 05                	cmp    $0x5,%al
     999:	10 06                	adc    %al,(%rsi)
  if (iph->ihl != 5) {
     99b:	03 0f                	add    (%rdi),%ecx
     99d:	66 05 17 06          	add    $0x617,%ax
     9a1:	66 05 07 66          	add    $0x6607,%ax
     9a5:	03 de                	add    %esi,%ebx
  pckt->flow.proto = iph->protocol;
     9a7:	79 66                	jns    a0f <balancer_ingress+0xa0f>
     9a9:	05 10 06 03 b6       	add    $0xb6030610,%eax
  pckt->flags |= F_ICMP;
     9ae:	06                   	(bad)
     9af:	9e                   	sahf
     9b0:	05 08 08 13 05       	add    $0x5130808,%eax
  pckt->flow.src = iph->daddr;
     9b5:	07                   	(bad)
     9b6:	06                   	(bad)
     9b7:	3c 05                	cmp    $0x5,%al
  pckt->flow.dst = iph->saddr;
     9b9:	12 06                	adc    (%rsi),%al
     9bb:	6b 05 18 5a 05 07 06 	imul   $0x6,0x7055a18(%rip),%eax        # 70563da <_license+0x7053ff5>
     9c2:	3c 05                	cmp    $0x5,%al
     9c4:	19 06                	sbb    %eax,(%rsi)
    vip.port = 0;
     9c6:	31 05 17 77 05 13    	xor    %eax,0x13057717(%rip)        # 130580e3 <_license+0x13055cfe>
    vip_info = bpf_map_lookup_elem(&vip_map, &vip);
     9cc:	08 21                	or     %ah,(%rcx)
     9ce:	bb 06 58 05 22       	mov    $0x22055806,%ebx
     9d3:	06                   	(bad)
     9d4:	6a 05                	push   $0x5
     9d6:	0a 08                	or     (%rax),%cl
     9d8:	13 05 09 06 3c 05    	adc    0x53c0609(%rip),%eax        # 53c0fe7 <_license+0x53bec02>
    if (!vip_info) {
     9de:	13 06                	adc    (%rsi),%eax
     9e0:	6c                   	insb   (%dx),%es:(%rdi)
     9e1:	06                   	(bad)
     9e2:	03 af 79 d6 06 03    	add    0x306d679(%rdi),%ebp
     9e8:	c6 06 9e             	movb   $0x9e,(%rsi)
    if (!(vip_info->flags & F_HASH_DPORT_ONLY) &&
     9eb:	06                   	(bad)
     9ec:	03 ba 79 2e 03 c6    	add    -0x39fcd187(%rdx),%edi
     9f2:	06                   	(bad)
      pckt.flow.port16[1] = 0;
     9f3:	9e                   	sahf
     9f4:	03 ba 79 82 05 08    	add    0x8058279(%rdx),%edi
     9fa:	06                   	(bad)
     9fb:	03 c7                	add    %edi,%eax
     9fd:	06                   	(bad)
     9fe:	58                   	pop    %rax
  struct address dst_addr = {};
     9ff:	05 07 06 3c 03       	add    $0x33c0607,%eax
     a04:	b9 79 66 05 18       	mov    $0x18056679,%ecx
     a09:	06                   	(bad)
     a0a:	03 d5                	add    %ebp,%edx
     a0c:	06                   	(bad)
     a0d:	82                   	(bad)
     a0e:	05 07 06 3c 05       	add    $0x53c0607,%eax
    dst_addr.addr = pckt->flow.dst;
     a13:	14 06                	adc    $0x6,%al
     a15:	67 05 09 59 06 03    	addr32 add $0x3065909,%eax
  __u32* decap_dst_flags = bpf_map_lookup_elem(&decap_dst, &dst_addr);
     a1b:	a9 79 66 05 0b       	test   $0xb056679,%eax
     a20:	06                   	(bad)
     a21:	03 eb                	add    %ebx,%ebp
     a23:	06                   	(bad)
     a24:	9e                   	sahf
     a25:	05 0c f3 05 0b       	add    $0xb05f30c,%eax
     a2a:	06                   	(bad)
     a2b:	3c 04                	cmp    $0x4,%al
     a2d:	0c 05                	or     $0x5,%al
     a2f:	0d 06 03 f7 7b       	or     $0x7bf70306,%eax
  if (decap_dst_flags) {
     a34:	66 05 12 46          	add    $0x4612,%ax
     a38:	05 0d 5c 05 2b       	add    $0x2b055c0d,%eax
     a3d:	06                   	(bad)
     a3e:	4a 05 3b 4a 05 07    	rex.WX add $0x7054a3b,%rax
    data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     a44:	3c 03                	cmp    $0x3,%al
     a46:	9d                   	popf
     a47:	7d 66                	jge    aaf <balancer_ingress+0xaaf>
     a49:	05 08 06 03 ef       	add    $0xef030608,%eax
     a4e:	02 82 05 26 06 3c    	add    0x3c062605(%rdx),%al
    if (!data_stats) {
     a54:	05 07 3c 05 13       	add    $0x13053c07,%eax
     a59:	06                   	(bad)
     a5a:	03 14 66             	add    (%rsi,%riz,2),%edx
    data_stats->v1 += 1;
     a5d:	05 36 06 4a 05       	add    $0x54a0636,%eax
     a62:	09 3c 04             	or     %edi,(%rsp,%rax,1)
    if ((data + offset + sizeof(struct iphdr)) > data_end) {
     a65:	00 05 0e 06 03 91    	add    %al,-0x6efcf9f2(%rip)        # ffffffff91031079 <ch_rings+0x36ff6e7ac079>
     a6b:	03 ac 05 10 75 05 0a 	add    0xa057510(%rbp,%rax,1),%ebp
     a72:	08 21                	or     %ah,(%rcx)
     a74:	05 09 06 3c 05       	add    $0x53c0609,%eax
    csum = iph->check + 0x0001;
     a79:	00 03                	add    %al,(%rbx)
     a7b:	ea                   	(bad)
     a7c:	79 66                	jns    ae4 <balancer_ingress+0xae4>
    iph->check = (csum & 0xffff) + (csum >> 16);
     a7e:	05 30 06 03 9a       	add    $0x9a030630,%eax
     a83:	06                   	(bad)
     a84:	3c 05                	cmp    $0x5,%al
     a86:	1b 94 06 03 e2 79 ba 	sbb    -0x45861dfd(%rsi,%rax,1),%edx
    if (!--iph->ttl) {
     a8d:	05 25 06 03 df       	add    $0xdf030625,%eax
     a92:	06                   	(bad)
     a93:	9e                   	sahf
     a94:	05 0c 08 13 05       	add    $0x513080c,%eax
     a99:	0b 06                	or     (%rsi),%eax
     a9b:	3c 05                	cmp    $0x5,%al
  memcpy(new_eth->h_source, old_eth->h_source, 6);
     a9d:	16                   	(bad)
     a9e:	06                   	(bad)
     a9f:	69 04 0e 05 14 03 e6 	imul   $0xe6031405,(%rsi,%rcx,1),%eax
     aa6:	7b 58                	jnp    b00 <balancer_ingress+0xb00>
     aa8:	05 37 06 3c 04       	add    $0x43c0637,%eax
  memcpy(new_eth->h_dest, old_eth->h_dest, 6);
     aad:	00 05 0b 06 03 9c    	add    %al,-0x63fcf9f5(%rip)        # ffffffff9c0310be <ch_rings+0x36ff797ac0be>
     ab3:	04 4a                	add    $0x4a,%al
     ab5:	05 15 67 06 03       	add    $0x3066715,%eax
  new_eth->h_proto = BE_ETH_P_IP;
     aba:	9a                   	(bad)
     abb:	79 4a                	jns    b07 <balancer_ingress+0xb07>
     abd:	05 13 06 03 c6       	add    $0xc6030613,%eax
     ac2:	06                   	(bad)
     ac3:	58                   	pop    %rax
  if (XDP_ADJUST_HEAD_FUNC(xdp, (int)sizeof(struct iphdr))) {
     ac4:	06                   	(bad)
     ac5:	03 ba 79 2e 03 c6    	add    -0x39fcd187(%rdx),%edi
     acb:	06                   	(bad)
     acc:	9e                   	sahf
     acd:	03 ba 79 82 05 08    	add    0x8058279(%rdx),%edi
     ad3:	06                   	(bad)
     ad4:	03 c7                	add    %edi,%eax
     ad6:	06                   	(bad)
     ad7:	58                   	pop    %rax
     ad8:	05 07 06 3c 05       	add    $0x53c0607,%eax
     add:	18 06                	sbb    %al,(%rsi)
     adf:	03 0e                	add    (%rsi),%ecx
  struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     ae1:	66 05 07 06          	add    $0x607,%ax
     ae5:	82                   	(bad)
     ae6:	05 14 06 67 05       	add    $0x5670614,%eax
     aeb:	09 59 06             	or     %ebx,0x6(%rcx)
     aee:	03 a9 79 2e 05 0b    	add    0xb052e79(%rcx),%ebp
  if (!data_stats) {
     af4:	06                   	(bad)
     af5:	03 eb                	add    %ebx,%ebp
     af7:	06                   	(bad)
     af8:	9e                   	sahf
     af9:	06                   	(bad)
     afa:	03 95 79 f2 05 0c    	add    0xc05f279(%rbp),%edx
  if (action >= 0) {
     b00:	06                   	(bad)
     b01:	03 ec                	add    %esp,%ebp
     b03:	06                   	(bad)
     b04:	4a 05 0b 06 3c 04    	rex.WX add $0x43c060b,%rax
  if (decap_dst_flags) {
     b0a:	0c 05                	or     $0x5,%al
     b0c:	0d 06 03 f7 7b       	or     $0x7bf70306,%eax
  if (action >= 0) {
     b11:	66 05 12 46          	add    $0x4612,%ax
     b15:	05 0d 5c 05 2b       	add    $0x2b055c0d,%eax
     b1a:	06                   	(bad)
     b1b:	4a 05 3b 4a 05 07    	rex.WX add $0x7054a3b,%rax
        bpf_map_lookup_elem(&stats, &xpop_stats_key);
     b21:	3c 03                	cmp    $0x3,%al
     b23:	9d                   	popf
     b24:	7d 66                	jge    b8c <balancer_ingress+0xb8c>
     b26:	04 00                	add    $0x0,%al
     b28:	05 25 06 03 df       	add    $0xdf030625,%eax
    if (xpop_stats_data) {
     b2d:	06                   	(bad)
     b2e:	74 06                	je     b36 <balancer_ingress+0xb36>
     b30:	03 a1 79 08 12 05    	add    0x5120879(%rcx),%esp
     b36:	0c 06                	or     $0x6,%al
     b38:	03 e0                	add    %eax,%esp
     b3a:	06                   	(bad)
     b3b:	4a 05 0b 06 3c 03    	rex.WX add $0x33c060b,%rax
     b41:	a0 79 66 05 16 06 03 	movabs 0x6e3030616056679,%al
     b48:	e3 06 
     b4a:	4a 04 0e             	rex.WX add $0xe,%al
     b4d:	05 14 03 eb 7b       	add    $0x7beb0314,%eax
     b52:	4a 05 2f 06 3c 04    	rex.WX add $0x43c062f,%rax
     b58:	00 05 0b 06 03 97    	add    %al,-0x68fcf9f5(%rip)        # ffffffff97031169 <ch_rings+0x36ff747ac169>
     b5e:	04 90                	add    $0x90,%al
     b60:	05 15 2f 06 03       	add    $0x3062f15,%eax
     b65:	9a                   	(bad)
        bpf_map_lookup_elem(&stats, &stats_key);
     b66:	79 58                	jns    bc0 <balancer_ingress+0xbc0>
     b68:	05 14 06 03 af       	add    $0xaf030614,%eax
     b6d:	07                   	(bad)
     b6e:	82                   	(bad)
     b6f:	05 1e 03 26 66       	add    $0x6626031e,%eax
     b74:	05 2b 06 58 05       	add    $0x558062b,%eax
    if (!icmp_ptb_v6_stats) {
     b79:	1b 06                	sbb    (%rsi),%eax
     b7b:	2f                   	(bad)
     b7c:	05 09 3b 06 03       	add    $0x3063b09,%eax
    icmp_ptb_v6_stats->v1 += 1;
     b81:	ab                   	stos   %eax,%es:(%rdi)
     b82:	78 2e                	js     bb2 <balancer_ingress+0xbb2>
    __u32 mtu = bpf_ntohl(icmp_hdr->icmp6_mtu);
     b84:	05 0d 06 03 b8       	add    $0xb803060d,%eax
    if (mtu < MAX_MTU_IN_PTB_TO_DROP) {
     b89:	01 08                	add    %ecx,(%rax)
     b8b:	12 05 08 2f 05 07    	adc    0x7052f08(%rip),%al        # 7053a99 <_license+0x70516b4>
      icmp_ptb_v6_stats->v2 += 1;
     b91:	06                   	(bad)
     b92:	3c 05                	cmp    $0x5,%al
     b94:	00 03                	add    %al,(%rbx)
  if (ip6h + 1 > data_end) {
     b96:	c7                   	(bad)
     b97:	7e 2e                	jle    bc7 <balancer_ingress+0xbc7>
     b99:	05 28 06 03 bc       	add    $0xbc030628,%eax
     b9e:	01 3c 05 07 06 58 03 	add    %edi,0x3580607(,%rax,1)
     ba5:	c4                   	(bad)
     ba6:	7e 66                	jle    c0e <balancer_ingress+0xc0e>
  pckt->flow.proto = ip6h->nexthdr;
     ba8:	05 10 06 03 bd       	add    $0xbd030610,%eax
     bad:	01 74 05 12          	add    %esi,0x12(%rbp,%rax,1)
  pckt->flags |= F_ICMP;
     bb1:	2f                   	(bad)
     bb2:	05 23 06 08 12       	add    $0x12080623,%eax
  memcpy(pckt->flow.srcv6, ip6h->daddr.s6_addr32, 16);
     bb7:	05 09 3c 03 c2       	add    $0xc2033c09,%eax
     bbc:	7e 66                	jle    c24 <balancer_ingress+0xc24>
     bbe:	04 0c                	add    $0xc,%al
     bc0:	05 13 06 03 f1       	add    $0xf1030613,%eax
  memcpy(pckt->flow.dstv6, ip6h->saddr.s6_addr32, 16);
     bc5:	02 f2                	add    %dl,%dh
     bc7:	05 35 06 4a 05       	add    $0x54a0635,%eax
     bcc:	09 3c 05 2d 06 69 05 	or     %edi,0x569062d(,%rax,1)
     bd3:	09 06                	or     %eax,(%rsi)
     bd5:	3c 04                	cmp    $0x4,%al
     bd7:	00 05 29 06 03 ac    	add    %al,-0x53fcf9d7(%rip)        # ffffffffac031206 <ch_rings+0x36ff897ac206>
  if (protocol == IPPROTO_IPIP) {
     bdd:	04 66                	add    $0x66,%al
     bdf:	06                   	(bad)
     be0:	03 e0                	add    %eax,%esp
     be2:	78 58                	js     c3c <balancer_ingress+0xc3c>
     be4:	05 07 06 03 80       	add    $0x80030607,%eax
     be9:	05 4a 06 66 03       	add    $0x366064a,%eax
     bee:	80 7b 66 03          	cmpb   $0x3,0x66(%rbx)
     bf2:	80 05 9e 05 08 06 08 	addb   $0x8,0x608059e(%rip)        # 6081197 <_license+0x607edb2>
  struct address dst_addr = {};
     bf9:	13 05 07 06 3c 04    	adc    0x43c0607(%rip),%eax        # 43c1206 <_license+0x43bee21>
     bff:	0c 05                	or     $0x5,%al
     c01:	00 03                	add    %al,(%rbx)
     c03:	ff                   	(bad)
     c04:	7a ac                	jp     bb2 <balancer_ingress+0xbb2>
    dst_addr.addr = pckt->flow.dst;
     c06:	05 08 06 03 ef       	add    $0xef030608,%eax
     c0b:	02 4a 05             	add    0x5(%rdx),%cl
  __u32* decap_dst_flags = bpf_map_lookup_elem(&decap_dst, &dst_addr);
     c0e:	26 06                	es (bad)
     c10:	3c 05                	cmp    $0x5,%al
     c12:	07                   	(bad)
     c13:	3c 05                	cmp    $0x5,%al
     c15:	13 06                	adc    (%rsi),%eax
     c17:	03 14 2e             	add    (%rsi,%rbp,1),%edx
     c1a:	05 36 06 4a 05       	add    $0x54a0636,%eax
     c1f:	09 3c 05 08 06 6b 05 	or     %edi,0x56b0608(,%rax,1)
     c26:	07                   	(bad)
     c27:	06                   	(bad)
     c28:	3c 05                	cmp    $0x5,%al
  if (decap_dst_flags) {
     c2a:	19 06                	sbb    %eax,(%rsi)
     c2c:	6a 05                	push   $0x5
     c2e:	23 06                	and    (%rsi),%eax
     c30:	3c 05                	cmp    $0x5,%al
     c32:	07                   	(bad)
     c33:	06                   	(bad)
     c34:	5a                   	pop    %rdx
     c35:	05 15 08 a2 05       	add    $0x5a20815,%eax
    data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     c3a:	1d 06 3c 05 27       	sbb    $0x27053c06,%eax
     c3f:	4a 05 24 4a 05 3a    	rex.WX add $0x3a054a24,%rax
     c45:	4a 05 44 3c 05 13    	rex.WX add $0x13053c44,%rax
    if (!data_stats) {
     c4b:	06                   	(bad)
     c4c:	03 5f 9e             	add    -0x62(%rdi),%ebx
     c4f:	05 35 06 4a 05       	add    $0x54a0635,%eax
    data_stats->v1 += 1;
     c54:	09 3c 05 2d 06 69 05 	or     %edi,0x569062d(,%rax,1)
    if ((*data + offset) > *data_end) {
     c5b:	09 06                	or     %eax,(%rsi)
     c5d:	3c 03                	cmp    $0x3,%al
     c5f:	8c 7d 66             	mov    %?,0x66(%rbp)
     c62:	04 00                	add    $0x0,%al
     c64:	05 29 06 03 a0       	add    $0xa0030629,%eax
    if ((data + offset + sizeof(struct ipv6hdr)) > data_end) {
     c69:	07                   	(bad)
     c6a:	4a 05 07 03 e0 7d    	rex.WX add $0x7de00307,%rax
     c70:	58                   	pop    %rax
     c71:	06                   	(bad)
     c72:	03 80 7b ac 03 80    	add    -0x7ffc5385(%rax),%eax
     c78:	05 58 03 80 7b       	add    $0x7b800358,%eax
    if (!--ip6h->hop_limit) {
     c7d:	66 03 80 05 08 20 03 	add    0x3200805(%rax),%ax
     c84:	80 7b 08 12          	cmpb   $0x12,0x8(%rbx)
     c88:	05 08 06 03 81       	add    $0x81030608,%eax
     c8d:	05 4a 05 07 06       	add    $0x607054a,%eax
  memcpy(new_eth->h_source, old_eth->h_source, 6);
     c92:	3c 04                	cmp    $0x4,%al
     c94:	0c 05                	or     $0x5,%al
     c96:	23 06                	and    (%rsi),%eax
     c98:	03 fc                	add    %esp,%edi
     c9a:	7d ac                	jge    c48 <balancer_ingress+0xc48>
  memcpy(new_eth->h_dest, old_eth->h_dest, 6);
     c9c:	06                   	(bad)
     c9d:	03 83 7d 4a 05 08    	add    0x8054a7d(%rbx),%eax
     ca3:	06                   	(bad)
     ca4:	03 88 03 c8 05 07    	add    0x705c803(%rax),%ecx
     caa:	06                   	(bad)
     cab:	3c 05                	cmp    $0x5,%al
     cad:	19 06                	sbb    %eax,(%rsi)
     caf:	6a 05                	push   $0x5
     cb1:	23 06                	and    (%rsi),%eax
     cb3:	3c 05                	cmp    $0x5,%al
     cb5:	07                   	(bad)
  if (XDP_ADJUST_HEAD_FUNC(xdp, (int)sizeof(struct ipv6hdr))) {
     cb6:	06                   	(bad)
     cb7:	5a                   	pop    %rdx
     cb8:	05 15 08 a2 05       	add    $0x5a20815,%eax
     cbd:	1d 06 3c 05 27       	sbb    $0x27053c06,%eax
     cc2:	4a 05 24 4a 05 3a    	rex.WX add $0x3a054a24,%rax
     cc8:	4a 05 44 3c 04 00    	rex.WX add $0x43c44,%rax
     cce:	05 14 06 03 af       	add    $0xaf030614,%eax
  struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     cd3:	7e 9e                	jle    c73 <balancer_ingress+0xc73>
     cd5:	05 12 4c 06 03       	add    $0x3064c12,%eax
     cda:	bd 7e 2e 03 c3       	mov    $0xc3032e7e,%ebp
     cdf:	01 3c 05 14 06 67 05 	add    %edi,0x5670614(,%rax,1)
  if (!data_stats) {
     ce6:	0b 4b 06             	or     0x6(%rbx),%ecx
     ce9:	03 bb 7e 4a 03 c5    	add    -0x3afcb582(%rbx),%edi
     cef:	01 9e 03 bb 7e ba    	add    %ebx,-0x458144fd(%rsi)
  if (action >= 0) {
     cf5:	05 1f 06 03 92       	add    $0x9203061f,%eax
     cfa:	05 58 05 2e 06       	add    $0x62e0558,%eax
     cff:	58                   	pop    %rax
     d00:	05 17 06 67 05       	add    $0x5670617,%eax
     d05:	2e 06                	cs (bad)
     d07:	4a 05 07 06 03 97    	rex.WX add $0xffffffff97030607,%rax
     d0d:	7b 66                	jnp    d75 <balancer_ingress+0xd75>
        bpf_map_lookup_elem(&stats, &xpop_stats_key);
     d0f:	05 08 08 13 05       	add    $0x5130808,%eax
     d14:	07                   	(bad)
     d15:	06                   	(bad)
     d16:	3c 03                	cmp    $0x3,%al
     d18:	55                   	push   %rbp
     d19:	66 05 0f 06          	add    $0x60f,%ax
     d1d:	03 2e                	add    (%rsi),%ebp
    if (xpop_stats_data) {
     d1f:	74 05                	je     d26 <balancer_ingress+0xd26>
     d21:	12 32                	adc    (%rdx),%dh
     d23:	05 29 06 74 05       	add    $0x5740629,%eax
     d28:	07                   	(bad)
     d29:	74 05                	je     d30 <balancer_ingress+0xd30>
     d2b:	19 06                	sbb    %eax,(%rsi)
  udp = data + off;
     d2d:	30 75 68             	xor    %dh,0x68(%rbp)
  if (is_ipv6) {
     d30:	05 1d 9f 05 09       	add    $0x9059f1d,%eax
  udp = data + off;
     d35:	06                   	(bad)
  if (udp + 1 > data_end) {
     d36:	66 05 1c 06          	add    $0x61c,%ax
     d3a:	03 dd                	add    %ebp,%ebx
     d3c:	04 2e                	add    $0x2e,%al
     d3e:	05 09 08 75 06       	add    $0x6750809,%eax
     d43:	3c 05                	cmp    $0x5,%al
     d45:	49 06                	rex.WB (bad)
     d47:	2f                   	(bad)
     d48:	05 19 06 58 05       	add    $0x5580619,%eax
     d4d:	0b 06                	or     (%rsi),%eax
     d4f:	59                   	pop    %rcx
     d50:	06                   	(bad)
     d51:	3c 05                	cmp    $0x5,%al
     d53:	27                   	(bad)
     d54:	06                   	(bad)
     d55:	33 05 0d 08 13 06    	xor    0x613080d(%rip),%eax        # 6131568 <_license+0x612f183>
     d5b:	3c 05                	cmp    $0x5,%al
     d5d:	1a 06                	sbb    (%rsi),%al
     d5f:	67 05 0a 03 c8 02    	addr32 add $0x2c8030a,%eax
     d65:	90                   	nop
     d66:	05 09 06 3c 03       	add    $0x33c0609,%eax
     d6b:	99                   	cltd
     d6c:	78 66                	js     dd4 <balancer_ingress+0xdd4>
     d6e:	05 10 06 03 8e       	add    $0x8e030610,%eax
     d73:	08 82 06 58 66 05    	or     %al,0x5665806(%rdx)
    vip.vip = pckt.flow.dst;
     d79:	08 06                	or     %al,(%rsi)
     d7b:	08 13                	or     %dl,(%rbx)
  vip.port = pckt.flow.port16[1];
     d7d:	05 07 06 3c 03       	add    $0x33c0607,%eax
     d82:	f1                   	int1
     d83:	77 66                	ja     deb <balancer_ingress+0xdeb>
     d85:	05 12 06 03 92       	add    $0x92030612,%eax
  vip.proto = pckt.flow.proto;
     d8a:	08 ac 05 15 4b 05 12 	or     %ch,0x12054b15(%rbp,%rax,1)
  vip_info = bpf_map_lookup_elem(&vip_map, &vip);
     d91:	06                   	(bad)
     d92:	3c 05                	cmp    $0x5,%al
     d94:	10 06                	adc    %al,(%rsi)
     d96:	4d 06                	rex.WRB (bad)
     d98:	03 ea                	add    %edx,%ebp
     d9a:	77 08                	ja     da4 <balancer_ingress+0xda4>
     d9c:	12 03                	adc    (%rbx),%al
     d9e:	96                   	xchg   %eax,%esi
     d9f:	08 9e 05 08 06 08    	or     %bl,0x8060805(%rsi)
     da5:	13 05 07 06 3c 05    	adc    0x53c0607(%rip),%eax        # 53c13b2 <_license+0x53befcd>
  if (!vip_info) {
     dab:	12 06                	adc    (%rsi),%al
     dad:	69 4b 05 17 51 05 12 	imul   $0x12055117,0x5(%rbx),%ecx
  if (data_end - data > MAX_PCKT_SIZE) {
     db4:	67 05 07 06 58 04    	addr32 add $0x4580607,%eax
     dba:	11 05 49 06 03 c0    	adc    %eax,-0x3ffcf9b7(%rip)        # ffffffffc0031409 <ch_rings+0x36ff9d7ac409>
     dc0:	78 66                	js     e28 <balancer_ingress+0xe28>
     dc2:	06                   	(bad)
     dc3:	03 9d 7f 66 05 07    	add    0x705667f(%rbp),%ebx
     dc9:	06                   	(bad)
     dca:	03 e6                	add    %esi,%esp
     dcc:	00 74 06 ba          	add    %dh,-0x46(%rsi,%rax,1)
  data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     dd0:	05 1c 06 69 05       	add    $0x569061c,%eax
     dd5:	20 4b 05             	and    %cl,0x5(%rbx)
     dd8:	0e                   	(bad)
     dd9:	4c 05 13 4c 05 1e    	rex.WR add $0x1e054c13,%rax
     ddf:	06                   	(bad)
  if (!data_stats) {
     de0:	3c 03                	cmp    $0x3,%al
     de2:	92                   	xchg   %eax,%edx
     de3:	7f 66                	jg     e4b <balancer_ingress+0xe4b>
     de5:	03 ee                	add    %esi,%ebp
     de7:	00 90 03 92 7f 90    	add    %dl,-0x6f806dfd(%rax)
  data_stats->v1 += 1;
     ded:	05 03 06 03 f1       	add    $0xf1030603,%eax
  if ((vip_info->flags & F_HASH_NO_SRC_PORT)) {
     df2:	00 08                	add    %cl,(%rax)
    pckt.flow.port16[0] = 0;
     df4:	c8 08 2f 05          	enter  $0x2f08,$0x5
     df8:	14 d7                	adc    $0xd7,%al
  vip_num = vip_info->vip_num;
     dfa:	05 1c 68 05 2e       	add    $0x2e05681c,%eax
     dff:	06                   	(bad)
     e00:	4a 04 12             	rex.WX add $0x12,%al
     e03:	05 0c 06 03 45       	add    $0x4503060c,%eax
     e08:	3c 4f                	cmp    $0x4f,%al
     e0a:	05 12 40 05 10       	add    $0x10054012,%eax
  __u32 cpu_num = bpf_get_smp_processor_id();
     e0f:	06                   	(bad)
     e10:	74 05                	je     e17 <balancer_ingress+0xe17>
     e12:	0b 06                	or     (%rsi),%eax
     e14:	4b 05 0e 75 3d 05    	rex.WXB add $0x53d750e,%rax
  void* lru_map = bpf_map_lookup_elem(&lru_mapping, &cpu_num);
     e1a:	0c 3d                	or     $0x3d,%al
     e1c:	04 0f                	add    $0xf,%al
     e1e:	05 0e 03 71 66       	add    $0x6671030e,%eax
    struct lb_stats* lru_stats = bpf_map_lookup_elem(&stats, &lru_stats_key);
     e23:	05 0b 06 e4 05       	add    $0x5e4060b,%eax
     e28:	0e                   	(bad)
     e29:	3c 05                	cmp    $0x5,%al
     e2b:	0b 3c 04             	or     (%rsp,%rax,1),%edi
     e2e:	00 05 1b 06 03 b0    	add    %al,-0x4ffcf9e5(%rip)        # ffffffffb003144f <ch_rings+0x36ff8d7ac44f>
    if (!lru_stats) {
     e34:	07                   	(bad)
     e35:	82                   	(bad)
     e36:	05 0b 06 58 05       	add    $0x558060b,%eax
     e3b:	0d 06 31 05 0e       	or     $0xe053106,%eax
    lru_stats->v1 += 1;
     e40:	08 13                	or     %dl,(%rbx)
     e42:	05 0d 06 3c 06       	add    $0x63c060d,%eax
     e47:	69 05 00 06 03 91 78 	imul   $0x1705ba78,-0x6efcfa00(%rip),%eax        # ffffffff91031451 <ch_rings+0x36ff6e7ac451>
     e4e:	ba 05 17 
     e51:	06                   	(bad)
     e52:	03 de                	add    %esi,%ebx
     e54:	00 58 05             	add    %bl,0x5(%rax)
     e57:	07                   	(bad)
     e58:	03 4c 08 20          	add    0x20(%rax,%rcx,1),%ecx
     e5c:	06                   	(bad)
     e5d:	03 56 08             	add    0x8(%rsi),%edx
     e60:	12 05 08 06 03 2b    	adc    0x2b030608(%rip),%al        # 2b03146e <_license+0x2b02f089>
  void* lru_map = bpf_map_lookup_elem(&lru_mapping, &cpu_num);
     e66:	3c 05                	cmp    $0x5,%al
     e68:	07                   	(bad)
     e69:	06                   	(bad)
     e6a:	3c 03                	cmp    $0x3,%al
     e6c:	55                   	push   %rbp
     e6d:	2e 05 0f 06 03 2e    	cs add $0x2e03060f,%eax
  if (!lru_map) {
     e73:	74 05                	je     e7a <balancer_ingress+0xe7a>
     e75:	12 32                	adc    (%rdx),%dh
     e77:	05 29 06 74 05       	add    $0x5740629,%eax
     e7c:	07                   	(bad)
     e7d:	74 05                	je     e84 <balancer_ingress+0xe84>
  if ((vip_info->flags & F_QUIC_VIP)) {
     e7f:	19 06                	sbb    %eax,(%rsi)
     e81:	30 75 06             	xor    %dh,0x6(%rbp)
     e84:	03 4b 66             	add    0x66(%rbx),%ecx
     e87:	06                   	(bad)
    bool is_icmp = (pckt.flags & F_ICMP);
     e88:	03 37                	add    (%rdi),%esi
     e8a:	4a 05 1d 9f 05 09    	rex.WX add $0x9059f1d,%rax
    if (is_icmp) {
     e90:	06                   	(bad)
     e91:	74 03                	je     e96 <balancer_ingress+0xe96>
     e93:	48                   	rex.W
     e94:	2e 05 19 06 03 88    	cs add $0x88030619,%eax
     e9a:	01 82 05 09 06 3c    	add    %eax,0x3c060905(%rdx)
          bpf_map_lookup_elem(&quic_stats_map, &quic_packets_stats_key);
     ea0:	03 f8                	add    %eax,%edi
     ea2:	7e 2e                	jle    ed2 <balancer_ingress+0xed2>
     ea4:	03 88 01 58 05 1e    	add    0x1e055801(%rax),%ecx
     eaa:	06                   	(bad)
     eab:	6a 05                	push   $0x5
      if (!quic_packets_stats) {
     ead:	1c 06                	sbb    $0x6,%al
     eaf:	58                   	pop    %rax
     eb0:	05 07 06 59 06       	add    $0x6590607,%eax
     eb5:	03 f3                	add    %ebx,%esi
  if ((data + off + sizeof(struct udphdr) + sizeof(__u8)) > data_end) {
     eb7:	7e 08                	jle    ec1 <balancer_ingress+0xec1>
     eb9:	66 04 0d             	data16 add $0xd,%al
  bool is_icmp = (pckt->flags & F_ICMP);
     ebc:	05 05 06 03 e8       	add    $0xe8030605,%eax
  if ((data + off + sizeof(struct udphdr) + sizeof(__u8)) > data_end) {
     ec1:	00 58 05             	add    %bl,0x5(%rax)
     ec4:	03 4c 05 1a          	add    0x1a(%rbp,%rax,1),%ecx
     ec8:	03 9e 7f 82 05 03    	add    0x305827f(%rsi),%ebx
     ece:	03 e2                	add    %edx,%esp
     ed0:	00 58 05             	add    %bl,0x5(%rax)
     ed3:	1a 03                	sbb    (%rbx),%al
     ed5:	9e                   	sahf
     ed6:	7f 4a                	jg     f22 <balancer_ingress+0xf22>
  if ((*pkt_type & QUIC_LONG_HEADER) == QUIC_LONG_HEADER) {
     ed8:	05 03 03 e2 00       	add    $0xe20303,%eax
     edd:	58                   	pop    %rax
     ede:	05 1a 03 9e 7f       	add    $0x7f9e031a,%eax
     ee3:	4a 05 03 03 e2 00    	rex.WX add $0xe20303,%rax
    if (quic_data + sizeof(struct quic_short_header) > data_end) {
     ee9:	58                   	pop    %rax
     eea:	05 1a 03 9e 7f       	add    $0x7f9e031a,%eax
     eef:	4a 05 03 03 e2 00    	rex.WX add $0xe20303,%rax
     ef5:	58                   	pop    %rax
    vip.port = 0;
     ef6:	05 1a 03 9e 7f       	add    $0x7f9e031a,%eax
     efb:	4a 05 03 03 e2 00    	rex.WX add $0xe20303,%rax
    vip_info = bpf_map_lookup_elem(&vip_map, &vip);
     f01:	58                   	pop    %rax
     f02:	05 1a 03 9e 7f       	add    $0x7f9e031a,%eax
     f07:	4a 05 03 03 e2 00    	rex.WX add $0xe20303,%rax
     f0d:	3c 05                	cmp    $0x5,%al
    if (!vip_info) {
     f0f:	1a 03                	sbb    (%rbx),%al
     f11:	9e                   	sahf
     f12:	7f 4a                	jg     f5e <balancer_ingress+0xf5e>
     f14:	05 03 03 e2 00       	add    $0xe20303,%eax
     f19:	3c 06                	cmp    $0x6,%al
    if (!(vip_info->flags & F_HASH_DPORT_ONLY) &&
     f1b:	03 96 7f 2e 04 00    	add    0x42e7f(%rsi),%edx
     f21:	05 30 06 03 8f       	add    $0x8f030630,%eax
      pckt.flow.port16[1] = 0;
     f26:	01 58 06             	add    %ebx,0x6(%rax)
     f29:	03 f1                	add    %ecx,%esi
     f2b:	7e 08                	jle    f35 <balancer_ingress+0xf35>
     f2d:	12 05 22 06 03 90    	adc    -0x6ffcf9de(%rip),%al        # ffffffff90031555 <ch_rings+0x36ff6d7ac555>
     f33:	01 58 05             	add    %ebx,0x5(%rax)
     f36:	15 06 3c 05 2b       	adc    $0x2b053c06,%eax
      struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     f3b:	74 05                	je     f42 <balancer_ingress+0xf42>
     f3d:	10 06                	adc    %al,(%rsi)
     f3f:	30 05 09 67 05 10    	xor    %al,0x10056709(%rip)        # 1005764e <_license+0x10055269>
     f45:	65 06                	gs (bad)
     f47:	03 ee                	add    %esi,%ebp
     f49:	7e 2e                	jle    f79 <balancer_ingress+0xf79>
      if (!data_stats) {
     f4b:	05 0b 06 03 96       	add    $0x9603060b,%eax
     f50:	01 9e 05 09 9f 05    	add    %ebx,0x59f0905(%rsi)
      data_stats->v1 += 1;
     f56:	14 35                	adc    $0x35,%al
     f58:	05 0b 4b 05 07       	add    $0x7054b0b,%eax
        (icmp_hdr->icmp6_code == ICMPV6_ADDR_UNREACH) ||
     f5d:	67 03 a5 7f 2e 05 08 	add    0x8052e7f(%ebp),%esp
      if (ignorable_quic_icmp_code(data, data_end, is_ipv6)) {
     f64:	08 13                	or     %dl,(%rbx)
        data_stats->v2 += 1;
     f66:	05 07 06 3c 06       	add    $0x63c0607,%eax
     f6b:	03 0a                	add    (%rdx),%ecx
     f6d:	ac                   	lods   %ds:(%rsi),%al
     f6e:	05 08 08 13 05       	add    $0x5130808,%eax
     f73:	07                   	(bad)
     f74:	03 d5                	add    %ebp,%edx
     f76:	00 d6                	add    %dl,%dh
     f78:	05 0f 06 66 03       	add    $0x366060f,%eax
  void* lru_map = bpf_map_lookup_elem(&lru_mapping, &cpu_num);
     f7d:	da 7e 2e             	fidivrl 0x2e(%rsi)
     f80:	05 24 03 a6 01       	add    $0x1a60324,%eax
     f85:	58                   	pop    %rax
     f86:	05 34 74 03 da       	add    $0xda037434,%eax
  if (!lru_map) {
     f8b:	7e 90                	jle    f1d <balancer_ingress+0xf1d>
     f8d:	04 11                	add    $0x11,%al
     f8f:	05 07 06 03 3a       	add    $0x3a030607,%eax
  if ((vip_info->flags & F_QUIC_VIP)) {
     f94:	e4 06                	in     $0x6,%al
     f96:	ba 05 1c 06 69       	mov    $0x69061c05,%edx
     f9b:	05 20 4b 05 0f       	add    $0xf054b20,%eax
    bool is_icmp = (pckt.flags & F_ICMP);
     fa0:	4c 05 13 4c 05 1e    	rex.WR add $0x1e054c13,%rax
     fa6:	06                   	(bad)
     fa7:	3c 03                	cmp    $0x3,%al
     fa9:	be 7f 66 03 c2       	mov    $0xc203667f,%esi
     fae:	00 90 03 be 7f d6    	add    %dl,-0x298041fd(%rax)
          bpf_map_lookup_elem(&quic_stats_map, &quic_packets_stats_key);
     fb4:	05 03 06 03 c5       	add    $0xc5030603,%eax
     fb9:	00 9e 08 2f 05 14    	add    %bl,0x14052f08(%rsi)
     fbf:	d7                   	xlat   %ds:(%rbx)
     fc0:	05 00 06 03 b9       	add    $0xb9030600,%eax
      if (!quic_packets_stats) {
     fc5:	7f 66                	jg     102d <balancer_ingress+0x102d>
     fc7:	04 12                	add    $0x12,%al
     fc9:	05 12 06 03 25       	add    $0x25030612,%eax
  if ((data + off + sizeof(struct udphdr) + sizeof(__u8)) > data_end) {
     fce:	58                   	pop    %rax
     fcf:	04 11                	add    $0x11,%al
  bool is_icmp = (pckt->flags & F_ICMP);
     fd1:	05 1d 03 2e 4a       	add    $0x4a2e031d,%eax
  if ((data + off + sizeof(struct udphdr) + sizeof(__u8)) > data_end) {
     fd6:	04 12                	add    $0x12,%al
     fd8:	05 03 4b 05 20       	add    $0x20054b03,%eax
     fdd:	68 05 12 06 58       	push   $0x58061205
     fe2:	05 23 06 67 05       	add    $0x5670623,%eax
     fe7:	15 06 3c 05 11       	adc    $0x11053c06,%eax
     fec:	06                   	(bad)
     fed:	40 05 15 67 05 03    	rex add $0x3056715,%eax
      struct lb_stats* data_stats = bpf_map_lookup_elem(&stats, &stats_key);
     ff3:	4c 04 0c             	rex.WR add $0xc,%al
     ff6:	05 0a 03 bb 02       	add    $0x2bb030a,%eax
     ffb:	08 66 05             	or     %ah,0x5(%rsi)
     ffe:	14 06                	adc    $0x6,%al
    1000:	4a 05 1e 4a 05 28    	rex.WX add $0x28054a1e,%rax
      if (!data_stats) {
    1006:	4a 05 1b 4a 05 32    	rex.WX add $0x32054a1b,%rax
    100c:	3c 05                	cmp    $0x5,%al
    100e:	3c 4a                	cmp    $0x4a,%al
      data_stats->v1 += 1;
    1010:	05 2f 4a 05 45       	add    $0x45054a2f,%eax
        (icmp_hdr->code == ICMP_PORT_UNREACH) ||
    1015:	3c 03                	cmp    $0x3,%al
    1017:	e7 7c                	out    %eax,$0x7c
    1019:	3c 05                	cmp    $0x5,%al
    101b:	19 06                	sbb    %eax,(%rsi)
    101d:	03 95 03 4a 05 23    	add    0x23054a03(%rbp),%edx
        data_stats->v2 += 1;
    1023:	06                   	(bad)
    1024:	4a 05 2d 4a 05 37    	rex.WX add $0x37054a2d,%rax
    102a:	4a 05 2a 4a 05 40    	rex.WX add $0x40054a2a,%rax
  original_sport = pckt.flow.port16[0];
    1030:	3c 03                	cmp    $0x3,%al
    1032:	eb 7c                	jmp    10b0 <balancer_ingress+0x10b0>
    1034:	3c 04                	cmp    $0x4,%al
    if (!dst && !(pckt.flags & F_SYN_SET) &&
    1036:	00 05 19 06 03 f0    	add    %al,-0xffcf9e7(%rip)        # fffffffff0031655 <ch_rings+0x36ffcd7ac655>
        !(vip_info->flags & F_LRU_BYPASS)) {
    103c:	06                   	(bad)
    103d:	82                   	(bad)
    103e:	05 0b 06 2e 05       	add    $0x52e060b,%eax
    1043:	07                   	(bad)
    1044:	06                   	(bad)
    1045:	03 c8                	add    %eax,%ecx
    1047:	7d 66                	jge    10af <balancer_ingress+0x10af>
    1049:	06                   	(bad)
    104a:	03 c8                	add    %eax,%ecx
    104c:	7b 08                	jnp    1056 <balancer_ingress+0x1056>
    104e:	9e                   	sahf
    104f:	05 1a 06 03 a7       	add    $0xa703061a,%eax
  if (!dst_lru) {
    1054:	01 9e 05 09 06 58    	add    %ebx,0x58060905(%rsi)
    105a:	05 19 06 2f 05       	add    $0x52f0619,%eax
  if (!isGlobalLru && pckt->flow.proto == IPPROTO_UDP) {
    105f:	15 5a 05 05 08       	adc    $0x805055a,%eax
    1064:	91                   	xchg   %eax,%ecx
    1065:	05 0b 03 d4 06       	add    $0x6d4030b,%eax
    106a:	4a 06                	rex.WX (bad)
    106c:	03 81 78 58 05 28    	add    0x28055878(%rcx),%eax
    if (cur_time - dst_lru->atime > LRU_UDP_TIMEOUT) {
    1072:	06                   	(bad)
    1073:	03 d5                	add    %ebp,%edx
    1075:	04 f2                	add    $0xf2,%al
    1077:	05 35 06 74 05       	add    $0x5740635,%eax
    107c:	36 06                	ss (bad)
    107e:	59                   	pop    %rcx
    107f:	05 2f 06 4a 05       	add    $0x54a062f,%eax
    1084:	00 03                	add    %al,(%rbx)
    1086:	aa                   	stos   %al,%es:(%rdi)
    1087:	7b 66                	jnp    10ef <balancer_ingress+0x10ef>
    1089:	05 22 06 03 d7       	add    $0xd7030622,%eax
    108e:	04 4a                	add    $0x4a,%al
    1090:	05 1c af 06 74       	add    $0x7406af1c,%eax
    1095:	66 05 0a 06          	add    $0x60a,%ax
    1099:	08 c9                	or     %cl,%cl
    if (quic_data + sizeof(struct quic_long_header) > data_end) {
    109b:	05 09 06 3c 05       	add    $0x53c0609,%eax
    10a0:	14 06                	adc    $0x6,%al
    10a2:	69 06 03 a2 7b 3c    	imul   $0x3c7ba203,(%rsi),%eax
    if ((*pkt_type & QUIC_PACKET_TYPE_MASK) < QUIC_HANDSHAKE) {
    10a8:	05 16 06 03 84       	add    $0x84030616,%eax
    10ad:	08 08                	or     %cl,(%rax)
    10af:	82                   	(bad)
        quic_packets_stats->cid_initial += 1;
    10b0:	04 0c                	add    $0xc,%al
    10b2:	05 23 03 f9 7a       	add    $0x7af90323,%eax
    10b7:	9e                   	sahf
    10b8:	06                   	(bad)
      bpf_map_lookup_elem(&server_id_stats, &vip_num);
    10b9:	03 83 7d 4a 05 08    	add    0x8054a7d(%rbx),%eax
    10bf:	06                   	(bad)
    10c0:	03 88 03 c8 06 03    	add    0x306c803(%rax),%ecx
    10c6:	f8                   	clc
    10c7:	7c d6                	jl     109f <balancer_ingress+0x109f>
    10c9:	04 00                	add    $0x0,%al
    10cb:	05 1b 06 03 f5       	add    $0xf503061b,%eax
    10d0:	06                   	(bad)
    10d1:	08 82 05 0d 59 06    	or     %al,0x6590d05(%rdx)
    10d7:	03 8a 79 2e 05 11    	add    0x11052e79(%rdx),%ecx
    10dd:	06                   	(bad)
    10de:	03 f8                	add    %eax,%edi
  if (!per_vip_stats) {
    10e0:	06                   	(bad)
    10e1:	9e                   	sahf
    10e2:	05 0f 9f 05 1d       	add    $0x1d059f0f,%eax
    10e7:	35 05 13 75 06       	xor    $0x6751305,%eax
    10ec:	66 03 ff             	add    %di,%di
    10ef:	78 4a                	js     113b <balancer_ingress+0x113b>
    10f1:	03 81 07 9e 05 12    	add    0x12059e07(%rcx),%eax
  if ((*pkt_type & QUIC_LONG_HEADER) == QUIC_LONG_HEADER) {
    10f7:	06                   	(bad)
    10f8:	bb 05 11 06 3c       	mov    $0x3c061105,%ebx
    if (quic_data + sizeof(struct quic_short_header) > data_end) {
    10fd:	03 fe                	add    %esi,%edi
    10ff:	78 66                	js     1167 <balancer_ingress+0x1167>
    1101:	05 22 06 03 ea       	add    $0xea030622,%eax
    1106:	04 08                	add    $0x8,%al
  if (!connId) {
    1108:	12 05 07 2f 06 3c    	adc    0x3c062f07(%rip),%al        # 3c064015 <_license+0x3c061c30>
    110e:	05 1f 06 67 05       	add    $0x567061f,%eax
  __u8 connIdVersion = (connId[0] >> 6);
    1113:	16                   	(bad)
    1114:	06                   	(bad)
    1115:	4a 05 09 2e 05 23    	rex.WX add $0x23052e09,%rax
  if (connIdVersion == QUIC_CONNID_VERSION_V1) {
    111b:	06                   	(bad)
    111c:	03 9f 02 66 05 00    	add    0x56602(%rdi),%ebx
    1122:	06                   	(bad)
    1123:	03 f5                	add    %ebp,%esi
    1125:	78 ba                	js     10e1 <balancer_ingress+0x10e1>
    1127:	05 14 06 03 af       	add    $0xaf030614,%eax
    112c:	07                   	(bad)
    112d:	08 3c 05 1e 03 26 90 	or     %bh,-0x6fd9fce2(,%rax,1)
        ((connId[0] & 0x3F) << 10) | (connId[1] << 2) | (connId[2] >> 6);
    1134:	05 2b 06 58 05       	add    $0x558062b,%eax
    1139:	1b 06                	sbb    (%rsi),%eax
    113b:	2f                   	(bad)
    113c:	05 09 3b 06 03       	add    $0x3063b09,%eax
    1141:	ab                   	stos   %eax,%es:(%rdi)
    1142:	78 2e                	js     1172 <balancer_ingress+0x1172>
    1144:	05 0d 06 03 b8       	add    $0xb803060d,%eax
    1149:	01 08                	add    %ecx,(%rax)
    114b:	66 05 08 2f          	add    $0x2f08,%ax
    if (quic_data + sizeof(struct quic_long_header) > data_end) {
    114f:	05 07 06 3c 05       	add    $0x53c0607,%eax
    1154:	00 03                	add    %al,(%rbx)
    1156:	c7                   	(bad)
    1157:	7e 2e                	jle    1187 <balancer_ingress+0x1187>
    1159:	05 28 06 03 bc       	add    $0xbc030628,%eax
    if ((*pkt_type & QUIC_PACKET_TYPE_MASK) < QUIC_HANDSHAKE) {
    115e:	01 3c 05 07 06 58 03 	add    %edi,0x3580607(,%rax,1)
    1165:	c4                   	(bad)
    1166:	7e 2e                	jle    1196 <balancer_ingress+0x1196>
    1168:	05 10 06 03 bd       	add    $0xbd030610,%eax
        quic_packets_stats->cid_initial += 1;
    116d:	01 74 05 12          	add    %esi,0x12(%rbp,%rax,1)
      bpf_map_lookup_elem(&server_id_stats, &vip_num);
    1171:	2f                   	(bad)
    1172:	05 23 06 08 12       	add    $0x12080623,%eax
    1177:	05 09 3c 03 c2       	add    $0xc2033c09,%eax
    117c:	7e 2e                	jle    11ac <balancer_ingress+0x11ac>
    117e:	05 14 06 03 c1       	add    $0xc1030614,%eax
    1183:	01 9e 05 12 4c 06    	add    %ebx,0x64c1205(%rsi)
    1189:	03 bd 7e 3c 03 c3    	add    -0x3cfcc382(%rbp),%edi
    118f:	01 3c 05 14 06 67 05 	add    %edi,0x5670614(,%rax,1)
    1196:	0b 4b 06             	or     0x6(%rbx),%ecx
    1199:	03 bb 7e 4a 03 c5    	add    -0x3afcb582(%rbx),%edi
    119f:	01 9e 03 bb 7e ba    	add    %ebx,-0x458144fd(%rsi)
    11a5:	05 1f 06 03 92       	add    $0x9203061f,%eax
    11aa:	05 66 05 2e 06       	add    $0x62e0566,%eax
  if (!per_vip_stats) {
    11af:	58                   	pop    %rax
    11b0:	05 17 06 67 05       	add    $0x5670617,%eax
    11b5:	2e 06                	cs (bad)
    11b7:	4a 05 07 06 03 97    	rex.WX add $0xffffffff97030607,%rax
    11bd:	7b 66                	jnp    1225 <balancer_ingress+0x1225>
    11bf:	05 08 08 13 05       	add    $0x5130808,%eax
    11c4:	07                   	(bad)
    11c5:	06                   	(bad)
    11c6:	3c 03                	cmp    $0x3,%al
    11c8:	55                   	push   %rbp
    11c9:	66 05 0f 06          	add    $0x60f,%ax
  if (!connId) {
    11cd:	03 2e                	add    (%rsi),%ebp
    11cf:	c8 05 12 32          	enter  $0x1205,$0x32
  __u8 connIdVersion = (connId[0] >> 6);
    11d3:	05 29 06 74 05       	add    $0x5740629,%eax
    11d8:	07                   	(bad)
    11d9:	74 05                	je     11e0 <balancer_ingress+0x11e0>
  if (connIdVersion == QUIC_CONNID_VERSION_V1) {
    11db:	19 06                	sbb    %eax,(%rsi)
    11dd:	30 83 68 05 1d bb    	xor    %al,-0x44e2fa98(%rbx)
    11e3:	05 09 06 ba 05       	add    $0x5ba0609,%eax
    11e8:	1c 06                	sbb    $0x6,%al
    11ea:	03 dd                	add    %ebp,%ebx
    11ec:	04 2e                	add    $0x2e,%al
    11ee:	06                   	(bad)
    11ef:	03 eb                	add    %ebx,%ebp
    11f1:	7a 08                	jp     11fb <balancer_ingress+0x11fb>
    11f3:	74 05                	je     11fa <balancer_ingress+0x11fa>
    11f5:	09 06                	or     %eax,(%rsi)
        ((connId[0] & 0x3F) << 10) | (connId[1] << 2) | (connId[2] >> 6);
    11f7:	03 96 05 66 06 3c    	add    0x3c066605(%rsi),%edx
    11fd:	05 49 06 2f 05       	add    $0x52f0649,%eax
    1202:	19 06                	sbb    %eax,(%rsi)
    1204:	58                   	pop    %rax
    1205:	03 e9                	add    %ecx,%ebp
    1207:	7a 58                	jp     1261 <balancer_ingress+0x1261>
    1209:	05 0b 06 03 98       	add    $0x9803060b,%eax
    120e:	05 66 06 3c 05       	add    $0x53c0666,%eax
    dst_lru->atime = cur_time;
    1213:	27                   	(bad)
    1214:	06                   	(bad)
    1215:	33 05 0d 08 13 06    	xor    0x613080d(%rip),%eax        # 6131a28 <_license+0x612f643>
  key = dst_lru->pos;
    121b:	3c 05                	cmp    $0x5,%al
    121d:	1a 06                	sbb    (%rsi),%al
    121f:	67 05 0a 03 c8 02    	addr32 add $0x2c8030a,%eax
  *real = bpf_map_lookup_elem(&reals, &key);
    1225:	90                   	nop
    1226:	05 09 06 3c 05       	add    $0x53c0609,%eax
    122b:	10 06                	adc    %al,(%rsi)
    122d:	03 27                	add    (%rdi),%esp
    122f:	66 06                	data16 (bad)
    1231:	66 66 05 08 06       	data16 add $0x608,%ax
    1236:	08 13                	or     %dl,(%rbx)
    1238:	05 07 06 3c 03       	add    $0x33c0607,%eax
    123d:	f1                   	int1
    123e:	77 66                	ja     12a6 <balancer_ingress+0x12a6>
    1240:	05 12 06 03 92       	add    $0x92030612,%eax
  if (dst && pckt->flow.proto == IPPROTO_UDP &&
    1245:	08 82 05 15 75 05    	or     %al,0x5751505(%rdx)
    124b:	12 06                	adc    (%rsi),%al
    124d:	3c 05                	cmp    $0x5,%al
      vip_info->flags & F_UDP_FLOW_MIGRATION && !is_under_flood(&cur_time)) {
    124f:	10 06                	adc    %al,(%rsi)
    1251:	4d 06                	rex.WRB (bad)
    1253:	03 ea                	add    %edx,%ebp
    1255:	77 08                	ja     125f <balancer_ingress+0x125f>
    1257:	12 03                	adc    (%rbx),%al
      bpf_map_lookup_elem(&stats, &conn_rate_key);
    1259:	96                   	xchg   %eax,%esi
    125a:	08 9e 05 08 06 08    	or     %bl,0x8060805(%rsi)
    1260:	13 05 07 06 3c 05    	adc    0x53c0607(%rip),%eax        # 53c186d <_license+0x53bf488>
    1266:	12 06                	adc    (%rsi),%al
    1268:	69 4b 05 17 89 05 12 	imul   $0x12058917,0x5(%rbx),%ecx
  if (!conn_rate_stats) {
    126f:	59                   	pop    %rcx
    1270:	05 07 06 58 04       	add    $0x4580607,%eax
    1275:	11 05 49 06 03 c0    	adc    %eax,-0x3ffcf9b7(%rip)        # ffffffffc00318c4 <ch_rings+0x36ff9d7ac8c4>
  *cur_time = bpf_ktime_get_ns();
    127b:	78 66                	js     12e3 <balancer_ingress+0x12e3>
  if ((*cur_time - conn_rate_stats->v2) > ONE_SEC) {
    127d:	06                   	(bad)
    127e:	03 9d 7f 58 05 07    	add    0x705587f(%rbp),%ebx
    1284:	06                   	(bad)
    1285:	03 e6                	add    %esi,%esp
    1287:	00 74 06 ba          	add    %dh,-0x46(%rsi,%rax,1)
    128b:	05 1c 06 69 05       	add    $0x569061c,%eax
    conn_rate_stats->v1 = 1;
    1290:	20 4b 05             	and    %cl,0x5(%rbx)
    conn_rate_stats->v2 = *cur_time;
    1293:	0e                   	(bad)
    1294:	4c 05 13 4c 05 1e    	rex.WR add $0x1e054c13,%rax
    conn_rate_stats->v1 += 1;
    129a:	06                   	(bad)
    129b:	3c 03                	cmp    $0x3,%al
    129d:	92                   	xchg   %eax,%edx
    129e:	7f 66                	jg     1306 <balancer_ingress+0x1306>
    12a0:	03 ee                	add    %esi,%ebp
    12a2:	00 90 03 92 7f 90    	add    %dl,-0x6f806dfd(%rax)
    if (conn_rate_stats->v1 > MAX_CONN_RATE) {
    12a8:	05 03 06 03 f1       	add    $0xf1030603,%eax
    void* down_reals_map = bpf_map_lookup_elem(&vip_to_down_reals_map, vip);
    12ad:	00 08                	add    %cl,(%rax)
    12af:	ba 08 2f 05 14       	mov    $0x14052f08,%edx
    12b4:	d7                   	xlat   %ds:(%rbx)
    12b5:	05 1c 68 05 2e       	add    $0x2e05681c,%eax
    12ba:	06                   	(bad)
    12bb:	4a 04 12             	rex.WX add $0x12,%al
    12be:	05 0c 06 03 45       	add    $0x4503060c,%eax
    if (down_reals_map) {
    12c3:	3c 4f                	cmp    $0x4f,%al
    12c5:	05 12 40 05 10       	add    $0x10054012,%eax
      void* down_real = real_bpf_map_lookup_elem(down_reals_map, &pckt->real_index);
    12ca:	06                   	(bad)
    12cb:	90                   	nop
    12cc:	05 0b 06 59 05       	add    $0x559060b,%eax
    12d1:	0e                   	(bad)
      if (down_real) {
    12d2:	75 3d                	jne    1311 <balancer_ingress+0x1311>
    12d4:	05 0c 3d 04 0f       	add    $0xf043d0c,%eax
        struct lb_stats* stats_data = bpf_map_lookup_elem(&stats, &stats_key);
    12d9:	05 0e 03 71 66       	add    $0x6671030e,%eax
    12de:	05 0b 06 e4 05       	add    $0x5e4060b,%eax
    12e3:	0e                   	(bad)
    12e4:	3c 05                	cmp    $0x5,%al
    12e6:	0b 3c 04             	or     (%rsp,%rax,1),%edi
        if (stats_data) {
    12e9:	00 05 00 03 48 3c    	add    %al,0x3c480300(%rip)        # 3c4815ef <_license+0x3c47f20a>
    12ef:	05 1b 06 03 e8       	add    $0xe803061b,%eax
          stats_data->v1 += 1;
    12f4:	07                   	(bad)
    12f5:	02 7d 01             	add    0x1(%rbp),%bh
    12f8:	05 0b 06 58 05       	add    $0x558060b,%eax
    if (!dst) {
    12fd:	0d 06 31 05 0e       	or     $0xe053106,%eax
    1302:	08 13                	or     %dl,(%rbx)
    1304:	05 0d 06 3c 06       	add    $0x63c060d,%eax
    1309:	69 05 00 06 03 91 78 	imul   $0x1705ba78,-0x6efcfa00(%rip),%eax        # ffffffff91031913 <ch_rings+0x36ff6e7ac913>
    1310:	ba 05 17 
  data_stats = bpf_map_lookup_elem(&stats, &vip_num);
    1313:	06                   	(bad)
    1314:	03 de                	add    %esi,%ebx
    1316:	00 90 05 07 03 4c    	add    %dl,0x4c030705(%rax)
    131c:	08 20                	or     %ah,(%rax)
    131e:	06                   	(bad)
    131f:	03 56 08             	add    0x8(%rsi),%edx
    1322:	12 05 08 06 03 2b    	adc    0x2b030608(%rip),%al        # 2b031930 <_license+0x2b02f54b>
  if (!data_stats) {
    1328:	3c 05                	cmp    $0x5,%al
    132a:	07                   	(bad)
    132b:	06                   	(bad)
    132c:	3c 03                	cmp    $0x3,%al
    132e:	55                   	push   %rbp
    132f:	2e 05 0f 06 03 2e    	cs add $0x2e03060f,%eax
    1335:	9e                   	sahf
    1336:	05 12 32 05 29       	add    $0x29053212,%eax
  data_stats->v1 += 1;
    133b:	06                   	(bad)
    133c:	74 05                	je     1343 <balancer_ingress+0x1343>
    133e:	07                   	(bad)
  data_stats->v2 += pkt_bytes;
    133f:	74 05                	je     1346 <balancer_ingress+0x1346>
    1341:	19 06                	sbb    %eax,(%rsi)
    1343:	30 75 06             	xor    %dh,0x6(%rbp)
  data_stats = bpf_map_lookup_elem(&reals_stats, &pckt.real_index);
    1346:	03 4b 66             	add    0x66(%rbx),%ecx
    1349:	06                   	(bad)
    134a:	03 37                	add    (%rdi),%esi
    134c:	4a 05 1d 9f 05 09    	rex.WX add $0x9059f1d,%rax
    1352:	06                   	(bad)
    1353:	74 03                	je     1358 <balancer_ingress+0x1358>
    1355:	48                   	rex.W
    1356:	2e 05 19 06 03 88    	cs add $0x88030619,%eax
    135c:	01 66 05             	add    %esp,0x5(%rsi)
    135f:	09 06                	or     %eax,(%rsi)
    1361:	3c 03                	cmp    $0x3,%al
    1363:	f8                   	clc
    1364:	7e 2e                	jle    1394 <balancer_ingress+0x1394>
    1366:	04 0d                	add    $0xd,%al
    1368:	05 0a 06 03 3f       	add    $0x3f03060a,%eax
    136d:	74 4b                	je     13ba <balancer_ingress+0x13ba>
    136f:	05 11 03 17 4a       	add    $0x4a170311,%eax
  if (!data_stats) {
    1374:	5a                   	pop    %rdx
    1375:	5a                   	pop    %rdx
    1376:	05 0c 5a 06 03       	add    $0x3065a0c,%eax
  data_stats->v1 += 1;
    137b:	a3 7f 74 04 00 05 1e 	movabs %eax,0x3061e050004747f
    1382:	06 03 
  pckt.flow.port16[0] = original_sport;
    1384:	8c 01                	mov    %es,(%rcx)
    1386:	3c 05                	cmp    $0x5,%al
    1388:	1c 06                	sbb    $0x6,%al
  if (dst->flags & F_IPV6) {
    138a:	58                   	pop    %rax
    138b:	05 07 06 59 04       	add    $0x4590607,%eax
    1390:	0d 03 b3 7f 02       	or     $0x27fb303,%eax
  __u32 ip_src = create_encap_ipv4_src(pckt->flow.port16[0], pckt->flow.src);
    1395:	23 01                	and    (%rcx),%eax
    1397:	05 05 67 05 1a       	add    $0x1a056705,%eax
    139c:	03 47 2e             	add    0x2e(%rdi),%eax
    139f:	05 05 03 39 3c       	add    $0x3c390305,%eax
  if (XDP_ADJUST_HEAD_FUNC(xdp, 0 - (int)sizeof(struct iphdr))) {
    13a4:	05 07 2c 05 05       	add    $0x5052c07,%eax
    13a9:	84 05 1a 03 47 9e    	test   %al,-0x61b8fce6(%rip)        # ffffffff9e4716c9 <ch_rings+0x36ff7bbec6c9>
    13af:	05 05 03 39 58       	add    $0x58390305,%eax
  data = (void*)(long)xdp->data;
    13b4:	05 1a 03 47 4a       	add    $0x4a47031a,%eax
  data_end = (void*)(long)xdp->data_end;
    13b9:	05 05 03 39 58       	add    $0x58390305,%eax
  iph = data + sizeof(struct ethhdr);
    13be:	05 1a 03 47 82       	add    $0x8247031a,%eax
  if (new_eth + 1 > data_end || old_eth + 1 > data_end || iph + 1 > data_end) {
    13c3:	05 05 03 39 58       	add    $0x58390305,%eax
    13c8:	05 1a 03 47 66       	add    $0x6647031a,%eax
    13cd:	05 05 03 39 58       	add    $0x58390305,%eax
    13d2:	05 1a 03 47 66       	add    $0x6647031a,%eax
    13d7:	05 05 03 39 74       	add    $0x74390305,%eax
    13dc:	05 0c 03 16 2e       	add    $0x2e16030c,%eax
    13e1:	05 16 06 4a 05       	add    $0x54a0616,%eax
    13e6:	0c 06                	or     $0x6,%al
    13e8:	3e 05 16 06 4a 05    	ds add $0x54a0616,%eax
    13ee:	09 06                	or     %eax,(%rsi)
    13f0:	3a 05 0c 32 05 16    	cmp    0x1605320c(%rip),%al        # 16054602 <_license+0x1605221d>
    13f6:	06                   	(bad)
    13f7:	4a 05 09 06 3a 05    	rex.WX add $0x53a0609,%rax
  memcpy(new_eth->h_dest, cval->mac, 6);
    13fd:	0c 32                	or     $0x32,%al
    13ff:	05 09 48 30 05       	add    $0x5304809,%eax
    1404:	05 03 64 2e 05       	add    $0x52e6403,%eax
    1409:	07                   	(bad)
    140a:	03 1d 2e 05 1a 03    	add    0x31a052e(%rip),%ebx        # 31a193e <_license+0x319f559>
  memcpy(new_eth->h_source, old_eth->h_dest, 6);
    1410:	aa                   	stos   %al,%es:(%rdi)
    1411:	7f 3c                	jg     144f <balancer_ingress+0x144f>
    1413:	05 07 03 d6 00       	add    $0xd60307,%eax
    1418:	58                   	pop    %rax
  new_eth->h_proto = BE_ETH_P_IP;
    1419:	05 1a 03 aa 7f       	add    $0x7faa031a,%eax
    141e:	4a 05 07 03 d6 00    	rex.WX add $0xd60307,%rax
  create_v4_hdr(iph, pckt->tos, ip_src, dst->dst, pkt_bytes, IPPROTO_IPIP);
    1424:	58                   	pop    %rax
    1425:	05 1a 03 aa 7f       	add    $0x7faa031a,%eax
  iph->tos = tos;
    142a:	4a 05 07 03 d6 00    	rex.WX add $0xd60307,%rax
  iph->tot_len = bpf_htons(pkt_bytes + sizeof(struct iphdr));
    1430:	58                   	pop    %rax
    1431:	05 1a 03 aa 7f       	add    $0x7faa031a,%eax
    1436:	4a 05 07 03 d6 00    	rex.WX add $0xd60307,%rax
  iph->id = 0;
    143c:	58                   	pop    %rax
    143d:	05 1a 03 aa 7f       	add    $0x7faa031a,%eax
  iph->saddr = saddr;
    1442:	4a 05 07 03 d6 00    	rex.WX add $0xd60307,%rax
  iph->ttl = DEFAULT_TTL;
    1448:	58                   	pop    %rax
    1449:	05 1a 03 aa 7f       	add    $0x7faa031a,%eax
    144e:	4a 05 07 03 d6 00    	rex.WX add $0xd60307,%rax
    1454:	3c 05                	cmp    $0x5,%al
    1456:	1a 03                	sbb    (%rbx),%al
    1458:	aa                   	stos   %al,%es:(%rdi)
    1459:	7f 4a                	jg     14a5 <balancer_ingress+0x14a5>
    145b:	05 05 03 df 00       	add    $0xdf0305,%eax
    1460:	3c 75                	cmp    $0x75,%al
    1462:	49 05 03 69 05 1a    	rex.WB add $0x1a056903,%rax
      if (pckt.flow.proto == IPPROTO_TCP) {
    1468:	03 9e 7f 82 05 03    	add    0x305827f(%rsi),%ebx
    146e:	03 e2                	add    %edx,%esp
            bpf_map_lookup_elem(&stats, &lru_stats_key);
    1470:	00 58 05             	add    %bl,0x5(%rax)
    1473:	1a 03                	sbb    (%rbx),%al
    1475:	9e                   	sahf
    1476:	7f 4a                	jg     14c2 <balancer_ingress+0x14c2>
    1478:	05 03 03 e2 00       	add    $0xe20303,%eax
    147d:	58                   	pop    %rax
    147e:	05 1a 03 9e 7f       	add    $0x7f9e031a,%eax
        if (!lru_stats) {
    1483:	4a 05 03 03 e2 00    	rex.WX add $0xe20303,%rax
        if (pckt.flags & F_SYN_SET) {
    1489:	58                   	pop    %rax
    148a:	05 1a 03 9e 7f       	add    $0x7f9e031a,%eax
    148f:	4a 05 03 03 e2 00    	rex.WX add $0xe20303,%rax
    1495:	58                   	pop    %rax
    1496:	05 1a 03 9e 7f       	add    $0x7f9e031a,%eax
  struct real_pos_lru new_dst_lru = {};
    149b:	4a 05 03 03 e2 00    	rex.WX add $0xe20303,%rax
    14a1:	58                   	pop    %rax
    14a2:	05 1a 03 9e 7f       	add    $0x7f9e031a,%eax
    14a7:	4a 05 03 03 e2 00    	rex.WX add $0xe20303,%rax
      bpf_map_lookup_elem(&stats, &conn_rate_key);
    14ad:	3c 05                	cmp    $0x5,%al
    14af:	1a 03                	sbb    (%rbx),%al
    14b1:	9e                   	sahf
    14b2:	7f 4a                	jg     14fe <balancer_ingress+0x14fe>
    14b4:	05 03 03 e2 00       	add    $0xe20303,%eax
    14b9:	3c 06                	cmp    $0x6,%al
    14bb:	03 96 7f 2e 04 00    	add    0x42e7f(%rsi),%edx
  if (!conn_rate_stats) {
    14c1:	05 30 06 03 8f       	add    $0x8f030630,%eax
    14c6:	01 58 05             	add    %ebx,0x5(%rax)
    14c9:	22 08                	and    (%rax),%cl
    14cb:	13 05 15 06 4a 05    	adc    0x54a0615(%rip),%eax        # 54a1ae6 <_license+0x549f701>
  if ((*cur_time - conn_rate_stats->v2) > ONE_SEC) {
    14d1:	2b 74 05 10          	sub    0x10(%rbp,%rax,1),%esi
    14d5:	06                   	(bad)
    14d6:	30 05 09 67 05 10    	xor    %al,0x10056709(%rip)        # 10057be5 <_license+0x10055800>
    14dc:	2d 06 03 ee 7e       	sub    $0x7eee0306,%eax
    conn_rate_stats->v1 = 1;
    14e1:	2e 05 0b 06 03 96    	cs add $0x9603060b,%eax
    conn_rate_stats->v2 = *cur_time;
    14e7:	01 9e 05 09 9f 05    	add    %ebx,0x59f0905(%rsi)
    14ed:	14 35                	adc    $0x35,%al
    conn_rate_stats->v1 += 1;
    14ef:	05 0b 4b 05 07       	add    $0x7054b0b,%eax
    14f4:	67 03 a5 7f 2e 05 08 	add    0x8052e7f(%ebp),%esp
    if (conn_rate_stats->v1 > MAX_CONN_RATE) {
    14fb:	08 13                	or     %dl,(%rbx)
    14fd:	05 07 06 3c 06       	add    $0x63c0607,%eax
    1502:	03 0a                	add    (%rdx),%ecx
    1504:	4a 05 08 08 13 05    	rex.WX add $0x5130808,%rax
    if (vip_info->flags & F_HASH_DPORT_ONLY) {
    150a:	07                   	(bad)
    150b:	06                   	(bad)
    150c:	3c 05                	cmp    $0x5,%al
    150e:	00 03                	add    %al,(%rbx)
    1510:	af                   	scas   %es:(%rdi),%eax
    1511:	7f 2e                	jg     1541 <balancer_ingress+0x1541>
    1513:	05 01 06 03 c8       	add    $0xc8030601,%eax
    1518:	08 c8                	or     %cl,%al
      pckt->flow.port16[0] = pckt->flow.port16[1];
    151a:	05 07 03 de 78       	add    $0x78de0307,%eax
    151f:	08 3c 05 0f 06 66 05 	or     %bh,0x566060f(,%rax,1)
      memset(pckt->flow.srcv6, 0, 16);
    1526:	24 2e                	and    $0x2e,%al
    1528:	05 34 82 03 da       	add    $0xda038234,%eax
    152d:	7e 90                	jle    14bf <balancer_ingress+0x14bf>
    152f:	04 11                	add    $0x11,%al
    1531:	05 07 06 03 3a       	add    $0x3a030607,%eax
    1536:	d6                   	(bad)
    1537:	06                   	(bad)
    1538:	ba 05 1c 06 31       	mov    $0x31061c05,%edx
    153d:	05 20 4b 05 0f       	add    $0xf054b20,%eax
  b += initval;
    1542:	4c 05 13 4c 05 1e    	rex.WR add $0x1e054c13,%rax
  __jhash_final(a, b, c);
    1548:	06                   	(bad)
    1549:	3c 03                	cmp    $0x3,%al
    154b:	be 7f 2e 03 c2       	mov    $0xc2032e7f,%esi
  return (word << shift) | (word >> ((-shift) & 31));
    1550:	00 90 03 be 7f 58    	add    %dl,0x587fbe03(%rax)
    1556:	05 03 06 03 c5       	add    $0xc5030603,%eax
  __jhash_final(a, b, c);
    155b:	00 9e 08 2f 05 14    	add    %bl,0x14052f08(%rsi)
  return (word << shift) | (word >> ((-shift) & 31));
    1561:	d7                   	xlat   %ds:(%rbx)
    1562:	05 00 06 03 b9       	add    $0xb9030600,%eax
    1567:	7f 66                	jg     15cf <balancer_ingress+0x15cf>
    1569:	04 12                	add    $0x12,%al
    156b:	05 12 06 03 25       	add    $0x25030612,%eax
    1570:	58                   	pop    %rax
    1571:	04 11                	add    $0x11,%al
    1573:	05 1d 03 27 4a       	add    $0x4a27031d,%eax
  __jhash_final(a, b, c);
    1578:	51                   	push   %rcx
  return (word << shift) | (word >> ((-shift) & 31));
    1579:	04 12                	add    $0x12,%al
    157b:	05 03 4b 05 20       	add    $0x20054b03,%eax
    1580:	68 05 12 06 58       	push   $0x58061205
    1585:	05 23 06 67 05       	add    $0x5670623,%eax
    hash = get_packet_hash(pckt, hash_16bytes) % RING_SIZE;
    158a:	15 06 3c 05 11       	adc    $0x11053c06,%eax
    158f:	06                   	(bad)
    1590:	40 05 17 67 05 15    	rex add $0x15056717,%eax
    1596:	06                   	(bad)
    1597:	58                   	pop    %rax
    1598:	05 03 06 5a 04       	add    $0x45a0603,%eax
    159d:	00 05 00 06 03 a2    	add    %al,-0x5dfcfa00(%rip)        # ffffffffa2031ba3 <ch_rings+0x36ff7f7acba3>
    key = RING_SIZE * (vip_info->vip_num) + hash;
    15a3:	7f 08                	jg     15ad <balancer_ingress+0x15ad>
    15a5:	20 05 1a 06 03 a7    	and    %al,-0x58fcf9e6(%rip)        # ffffffffa7031bc5 <ch_rings+0x36ff847acbc5>
    15ab:	01 08                	add    %ecx,(%rax)
    real_pos = bpf_map_lookup_elem(&ch_rings, &key);
    15ad:	3c 05                	cmp    $0x5,%al
    15af:	09 06                	or     %eax,(%rsi)
    15b1:	58                   	pop    %rax
    if (!real_pos) {
    15b2:	05 19 06 2f 05       	add    $0x52f0619,%eax
    15b7:	15 5a 05 05 08       	adc    $0x805055a,%eax
    15bc:	91                   	xchg   %eax,%ecx
    15bd:	05 0b 03 d4 06       	add    $0x6d4030b,%eax
    15c2:	4a 06                	rex.WX (bad)
    key = *real_pos;
    15c4:	03 81 78 4a 05 1a    	add    0x1a054a78(%rcx),%eax
    15ca:	06                   	(bad)
    15cb:	03 d0                	add    %eax,%edx
    15cd:	04 9e                	add    $0x9e,%al
    if (key == 0) {
    15cf:	05 36 06 82 05       	add    $0x5820636,%eax
  *real = bpf_map_lookup_elem(&reals, &key);
    15d4:	47                   	rex.RXB
    15d5:	4a 05 1a 06 2f 05    	rex.WX add $0x52f061a,%rax
  if (!(*real)) {
    15db:	36 06                	ss (bad)
      bpf_map_lookup_elem(&stats, &ch_drop_stats_key);
    15dd:	66 05 47 4a          	add    $0x4a47,%ax
    15e1:	05 1a 06 2f 05       	add    $0x52f061a,%eax
    15e6:	36 06                	ss (bad)
    15e8:	66 05 47 4a          	add    $0x4a47,%ax
    15ec:	05 00 03 ae 7b       	add    $0x7bae0300,%eax
  if (!ch_drop_stats) {
    15f1:	2e 05 28 06 03 d5    	cs add $0xd5030628,%eax
    15f7:	04 c8                	add    $0xc8,%al
    15f9:	05 35 06 74 05       	add    $0x5740635,%eax
      bpf_map_lookup_elem(&stats, &ch_drop_stats_key);
    15fe:	36 06                	ss (bad)
    1600:	59                   	pop    %rcx
    1601:	05 2f 06 4a 05       	add    $0x54a062f,%eax
    1606:	22 06                	and    (%rsi),%al
    1608:	67 05 1c cb 06 58    	addr32 add $0x5806cb1c,%eax
  if (!ch_drop_stats) {
    160e:	66 03 a6 7b 2e 03 da 	add    -0x25fcd185(%rsi),%sp
    1615:	04 9e                	add    $0x9e,%al
    1617:	05 0a 06 08 13       	add    $0x1308060a,%eax
  if (lru_map && !(vip_info->flags & F_LRU_BYPASS) && !under_flood) {
    161c:	05 09 06 3c 05       	add    $0x53c0609,%eax
    1621:	14 06                	adc    $0x6,%al
    1623:	69 06 03 a2 7b 3c    	imul   $0x3c7ba203,(%rsi),%eax
    1629:	05 16 06 03 84       	add    $0x84030616,%eax
    162e:	08 02                	or     %al,(%rdx)
    1630:	28 01                	sub    %al,(%rcx)
    1632:	05 10 03 0a 90       	add    $0x900a0310,%eax
    1637:	06                   	(bad)
    1638:	66 04 0c             	data16 add $0xc,%al
    163b:	05 0a 06 03 8b       	add    $0x8b03060a,%eax
    1640:	7b ac                	jnp    15ee <balancer_ingress+0x15ee>
    1642:	05 14 06 4a 05       	add    $0x54a0614,%eax
  if (XDP_ADJUST_HEAD_FUNC(xdp, 0 - (int)sizeof(struct ipv6hdr))) {
    1647:	1e                   	(bad)
    1648:	4a 05 28 4a 05 1b    	rex.WX add $0x1b054a28,%rax
    164e:	4a 05 32 3c 05 3c    	rex.WX add $0x3c053c32,%rax
    1654:	4a 05 2f 4a 05 45    	rex.WX add $0x45054a2f,%rax
  data = (void*)(long)xdp->data;
    165a:	3c 03                	cmp    $0x3,%al
  data_end = (void*)(long)xdp->data_end;
    165c:	e7 7c                	out    %eax,$0x7c
    165e:	3c 05                	cmp    $0x5,%al
  ip6h = data + sizeof(struct ethhdr);
    1660:	19 06                	sbb    %eax,(%rsi)
    1662:	03 95 03 4a 05 23    	add    0x23054a03(%rbp),%edx
  if (new_eth + 1 > data_end || old_eth + 1 > data_end || ip6h + 1 > data_end) {
    1668:	06                   	(bad)
    1669:	4a 05 2d 4a 05 37    	rex.WX add $0x37054a2d,%rax
    166f:	4a 05 2a 4a 05 40    	rex.WX add $0x40054a2a,%rax
    1675:	3c 03                	cmp    $0x3,%al
    1677:	eb 7c                	jmp    16f5 <balancer_ingress+0x16f5>
    1679:	3c 04                	cmp    $0x4,%al
    167b:	00 05 19 06 03 f0    	add    %al,-0xffcf9e7(%rip)        # fffffffff0031c9a <ch_rings+0x36ffcd7acc9a>
    1681:	06                   	(bad)
    1682:	82                   	(bad)
    1683:	05 0b 06 2e 05       	add    $0x52e060b,%eax
    1688:	07                   	(bad)
    1689:	06                   	(bad)
    168a:	03 c8                	add    %eax,%ecx
    168c:	7d 66                	jge    16f4 <balancer_ingress+0x16f4>
  memcpy(new_eth->h_dest, cval->mac, 6);
    168e:	06                   	(bad)
    168f:	03 c8                	add    %eax,%ecx
    1691:	7b e4                	jnp    1677 <balancer_ingress+0x1677>
    1693:	05 3c 06 03 84       	add    $0x8403063c,%eax
    1698:	07                   	(bad)
    1699:	74 05                	je     16a0 <balancer_ingress+0x16a0>
    169b:	07                   	(bad)
    169c:	03 a6 79 9e 05 08    	add    0x8059e79(%rsi),%esp
  memcpy(new_eth->h_source, old_eth->h_dest, 6);
    16a2:	08 13                	or     %dl,(%rbx)
    16a4:	05 07 06 3c 03       	add    $0x33c0607,%eax
    16a9:	55                   	push   %rbp
    16aa:	66 05 0f 06          	add    $0x60f,%ax
    16ae:	03 2e                	add    (%rsi),%ebp
  new_eth->h_proto = BE_ETH_P_IPV6;
    16b0:	74 05                	je     16b7 <balancer_ingress+0x16b7>
    16b2:	12 32                	adc    (%rdx),%dh
    16b4:	05 29 06 74 05       	add    $0x5740629,%eax
    16b9:	07                   	(bad)
  saddr[3] = src ^ port;
    16ba:	74 05                	je     16c1 <balancer_ingress+0x16c1>
    16bc:	19 06                	sbb    %eax,(%rsi)
  create_v6_hdr(ip6h, pckt->tos, saddr, dst->dstv6, payload_len, proto);
    16be:	68 75 06 03 4b       	push   $0x4b030675
  memset(ip6h->flow_lbl, 0, sizeof(ip6h->flow_lbl));
    16c3:	90                   	nop
    16c4:	05 1b 06 03 f5       	add    $0xf503061b,%eax
  ip6h->priority = (tc & 0xF0) >> 4;
    16c9:	06                   	(bad)
    16ca:	08 ac 05 0d 59 06 03 	or     %ch,0x306590d(%rbp,%rax,1)
    16d1:	8a 79 2e             	mov    0x2e(%rcx),%bh
  ip6h->flow_lbl[0] = (tc & 0x0F) << 4;
    16d4:	05 11 06 03 f8       	add    $0xf8030611,%eax
  ip6h->nexthdr = proto;
    16d9:	06                   	(bad)
    16da:	9e                   	sahf
    16db:	05 0f 9f 05 1d       	add    $0x1d059f0f,%eax
  ip6h->payload_len = bpf_htons(payload_len);
    16e0:	35 05 13 75 06       	xor    $0x6751305,%eax
  memcpy(ip6h->saddr.s6_addr32, saddr, 16);
    16e5:	66 03 ff             	add    %di,%di
    16e8:	78 4a                	js     1734 <balancer_ingress+0x1734>
    16ea:	03 81 07 9e 05 12    	add    0x12059e07(%rcx),%eax
    16f0:	06                   	(bad)
    16f1:	bb 05 11 06 3c       	mov    $0x3c061105,%ebx
    16f6:	03 fe                	add    %esi,%edi
    16f8:	78 66                	js     1760 <balancer_ingress+0x1760>
        (connId[1] << 24) | (connId[2] << 16) | (connId[3] << 8) | (connId[4]);
    16fa:	05 22 06 03 ea       	add    $0xea030622,%eax
    16ff:	04 08                	add    $0x8,%al
    1701:	12 05 07 2f 06 3c    	adc    0x3c062f07(%rip),%al        # 3c06460e <_license+0x3c062229>
    1707:	05 1f 06 67 05       	add    $0x567061f,%eax
    170c:	16                   	(bad)
    170d:	06                   	(bad)
    170e:	4a 05 09 2e 03 94    	rex.WX add $0xffffffff94032e09,%rax
    1714:	7b 66                	jnp    177c <balancer_ingress+0x177c>
    1716:	05 23 06 03 8b       	add    $0x8b030623,%eax
    171b:	07                   	(bad)
    171c:	4a 06                	rex.WX (bad)
    171e:	03 f5                	add    %ebp,%esi
    result.server_id = (connId[1] << 16) | (connId[2] << 8) | (connId[3]);
    1720:	78 4a                	js     176c <balancer_ingress+0x176c>
    1722:	05 14 06 03 ef       	add    $0xef030614,%eax
    1727:	04 08                	add    $0x8,%al
    1729:	c8 05 37 03          	enter  $0x3705,$0x3
    172d:	9e                   	sahf
    172e:	02 2e                	add    (%rsi),%ch
    1730:	05 07 03 f3 7d       	add    $0x7df30307,%eax
    1735:	58                   	pop    %rax
    1736:	06                   	(bad)
    1737:	74 03                	je     173c <balancer_ingress+0x173c>
    1739:	80 7b 66 03          	cmpb   $0x3,0x66(%rbx)
      if (qpr.server_id > 0) {
    173d:	80 05 d6 05 08 06 08 	addb   $0x8,0x60805d6(%rip)        # 6081d1a <_license+0x607f935>
    1744:	13 05 07 06 3c 05    	adc    0x53c0607(%rip),%eax        # 53c1d51 <_license+0x53bf96c>
  if (cid_version == QUIC_CONNID_VERSION_V1) {
    174a:	14 06                	adc    $0x6,%al
    174c:	35 06 03 f8 7a       	xor    $0x7af80306,%eax
    1751:	4a 05 3c 06 03 84    	rex.WX add $0xffffffff8403063c,%rax
    1757:	07                   	(bad)
    1758:	66 05 19 03          	add    $0x319,%ax
    175c:	b3 79                	mov    $0x79,%bl
    175e:	9e                   	sahf
    175f:	05 1d 9f 05 09       	add    $0x9059f1d,%eax
    1764:	06                   	(bad)
    1765:	66 05 17 06          	add    $0x617,%ax
    1769:	03 bf 04 2e 05 1b    	add    0x1b052e04(%rdi),%edi
    if (pckt->flow.proto == IPPROTO_UDP) {
    176f:	08 21                	or     %ah,(%rcx)
      new_dst_lru.atime = cur_time;
    1771:	05 13 06 4a 05       	add    $0x54a0613,%eax
    new_dst_lru.pos = key;
    1776:	03 06                	add    (%rsi),%eax
    1778:	08 91 05 23 03 99    	or     %dl,-0x66fcdcfb(%rcx)
    177e:	02 4a 05             	add    0x5(%rdx),%cl
    1781:	00 06                	add    %al,(%rsi)
    1783:	03 ee                	add    %esi,%ebp
    1785:	78 74                	js     17fb <balancer_ingress+0x17fb>
    1787:	05 2c 06 03 94       	add    $0x9403062c,%eax
    178c:	07                   	(bad)
    178d:	4a 05 14 03 1b 58    	rex.WX add $0x581b0314,%rax
    bpf_map_update_elem(lru_map, &pckt->flow, &new_dst_lru, BPF_ANY);
    1793:	06                   	(bad)
      if (update_vip_lru_miss_stats(&vip, &pckt, vip_info, is_ipv6) >= 0) {
    1794:	03 d1                	add    %ecx,%edx
    1796:	78 58                	js     17f0 <balancer_ingress+0x17f0>
    1798:	05 10 06 03 8e       	add    $0x8e030610,%eax
    179d:	08 82 06 66 05 07    	or     %al,0x7056606(%rdx)
    17a3:	06                   	(bad)
    17a4:	03 9c 78 ac 05 08 08 	add    0x80805ac(%rax,%rdi,2),%ebx
  bool port_match = lru_miss_stat_vip->port == vip->port;
    17ab:	13 05 07 06 3c 03    	adc    0x33c0607(%rip),%eax        # 33c1db8 <_license+0x33bf9d3>
    17b1:	55                   	push   %rbp
    17b2:	66 05 0f 06          	add    $0x60f,%ax
  bool proto_match = lru_miss_stat_vip->proto = vip->proto;
    17b6:	03 2e                	add    (%rsi),%ebp
    17b8:	74 05                	je     17bf <balancer_ingress+0x17bf>
    17ba:	12 32                	adc    (%rdx),%dh
    17bc:	05 29 06 74 05       	add    $0x5740629,%eax
    17c1:	07                   	(bad)
    17c2:	74 05                	je     17c9 <balancer_ingress+0x17c9>
  bool vip_match = address_match && port_match && proto_match;
    17c4:	19 06                	sbb    %eax,(%rsi)
    17c6:	30 75 05             	xor    %dh,0x5(%rbp)
    17c9:	14 03                	adc    $0x3,%al
    17cb:	ba 04 66 06 03       	mov    $0x3066604,%edx
    __u32* lru_miss_stat = bpf_map_lookup_elem(&lru_miss_stats, &lru_stats_key);
    17d0:	91                   	xchg   %eax,%ecx
    17d1:	7b 2e                	jnp    1801 <balancer_ingress+0x1801>
    17d3:	05 37 06 03 8d       	add    $0x8d030637,%eax
    17d8:	07                   	(bad)
    17d9:	4a 05 07 03 f3 7d    	rex.WX add $0x7df30307,%rax
    17df:	58                   	pop    %rax
    17e0:	06                   	(bad)
    17e1:	ac                   	lods   %ds:(%rsi),%al
    17e2:	03 80 7b 66 03 80    	add    -0x7ffc9985(%rax),%eax
    17e8:	05 08 20 05 08       	add    $0x8052008,%eax
    17ed:	06                   	(bad)
    17ee:	08 13                	or     %dl,(%rbx)
    17f0:	05 07 06 3c 05       	add    $0x53c0607,%eax
    17f5:	14 06                	adc    $0x6,%al
    17f7:	35 06 03 f8 7a       	xor    $0x7af80306,%eax
    if (!lru_miss_stat) {
    17fc:	4a 05 19 06 03 37    	rex.WX add $0x37030619,%rax
    *lru_miss_stat += 1;
    1802:	2e 05 1d 9f 05 09    	cs add $0x9059f1d,%eax
    1808:	06                   	(bad)
    1809:	66 05 17 06          	add    $0x617,%ax
    180d:	03 bf 04 2e 05 1b    	add    0x1b052e04(%rdi),%edi
    1813:	08 21                	or     %ah,(%rcx)
    1815:	05 13 06 4a 05       	add    $0x54a0613,%eax
    181a:	03 06                	add    (%rsi),%eax
    181c:	08 91 06 03 87 7b    	or     %dl,0x7b870306(%rcx)
      data_stats->v2 += 1;
    1822:	4a 05 23 06 03 92    	rex.WX add $0xffffffff92030623,%rax
    if (long_header->conn_id_lens < QUIC_MIN_CONNID_LEN) {
    1828:	07                   	(bad)
    1829:	4a 05 00 06 03 ee    	rex.WX add $0xffffffffee030600,%rax
    182f:	78 4a                	js     187b <balancer_ingress+0x187b>
    1831:	05 2c 06 03 94       	add    $0x9403062c,%eax
    1836:	07                   	(bad)
    1837:	82                   	(bad)
    1838:	05 14 03 1b 58       	add    $0x581b0314,%eax
  if (!connId) {
    183d:	06                   	(bad)
    183e:	03 d1                	add    %ecx,%edx
    1840:	78 66                	js     18a8 <balancer_ingress+0x18a8>
    1842:	02                   	.byte 0x2
    1843:	05                   	.byte 0x5
    1844:	00 01                	add    %al,(%rcx)
    1846:	01                   	.byte 0x1

Disassembly of section .debug_line_str:

0000000000000000 <.debug_line_str>:
  void* data = (void*)(long)ctx->data;
   0:	2f                   	(bad)
   1:	72 6f                	jb     72 <balancer_ingress+0x72>
   3:	6f                   	outsl  %ds:(%rsi),(%dx)
   4:	74 2f                	je     35 <balancer_ingress+0x35>
   6:	57                   	push   %rdi
   7:	6f                   	outsl  %ds:(%rsi),(%dx)
   8:	72 6b                	jb     75 <balancer_ingress+0x75>
   a:	73 70                	jae    7c <balancer_ingress+0x7c>
   c:	61                   	(bad)
   d:	63 65 2f             	movsxd 0x2f(%rbp),%esp
  10:	6b 61 74 72          	imul   $0x72,0x74(%rcx),%esp
  14:	61                   	(bad)
  15:	6e                   	outsb  %ds:(%rsi),(%dx)
  16:	2f                   	(bad)
  17:	5f                   	pop    %rdi
  void* data_end = (void*)(long)ctx->data_end;
  18:	62 75                	(bad)
  1a:	69 6c 64 2f 64 65 70 	imul   $0x73706564,0x2f(%rsp,%riz,2),%ebp
  21:	73 
  if (data + nh_off > data_end) {
  22:	2f                   	(bad)
  23:	62                   	(bad)
  24:	70 66                	jo     8c <balancer_ingress+0x8c>
  26:	70 72                	jo     9a <balancer_ingress+0x9a>
  28:	6f                   	outsl  %ds:(%rsi),(%dx)
  29:	67 00 2e             	add    %ch,(%esi)
  2c:	2f                   	(bad)
  2d:	6b 61 74 72          	imul   $0x72,0x74(%rcx),%esp
  eth_proto = eth->h_proto;
  31:	61                   	(bad)
  32:	6e                   	outsb  %ds:(%rsi),(%dx)
  33:	2f                   	(bad)
  34:	6c                   	insb   (%dx),%es:(%rdi)
  if (eth_proto == BE_ETH_P_IP) {
  35:	69 62 2f 62 70 66 00 	imul   $0x667062,0x2f(%rdx),%esp
  3c:	2f                   	(bad)
  3d:	75 73                	jne    b2 <balancer_ingress+0xb2>
  3f:	72 2f                	jb     70 <balancer_ingress+0x70>
  41:	69 6e 63 6c 75 64 65 	imul   $0x6564756c,0x63(%rsi),%ebp
  48:	2f                   	(bad)
  49:	61                   	(bad)
  4a:	73 6d                	jae    b9 <balancer_ingress+0xb9>
  4c:	2d 67 65 6e 65       	sub    $0x656e6567,%eax
  struct packet_description pckt = {};
  51:	72 69                	jb     bc <balancer_ingress+0xbc>
  53:	63 00                	movsxd (%rax),%eax
  55:	2f                   	(bad)
  56:	75 73                	jne    cb <balancer_ingress+0xcb>
  58:	72 2f                	jb     89 <balancer_ingress+0x89>
  5a:	69 6e 63 6c 75 64 65 	imul   $0x6564756c,0x63(%rsi),%ebp
  61:	2f                   	(bad)
  62:	6c                   	insb   (%dx),%es:(%rdi)
  63:	69 6e 75 78 00 2e 2f 	imul   $0x2f2e0078,0x75(%rsi),%ebp
  6a:	2e 68 65 61 64 65    	cs push $0x65646165
  70:	72 5f                	jb     d1 <balancer_ingress+0xd1>
  72:	6f                   	outsl  %ds:(%rsi),(%dx)
  73:	76 65                	jbe    da <balancer_ingress+0xda>
  75:	72 72                	jb     e9 <balancer_ingress+0xe9>
  77:	69 64 65 2f 36 2f 6b 	imul   $0x616b2f36,0x2f(%rbp,%riz,2),%esp
  7e:	61 
  7f:	74 72                	je     f3 <balancer_ingress+0xf3>
  81:	61                   	(bad)
  82:	6e                   	outsb  %ds:(%rsi),(%dx)
  83:	2f                   	(bad)
  84:	6c                   	insb   (%dx),%es:(%rdi)
  85:	69 62 2f 6c 69 6e 75 	imul   $0x756e696c,0x2f(%rdx),%esp
  struct vip_definition vip = {};
  8c:	78 5f                	js     ed <balancer_ingress+0xed>
  8e:	69 6e 63 6c 75 64 65 	imul   $0x6564756c,0x63(%rsi),%ebp
  95:	73 00                	jae    97 <balancer_ingress+0x97>
  97:	2e 2f                	cs (bad)
  99:	6b 61 74 72          	imul   $0x72,0x74(%rcx),%esp
  9d:	61                   	(bad)
  9e:	6e                   	outsb  %ds:(%rsi),(%dx)
  9f:	2f                   	(bad)
    if (iph + 1 > data_end) {
  a0:	6c                   	insb   (%dx),%es:(%rdi)
  a1:	69 62 2f 6c 69 6e 75 	imul   $0x756e696c,0x2f(%rdx),%esp
  a8:	78 5f                	js     109 <balancer_ingress+0x109>
  aa:	69 6e 63 6c 75 64 65 	imul   $0x6564756c,0x63(%rsi),%ebp
    if (iph->ihl != 5) {
  b1:	73 00                	jae    b3 <balancer_ingress+0xb3>
  b3:	6b 61 74 72          	imul   $0x72,0x74(%rcx),%esp
  b7:	61                   	(bad)
  b8:	6e                   	outsb  %ds:(%rsi),(%dx)
    pckt->tos = iph->tos;
  b9:	2f                   	(bad)
  ba:	6c                   	insb   (%dx),%es:(%rdi)
  bb:	69 62 2f 62 70 66 2f 	imul   $0x2f667062,0x2f(%rdx),%esp
    *protocol = iph->protocol;
  c2:	62 61 6c 61 6e       	(bad)
    if (iph->frag_off & PCKT_FRAGMENTED) {
  c7:	63 65 72             	movsxd 0x72(%rbp),%esp
  ca:	2e 62                	cs (bad)
  cc:	70 66                	jo     134 <balancer_ingress+0x134>
  ce:	2e 63 00             	cs movsxd (%rax),%eax
  d1:	63 6f 6e             	movsxd 0x6e(%rdi),%ebp
  d4:	74 72                	je     148 <balancer_ingress+0x148>
  d6:	6f                   	outsl  %ds:(%rsi),(%dx)
  d7:	6c                   	insb   (%dx),%es:(%rdi)
  d8:	5f                   	pop    %rdi
  d9:	64 61                	fs (bad)
    if (*protocol == IPPROTO_ICMP) {
  db:	74 61                	je     13e <balancer_ingress+0x13e>
  dd:	5f                   	pop    %rdi
  de:	6d                   	insl   (%dx),%es:(%rdi)
  df:	61                   	(bad)
  e0:	70 73                	jo     155 <balancer_ingress+0x155>
  e2:	2e 68 00 69 6e 74    	cs push $0x746e6900
  if (icmp_hdr + 1 > data_end) {
  e8:	2d 6c 6c 36 34       	sub    $0x34366c6c,%eax
  ed:	2e 68 00 62 61 6c    	cs push $0x6c616200
  if (icmp_hdr->type == ICMP_ECHO) {
  f3:	61                   	(bad)
  f4:	6e                   	outsb  %ds:(%rsi),(%dx)
  f5:	63 65 72             	movsxd 0x72(%rbp),%esp
  f8:	5f                   	pop    %rdi
  f9:	73 74                	jae    16f <balancer_ingress+0x16f>
  fb:	72 75                	jb     172 <balancer_ingress+0x172>
  fd:	63 74 73 2e          	movsxd 0x2e(%rbx,%rsi,2),%esi
 101:	68 00 74 79 70       	push   $0x70797400
 106:	65 73 2e             	gs jae 137 <balancer_ingress+0x137>
 109:	68 00 62 61 6c       	push   $0x6c616200
  icmp_hdr->type = ICMP_ECHOREPLY;
 10e:	61                   	(bad)
 10f:	6e                   	outsb  %ds:(%rsi),(%dx)
 110:	63 65 72             	movsxd 0x72(%rbp),%esp
  icmp_hdr->checksum += 0x0008;
 113:	5f                   	pop    %rdi
 114:	6d                   	insl   (%dx),%es:(%rdi)
 115:	61                   	(bad)
 116:	70 73                	jo     18b <balancer_ingress+0x18b>
  iph->ttl = DEFAULT_TTL;
 118:	2e 68 00 62 70 66    	cs push $0x66706200
  tmp_addr = iph->daddr;
 11e:	5f                   	pop    %rdi
 11f:	68 65 6c 70 65       	push   $0x65706c65
  iph->saddr = tmp_addr;
 124:	72 73                	jb     199 <balancer_ingress+0x199>
 126:	2e 68 00 62 70 66    	cs push $0x66706200
 12c:	2e 68 00 69 6e 2e    	cs push $0x2e6e6900
 132:	68 00 69 70 76       	push   $0x76706900
 137:	36 2e 68 00 69 6e 36 	ss cs push $0x366e6900
 13e:	2e 68 00 69 70 2e    	cs push $0x2e706900
 144:	68 00 70 63 6b       	push   $0x6b637000
 149:	74 5f                	je     1aa <balancer_ingress+0x1aa>
 14b:	70 61                	jo     1ae <balancer_ingress+0x1ae>
 14d:	72 73                	jb     1c2 <balancer_ingress+0x1c2>
 14f:	69 6e 67 2e 68 00 6a 	imul   $0x6a00682e,0x67(%rsi),%ebp
 156:	68 61 73 68 2e       	push   $0x2e687361
 15b:	68 00 68 61 6e       	push   $0x6e616800
  struct packet_description pckt = {};
 160:	64 6c                	fs insb (%dx),%es:(%rdi)
 162:	65 5f                	gs pop %rdi
 164:	69 63 6d 70 2e 68 00 	imul   $0x682e70,0x6d(%rbx),%esp
 16b:	63 73 75             	movsxd 0x75(%rbx),%esi
 16e:	6d                   	insl   (%dx),%es:(%rdi)
 16f:	5f                   	pop    %rdi
 170:	68 65 6c 70 65       	push   $0x65706c65
 175:	72 73                	jb     1ea <balancer_ingress+0x1ea>
 177:	2e 68 00 62 61 6c    	cs push $0x6c616200
 17d:	61                   	(bad)
 17e:	6e                   	outsb  %ds:(%rsi),(%dx)
 17f:	63 65 72             	movsxd 0x72(%rbp),%esp
 182:	5f                   	pop    %rdi
 183:	68 65 6c 70 65       	push   $0x65706c65
 188:	72 73                	jb     1fd <balancer_ingress+0x1fd>
 18a:	2e 68 00 70 63 6b    	cs push $0x6b637000
 190:	74 5f                	je     1f1 <balancer_ingress+0x1f1>
 192:	65 6e                	outsb  %gs:(%rsi),(%dx)
 194:	63 61 70             	movsxd 0x70(%rcx),%esp
  struct vip_definition vip = {};
 197:	2e 68 00 65 6e 63    	cs push $0x636e6500
 19d:	61                   	(bad)
 19e:	70 5f                	jo     1ff <balancer_ingress+0x1ff>
 1a0:	68 65 6c 70 65       	push   $0x65706c65
 1a5:	72 73                	jb     21a <balancer_ingress+0x21a>
 1a7:	2e 68 00 69 63 6d    	cs push $0x6d636900
 1ad:	70 76                	jo     225 <balancer_ingress+0x225>
    if (ip6h + 1 > data_end) {
 1af:	36 2e 68 00 74 63 70 	ss cs push $0x70637400
 1b6:	2e 68 00 69 66 5f    	cs push $0x5f666900
    *protocol = ip6h->nexthdr;
 1bc:	65 74 68             	gs je  227 <balancer_ingress+0x227>
    pckt->flow.proto = *protocol;
 1bf:	65 72 2e             	gs jb  1f0 <balancer_ingress+0x1f0>
 1c2:	68 00 75 64 70       	push   $0x70647500
    pckt->tos = (ip6h->priority << 4) & 0xF0;
 1c7:	2e                   	cs
 1c8:	68                   	.byte 0x68
	...
